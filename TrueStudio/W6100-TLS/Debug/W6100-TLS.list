
W6100-TLS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013030  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005a24  08013218  08013218  00023218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018c3c  08018c3c  00028c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018c44  08018c44  00028c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018c48  08018c48  00028c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000148  20000000  08018c4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003730  20000148  08018d94  00030148  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20003878  08018d94  00033878  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004cf01  00000000  00000000  00030171  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009085  00000000  00000000  0007d072  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00028492  00000000  00000000  000860f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001b08  00000000  00000000  000ae590  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000029f8  00000000  00000000  000b0098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00011b3f  00000000  00000000  000b2a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00009727  00000000  00000000  000c45cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000cdcf6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005cd4  00000000  00000000  000cdd74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000148 	.word	0x20000148
 8000204:	00000000 	.word	0x00000000
 8000208:	08013200 	.word	0x08013200

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000014c 	.word	0x2000014c
 8000224:	08013200 	.word	0x08013200

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460e      	mov	r6, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9d08      	ldr	r5, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d150      	bne.n	800031a <__udivmoddi4+0xb2>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96c      	bls.n	8000358 <__udivmoddi4+0xf0>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f60e 	lsl.w	r6, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c06 	orr.w	ip, ip, r6
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	0c3a      	lsrs	r2, r7, #16
 80002a2:	fbbc f9f2 	udiv	r9, ip, r2
 80002a6:	b2bb      	uxth	r3, r7
 80002a8:	fb02 cc19 	mls	ip, r2, r9, ip
 80002ac:	fb09 fa03 	mul.w	sl, r9, r3
 80002b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80002b4:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80002b8:	45b2      	cmp	sl, r6
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x6a>
 80002bc:	19f6      	adds	r6, r6, r7
 80002be:	f109 31ff 	add.w	r1, r9, #4294967295
 80002c2:	f080 8125 	bcs.w	8000510 <__udivmoddi4+0x2a8>
 80002c6:	45b2      	cmp	sl, r6
 80002c8:	f240 8122 	bls.w	8000510 <__udivmoddi4+0x2a8>
 80002cc:	f1a9 0902 	sub.w	r9, r9, #2
 80002d0:	443e      	add	r6, r7
 80002d2:	eba6 060a 	sub.w	r6, r6, sl
 80002d6:	fbb6 f0f2 	udiv	r0, r6, r2
 80002da:	fb02 6610 	mls	r6, r2, r0, r6
 80002de:	fb00 f303 	mul.w	r3, r0, r3
 80002e2:	b2a4      	uxth	r4, r4
 80002e4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80002e8:	42a3      	cmp	r3, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 810b 	bcs.w	800050c <__udivmoddi4+0x2a4>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	f240 8108 	bls.w	800050c <__udivmoddi4+0x2a4>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	2100      	movs	r1, #0
 8000302:	1ae4      	subs	r4, r4, r3
 8000304:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000308:	2d00      	cmp	r5, #0
 800030a:	d062      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030c:	2300      	movs	r3, #0
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	602c      	str	r4, [r5, #0]
 8000314:	606b      	str	r3, [r5, #4]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0xc6>
 800031e:	2d00      	cmp	r5, #0
 8000320:	d055      	beq.n	80003ce <__udivmoddi4+0x166>
 8000322:	2100      	movs	r1, #0
 8000324:	e885 0041 	stmia.w	r5, {r0, r6}
 8000328:	4608      	mov	r0, r1
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f183 	clz	r1, r3
 8000332:	2900      	cmp	r1, #0
 8000334:	f040 808f 	bne.w	8000456 <__udivmoddi4+0x1ee>
 8000338:	42b3      	cmp	r3, r6
 800033a:	d302      	bcc.n	8000342 <__udivmoddi4+0xda>
 800033c:	4282      	cmp	r2, r0
 800033e:	f200 80fc 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000342:	1a84      	subs	r4, r0, r2
 8000344:	eb66 0603 	sbc.w	r6, r6, r3
 8000348:	2001      	movs	r0, #1
 800034a:	46b4      	mov	ip, r6
 800034c:	2d00      	cmp	r5, #0
 800034e:	d040      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000350:	e885 1010 	stmia.w	r5, {r4, ip}
 8000354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000358:	b912      	cbnz	r2, 8000360 <__udivmoddi4+0xf8>
 800035a:	2701      	movs	r7, #1
 800035c:	fbb7 f7f2 	udiv	r7, r7, r2
 8000360:	fab7 fe87 	clz	lr, r7
 8000364:	f1be 0f00 	cmp.w	lr, #0
 8000368:	d135      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036a:	2101      	movs	r1, #1
 800036c:	1bf6      	subs	r6, r6, r7
 800036e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000372:	fa1f f887 	uxth.w	r8, r7
 8000376:	fbb6 f2fc 	udiv	r2, r6, ip
 800037a:	fb0c 6612 	mls	r6, ip, r2, r6
 800037e:	fb08 f002 	mul.w	r0, r8, r2
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000388:	42b0      	cmp	r0, r6
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19f6      	adds	r6, r6, r7
 800038e:	f102 33ff 	add.w	r3, r2, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42b0      	cmp	r0, r6
 8000396:	f200 80d2 	bhi.w	800053e <__udivmoddi4+0x2d6>
 800039a:	461a      	mov	r2, r3
 800039c:	1a36      	subs	r6, r6, r0
 800039e:	fbb6 f0fc 	udiv	r0, r6, ip
 80003a2:	fb0c 6610 	mls	r6, ip, r0, r6
 80003a6:	fb08 f800 	mul.w	r8, r8, r0
 80003aa:	b2a3      	uxth	r3, r4
 80003ac:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80003b0:	45a0      	cmp	r8, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a0      	cmp	r8, r4
 80003be:	f200 80b9 	bhi.w	8000534 <__udivmoddi4+0x2cc>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 0408 	sub.w	r4, r4, r8
 80003c8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003cc:	e79c      	b.n	8000308 <__udivmoddi4+0xa0>
 80003ce:	4629      	mov	r1, r5
 80003d0:	4628      	mov	r0, r5
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003da:	f1ce 0320 	rsb	r3, lr, #32
 80003de:	fa26 f203 	lsr.w	r2, r6, r3
 80003e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80003e6:	fbb2 f1fc 	udiv	r1, r2, ip
 80003ea:	fa1f f887 	uxth.w	r8, r7
 80003ee:	fb0c 2211 	mls	r2, ip, r1, r2
 80003f2:	fa06 f60e 	lsl.w	r6, r6, lr
 80003f6:	fa20 f303 	lsr.w	r3, r0, r3
 80003fa:	fb01 f908 	mul.w	r9, r1, r8
 80003fe:	4333      	orrs	r3, r6
 8000400:	0c1e      	lsrs	r6, r3, #16
 8000402:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000406:	45b1      	cmp	r9, r6
 8000408:	fa00 f40e 	lsl.w	r4, r0, lr
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x1ba>
 800040e:	19f6      	adds	r6, r6, r7
 8000410:	f101 32ff 	add.w	r2, r1, #4294967295
 8000414:	f080 808c 	bcs.w	8000530 <__udivmoddi4+0x2c8>
 8000418:	45b1      	cmp	r9, r6
 800041a:	f240 8089 	bls.w	8000530 <__udivmoddi4+0x2c8>
 800041e:	3902      	subs	r1, #2
 8000420:	443e      	add	r6, r7
 8000422:	eba6 0609 	sub.w	r6, r6, r9
 8000426:	fbb6 f0fc 	udiv	r0, r6, ip
 800042a:	fb0c 6210 	mls	r2, ip, r0, r6
 800042e:	fb00 f908 	mul.w	r9, r0, r8
 8000432:	b29e      	uxth	r6, r3
 8000434:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000438:	45b1      	cmp	r9, r6
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x1e4>
 800043c:	19f6      	adds	r6, r6, r7
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d271      	bcs.n	8000528 <__udivmoddi4+0x2c0>
 8000444:	45b1      	cmp	r9, r6
 8000446:	d96f      	bls.n	8000528 <__udivmoddi4+0x2c0>
 8000448:	3802      	subs	r0, #2
 800044a:	443e      	add	r6, r7
 800044c:	eba6 0609 	sub.w	r6, r6, r9
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	ea48 0303 	orr.w	r3, r8, r3
 8000464:	fa26 f407 	lsr.w	r4, r6, r7
 8000468:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800046c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000470:	fa1f fc83 	uxth.w	ip, r3
 8000474:	fb0e 4419 	mls	r4, lr, r9, r4
 8000478:	408e      	lsls	r6, r1
 800047a:	fa20 f807 	lsr.w	r8, r0, r7
 800047e:	fb09 fa0c 	mul.w	sl, r9, ip
 8000482:	ea48 0806 	orr.w	r8, r8, r6
 8000486:	ea4f 4618 	mov.w	r6, r8, lsr #16
 800048a:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 800048e:	45a2      	cmp	sl, r4
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 f601 	lsl.w	r6, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18e4      	adds	r4, r4, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d244      	bcs.n	800052c <__udivmoddi4+0x2c4>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d942      	bls.n	800052c <__udivmoddi4+0x2c4>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441c      	add	r4, r3
 80004ac:	eba4 040a 	sub.w	r4, r4, sl
 80004b0:	fbb4 f0fe 	udiv	r0, r4, lr
 80004b4:	fb0e 4410 	mls	r4, lr, r0, r4
 80004b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80004bc:	fa1f f888 	uxth.w	r8, r8
 80004c0:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004c4:	45a4      	cmp	ip, r4
 80004c6:	d907      	bls.n	80004d8 <__udivmoddi4+0x270>
 80004c8:	18e4      	adds	r4, r4, r3
 80004ca:	f100 3eff 	add.w	lr, r0, #4294967295
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2bc>
 80004d0:	45a4      	cmp	ip, r4
 80004d2:	d927      	bls.n	8000524 <__udivmoddi4+0x2bc>
 80004d4:	3802      	subs	r0, #2
 80004d6:	441c      	add	r4, r3
 80004d8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004dc:	fba0 8902 	umull	r8, r9, r0, r2
 80004e0:	eba4 0c0c 	sub.w	ip, r4, ip
 80004e4:	45cc      	cmp	ip, r9
 80004e6:	46c2      	mov	sl, r8
 80004e8:	46ce      	mov	lr, r9
 80004ea:	d315      	bcc.n	8000518 <__udivmoddi4+0x2b0>
 80004ec:	d012      	beq.n	8000514 <__udivmoddi4+0x2ac>
 80004ee:	b155      	cbz	r5, 8000506 <__udivmoddi4+0x29e>
 80004f0:	ebb6 030a 	subs.w	r3, r6, sl
 80004f4:	eb6c 060e 	sbc.w	r6, ip, lr
 80004f8:	fa06 f707 	lsl.w	r7, r6, r7
 80004fc:	40cb      	lsrs	r3, r1
 80004fe:	431f      	orrs	r7, r3
 8000500:	40ce      	lsrs	r6, r1
 8000502:	602f      	str	r7, [r5, #0]
 8000504:	606e      	str	r6, [r5, #4]
 8000506:	2100      	movs	r1, #0
 8000508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050c:	4610      	mov	r0, r2
 800050e:	e6f7      	b.n	8000300 <__udivmoddi4+0x98>
 8000510:	4689      	mov	r9, r1
 8000512:	e6de      	b.n	80002d2 <__udivmoddi4+0x6a>
 8000514:	4546      	cmp	r6, r8
 8000516:	d2ea      	bcs.n	80004ee <__udivmoddi4+0x286>
 8000518:	ebb8 0a02 	subs.w	sl, r8, r2
 800051c:	eb69 0e03 	sbc.w	lr, r9, r3
 8000520:	3801      	subs	r0, #1
 8000522:	e7e4      	b.n	80004ee <__udivmoddi4+0x286>
 8000524:	4670      	mov	r0, lr
 8000526:	e7d7      	b.n	80004d8 <__udivmoddi4+0x270>
 8000528:	4618      	mov	r0, r3
 800052a:	e78f      	b.n	800044c <__udivmoddi4+0x1e4>
 800052c:	4681      	mov	r9, r0
 800052e:	e7bd      	b.n	80004ac <__udivmoddi4+0x244>
 8000530:	4611      	mov	r1, r2
 8000532:	e776      	b.n	8000422 <__udivmoddi4+0x1ba>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e744      	b.n	80003c4 <__udivmoddi4+0x15c>
 800053a:	4608      	mov	r0, r1
 800053c:	e706      	b.n	800034c <__udivmoddi4+0xe4>
 800053e:	3a02      	subs	r2, #2
 8000540:	443e      	add	r6, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_InitTick+0x3c>)
{
 800054c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054e:	7818      	ldrb	r0, [r3, #0]
 8000550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000554:	fbb3 f3f0 	udiv	r3, r3, r0
 8000558:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <HAL_InitTick+0x40>)
 800055a:	6810      	ldr	r0, [r2, #0]
 800055c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000560:	f000 f89e 	bl	80006a0 <HAL_SYSTICK_Config>
 8000564:	4604      	mov	r4, r0
 8000566:	b958      	cbnz	r0, 8000580 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000568:	2d0f      	cmp	r5, #15
 800056a:	d809      	bhi.n	8000580 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	4602      	mov	r2, r0
 800056e:	4629      	mov	r1, r5
 8000570:	f04f 30ff 	mov.w	r0, #4294967295
 8000574:	f000 f854 	bl	8000620 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_InitTick+0x44>)
 800057a:	4620      	mov	r0, r4
 800057c:	601d      	str	r5, [r3, #0]
 800057e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000580:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000582:	bd38      	pop	{r3, r4, r5, pc}
 8000584:	20000000 	.word	0x20000000
 8000588:	20000074 	.word	0x20000074
 800058c:	20000004 	.word	0x20000004

08000590 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x20>)
{
 8000592:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000594:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000596:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000598:	f043 0310 	orr.w	r3, r3, #16
 800059c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059e:	f000 f82d 	bl	80005fc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f7ff ffd0 	bl	8000548 <HAL_InitTick>
  HAL_MspInit();
 80005a8:	f001 faf0 	bl	8001b8c <HAL_MspInit>
}
 80005ac:	2000      	movs	r0, #0
 80005ae:	bd08      	pop	{r3, pc}
 80005b0:	40022000 	.word	0x40022000

080005b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005b4:	4a03      	ldr	r2, [pc, #12]	; (80005c4 <HAL_IncTick+0x10>)
 80005b6:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <HAL_IncTick+0x14>)
 80005b8:	6811      	ldr	r1, [r2, #0]
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	440b      	add	r3, r1
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	200027d4 	.word	0x200027d4
 80005c8:	20000000 	.word	0x20000000

080005cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005cc:	4b01      	ldr	r3, [pc, #4]	; (80005d4 <HAL_GetTick+0x8>)
 80005ce:	6818      	ldr	r0, [r3, #0]
}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	200027d4 	.word	0x200027d4

080005d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d8:	b538      	push	{r3, r4, r5, lr}
 80005da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005dc:	f7ff fff6 	bl	80005cc <HAL_GetTick>
 80005e0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005e4:	bf1e      	ittt	ne
 80005e6:	4b04      	ldrne	r3, [pc, #16]	; (80005f8 <HAL_Delay+0x20>)
 80005e8:	781b      	ldrbne	r3, [r3, #0]
 80005ea:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005ec:	f7ff ffee 	bl	80005cc <HAL_GetTick>
 80005f0:	1b40      	subs	r0, r0, r5
 80005f2:	4284      	cmp	r4, r0
 80005f4:	d8fa      	bhi.n	80005ec <HAL_Delay+0x14>
  {
  }
}
 80005f6:	bd38      	pop	{r3, r4, r5, pc}
 80005f8:	20000000 	.word	0x20000000

080005fc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005fc:	4a07      	ldr	r2, [pc, #28]	; (800061c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005fe:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000602:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800060a:	041b      	lsls	r3, r3, #16
 800060c:	0c1b      	lsrs	r3, r3, #16
 800060e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000616:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000618:	60d3      	str	r3, [r2, #12]
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000622:	b530      	push	{r4, r5, lr}
 8000624:	68dc      	ldr	r4, [r3, #12]
 8000626:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800062a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000630:	2b04      	cmp	r3, #4
 8000632:	bf28      	it	cs
 8000634:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000636:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000638:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063c:	bf98      	it	ls
 800063e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000640:	fa05 f303 	lsl.w	r3, r5, r3
 8000644:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000648:	bf88      	it	hi
 800064a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	4019      	ands	r1, r3
 800064e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000650:	fa05 f404 	lsl.w	r4, r5, r4
 8000654:	3c01      	subs	r4, #1
 8000656:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000658:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800065a:	ea42 0201 	orr.w	r2, r2, r1
 800065e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	bfaf      	iteee	ge
 8000664:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	4b06      	ldrlt	r3, [pc, #24]	; (8000684 <HAL_NVIC_SetPriority+0x64>)
 800066a:	f000 000f 	andlt.w	r0, r0, #15
 800066e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	bfa5      	ittet	ge
 8000672:	b2d2      	uxtbge	r2, r2
 8000674:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	e000ed00 	.word	0xe000ed00
 8000684:	e000ed14 	.word	0xe000ed14

08000688 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000688:	2301      	movs	r3, #1
 800068a:	0942      	lsrs	r2, r0, #5
 800068c:	f000 001f 	and.w	r0, r0, #31
 8000690:	fa03 f000 	lsl.w	r0, r3, r0
 8000694:	4b01      	ldr	r3, [pc, #4]	; (800069c <HAL_NVIC_EnableIRQ+0x14>)
 8000696:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100

080006a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a0:	3801      	subs	r0, #1
 80006a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006a6:	d20a      	bcs.n	80006be <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ae:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006b6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006be:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000e010 	.word	0xe000e010
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80006cc:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80006d0:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d003      	beq.n	80006de <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80006d6:	2304      	movs	r3, #4
 80006d8:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80006da:	2001      	movs	r0, #1
 80006dc:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80006de:	6803      	ldr	r3, [r0, #0]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	f022 020e 	bic.w	r2, r2, #14
 80006e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	f022 0201 	bic.w	r2, r2, #1
 80006ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80006f0:	4a29      	ldr	r2, [pc, #164]	; (8000798 <HAL_DMA_Abort_IT+0xcc>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d924      	bls.n	8000740 <HAL_DMA_Abort_IT+0x74>
 80006f6:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d019      	beq.n	8000732 <HAL_DMA_Abort_IT+0x66>
 80006fe:	3214      	adds	r2, #20
 8000700:	4293      	cmp	r3, r2
 8000702:	d018      	beq.n	8000736 <HAL_DMA_Abort_IT+0x6a>
 8000704:	3214      	adds	r2, #20
 8000706:	4293      	cmp	r3, r2
 8000708:	d017      	beq.n	800073a <HAL_DMA_Abort_IT+0x6e>
 800070a:	3214      	adds	r2, #20
 800070c:	4293      	cmp	r3, r2
 800070e:	bf0c      	ite	eq
 8000710:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8000714:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8000718:	4a20      	ldr	r2, [pc, #128]	; (800079c <HAL_DMA_Abort_IT+0xd0>)
 800071a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800071c:	2301      	movs	r3, #1

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800071e:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000720:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000724:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000726:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800072a:	b39b      	cbz	r3, 8000794 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800072c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800072e:	4620      	mov	r0, r4
 8000730:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000732:	2301      	movs	r3, #1
 8000734:	e7f0      	b.n	8000718 <HAL_DMA_Abort_IT+0x4c>
 8000736:	2310      	movs	r3, #16
 8000738:	e7ee      	b.n	8000718 <HAL_DMA_Abort_IT+0x4c>
 800073a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800073e:	e7eb      	b.n	8000718 <HAL_DMA_Abort_IT+0x4c>
 8000740:	4917      	ldr	r1, [pc, #92]	; (80007a0 <HAL_DMA_Abort_IT+0xd4>)
 8000742:	428b      	cmp	r3, r1
 8000744:	d016      	beq.n	8000774 <HAL_DMA_Abort_IT+0xa8>
 8000746:	3114      	adds	r1, #20
 8000748:	428b      	cmp	r3, r1
 800074a:	d015      	beq.n	8000778 <HAL_DMA_Abort_IT+0xac>
 800074c:	3114      	adds	r1, #20
 800074e:	428b      	cmp	r3, r1
 8000750:	d014      	beq.n	800077c <HAL_DMA_Abort_IT+0xb0>
 8000752:	3114      	adds	r1, #20
 8000754:	428b      	cmp	r3, r1
 8000756:	d014      	beq.n	8000782 <HAL_DMA_Abort_IT+0xb6>
 8000758:	3114      	adds	r1, #20
 800075a:	428b      	cmp	r3, r1
 800075c:	d014      	beq.n	8000788 <HAL_DMA_Abort_IT+0xbc>
 800075e:	3114      	adds	r1, #20
 8000760:	428b      	cmp	r3, r1
 8000762:	d014      	beq.n	800078e <HAL_DMA_Abort_IT+0xc2>
 8000764:	4293      	cmp	r3, r2
 8000766:	bf14      	ite	ne
 8000768:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 800076c:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8000770:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <HAL_DMA_Abort_IT+0xd8>)
 8000772:	e7d2      	b.n	800071a <HAL_DMA_Abort_IT+0x4e>
 8000774:	2301      	movs	r3, #1
 8000776:	e7fb      	b.n	8000770 <HAL_DMA_Abort_IT+0xa4>
 8000778:	2310      	movs	r3, #16
 800077a:	e7f9      	b.n	8000770 <HAL_DMA_Abort_IT+0xa4>
 800077c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000780:	e7f6      	b.n	8000770 <HAL_DMA_Abort_IT+0xa4>
 8000782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000786:	e7f3      	b.n	8000770 <HAL_DMA_Abort_IT+0xa4>
 8000788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078c:	e7f0      	b.n	8000770 <HAL_DMA_Abort_IT+0xa4>
 800078e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000792:	e7ed      	b.n	8000770 <HAL_DMA_Abort_IT+0xa4>
  HAL_StatusTypeDef status = HAL_OK;
 8000794:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000796:	bd10      	pop	{r4, pc}
 8000798:	40020080 	.word	0x40020080
 800079c:	40020400 	.word	0x40020400
 80007a0:	40020008 	.word	0x40020008
 80007a4:	40020000 	.word	0x40020000

080007a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80007ac:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80007ae:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007b0:	4f6c      	ldr	r7, [pc, #432]	; (8000964 <HAL_GPIO_Init+0x1bc>)
 80007b2:	4b6d      	ldr	r3, [pc, #436]	; (8000968 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007b4:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8000970 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 80007b8:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000974 <HAL_GPIO_Init+0x1cc>
    ioposition = (0x01U << position);
 80007bc:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007c0:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80007c2:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007c6:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80007ca:	45a0      	cmp	r8, r4
 80007cc:	f040 8085 	bne.w	80008da <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 80007d0:	684d      	ldr	r5, [r1, #4]
 80007d2:	2d12      	cmp	r5, #18
 80007d4:	f000 80b7 	beq.w	8000946 <HAL_GPIO_Init+0x19e>
 80007d8:	f200 808d 	bhi.w	80008f6 <HAL_GPIO_Init+0x14e>
 80007dc:	2d02      	cmp	r5, #2
 80007de:	f000 80af 	beq.w	8000940 <HAL_GPIO_Init+0x198>
 80007e2:	f200 8081 	bhi.w	80008e8 <HAL_GPIO_Init+0x140>
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	f000 8091 	beq.w	800090e <HAL_GPIO_Init+0x166>
 80007ec:	2d01      	cmp	r5, #1
 80007ee:	f000 80a5 	beq.w	800093c <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007f2:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007f6:	2cff      	cmp	r4, #255	; 0xff
 80007f8:	bf93      	iteet	ls
 80007fa:	4682      	movls	sl, r0
 80007fc:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000800:	3d08      	subhi	r5, #8
 8000802:	f8d0 b000 	ldrls.w	fp, [r0]
 8000806:	bf92      	itee	ls
 8000808:	00b5      	lslls	r5, r6, #2
 800080a:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800080e:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000810:	fa09 f805 	lsl.w	r8, r9, r5
 8000814:	ea2b 0808 	bic.w	r8, fp, r8
 8000818:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800081c:	bf88      	it	hi
 800081e:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000822:	ea48 0505 	orr.w	r5, r8, r5
 8000826:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800082a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800082e:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000832:	d052      	beq.n	80008da <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000834:	69bd      	ldr	r5, [r7, #24]
 8000836:	f026 0803 	bic.w	r8, r6, #3
 800083a:	f045 0501 	orr.w	r5, r5, #1
 800083e:	61bd      	str	r5, [r7, #24]
 8000840:	69bd      	ldr	r5, [r7, #24]
 8000842:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000846:	f005 0501 	and.w	r5, r5, #1
 800084a:	9501      	str	r5, [sp, #4]
 800084c:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000850:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000854:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000856:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800085a:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800085e:	fa09 f90b 	lsl.w	r9, r9, fp
 8000862:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000866:	4d41      	ldr	r5, [pc, #260]	; (800096c <HAL_GPIO_Init+0x1c4>)
 8000868:	42a8      	cmp	r0, r5
 800086a:	d071      	beq.n	8000950 <HAL_GPIO_Init+0x1a8>
 800086c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000870:	42a8      	cmp	r0, r5
 8000872:	d06f      	beq.n	8000954 <HAL_GPIO_Init+0x1ac>
 8000874:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000878:	42a8      	cmp	r0, r5
 800087a:	d06d      	beq.n	8000958 <HAL_GPIO_Init+0x1b0>
 800087c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000880:	42a8      	cmp	r0, r5
 8000882:	d06b      	beq.n	800095c <HAL_GPIO_Init+0x1b4>
 8000884:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000888:	42a8      	cmp	r0, r5
 800088a:	d069      	beq.n	8000960 <HAL_GPIO_Init+0x1b8>
 800088c:	4570      	cmp	r0, lr
 800088e:	bf0c      	ite	eq
 8000890:	2505      	moveq	r5, #5
 8000892:	2506      	movne	r5, #6
 8000894:	fa05 f50b 	lsl.w	r5, r5, fp
 8000898:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800089c:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008a0:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008a2:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80008a6:	bf14      	ite	ne
 80008a8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008aa:	43a5      	biceq	r5, r4
 80008ac:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008ae:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008b0:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80008b4:	bf14      	ite	ne
 80008b6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80008b8:	43a5      	biceq	r5, r4
 80008ba:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008bc:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008be:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80008c2:	bf14      	ite	ne
 80008c4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008c6:	43a5      	biceq	r5, r4
 80008c8:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80008ca:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008cc:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80008d0:	bf14      	ite	ne
 80008d2:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80008d4:	ea25 0404 	biceq.w	r4, r5, r4
 80008d8:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80008da:	3601      	adds	r6, #1
 80008dc:	2e10      	cmp	r6, #16
 80008de:	f47f af6d 	bne.w	80007bc <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 80008e2:	b003      	add	sp, #12
 80008e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80008e8:	2d03      	cmp	r5, #3
 80008ea:	d025      	beq.n	8000938 <HAL_GPIO_Init+0x190>
 80008ec:	2d11      	cmp	r5, #17
 80008ee:	d180      	bne.n	80007f2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008f0:	68ca      	ldr	r2, [r1, #12]
 80008f2:	3204      	adds	r2, #4
          break;
 80008f4:	e77d      	b.n	80007f2 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80008f6:	4565      	cmp	r5, ip
 80008f8:	d009      	beq.n	800090e <HAL_GPIO_Init+0x166>
 80008fa:	d812      	bhi.n	8000922 <HAL_GPIO_Init+0x17a>
 80008fc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000978 <HAL_GPIO_Init+0x1d0>
 8000900:	454d      	cmp	r5, r9
 8000902:	d004      	beq.n	800090e <HAL_GPIO_Init+0x166>
 8000904:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000908:	454d      	cmp	r5, r9
 800090a:	f47f af72 	bne.w	80007f2 <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800090e:	688a      	ldr	r2, [r1, #8]
 8000910:	b1e2      	cbz	r2, 800094c <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000912:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000914:	bf0c      	ite	eq
 8000916:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800091a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800091e:	2208      	movs	r2, #8
 8000920:	e767      	b.n	80007f2 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000922:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800097c <HAL_GPIO_Init+0x1d4>
 8000926:	454d      	cmp	r5, r9
 8000928:	d0f1      	beq.n	800090e <HAL_GPIO_Init+0x166>
 800092a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800092e:	454d      	cmp	r5, r9
 8000930:	d0ed      	beq.n	800090e <HAL_GPIO_Init+0x166>
 8000932:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000936:	e7e7      	b.n	8000908 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000938:	2200      	movs	r2, #0
 800093a:	e75a      	b.n	80007f2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800093c:	68ca      	ldr	r2, [r1, #12]
          break;
 800093e:	e758      	b.n	80007f2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000940:	68ca      	ldr	r2, [r1, #12]
 8000942:	3208      	adds	r2, #8
          break;
 8000944:	e755      	b.n	80007f2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000946:	68ca      	ldr	r2, [r1, #12]
 8000948:	320c      	adds	r2, #12
          break;
 800094a:	e752      	b.n	80007f2 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800094c:	2204      	movs	r2, #4
 800094e:	e750      	b.n	80007f2 <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000950:	2500      	movs	r5, #0
 8000952:	e79f      	b.n	8000894 <HAL_GPIO_Init+0xec>
 8000954:	2501      	movs	r5, #1
 8000956:	e79d      	b.n	8000894 <HAL_GPIO_Init+0xec>
 8000958:	2502      	movs	r5, #2
 800095a:	e79b      	b.n	8000894 <HAL_GPIO_Init+0xec>
 800095c:	2503      	movs	r5, #3
 800095e:	e799      	b.n	8000894 <HAL_GPIO_Init+0xec>
 8000960:	2504      	movs	r5, #4
 8000962:	e797      	b.n	8000894 <HAL_GPIO_Init+0xec>
 8000964:	40021000 	.word	0x40021000
 8000968:	40010400 	.word	0x40010400
 800096c:	40010800 	.word	0x40010800
 8000970:	40011c00 	.word	0x40011c00
 8000974:	10210000 	.word	0x10210000
 8000978:	10110000 	.word	0x10110000
 800097c:	10310000 	.word	0x10310000

08000980 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000980:	b10a      	cbz	r2, 8000986 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000982:	6101      	str	r1, [r0, #16]
 8000984:	4770      	bx	lr
 8000986:	0409      	lsls	r1, r1, #16
 8000988:	e7fb      	b.n	8000982 <HAL_GPIO_WritePin+0x2>
	...

0800098c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800098c:	6803      	ldr	r3, [r0, #0]
{
 800098e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000992:	07db      	lsls	r3, r3, #31
{
 8000994:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000996:	d410      	bmi.n	80009ba <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000998:	682b      	ldr	r3, [r5, #0]
 800099a:	079f      	lsls	r7, r3, #30
 800099c:	d45e      	bmi.n	8000a5c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800099e:	682b      	ldr	r3, [r5, #0]
 80009a0:	0719      	lsls	r1, r3, #28
 80009a2:	f100 8095 	bmi.w	8000ad0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009a6:	682b      	ldr	r3, [r5, #0]
 80009a8:	075a      	lsls	r2, r3, #29
 80009aa:	f100 80bf 	bmi.w	8000b2c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009ae:	69ea      	ldr	r2, [r5, #28]
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	f040 812d 	bne.w	8000c10 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80009b6:	2000      	movs	r0, #0
 80009b8:	e014      	b.n	80009e4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009ba:	4c90      	ldr	r4, [pc, #576]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 80009bc:	6863      	ldr	r3, [r4, #4]
 80009be:	f003 030c 	and.w	r3, r3, #12
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	d007      	beq.n	80009d6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009c6:	6863      	ldr	r3, [r4, #4]
 80009c8:	f003 030c 	and.w	r3, r3, #12
 80009cc:	2b08      	cmp	r3, #8
 80009ce:	d10c      	bne.n	80009ea <HAL_RCC_OscConfig+0x5e>
 80009d0:	6863      	ldr	r3, [r4, #4]
 80009d2:	03de      	lsls	r6, r3, #15
 80009d4:	d509      	bpl.n	80009ea <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009d6:	6823      	ldr	r3, [r4, #0]
 80009d8:	039c      	lsls	r4, r3, #14
 80009da:	d5dd      	bpl.n	8000998 <HAL_RCC_OscConfig+0xc>
 80009dc:	686b      	ldr	r3, [r5, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1da      	bne.n	8000998 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80009e2:	2001      	movs	r0, #1
}
 80009e4:	b002      	add	sp, #8
 80009e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009ea:	686b      	ldr	r3, [r5, #4]
 80009ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009f0:	d110      	bne.n	8000a14 <HAL_RCC_OscConfig+0x88>
 80009f2:	6823      	ldr	r3, [r4, #0]
 80009f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009fa:	f7ff fde7 	bl	80005cc <HAL_GetTick>
 80009fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a00:	6823      	ldr	r3, [r4, #0]
 8000a02:	0398      	lsls	r0, r3, #14
 8000a04:	d4c8      	bmi.n	8000998 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a06:	f7ff fde1 	bl	80005cc <HAL_GetTick>
 8000a0a:	1b80      	subs	r0, r0, r6
 8000a0c:	2864      	cmp	r0, #100	; 0x64
 8000a0e:	d9f7      	bls.n	8000a00 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000a10:	2003      	movs	r0, #3
 8000a12:	e7e7      	b.n	80009e4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a14:	b99b      	cbnz	r3, 8000a3e <HAL_RCC_OscConfig+0xb2>
 8000a16:	6823      	ldr	r3, [r4, #0]
 8000a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a1c:	6023      	str	r3, [r4, #0]
 8000a1e:	6823      	ldr	r3, [r4, #0]
 8000a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a24:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a26:	f7ff fdd1 	bl	80005cc <HAL_GetTick>
 8000a2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	0399      	lsls	r1, r3, #14
 8000a30:	d5b2      	bpl.n	8000998 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a32:	f7ff fdcb 	bl	80005cc <HAL_GetTick>
 8000a36:	1b80      	subs	r0, r0, r6
 8000a38:	2864      	cmp	r0, #100	; 0x64
 8000a3a:	d9f7      	bls.n	8000a2c <HAL_RCC_OscConfig+0xa0>
 8000a3c:	e7e8      	b.n	8000a10 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a42:	6823      	ldr	r3, [r4, #0]
 8000a44:	d103      	bne.n	8000a4e <HAL_RCC_OscConfig+0xc2>
 8000a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a4a:	6023      	str	r3, [r4, #0]
 8000a4c:	e7d1      	b.n	80009f2 <HAL_RCC_OscConfig+0x66>
 8000a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a52:	6023      	str	r3, [r4, #0]
 8000a54:	6823      	ldr	r3, [r4, #0]
 8000a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a5a:	e7cd      	b.n	80009f8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a5c:	4c67      	ldr	r4, [pc, #412]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000a5e:	6863      	ldr	r3, [r4, #4]
 8000a60:	f013 0f0c 	tst.w	r3, #12
 8000a64:	d007      	beq.n	8000a76 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a66:	6863      	ldr	r3, [r4, #4]
 8000a68:	f003 030c 	and.w	r3, r3, #12
 8000a6c:	2b08      	cmp	r3, #8
 8000a6e:	d110      	bne.n	8000a92 <HAL_RCC_OscConfig+0x106>
 8000a70:	6863      	ldr	r3, [r4, #4]
 8000a72:	03da      	lsls	r2, r3, #15
 8000a74:	d40d      	bmi.n	8000a92 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a76:	6823      	ldr	r3, [r4, #0]
 8000a78:	079b      	lsls	r3, r3, #30
 8000a7a:	d502      	bpl.n	8000a82 <HAL_RCC_OscConfig+0xf6>
 8000a7c:	692b      	ldr	r3, [r5, #16]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d1af      	bne.n	80009e2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a82:	6823      	ldr	r3, [r4, #0]
 8000a84:	696a      	ldr	r2, [r5, #20]
 8000a86:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a8a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a8e:	6023      	str	r3, [r4, #0]
 8000a90:	e785      	b.n	800099e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a92:	692a      	ldr	r2, [r5, #16]
 8000a94:	4b5a      	ldr	r3, [pc, #360]	; (8000c00 <HAL_RCC_OscConfig+0x274>)
 8000a96:	b16a      	cbz	r2, 8000ab4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000a98:	2201      	movs	r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a9c:	f7ff fd96 	bl	80005cc <HAL_GetTick>
 8000aa0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aa2:	6823      	ldr	r3, [r4, #0]
 8000aa4:	079f      	lsls	r7, r3, #30
 8000aa6:	d4ec      	bmi.n	8000a82 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aa8:	f7ff fd90 	bl	80005cc <HAL_GetTick>
 8000aac:	1b80      	subs	r0, r0, r6
 8000aae:	2802      	cmp	r0, #2
 8000ab0:	d9f7      	bls.n	8000aa2 <HAL_RCC_OscConfig+0x116>
 8000ab2:	e7ad      	b.n	8000a10 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000ab4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ab6:	f7ff fd89 	bl	80005cc <HAL_GetTick>
 8000aba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000abc:	6823      	ldr	r3, [r4, #0]
 8000abe:	0798      	lsls	r0, r3, #30
 8000ac0:	f57f af6d 	bpl.w	800099e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ac4:	f7ff fd82 	bl	80005cc <HAL_GetTick>
 8000ac8:	1b80      	subs	r0, r0, r6
 8000aca:	2802      	cmp	r0, #2
 8000acc:	d9f6      	bls.n	8000abc <HAL_RCC_OscConfig+0x130>
 8000ace:	e79f      	b.n	8000a10 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ad0:	69aa      	ldr	r2, [r5, #24]
 8000ad2:	4c4a      	ldr	r4, [pc, #296]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000ad4:	4b4b      	ldr	r3, [pc, #300]	; (8000c04 <HAL_RCC_OscConfig+0x278>)
 8000ad6:	b1da      	cbz	r2, 8000b10 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000ad8:	2201      	movs	r2, #1
 8000ada:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000adc:	f7ff fd76 	bl	80005cc <HAL_GetTick>
 8000ae0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ae4:	079b      	lsls	r3, r3, #30
 8000ae6:	d50d      	bpl.n	8000b04 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ae8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000aec:	4b46      	ldr	r3, [pc, #280]	; (8000c08 <HAL_RCC_OscConfig+0x27c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000af4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000af6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000af8:	9b01      	ldr	r3, [sp, #4]
 8000afa:	1e5a      	subs	r2, r3, #1
 8000afc:	9201      	str	r2, [sp, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d1f9      	bne.n	8000af6 <HAL_RCC_OscConfig+0x16a>
 8000b02:	e750      	b.n	80009a6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b04:	f7ff fd62 	bl	80005cc <HAL_GetTick>
 8000b08:	1b80      	subs	r0, r0, r6
 8000b0a:	2802      	cmp	r0, #2
 8000b0c:	d9e9      	bls.n	8000ae2 <HAL_RCC_OscConfig+0x156>
 8000b0e:	e77f      	b.n	8000a10 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000b10:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b12:	f7ff fd5b 	bl	80005cc <HAL_GetTick>
 8000b16:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b1a:	079f      	lsls	r7, r3, #30
 8000b1c:	f57f af43 	bpl.w	80009a6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b20:	f7ff fd54 	bl	80005cc <HAL_GetTick>
 8000b24:	1b80      	subs	r0, r0, r6
 8000b26:	2802      	cmp	r0, #2
 8000b28:	d9f6      	bls.n	8000b18 <HAL_RCC_OscConfig+0x18c>
 8000b2a:	e771      	b.n	8000a10 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b2c:	4c33      	ldr	r4, [pc, #204]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000b2e:	69e3      	ldr	r3, [r4, #28]
 8000b30:	00d8      	lsls	r0, r3, #3
 8000b32:	d424      	bmi.n	8000b7e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000b34:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	69e3      	ldr	r3, [r4, #28]
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	61e3      	str	r3, [r4, #28]
 8000b3e:	69e3      	ldr	r3, [r4, #28]
 8000b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b48:	4e30      	ldr	r6, [pc, #192]	; (8000c0c <HAL_RCC_OscConfig+0x280>)
 8000b4a:	6833      	ldr	r3, [r6, #0]
 8000b4c:	05d9      	lsls	r1, r3, #23
 8000b4e:	d518      	bpl.n	8000b82 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b50:	68eb      	ldr	r3, [r5, #12]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d126      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x218>
 8000b56:	6a23      	ldr	r3, [r4, #32]
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b5e:	f7ff fd35 	bl	80005cc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b62:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b66:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b68:	6a23      	ldr	r3, [r4, #32]
 8000b6a:	079b      	lsls	r3, r3, #30
 8000b6c:	d53f      	bpl.n	8000bee <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000b6e:	2f00      	cmp	r7, #0
 8000b70:	f43f af1d 	beq.w	80009ae <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b74:	69e3      	ldr	r3, [r4, #28]
 8000b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	61e3      	str	r3, [r4, #28]
 8000b7c:	e717      	b.n	80009ae <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000b7e:	2700      	movs	r7, #0
 8000b80:	e7e2      	b.n	8000b48 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b82:	6833      	ldr	r3, [r6, #0]
 8000b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b88:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000b8a:	f7ff fd1f 	bl	80005cc <HAL_GetTick>
 8000b8e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b90:	6833      	ldr	r3, [r6, #0]
 8000b92:	05da      	lsls	r2, r3, #23
 8000b94:	d4dc      	bmi.n	8000b50 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b96:	f7ff fd19 	bl	80005cc <HAL_GetTick>
 8000b9a:	eba0 0008 	sub.w	r0, r0, r8
 8000b9e:	2864      	cmp	r0, #100	; 0x64
 8000ba0:	d9f6      	bls.n	8000b90 <HAL_RCC_OscConfig+0x204>
 8000ba2:	e735      	b.n	8000a10 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ba4:	b9ab      	cbnz	r3, 8000bd2 <HAL_RCC_OscConfig+0x246>
 8000ba6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ba8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bac:	f023 0301 	bic.w	r3, r3, #1
 8000bb0:	6223      	str	r3, [r4, #32]
 8000bb2:	6a23      	ldr	r3, [r4, #32]
 8000bb4:	f023 0304 	bic.w	r3, r3, #4
 8000bb8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000bba:	f7ff fd07 	bl	80005cc <HAL_GetTick>
 8000bbe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bc0:	6a23      	ldr	r3, [r4, #32]
 8000bc2:	0798      	lsls	r0, r3, #30
 8000bc4:	d5d3      	bpl.n	8000b6e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bc6:	f7ff fd01 	bl	80005cc <HAL_GetTick>
 8000bca:	1b80      	subs	r0, r0, r6
 8000bcc:	4540      	cmp	r0, r8
 8000bce:	d9f7      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x234>
 8000bd0:	e71e      	b.n	8000a10 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bd2:	2b05      	cmp	r3, #5
 8000bd4:	6a23      	ldr	r3, [r4, #32]
 8000bd6:	d103      	bne.n	8000be0 <HAL_RCC_OscConfig+0x254>
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6223      	str	r3, [r4, #32]
 8000bde:	e7ba      	b.n	8000b56 <HAL_RCC_OscConfig+0x1ca>
 8000be0:	f023 0301 	bic.w	r3, r3, #1
 8000be4:	6223      	str	r3, [r4, #32]
 8000be6:	6a23      	ldr	r3, [r4, #32]
 8000be8:	f023 0304 	bic.w	r3, r3, #4
 8000bec:	e7b6      	b.n	8000b5c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bee:	f7ff fced 	bl	80005cc <HAL_GetTick>
 8000bf2:	eba0 0008 	sub.w	r0, r0, r8
 8000bf6:	42b0      	cmp	r0, r6
 8000bf8:	d9b6      	bls.n	8000b68 <HAL_RCC_OscConfig+0x1dc>
 8000bfa:	e709      	b.n	8000a10 <HAL_RCC_OscConfig+0x84>
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	42420000 	.word	0x42420000
 8000c04:	42420480 	.word	0x42420480
 8000c08:	20000074 	.word	0x20000074
 8000c0c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c10:	4c22      	ldr	r4, [pc, #136]	; (8000c9c <HAL_RCC_OscConfig+0x310>)
 8000c12:	6863      	ldr	r3, [r4, #4]
 8000c14:	f003 030c 	and.w	r3, r3, #12
 8000c18:	2b08      	cmp	r3, #8
 8000c1a:	f43f aee2 	beq.w	80009e2 <HAL_RCC_OscConfig+0x56>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	4e1f      	ldr	r6, [pc, #124]	; (8000ca0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c22:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000c24:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c26:	d12b      	bne.n	8000c80 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000c28:	f7ff fcd0 	bl	80005cc <HAL_GetTick>
 8000c2c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c2e:	6823      	ldr	r3, [r4, #0]
 8000c30:	0199      	lsls	r1, r3, #6
 8000c32:	d41f      	bmi.n	8000c74 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c34:	6a2b      	ldr	r3, [r5, #32]
 8000c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c3a:	d105      	bne.n	8000c48 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c3c:	6862      	ldr	r2, [r4, #4]
 8000c3e:	68a9      	ldr	r1, [r5, #8]
 8000c40:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000c44:	430a      	orrs	r2, r1
 8000c46:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c48:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000c4a:	6862      	ldr	r2, [r4, #4]
 8000c4c:	430b      	orrs	r3, r1
 8000c4e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000c52:	4313      	orrs	r3, r2
 8000c54:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c56:	2301      	movs	r3, #1
 8000c58:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000c5a:	f7ff fcb7 	bl	80005cc <HAL_GetTick>
 8000c5e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c60:	6823      	ldr	r3, [r4, #0]
 8000c62:	019a      	lsls	r2, r3, #6
 8000c64:	f53f aea7 	bmi.w	80009b6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c68:	f7ff fcb0 	bl	80005cc <HAL_GetTick>
 8000c6c:	1b40      	subs	r0, r0, r5
 8000c6e:	2802      	cmp	r0, #2
 8000c70:	d9f6      	bls.n	8000c60 <HAL_RCC_OscConfig+0x2d4>
 8000c72:	e6cd      	b.n	8000a10 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c74:	f7ff fcaa 	bl	80005cc <HAL_GetTick>
 8000c78:	1bc0      	subs	r0, r0, r7
 8000c7a:	2802      	cmp	r0, #2
 8000c7c:	d9d7      	bls.n	8000c2e <HAL_RCC_OscConfig+0x2a2>
 8000c7e:	e6c7      	b.n	8000a10 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000c80:	f7ff fca4 	bl	80005cc <HAL_GetTick>
 8000c84:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c86:	6823      	ldr	r3, [r4, #0]
 8000c88:	019b      	lsls	r3, r3, #6
 8000c8a:	f57f ae94 	bpl.w	80009b6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c8e:	f7ff fc9d 	bl	80005cc <HAL_GetTick>
 8000c92:	1b40      	subs	r0, r0, r5
 8000c94:	2802      	cmp	r0, #2
 8000c96:	d9f6      	bls.n	8000c86 <HAL_RCC_OscConfig+0x2fa>
 8000c98:	e6ba      	b.n	8000a10 <HAL_RCC_OscConfig+0x84>
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	42420060 	.word	0x42420060

08000ca4 <HAL_RCC_GetSysClockFreq>:
{
 8000ca4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <HAL_RCC_GetSysClockFreq+0x70>)
{
 8000ca8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000caa:	ac02      	add	r4, sp, #8
 8000cac:	f103 0510 	add.w	r5, r3, #16
 8000cb0:	4622      	mov	r2, r4
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	6859      	ldr	r1, [r3, #4]
 8000cb6:	3308      	adds	r3, #8
 8000cb8:	c203      	stmia	r2!, {r0, r1}
 8000cba:	42ab      	cmp	r3, r5
 8000cbc:	4614      	mov	r4, r2
 8000cbe:	d1f7      	bne.n	8000cb0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	f88d 3004 	strb.w	r3, [sp, #4]
 8000cc6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000cc8:	4913      	ldr	r1, [pc, #76]	; (8000d18 <HAL_RCC_GetSysClockFreq+0x74>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000cca:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000cce:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000cd0:	f003 020c 	and.w	r2, r3, #12
 8000cd4:	2a04      	cmp	r2, #4
 8000cd6:	d01b      	beq.n	8000d10 <HAL_RCC_GetSysClockFreq+0x6c>
 8000cd8:	2a08      	cmp	r2, #8
 8000cda:	d002      	beq.n	8000ce2 <HAL_RCC_GetSysClockFreq+0x3e>
      sysclockfreq = HSI_VALUE;
 8000cdc:	480f      	ldr	r0, [pc, #60]	; (8000d1c <HAL_RCC_GetSysClockFreq+0x78>)
}
 8000cde:	b007      	add	sp, #28
 8000ce0:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ce2:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000ce6:	a806      	add	r0, sp, #24
 8000ce8:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000cea:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000cec:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000cf0:	d50b      	bpl.n	8000d0a <HAL_RCC_GetSysClockFreq+0x66>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000cf2:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000cf4:	480a      	ldr	r0, [pc, #40]	; (8000d20 <HAL_RCC_GetSysClockFreq+0x7c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000cf6:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000cfa:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000cfc:	aa06      	add	r2, sp, #24
 8000cfe:	4413      	add	r3, r2
 8000d00:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000d04:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d08:	e7e9      	b.n	8000cde <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <HAL_RCC_GetSysClockFreq+0x80>)
 8000d0c:	4350      	muls	r0, r2
 8000d0e:	e7e6      	b.n	8000cde <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <HAL_RCC_GetSysClockFreq+0x7c>)
  return sysclockfreq;
 8000d12:	e7e4      	b.n	8000cde <HAL_RCC_GetSysClockFreq+0x3a>
 8000d14:	08013218 	.word	0x08013218
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	007a1200 	.word	0x007a1200
 8000d20:	00b71b00 	.word	0x00b71b00
 8000d24:	003d0900 	.word	0x003d0900

08000d28 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d28:	4a54      	ldr	r2, [pc, #336]	; (8000e7c <HAL_RCC_ClockConfig+0x154>)
{
 8000d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d2e:	6813      	ldr	r3, [r2, #0]
{
 8000d30:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	428b      	cmp	r3, r1
{
 8000d38:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d3a:	d32a      	bcc.n	8000d92 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d3c:	6829      	ldr	r1, [r5, #0]
 8000d3e:	078c      	lsls	r4, r1, #30
 8000d40:	d434      	bmi.n	8000dac <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d42:	07ca      	lsls	r2, r1, #31
 8000d44:	d447      	bmi.n	8000dd6 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d46:	4a4d      	ldr	r2, [pc, #308]	; (8000e7c <HAL_RCC_ClockConfig+0x154>)
 8000d48:	6813      	ldr	r3, [r2, #0]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	f0c0 8082 	bcc.w	8000e58 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d54:	682a      	ldr	r2, [r5, #0]
 8000d56:	4c4a      	ldr	r4, [pc, #296]	; (8000e80 <HAL_RCC_ClockConfig+0x158>)
 8000d58:	f012 0f04 	tst.w	r2, #4
 8000d5c:	f040 8087 	bne.w	8000e6e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d60:	0713      	lsls	r3, r2, #28
 8000d62:	d506      	bpl.n	8000d72 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d64:	6863      	ldr	r3, [r4, #4]
 8000d66:	692a      	ldr	r2, [r5, #16]
 8000d68:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d6c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d70:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d72:	f7ff ff97 	bl	8000ca4 <HAL_RCC_GetSysClockFreq>
 8000d76:	6863      	ldr	r3, [r4, #4]
 8000d78:	4a42      	ldr	r2, [pc, #264]	; (8000e84 <HAL_RCC_ClockConfig+0x15c>)
 8000d7a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d7e:	5cd3      	ldrb	r3, [r2, r3]
 8000d80:	40d8      	lsrs	r0, r3
 8000d82:	4b41      	ldr	r3, [pc, #260]	; (8000e88 <HAL_RCC_ClockConfig+0x160>)
 8000d84:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff fbde 	bl	8000548 <HAL_InitTick>
  return HAL_OK;
 8000d8c:	2000      	movs	r0, #0
}
 8000d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d92:	6813      	ldr	r3, [r2, #0]
 8000d94:	f023 0307 	bic.w	r3, r3, #7
 8000d98:	430b      	orrs	r3, r1
 8000d9a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d9c:	6813      	ldr	r3, [r2, #0]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d0ca      	beq.n	8000d3c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000da6:	2001      	movs	r0, #1
 8000da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dac:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dae:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000db2:	bf1e      	ittt	ne
 8000db4:	685a      	ldrne	r2, [r3, #4]
 8000db6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000dba:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dbc:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000dbe:	bf42      	ittt	mi
 8000dc0:	685a      	ldrmi	r2, [r3, #4]
 8000dc2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000dc6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	68a8      	ldr	r0, [r5, #8]
 8000dcc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000dd0:	4302      	orrs	r2, r0
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	e7b5      	b.n	8000d42 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dd6:	686a      	ldr	r2, [r5, #4]
 8000dd8:	4c29      	ldr	r4, [pc, #164]	; (8000e80 <HAL_RCC_ClockConfig+0x158>)
 8000dda:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ddc:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dde:	d11c      	bne.n	8000e1a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de4:	d0df      	beq.n	8000da6 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000de6:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000de8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dec:	f023 0303 	bic.w	r3, r3, #3
 8000df0:	4313      	orrs	r3, r2
 8000df2:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000df4:	f7ff fbea 	bl	80005cc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000df8:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000dfa:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d114      	bne.n	8000e2a <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e00:	6863      	ldr	r3, [r4, #4]
 8000e02:	f003 030c 	and.w	r3, r3, #12
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	d09d      	beq.n	8000d46 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e0a:	f7ff fbdf 	bl	80005cc <HAL_GetTick>
 8000e0e:	1bc0      	subs	r0, r0, r7
 8000e10:	4540      	cmp	r0, r8
 8000e12:	d9f5      	bls.n	8000e00 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000e14:	2003      	movs	r0, #3
 8000e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e1a:	2a02      	cmp	r2, #2
 8000e1c:	d102      	bne.n	8000e24 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e1e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e22:	e7df      	b.n	8000de4 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e24:	f013 0f02 	tst.w	r3, #2
 8000e28:	e7dc      	b.n	8000de4 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d10f      	bne.n	8000e4e <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e2e:	6863      	ldr	r3, [r4, #4]
 8000e30:	f003 030c 	and.w	r3, r3, #12
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d086      	beq.n	8000d46 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e38:	f7ff fbc8 	bl	80005cc <HAL_GetTick>
 8000e3c:	1bc0      	subs	r0, r0, r7
 8000e3e:	4540      	cmp	r0, r8
 8000e40:	d9f5      	bls.n	8000e2e <HAL_RCC_ClockConfig+0x106>
 8000e42:	e7e7      	b.n	8000e14 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e44:	f7ff fbc2 	bl	80005cc <HAL_GetTick>
 8000e48:	1bc0      	subs	r0, r0, r7
 8000e4a:	4540      	cmp	r0, r8
 8000e4c:	d8e2      	bhi.n	8000e14 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e4e:	6863      	ldr	r3, [r4, #4]
 8000e50:	f013 0f0c 	tst.w	r3, #12
 8000e54:	d1f6      	bne.n	8000e44 <HAL_RCC_ClockConfig+0x11c>
 8000e56:	e776      	b.n	8000d46 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e58:	6813      	ldr	r3, [r2, #0]
 8000e5a:	f023 0307 	bic.w	r3, r3, #7
 8000e5e:	4333      	orrs	r3, r6
 8000e60:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e62:	6813      	ldr	r3, [r2, #0]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	429e      	cmp	r6, r3
 8000e6a:	d19c      	bne.n	8000da6 <HAL_RCC_ClockConfig+0x7e>
 8000e6c:	e772      	b.n	8000d54 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e6e:	6863      	ldr	r3, [r4, #4]
 8000e70:	68e9      	ldr	r1, [r5, #12]
 8000e72:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e76:	430b      	orrs	r3, r1
 8000e78:	6063      	str	r3, [r4, #4]
 8000e7a:	e771      	b.n	8000d60 <HAL_RCC_ClockConfig+0x38>
 8000e7c:	40022000 	.word	0x40022000
 8000e80:	40021000 	.word	0x40021000
 8000e84:	080134a2 	.word	0x080134a2
 8000e88:	20000074 	.word	0x20000074

08000e8c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000e96:	5cd3      	ldrb	r3, [r2, r3]
 8000e98:	4a03      	ldr	r2, [pc, #12]	; (8000ea8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e9a:	6810      	ldr	r0, [r2, #0]
}    
 8000e9c:	40d8      	lsrs	r0, r3
 8000e9e:	4770      	bx	lr
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	080134b2 	.word	0x080134b2
 8000ea8:	20000074 	.word	0x20000074

08000eac <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000eb6:	5cd3      	ldrb	r3, [r2, r3]
 8000eb8:	4a03      	ldr	r2, [pc, #12]	; (8000ec8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000eba:	6810      	ldr	r0, [r2, #0]
} 
 8000ebc:	40d8      	lsrs	r0, r3
 8000ebe:	4770      	bx	lr
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	080134b2 	.word	0x080134b2
 8000ec8:	20000074 	.word	0x20000074

08000ecc <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ed0:	4604      	mov	r4, r0
 8000ed2:	4688      	mov	r8, r1
 8000ed4:	4617      	mov	r7, r2
 8000ed6:	461d      	mov	r5, r3
 8000ed8:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000eda:	6822      	ldr	r2, [r4, #0]
 8000edc:	6893      	ldr	r3, [r2, #8]
 8000ede:	ea38 0303 	bics.w	r3, r8, r3
 8000ee2:	bf0c      	ite	eq
 8000ee4:	2301      	moveq	r3, #1
 8000ee6:	2300      	movne	r3, #0
 8000ee8:	429f      	cmp	r7, r3
 8000eea:	d102      	bne.n	8000ef2 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000eec:	2000      	movs	r0, #0
}
 8000eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000ef2:	1c6b      	adds	r3, r5, #1
 8000ef4:	d0f2      	beq.n	8000edc <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000ef6:	bb55      	cbnz	r5, 8000f4e <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000f00:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000f02:	6862      	ldr	r2, [r4, #4]
 8000f04:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000f08:	d10a      	bne.n	8000f20 <SPI_WaitFlagStateUntilTimeout+0x54>
 8000f0a:	68a2      	ldr	r2, [r4, #8]
 8000f0c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000f10:	d002      	beq.n	8000f18 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8000f12:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000f16:	d103      	bne.n	8000f20 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f1e:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000f20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f22:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000f26:	d109      	bne.n	8000f3c <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f2e:	0412      	lsls	r2, r2, #16
 8000f30:	0c12      	lsrs	r2, r2, #16
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f3a:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000f42:	2300      	movs	r3, #0
 8000f44:	2003      	movs	r0, #3
 8000f46:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000f4e:	f7ff fb3d 	bl	80005cc <HAL_GetTick>
 8000f52:	1b80      	subs	r0, r0, r6
 8000f54:	4285      	cmp	r5, r0
 8000f56:	d8c0      	bhi.n	8000eda <SPI_WaitFlagStateUntilTimeout+0xe>
 8000f58:	e7ce      	b.n	8000ef8 <SPI_WaitFlagStateUntilTimeout+0x2c>

08000f5a <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000f5a:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	9200      	str	r2, [sp, #0]
 8000f60:	2180      	movs	r1, #128	; 0x80
 8000f62:	2200      	movs	r2, #0
{
 8000f64:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000f66:	f7ff ffb1 	bl	8000ecc <SPI_WaitFlagStateUntilTimeout>
 8000f6a:	b120      	cbz	r0, 8000f76 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8000f6c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000f6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f70:	f043 0320 	orr.w	r3, r3, #32
 8000f74:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8000f76:	b002      	add	sp, #8
 8000f78:	bd10      	pop	{r4, pc}

08000f7a <HAL_SPI_TransmitReceive>:
{
 8000f7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f7e:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8000f80:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000f84:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8000f86:	2b01      	cmp	r3, #1
{
 8000f88:	4604      	mov	r4, r0
 8000f8a:	460d      	mov	r5, r1
 8000f8c:	4616      	mov	r6, r2
 8000f8e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8000f90:	f000 80ee 	beq.w	8001170 <HAL_SPI_TransmitReceive+0x1f6>
 8000f94:	2301      	movs	r3, #1
 8000f96:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000f9a:	f7ff fb17 	bl	80005cc <HAL_GetTick>
  tmp  = hspi->State;
 8000f9e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000fa2:	4680      	mov	r8, r0
  tmp  = hspi->State;
 8000fa4:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000fa6:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 8000fa8:	6861      	ldr	r1, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000faa:	d00a      	beq.n	8000fc2 <HAL_SPI_TransmitReceive+0x48>
 8000fac:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000fb0:	f040 80dc 	bne.w	800116c <HAL_SPI_TransmitReceive+0x1f2>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000fb4:	68a2      	ldr	r2, [r4, #8]
 8000fb6:	2a00      	cmp	r2, #0
 8000fb8:	f040 80d8 	bne.w	800116c <HAL_SPI_TransmitReceive+0x1f2>
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	f040 80d5 	bne.w	800116c <HAL_SPI_TransmitReceive+0x1f2>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000fc2:	2d00      	cmp	r5, #0
 8000fc4:	d04e      	beq.n	8001064 <HAL_SPI_TransmitReceive+0xea>
 8000fc6:	2e00      	cmp	r6, #0
 8000fc8:	d04c      	beq.n	8001064 <HAL_SPI_TransmitReceive+0xea>
 8000fca:	f1b9 0f00 	cmp.w	r9, #0
 8000fce:	d049      	beq.n	8001064 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8000fd0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000fd4:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8000fd6:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000fd8:	bf04      	itt	eq
 8000fda:	2305      	moveq	r3, #5
 8000fdc:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000fe4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000fe6:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000fe8:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000fea:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000fee:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ff2:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000ff4:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ff8:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000ffa:	bf58      	it	pl
 8000ffc:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000ffe:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001000:	bf58      	it	pl
 8001002:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001006:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800100a:	bf58      	it	pl
 800100c:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800100e:	68e2      	ldr	r2, [r4, #12]
 8001010:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001014:	d15d      	bne.n	80010d2 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001016:	b119      	cbz	r1, 8001020 <HAL_SPI_TransmitReceive+0xa6>
 8001018:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800101a:	b292      	uxth	r2, r2
 800101c:	2a01      	cmp	r2, #1
 800101e:	d106      	bne.n	800102e <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001020:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001024:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001026:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001028:	3b01      	subs	r3, #1
 800102a:	b29b      	uxth	r3, r3
 800102c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800102e:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001032:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001034:	b29b      	uxth	r3, r3
 8001036:	b9bb      	cbnz	r3, 8001068 <HAL_SPI_TransmitReceive+0xee>
 8001038:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800103a:	b29b      	uxth	r3, r3
 800103c:	b9a3      	cbnz	r3, 8001068 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800103e:	f8cd 8000 	str.w	r8, [sp]
 8001042:	463b      	mov	r3, r7
 8001044:	2201      	movs	r2, #1
 8001046:	2102      	movs	r1, #2
 8001048:	4620      	mov	r0, r4
 800104a:	f7ff ff3f 	bl	8000ecc <SPI_WaitFlagStateUntilTimeout>
 800104e:	2800      	cmp	r0, #0
 8001050:	d135      	bne.n	80010be <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001052:	4642      	mov	r2, r8
 8001054:	4639      	mov	r1, r7
 8001056:	4620      	mov	r0, r4
 8001058:	f7ff ff7f 	bl	8000f5a <SPI_CheckFlag_BSY>
 800105c:	2800      	cmp	r0, #0
 800105e:	d07a      	beq.n	8001156 <HAL_SPI_TransmitReceive+0x1dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001060:	2320      	movs	r3, #32
 8001062:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001064:	2001      	movs	r0, #1
 8001066:	e02b      	b.n	80010c0 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001068:	f1b9 0f00 	cmp.w	r9, #0
 800106c:	d00f      	beq.n	800108e <HAL_SPI_TransmitReceive+0x114>
 800106e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001070:	b29b      	uxth	r3, r3
 8001072:	b163      	cbz	r3, 800108e <HAL_SPI_TransmitReceive+0x114>
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	0791      	lsls	r1, r2, #30
 800107a:	d508      	bpl.n	800108e <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 800107c:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001080:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001084:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001086:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001088:	3b01      	subs	r3, #1
 800108a:	b29b      	uxth	r3, r3
 800108c:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800108e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001090:	b29b      	uxth	r3, r3
 8001092:	b163      	cbz	r3, 80010ae <HAL_SPI_TransmitReceive+0x134>
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	07d2      	lsls	r2, r2, #31
 800109a:	d508      	bpl.n	80010ae <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 800109c:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80010a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010a8:	3b01      	subs	r3, #1
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80010ae:	1c78      	adds	r0, r7, #1
 80010b0:	d0bf      	beq.n	8001032 <HAL_SPI_TransmitReceive+0xb8>
 80010b2:	f7ff fa8b 	bl	80005cc <HAL_GetTick>
 80010b6:	eba0 0008 	sub.w	r0, r0, r8
 80010ba:	4287      	cmp	r7, r0
 80010bc:	d8b9      	bhi.n	8001032 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 80010be:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80010c0:	2301      	movs	r3, #1
 80010c2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80010c6:	2300      	movs	r3, #0
 80010c8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80010cc:	b005      	add	sp, #20
 80010ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80010d2:	b119      	cbz	r1, 80010dc <HAL_SPI_TransmitReceive+0x162>
 80010d4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80010d6:	b292      	uxth	r2, r2
 80010d8:	2a01      	cmp	r2, #1
 80010da:	d106      	bne.n	80010ea <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80010dc:	f815 2b01 	ldrb.w	r2, [r5], #1
 80010e0:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80010e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010e4:	3b01      	subs	r3, #1
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80010ea:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80010ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	b91b      	cbnz	r3, 80010fc <HAL_SPI_TransmitReceive+0x182>
 80010f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0a0      	beq.n	800103e <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80010fc:	f1b9 0f00 	cmp.w	r9, #0
 8001100:	d00f      	beq.n	8001122 <HAL_SPI_TransmitReceive+0x1a8>
 8001102:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001104:	b29b      	uxth	r3, r3
 8001106:	b163      	cbz	r3, 8001122 <HAL_SPI_TransmitReceive+0x1a8>
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	0791      	lsls	r1, r2, #30
 800110e:	d508      	bpl.n	8001122 <HAL_SPI_TransmitReceive+0x1a8>
        txallowed = 0U;
 8001110:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001114:	782a      	ldrb	r2, [r5, #0]
 8001116:	3501      	adds	r5, #1
 8001118:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800111a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800111c:	3b01      	subs	r3, #1
 800111e:	b29b      	uxth	r3, r3
 8001120:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001122:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001124:	b29b      	uxth	r3, r3
 8001126:	b16b      	cbz	r3, 8001144 <HAL_SPI_TransmitReceive+0x1ca>
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	07d2      	lsls	r2, r2, #31
 800112e:	d509      	bpl.n	8001144 <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8001130:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	3601      	adds	r6, #1
 8001138:	f806 3c01 	strb.w	r3, [r6, #-1]
        hspi->RxXferCount--;
 800113c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800113e:	3b01      	subs	r3, #1
 8001140:	b29b      	uxth	r3, r3
 8001142:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001144:	1c7b      	adds	r3, r7, #1
 8001146:	d0d2      	beq.n	80010ee <HAL_SPI_TransmitReceive+0x174>
 8001148:	f7ff fa40 	bl	80005cc <HAL_GetTick>
 800114c:	eba0 0008 	sub.w	r0, r0, r8
 8001150:	4287      	cmp	r7, r0
 8001152:	d8cc      	bhi.n	80010ee <HAL_SPI_TransmitReceive+0x174>
 8001154:	e7b3      	b.n	80010be <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001156:	68a3      	ldr	r3, [r4, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1b1      	bne.n	80010c0 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	9003      	str	r0, [sp, #12]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	9203      	str	r2, [sp, #12]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	9303      	str	r3, [sp, #12]
 8001168:	9b03      	ldr	r3, [sp, #12]
 800116a:	e7a9      	b.n	80010c0 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 800116c:	2002      	movs	r0, #2
 800116e:	e7a7      	b.n	80010c0 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8001170:	2002      	movs	r0, #2
 8001172:	e7ab      	b.n	80010cc <HAL_SPI_TransmitReceive+0x152>

08001174 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001174:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001176:	4604      	mov	r4, r0
 8001178:	2800      	cmp	r0, #0
 800117a:	d034      	beq.n	80011e6 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001180:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001184:	b90b      	cbnz	r3, 800118a <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001186:	f000 fd23 	bl	8001bd0 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 800118a:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800118c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800118e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001192:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001194:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800119a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800119c:	6863      	ldr	r3, [r4, #4]
 800119e:	69a2      	ldr	r2, [r4, #24]
 80011a0:	4303      	orrs	r3, r0
 80011a2:	68e0      	ldr	r0, [r4, #12]
 80011a4:	4303      	orrs	r3, r0
 80011a6:	6920      	ldr	r0, [r4, #16]
 80011a8:	4303      	orrs	r3, r0
 80011aa:	6960      	ldr	r0, [r4, #20]
 80011ac:	4303      	orrs	r3, r0
 80011ae:	69e0      	ldr	r0, [r4, #28]
 80011b0:	4303      	orrs	r3, r0
 80011b2:	6a20      	ldr	r0, [r4, #32]
 80011b4:	4303      	orrs	r3, r0
 80011b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80011b8:	4303      	orrs	r3, r0
 80011ba:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80011be:	4303      	orrs	r3, r0
 80011c0:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011c6:	f002 0204 	and.w	r2, r2, #4
 80011ca:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80011cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80011ce:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80011d0:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80011d2:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80011d4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80011d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011da:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 80011dc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80011de:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80011e0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 80011e4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011e6:	2001      	movs	r0, #1
}
 80011e8:	bd10      	pop	{r4, pc}

080011ea <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80011ea:	6803      	ldr	r3, [r0, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80011f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	f022 0201 	bic.w	r2, r2, #1
 80011fa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80011fc:	2320      	movs	r3, #32
 80011fe:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001202:	4770      	bx	lr

08001204 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001208:	6805      	ldr	r5, [r0, #0]
 800120a:	68c2      	ldr	r2, [r0, #12]
 800120c:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800120e:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001210:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001214:	4313      	orrs	r3, r2
 8001216:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001218:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 800121a:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800121c:	430b      	orrs	r3, r1
 800121e:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001220:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001224:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001228:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800122a:	4313      	orrs	r3, r2
 800122c:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800122e:	696b      	ldr	r3, [r5, #20]
 8001230:	6982      	ldr	r2, [r0, #24]
 8001232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001236:	4313      	orrs	r3, r2
 8001238:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800123a:	4b40      	ldr	r3, [pc, #256]	; (800133c <UART_SetConfig+0x138>)
{
 800123c:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800123e:	429d      	cmp	r5, r3
 8001240:	f04f 0419 	mov.w	r4, #25
 8001244:	d146      	bne.n	80012d4 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001246:	f7ff fe31 	bl	8000eac <HAL_RCC_GetPCLK2Freq>
 800124a:	fb04 f300 	mul.w	r3, r4, r0
 800124e:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001252:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001256:	00b6      	lsls	r6, r6, #2
 8001258:	fbb3 f3f6 	udiv	r3, r3, r6
 800125c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001260:	011e      	lsls	r6, r3, #4
 8001262:	f7ff fe23 	bl	8000eac <HAL_RCC_GetPCLK2Freq>
 8001266:	4360      	muls	r0, r4
 8001268:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	fbb0 f7f3 	udiv	r7, r0, r3
 8001272:	f7ff fe1b 	bl	8000eac <HAL_RCC_GetPCLK2Freq>
 8001276:	4360      	muls	r0, r4
 8001278:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001282:	fbb3 f3f8 	udiv	r3, r3, r8
 8001286:	fb08 7313 	mls	r3, r8, r3, r7
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	3332      	adds	r3, #50	; 0x32
 800128e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001292:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001296:	f7ff fe09 	bl	8000eac <HAL_RCC_GetPCLK2Freq>
 800129a:	4360      	muls	r0, r4
 800129c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	fbb0 faf2 	udiv	sl, r0, r2
 80012a6:	f7ff fe01 	bl	8000eac <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80012aa:	4360      	muls	r0, r4
 80012ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b6:	fbb3 f3f8 	udiv	r3, r3, r8
 80012ba:	fb08 a313 	mls	r3, r8, r3, sl
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	3332      	adds	r3, #50	; 0x32
 80012c2:	fbb3 f3f8 	udiv	r3, r3, r8
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	433b      	orrs	r3, r7
 80012cc:	4433      	add	r3, r6
 80012ce:	60ab      	str	r3, [r5, #8]
 80012d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d4:	f7ff fdda 	bl	8000e8c <HAL_RCC_GetPCLK1Freq>
 80012d8:	fb04 f300 	mul.w	r3, r4, r0
 80012dc:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80012e0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80012e4:	00b6      	lsls	r6, r6, #2
 80012e6:	fbb3 f3f6 	udiv	r3, r3, r6
 80012ea:	fbb3 f3f8 	udiv	r3, r3, r8
 80012ee:	011e      	lsls	r6, r3, #4
 80012f0:	f7ff fdcc 	bl	8000e8c <HAL_RCC_GetPCLK1Freq>
 80012f4:	4360      	muls	r0, r4
 80012f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	fbb0 f7f3 	udiv	r7, r0, r3
 8001300:	f7ff fdc4 	bl	8000e8c <HAL_RCC_GetPCLK1Freq>
 8001304:	4360      	muls	r0, r4
 8001306:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001310:	fbb3 f3f8 	udiv	r3, r3, r8
 8001314:	fb08 7313 	mls	r3, r8, r3, r7
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	3332      	adds	r3, #50	; 0x32
 800131c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001320:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001324:	f7ff fdb2 	bl	8000e8c <HAL_RCC_GetPCLK1Freq>
 8001328:	4360      	muls	r0, r4
 800132a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	fbb0 faf2 	udiv	sl, r0, r2
 8001334:	f7ff fdaa 	bl	8000e8c <HAL_RCC_GetPCLK1Freq>
 8001338:	e7b7      	b.n	80012aa <UART_SetConfig+0xa6>
 800133a:	bf00      	nop
 800133c:	40013800 	.word	0x40013800

08001340 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001342:	4604      	mov	r4, r0
 8001344:	460e      	mov	r6, r1
 8001346:	4617      	mov	r7, r2
 8001348:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800134a:	6821      	ldr	r1, [r4, #0]
 800134c:	680b      	ldr	r3, [r1, #0]
 800134e:	ea36 0303 	bics.w	r3, r6, r3
 8001352:	d101      	bne.n	8001358 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001354:	2000      	movs	r0, #0
}
 8001356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001358:	1c6b      	adds	r3, r5, #1
 800135a:	d0f7      	beq.n	800134c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800135c:	b995      	cbnz	r5, 8001384 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800135e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001360:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001368:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800136a:	695a      	ldr	r2, [r3, #20]
 800136c:	f022 0201 	bic.w	r2, r2, #1
 8001370:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001372:	2320      	movs	r3, #32
 8001374:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001378:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800137c:	2300      	movs	r3, #0
 800137e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001384:	f7ff f922 	bl	80005cc <HAL_GetTick>
 8001388:	1bc0      	subs	r0, r0, r7
 800138a:	4285      	cmp	r5, r0
 800138c:	d2dd      	bcs.n	800134a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800138e:	e7e6      	b.n	800135e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001390 <HAL_UART_Init>:
{
 8001390:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001392:	4604      	mov	r4, r0
 8001394:	b340      	cbz	r0, 80013e8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001396:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800139a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800139e:	b91b      	cbnz	r3, 80013a8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80013a0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80013a4:	f000 fc50 	bl	8001c48 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80013a8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80013aa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80013ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80013b0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80013b2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80013b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013b8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80013ba:	f7ff ff23 	bl	8001204 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013be:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013c0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80013c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013ca:	695a      	ldr	r2, [r3, #20]
 80013cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013d0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013d8:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80013da:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013dc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80013de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80013e2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80013e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80013e8:	2001      	movs	r0, #1
}
 80013ea:	bd10      	pop	{r4, pc}

080013ec <HAL_UART_Transmit>:
{
 80013ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013f0:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80013f2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80013f6:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80013f8:	2b20      	cmp	r3, #32
{
 80013fa:	460d      	mov	r5, r1
 80013fc:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80013fe:	d14e      	bne.n	800149e <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001400:	2900      	cmp	r1, #0
 8001402:	d049      	beq.n	8001498 <HAL_UART_Transmit+0xac>
 8001404:	2a00      	cmp	r2, #0
 8001406:	d047      	beq.n	8001498 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001408:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800140c:	2b01      	cmp	r3, #1
 800140e:	d046      	beq.n	800149e <HAL_UART_Transmit+0xb2>
 8001410:	2301      	movs	r3, #1
 8001412:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001416:	2300      	movs	r3, #0
 8001418:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800141a:	2321      	movs	r3, #33	; 0x21
 800141c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001420:	f7ff f8d4 	bl	80005cc <HAL_GetTick>
 8001424:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001426:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800142a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800142e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001430:	b29b      	uxth	r3, r3
 8001432:	b96b      	cbnz	r3, 8001450 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	4632      	mov	r2, r6
 8001438:	2140      	movs	r1, #64	; 0x40
 800143a:	4620      	mov	r0, r4
 800143c:	f7ff ff80 	bl	8001340 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001440:	b9a8      	cbnz	r0, 800146e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001442:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001444:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001448:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800144c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001450:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001452:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001454:	3b01      	subs	r3, #1
 8001456:	b29b      	uxth	r3, r3
 8001458:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800145a:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800145c:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800145e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001462:	4620      	mov	r0, r4
 8001464:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001466:	d10e      	bne.n	8001486 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001468:	f7ff ff6a 	bl	8001340 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800146c:	b110      	cbz	r0, 8001474 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800146e:	2003      	movs	r0, #3
 8001470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001474:	882b      	ldrh	r3, [r5, #0]
 8001476:	6822      	ldr	r2, [r4, #0]
 8001478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800147c:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800147e:	6923      	ldr	r3, [r4, #16]
 8001480:	b943      	cbnz	r3, 8001494 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8001482:	3502      	adds	r5, #2
 8001484:	e7d3      	b.n	800142e <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001486:	f7ff ff5b 	bl	8001340 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800148a:	2800      	cmp	r0, #0
 800148c:	d1ef      	bne.n	800146e <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	782a      	ldrb	r2, [r5, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	3501      	adds	r5, #1
 8001496:	e7ca      	b.n	800142e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001498:	2001      	movs	r0, #1
 800149a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800149e:	2002      	movs	r0, #2
}
 80014a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080014a4 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80014a4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80014a8:	2b20      	cmp	r3, #32
 80014aa:	d120      	bne.n	80014ee <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 80014ac:	b1e9      	cbz	r1, 80014ea <HAL_UART_Receive_IT+0x46>
 80014ae:	b1e2      	cbz	r2, 80014ea <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80014b0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d01a      	beq.n	80014ee <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80014b8:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80014ba:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014bc:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80014be:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014c0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80014c2:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80014c6:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80014c8:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80014ca:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80014cc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80014d0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80014d4:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80014d6:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 80014d8:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80014da:	f041 0101 	orr.w	r1, r1, #1
 80014de:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80014e0:	68d1      	ldr	r1, [r2, #12]
 80014e2:	f041 0120 	orr.w	r1, r1, #32
 80014e6:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80014e8:	4770      	bx	lr
      return HAL_ERROR;
 80014ea:	2001      	movs	r0, #1
 80014ec:	4770      	bx	lr
    return HAL_BUSY;
 80014ee:	2002      	movs	r0, #2
}
 80014f0:	4770      	bx	lr

080014f2 <HAL_UART_TxCpltCallback>:
 80014f2:	4770      	bx	lr

080014f4 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80014f4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80014f8:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80014fa:	2b22      	cmp	r3, #34	; 0x22
 80014fc:	d136      	bne.n	800156c <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014fe:	6883      	ldr	r3, [r0, #8]
 8001500:	6901      	ldr	r1, [r0, #16]
 8001502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001506:	6802      	ldr	r2, [r0, #0]
 8001508:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800150a:	d123      	bne.n	8001554 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800150c:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800150e:	b9e9      	cbnz	r1, 800154c <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001514:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001518:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 800151a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800151c:	3c01      	subs	r4, #1
 800151e:	b2a4      	uxth	r4, r4
 8001520:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001522:	b98c      	cbnz	r4, 8001548 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001524:	6803      	ldr	r3, [r0, #0]
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	f022 0220 	bic.w	r2, r2, #32
 800152c:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001534:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	f022 0201 	bic.w	r2, r2, #1
 800153c:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800153e:	2320      	movs	r3, #32
 8001540:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001544:	f000 f8d4 	bl	80016f0 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8001548:	2000      	movs	r0, #0
}
 800154a:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	f823 2b01 	strh.w	r2, [r3], #1
 8001552:	e7e1      	b.n	8001518 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001554:	b921      	cbnz	r1, 8001560 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001556:	1c59      	adds	r1, r3, #1
 8001558:	6852      	ldr	r2, [r2, #4]
 800155a:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800155c:	701a      	strb	r2, [r3, #0]
 800155e:	e7dc      	b.n	800151a <UART_Receive_IT+0x26>
 8001560:	6852      	ldr	r2, [r2, #4]
 8001562:	1c59      	adds	r1, r3, #1
 8001564:	6281      	str	r1, [r0, #40]	; 0x28
 8001566:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800156a:	e7f7      	b.n	800155c <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800156c:	2002      	movs	r0, #2
 800156e:	bd10      	pop	{r4, pc}

08001570 <HAL_UART_ErrorCallback>:
 8001570:	4770      	bx	lr
	...

08001574 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001574:	6803      	ldr	r3, [r0, #0]
{
 8001576:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001578:	681a      	ldr	r2, [r3, #0]
{
 800157a:	4604      	mov	r4, r0
  if(errorflags == RESET)
 800157c:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800157e:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001580:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001582:	d107      	bne.n	8001594 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001584:	0696      	lsls	r6, r2, #26
 8001586:	d55a      	bpl.n	800163e <HAL_UART_IRQHandler+0xca>
 8001588:	068d      	lsls	r5, r1, #26
 800158a:	d558      	bpl.n	800163e <HAL_UART_IRQHandler+0xca>
}
 800158c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001590:	f7ff bfb0 	b.w	80014f4 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001594:	f015 0501 	ands.w	r5, r5, #1
 8001598:	d102      	bne.n	80015a0 <HAL_UART_IRQHandler+0x2c>
 800159a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800159e:	d04e      	beq.n	800163e <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80015a0:	07d3      	lsls	r3, r2, #31
 80015a2:	d505      	bpl.n	80015b0 <HAL_UART_IRQHandler+0x3c>
 80015a4:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80015a6:	bf42      	ittt	mi
 80015a8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80015aa:	f043 0301 	orrmi.w	r3, r3, #1
 80015ae:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015b0:	0750      	lsls	r0, r2, #29
 80015b2:	d504      	bpl.n	80015be <HAL_UART_IRQHandler+0x4a>
 80015b4:	b11d      	cbz	r5, 80015be <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80015b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015be:	0793      	lsls	r3, r2, #30
 80015c0:	d504      	bpl.n	80015cc <HAL_UART_IRQHandler+0x58>
 80015c2:	b11d      	cbz	r5, 80015cc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80015c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015cc:	0716      	lsls	r6, r2, #28
 80015ce:	d504      	bpl.n	80015da <HAL_UART_IRQHandler+0x66>
 80015d0:	b11d      	cbz	r5, 80015da <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80015d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80015da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d066      	beq.n	80016ae <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80015e0:	0695      	lsls	r5, r2, #26
 80015e2:	d504      	bpl.n	80015ee <HAL_UART_IRQHandler+0x7a>
 80015e4:	0688      	lsls	r0, r1, #26
 80015e6:	d502      	bpl.n	80015ee <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80015e8:	4620      	mov	r0, r4
 80015ea:	f7ff ff83 	bl	80014f4 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80015ee:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 80015f0:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80015f2:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80015f4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80015f6:	0711      	lsls	r1, r2, #28
 80015f8:	d402      	bmi.n	8001600 <HAL_UART_IRQHandler+0x8c>
 80015fa:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80015fe:	d01a      	beq.n	8001636 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001600:	f7ff fdf3 	bl	80011ea <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	0652      	lsls	r2, r2, #25
 800160a:	d510      	bpl.n	800162e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800160c:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800160e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001614:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001616:	b150      	cbz	r0, 800162e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_UART_IRQHandler+0x13c>)
 800161a:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800161c:	f7ff f856 	bl	80006cc <HAL_DMA_Abort_IT>
 8001620:	2800      	cmp	r0, #0
 8001622:	d044      	beq.n	80016ae <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001624:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800162a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800162c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff ff9e 	bl	8001570 <HAL_UART_ErrorCallback>
 8001634:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001636:	f7ff ff9b 	bl	8001570 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800163a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800163c:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800163e:	0616      	lsls	r6, r2, #24
 8001640:	d527      	bpl.n	8001692 <HAL_UART_IRQHandler+0x11e>
 8001642:	060d      	lsls	r5, r1, #24
 8001644:	d525      	bpl.n	8001692 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001646:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800164a:	2a21      	cmp	r2, #33	; 0x21
 800164c:	d12f      	bne.n	80016ae <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800164e:	68a2      	ldr	r2, [r4, #8]
 8001650:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001654:	6a22      	ldr	r2, [r4, #32]
 8001656:	d117      	bne.n	8001688 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001658:	8811      	ldrh	r1, [r2, #0]
 800165a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800165e:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001660:	6921      	ldr	r1, [r4, #16]
 8001662:	b979      	cbnz	r1, 8001684 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001664:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001666:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8001668:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800166a:	3a01      	subs	r2, #1
 800166c:	b292      	uxth	r2, r2
 800166e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001670:	b9ea      	cbnz	r2, 80016ae <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001678:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001684:	3201      	adds	r2, #1
 8001686:	e7ee      	b.n	8001666 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001688:	1c51      	adds	r1, r2, #1
 800168a:	6221      	str	r1, [r4, #32]
 800168c:	7812      	ldrb	r2, [r2, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	e7ea      	b.n	8001668 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001692:	0650      	lsls	r0, r2, #25
 8001694:	d50b      	bpl.n	80016ae <HAL_UART_IRQHandler+0x13a>
 8001696:	064a      	lsls	r2, r1, #25
 8001698:	d509      	bpl.n	80016ae <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800169a:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800169c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800169e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016a2:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80016a4:	2320      	movs	r3, #32
 80016a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80016aa:	f7ff ff22 	bl	80014f2 <HAL_UART_TxCpltCallback>
 80016ae:	bd70      	pop	{r4, r5, r6, pc}
 80016b0:	080016b5 	.word	0x080016b5

080016b4 <UART_DMAAbortOnError>:
{
 80016b4:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80016b6:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80016ba:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80016bc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80016be:	f7ff ff57 	bl	8001570 <HAL_UART_ErrorCallback>
 80016c2:	bd08      	pop	{r3, pc}

080016c4 <BoardInitialze>:
#else
	spiInitailize();
#endif
#endif

	W6100Initialze();
 80016c4:	f000 bbc6 	b.w	8001e54 <W6100Initialze>

080016c8 <_write>:
		#endif /* __GNUC__*/
#endif			 

#ifdef True_STD
	int _write(int fd, char *str, int len)
	{
 80016c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ca:	460e      	mov	r6, r1
 80016cc:	4615      	mov	r5, r2
		for(int i=0; i<len; i++)
 80016ce:	2400      	movs	r4, #0
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)&str[i], 1, 0xFFFF);
 80016d0:	4f06      	ldr	r7, [pc, #24]	; (80016ec <_write+0x24>)
		for(int i=0; i<len; i++)
 80016d2:	42ac      	cmp	r4, r5
 80016d4:	db01      	blt.n	80016da <_write+0x12>
		}
		return len;
	}
 80016d6:	4628      	mov	r0, r5
 80016d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_UART_Transmit(&huart1, (uint8_t *)&str[i], 1, 0xFFFF);
 80016da:	1931      	adds	r1, r6, r4
 80016dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e0:	2201      	movs	r2, #1
 80016e2:	4638      	mov	r0, r7
 80016e4:	f7ff fe82 	bl	80013ec <HAL_UART_Transmit>
		for(int i=0; i<len; i++)
 80016e8:	3401      	adds	r4, #1
 80016ea:	e7f2      	b.n	80016d2 <_write+0xa>
 80016ec:	20003034 	.word	0x20003034

080016f0 <HAL_UART_RxCpltCallback>:
#endif

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016f0:	b570      	push	{r4, r5, r6, lr}
    */

     /*
       loop back received data
     */
     HAL_UART_Receive_IT(&huart1, rxData, 1);
 80016f2:	4d08      	ldr	r5, [pc, #32]	; (8001714 <HAL_UART_RxCpltCallback+0x24>)
 80016f4:	4c08      	ldr	r4, [pc, #32]	; (8001718 <HAL_UART_RxCpltCallback+0x28>)
 80016f6:	4629      	mov	r1, r5
 80016f8:	2201      	movs	r2, #1
 80016fa:	4620      	mov	r0, r4
 80016fc:	f7ff fed2 	bl	80014a4 <HAL_UART_Receive_IT>
     HAL_UART_Transmit(&huart1, rxData, 1, 1000);
 8001700:	4629      	mov	r1, r5
 8001702:	4620      	mov	r0, r4
}
 8001704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     HAL_UART_Transmit(&huart1, rxData, 1, 1000);
 8001708:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170c:	2201      	movs	r2, #1
 800170e:	f7ff be6d 	b.w	80013ec <HAL_UART_Transmit>
 8001712:	bf00      	nop
 8001714:	200027d8 	.word	0x200027d8
 8001718:	20003034 	.word	0x20003034

0800171c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800171c:	b510      	push	{r4, lr}
 800171e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001720:	2228      	movs	r2, #40	; 0x28
 8001722:	2100      	movs	r1, #0
 8001724:	a806      	add	r0, sp, #24
 8001726:	f010 fb6f 	bl	8011e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172a:	2100      	movs	r1, #0
 800172c:	2214      	movs	r2, #20
 800172e:	a801      	add	r0, sp, #4
 8001730:	f010 fb6a 	bl	8011e08 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001738:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800173c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001740:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001744:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001746:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001748:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800174a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174c:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174e:	f7ff f91d 	bl	800098c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001754:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001758:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800175c:	4621      	mov	r1, r4
 800175e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001760:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001762:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001764:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001766:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001768:	f7ff fade 	bl	8000d28 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800176c:	b010      	add	sp, #64	; 0x40
 800176e:	bd10      	pop	{r4, pc}

08001770 <print_network_information>:
	
		return ch;
 }
#endif 
void print_network_information(void)
{
 8001770:	b510      	push	{r4, lr}
	wizchip_getnetinfo(&gWIZNETINFO);
 8001772:	4c74      	ldr	r4, [pc, #464]	; (8001944 <print_network_information+0x1d4>)
{
 8001774:	b08e      	sub	sp, #56	; 0x38
	wizchip_getnetinfo(&gWIZNETINFO);
 8001776:	4620      	mov	r0, r4
 8001778:	f001 fac0 	bl	8002cfc <wizchip_getnetinfo>
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 800177c:	7960      	ldrb	r0, [r4, #5]
 800177e:	78a3      	ldrb	r3, [r4, #2]
 8001780:	9002      	str	r0, [sp, #8]
 8001782:	7920      	ldrb	r0, [r4, #4]
 8001784:	7862      	ldrb	r2, [r4, #1]
 8001786:	9001      	str	r0, [sp, #4]
 8001788:	78e0      	ldrb	r0, [r4, #3]
 800178a:	7821      	ldrb	r1, [r4, #0]
 800178c:	9000      	str	r0, [sp, #0]
 800178e:	486e      	ldr	r0, [pc, #440]	; (8001948 <print_network_information+0x1d8>)
 8001790:	f010 fbfa 	bl	8011f88 <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8001794:	7a60      	ldrb	r0, [r4, #9]
 8001796:	7a23      	ldrb	r3, [r4, #8]
 8001798:	79e2      	ldrb	r2, [r4, #7]
 800179a:	79a1      	ldrb	r1, [r4, #6]
 800179c:	9000      	str	r0, [sp, #0]
 800179e:	486b      	ldr	r0, [pc, #428]	; (800194c <print_network_information+0x1dc>)
 80017a0:	f010 fbf2 	bl	8011f88 <iprintf>
	printf("SN Mask	   : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 80017a4:	7b60      	ldrb	r0, [r4, #13]
 80017a6:	7b23      	ldrb	r3, [r4, #12]
 80017a8:	7ae2      	ldrb	r2, [r4, #11]
 80017aa:	7aa1      	ldrb	r1, [r4, #10]
 80017ac:	9000      	str	r0, [sp, #0]
 80017ae:	4868      	ldr	r0, [pc, #416]	; (8001950 <print_network_information+0x1e0>)
 80017b0:	f010 fbea 	bl	8011f88 <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 80017b4:	7c60      	ldrb	r0, [r4, #17]
 80017b6:	7c23      	ldrb	r3, [r4, #16]
 80017b8:	7be2      	ldrb	r2, [r4, #15]
 80017ba:	7ba1      	ldrb	r1, [r4, #14]
 80017bc:	9000      	str	r0, [sp, #0]
 80017be:	4865      	ldr	r0, [pc, #404]	; (8001954 <print_network_information+0x1e4>)
 80017c0:	f010 fbe2 	bl	8011f88 <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 80017c4:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
 80017c8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80017cc:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 80017d0:	f894 1052 	ldrb.w	r1, [r4, #82]	; 0x52
 80017d4:	9000      	str	r0, [sp, #0]
 80017d6:	4860      	ldr	r0, [pc, #384]	; (8001958 <print_network_information+0x1e8>)
 80017d8:	f010 fbd6 	bl	8011f88 <iprintf>
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 80017dc:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 80017e0:	7d23      	ldrb	r3, [r4, #20]
 80017e2:	900c      	str	r0, [sp, #48]	; 0x30
 80017e4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80017e8:	7ce2      	ldrb	r2, [r4, #19]
 80017ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80017ec:	7fe0      	ldrb	r0, [r4, #31]
 80017ee:	7ca1      	ldrb	r1, [r4, #18]
 80017f0:	900a      	str	r0, [sp, #40]	; 0x28
 80017f2:	7fa0      	ldrb	r0, [r4, #30]
 80017f4:	9009      	str	r0, [sp, #36]	; 0x24
 80017f6:	7f60      	ldrb	r0, [r4, #29]
 80017f8:	9008      	str	r0, [sp, #32]
 80017fa:	7f20      	ldrb	r0, [r4, #28]
 80017fc:	9007      	str	r0, [sp, #28]
 80017fe:	7ee0      	ldrb	r0, [r4, #27]
 8001800:	9006      	str	r0, [sp, #24]
 8001802:	7ea0      	ldrb	r0, [r4, #26]
 8001804:	9005      	str	r0, [sp, #20]
 8001806:	7e60      	ldrb	r0, [r4, #25]
 8001808:	9004      	str	r0, [sp, #16]
 800180a:	7e20      	ldrb	r0, [r4, #24]
 800180c:	9003      	str	r0, [sp, #12]
 800180e:	7de0      	ldrb	r0, [r4, #23]
 8001810:	9002      	str	r0, [sp, #8]
 8001812:	7da0      	ldrb	r0, [r4, #22]
 8001814:	9001      	str	r0, [sp, #4]
 8001816:	7d60      	ldrb	r0, [r4, #21]
 8001818:	9000      	str	r0, [sp, #0]
 800181a:	4850      	ldr	r0, [pc, #320]	; (800195c <print_network_information+0x1ec>)
 800181c:	f010 fbb4 	bl	8011f88 <iprintf>
									gWIZNETINFO.lla[4],gWIZNETINFO.lla[5],gWIZNETINFO.lla[6],gWIZNETINFO.lla[7],\
									gWIZNETINFO.lla[8],gWIZNETINFO.lla[9],gWIZNETINFO.lla[10],gWIZNETINFO.lla[11],\
									gWIZNETINFO.lla[12],gWIZNETINFO.lla[13],gWIZNETINFO.lla[14],gWIZNETINFO.lla[15]);
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 8001820:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 8001824:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001828:	900c      	str	r0, [sp, #48]	; 0x30
 800182a:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 800182e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8001832:	900b      	str	r0, [sp, #44]	; 0x2c
 8001834:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8001838:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 800183c:	900a      	str	r0, [sp, #40]	; 0x28
 800183e:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8001842:	9009      	str	r0, [sp, #36]	; 0x24
 8001844:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8001848:	9008      	str	r0, [sp, #32]
 800184a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800184e:	9007      	str	r0, [sp, #28]
 8001850:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 8001854:	9006      	str	r0, [sp, #24]
 8001856:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 800185a:	9005      	str	r0, [sp, #20]
 800185c:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 8001860:	9004      	str	r0, [sp, #16]
 8001862:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8001866:	9003      	str	r0, [sp, #12]
 8001868:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
 800186c:	9002      	str	r0, [sp, #8]
 800186e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 8001872:	9001      	str	r0, [sp, #4]
 8001874:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8001878:	9000      	str	r0, [sp, #0]
 800187a:	4839      	ldr	r0, [pc, #228]	; (8001960 <print_network_information+0x1f0>)
 800187c:	f010 fb84 	bl	8011f88 <iprintf>
									gWIZNETINFO.gua[4],gWIZNETINFO.gua[5],gWIZNETINFO.gua[6],gWIZNETINFO.gua[7],\
									gWIZNETINFO.gua[8],gWIZNETINFO.gua[9],gWIZNETINFO.gua[10],gWIZNETINFO.gua[11],\
									gWIZNETINFO.gua[12],gWIZNETINFO.gua[13],gWIZNETINFO.gua[14],gWIZNETINFO.gua[15]);
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8001880:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8001884:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001888:	900c      	str	r0, [sp, #48]	; 0x30
 800188a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800188e:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 8001892:	900b      	str	r0, [sp, #44]	; 0x2c
 8001894:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
 8001898:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 800189c:	900a      	str	r0, [sp, #40]	; 0x28
 800189e:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
 80018a2:	9009      	str	r0, [sp, #36]	; 0x24
 80018a4:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80018a8:	9008      	str	r0, [sp, #32]
 80018aa:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80018ae:	9007      	str	r0, [sp, #28]
 80018b0:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
 80018b4:	9006      	str	r0, [sp, #24]
 80018b6:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
 80018ba:	9005      	str	r0, [sp, #20]
 80018bc:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 80018c0:	9004      	str	r0, [sp, #16]
 80018c2:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 80018c6:	9003      	str	r0, [sp, #12]
 80018c8:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
 80018cc:	9002      	str	r0, [sp, #8]
 80018ce:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 80018d2:	9001      	str	r0, [sp, #4]
 80018d4:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80018d8:	9000      	str	r0, [sp, #0]
 80018da:	4822      	ldr	r0, [pc, #136]	; (8001964 <print_network_information+0x1f4>)
 80018dc:	f010 fb54 	bl	8011f88 <iprintf>
									gWIZNETINFO.sn6[4],gWIZNETINFO.sn6[5],gWIZNETINFO.sn6[6],gWIZNETINFO.sn6[7],\
									gWIZNETINFO.sn6[8],gWIZNETINFO.sn6[9],gWIZNETINFO.sn6[10],gWIZNETINFO.sn6[11],\
									gWIZNETINFO.sn6[12],gWIZNETINFO.sn6[13],gWIZNETINFO.sn6[14],gWIZNETINFO.sn6[15]);
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 80018e0:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80018e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80018e8:	900c      	str	r0, [sp, #48]	; 0x30
 80018ea:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 80018ee:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80018f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80018f4:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
 80018f8:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 80018fc:	900a      	str	r0, [sp, #40]	; 0x28
 80018fe:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 8001902:	9009      	str	r0, [sp, #36]	; 0x24
 8001904:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 8001908:	9008      	str	r0, [sp, #32]
 800190a:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 800190e:	9007      	str	r0, [sp, #28]
 8001910:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
 8001914:	9006      	str	r0, [sp, #24]
 8001916:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
 800191a:	9005      	str	r0, [sp, #20]
 800191c:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 8001920:	9004      	str	r0, [sp, #16]
 8001922:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8001926:	9003      	str	r0, [sp, #12]
 8001928:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
 800192c:	9002      	str	r0, [sp, #8]
 800192e:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 8001932:	9001      	str	r0, [sp, #4]
 8001934:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8001938:	9000      	str	r0, [sp, #0]
 800193a:	480b      	ldr	r0, [pc, #44]	; (8001968 <print_network_information+0x1f8>)
 800193c:	f010 fb24 	bl	8011f88 <iprintf>
									gWIZNETINFO.gw6[4],gWIZNETINFO.gw6[5],gWIZNETINFO.gw6[6],gWIZNETINFO.gw6[7],\
									gWIZNETINFO.gw6[8],gWIZNETINFO.gw6[9],gWIZNETINFO.gw6[10],gWIZNETINFO.gw6[11],\
									gWIZNETINFO.gw6[12],gWIZNETINFO.gw6[13],gWIZNETINFO.gw6[14],gWIZNETINFO.gw6[15]);


}
 8001940:	b00e      	add	sp, #56	; 0x38
 8001942:	bd10      	pop	{r4, pc}
 8001944:	2000000c 	.word	0x2000000c
 8001948:	080132c5 	.word	0x080132c5
 800194c:	080132f2 	.word	0x080132f2
 8001950:	0801330d 	.word	0x0801330d
 8001954:	08013328 	.word	0x08013328
 8001958:	08013343 	.word	0x08013343
 800195c:	0801335e 	.word	0x0801335e
 8001960:	080133af 	.word	0x080133af
 8001964:	08013400 	.word	0x08013400
 8001968:	08013451 	.word	0x08013451

0800196c <main>:
{
 800196c:	b5f0      	push	{r4, r5, r6, r7, lr}
  int len, server_fd = 0;
 800196e:	2400      	movs	r4, #0
  uint8_t syslock = SYS_NET_LOCK;
 8001970:	2502      	movs	r5, #2
{
 8001972:	b08b      	sub	sp, #44	; 0x2c
  uint8_t syslock = SYS_NET_LOCK;
 8001974:	f88d 5003 	strb.w	r5, [sp, #3]
  int len, server_fd = 0;
 8001978:	9401      	str	r4, [sp, #4]
  HAL_Init();
 800197a:	f7fe fe09 	bl	8000590 <HAL_Init>
  SystemClock_Config();
 800197e:	f7ff fecd 	bl	800171c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001982:	4621      	mov	r1, r4
 8001984:	2210      	movs	r2, #16
 8001986:	a806      	add	r0, sp, #24
 8001988:	f010 fa3e 	bl	8011e08 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800198c:	4b6c      	ldr	r3, [pc, #432]	; (8001b40 <main+0x1d4>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800198e:	f44f 7150 	mov.w	r1, #832	; 0x340
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001994:	486b      	ldr	r0, [pc, #428]	; (8001b44 <main+0x1d8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	f042 0208 	orr.w	r2, r2, #8
 800199a:	619a      	str	r2, [r3, #24]
 800199c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a0:	f002 0208 	and.w	r2, r2, #8
 80019a4:	9202      	str	r2, [sp, #8]
 80019a6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a8:	699a      	ldr	r2, [r3, #24]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019aa:	f44f 7700 	mov.w	r7, #512	; 0x200
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ae:	f042 0210 	orr.w	r2, r2, #16
 80019b2:	619a      	str	r2, [r3, #24]
 80019b4:	699a      	ldr	r2, [r3, #24]
 80019b6:	f002 0210 	and.w	r2, r2, #16
 80019ba:	9203      	str	r2, [sp, #12]
 80019bc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	699a      	ldr	r2, [r3, #24]
 80019c0:	f042 0204 	orr.w	r2, r2, #4
 80019c4:	619a      	str	r2, [r3, #24]
 80019c6:	699a      	ldr	r2, [r3, #24]
 80019c8:	f002 0204 	and.w	r2, r2, #4
 80019cc:	9204      	str	r2, [sp, #16]
 80019ce:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	f042 0220 	orr.w	r2, r2, #32
 80019d6:	619a      	str	r2, [r3, #24]
 80019d8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80019da:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	9305      	str	r3, [sp, #20]
 80019e2:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80019e4:	f7fe ffcc 	bl	8000980 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80019e8:	4622      	mov	r2, r4
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	4856      	ldr	r0, [pc, #344]	; (8001b48 <main+0x1dc>)
 80019ee:	f7fe ffc7 	bl	8000980 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 80019f2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80019f6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f8:	4b54      	ldr	r3, [pc, #336]	; (8001b4c <main+0x1e0>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fa:	a906      	add	r1, sp, #24
 80019fc:	4854      	ldr	r0, [pc, #336]	; (8001b50 <main+0x1e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019fe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a02:	f7fe fed1 	bl	80007a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001a06:	f44f 7350 	mov.w	r3, #832	; 0x340
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0a:	a906      	add	r1, sp, #24
 8001a0c:	484d      	ldr	r0, [pc, #308]	; (8001b44 <main+0x1d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001a0e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a16:	f7fe fec7 	bl	80007a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a1a:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1c:	a906      	add	r1, sp, #24
 8001a1e:	484a      	ldr	r0, [pc, #296]	; (8001b48 <main+0x1dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a20:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a28:	f7fe febe 	bl	80007a8 <HAL_GPIO_Init>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a2c:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Instance = SPI2;
 8001a30:	4848      	ldr	r0, [pc, #288]	; (8001b54 <main+0x1e8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a32:	4a49      	ldr	r2, [pc, #292]	; (8001b58 <main+0x1ec>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a34:	6084      	str	r4, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a36:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi2.Init.CRCPolynomial = 10;
 8001a3a:	230a      	movs	r3, #10
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a3c:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a3e:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a40:	6144      	str	r4, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a42:	6187      	str	r7, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a44:	61c4      	str	r4, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a46:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a48:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a4a:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a4c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a4e:	f7ff fb91 	bl	8001174 <HAL_SPI_Init>
  huart1.Init.BaudRate = 115200;
 8001a52:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001a56:	4d41      	ldr	r5, [pc, #260]	; (8001b5c <main+0x1f0>)
  huart1.Init.BaudRate = 115200;
 8001a58:	4941      	ldr	r1, [pc, #260]	; (8001b60 <main+0x1f4>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a5a:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 115200;
 8001a5c:	e885 000a 	stmia.w	r5, {r1, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a60:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a62:	60ac      	str	r4, [r5, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a64:	616b      	str	r3, [r5, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a66:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a68:	612c      	str	r4, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a6c:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a6e:	f7ff fc8f 	bl	8001390 <HAL_UART_Init>
  HAL_UART_Receive_IT(&huart1, rxData, 1);
 8001a72:	4632      	mov	r2, r6
 8001a74:	493b      	ldr	r1, [pc, #236]	; (8001b64 <main+0x1f8>)
 8001a76:	4628      	mov	r0, r5
 8001a78:	f7ff fd14 	bl	80014a4 <HAL_UART_Receive_IT>
  printf("< Hello! MBED TLS System  >\n");
 8001a7c:	483a      	ldr	r0, [pc, #232]	; (8001b68 <main+0x1fc>)
 8001a7e:	f010 faf7 	bl	8012070 <puts>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001a82:	4632      	mov	r2, r6
 8001a84:	2140      	movs	r1, #64	; 0x40
 8001a86:	482f      	ldr	r0, [pc, #188]	; (8001b44 <main+0x1d8>)
 8001a88:	f7fe ff7a 	bl	8000980 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001a8c:	4632      	mov	r2, r6
 8001a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a92:	482c      	ldr	r0, [pc, #176]	; (8001b44 <main+0x1d8>)
 8001a94:	f7fe ff74 	bl	8000980 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001a98:	4632      	mov	r2, r6
 8001a9a:	4639      	mov	r1, r7
 8001a9c:	4829      	ldr	r0, [pc, #164]	; (8001b44 <main+0x1d8>)
 8001a9e:	f7fe ff6f 	bl	8000980 <HAL_GPIO_WritePin>
  BoardInitialze();
 8001aa2:	f7ff fe0f 	bl	80016c4 <BoardInitialze>
  ctlwizchip(CW_SYS_UNLOCK,& syslock);
 8001aa6:	f10d 0103 	add.w	r1, sp, #3
 8001aaa:	4630      	mov	r0, r6
 8001aac:	f000 fff0 	bl	8002a90 <ctlwizchip>
  ctlnetwork(CN_SET_NETINFO,&gWIZNETINFO);
 8001ab0:	492e      	ldr	r1, [pc, #184]	; (8001b6c <main+0x200>)
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f001 fa10 	bl	8002ed8 <ctlnetwork>
  printf("VERSION(%x) = %.2x \r\n", _VER_,getVER());
 8001ab8:	4638      	mov	r0, r7
 8001aba:	f000 fa43 	bl	8001f44 <WIZCHIP_READ>
 8001abe:	4604      	mov	r4, r0
 8001ac0:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001ac4:	f000 fa3e 	bl	8001f44 <WIZCHIP_READ>
 8001ac8:	4639      	mov	r1, r7
 8001aca:	eb00 2204 	add.w	r2, r0, r4, lsl #8
 8001ace:	4828      	ldr	r0, [pc, #160]	; (8001b70 <main+0x204>)
 8001ad0:	f010 fa5a 	bl	8011f88 <iprintf>
  print_network_information();
 8001ad4:	f7ff fe4c 	bl	8001770 <print_network_information>
  ret = wiz_tls_init(&tlsContext,&server_fd);
 8001ad8:	a901      	add	r1, sp, #4
 8001ada:	a806      	add	r0, sp, #24
 8001adc:	f001 fa44 	bl	8002f68 <wiz_tls_init>
  wiz_tls_connect(&tlsContext, SERVER_PORT, gServer_IP);
 8001ae0:	4a24      	ldr	r2, [pc, #144]	; (8001b74 <main+0x208>)
 8001ae2:	f242 21b3 	movw	r1, #8883	; 0x22b3
 8001ae6:	a806      	add	r0, sp, #24
 8001ae8:	f001 fad6 	bl	8003098 <wiz_tls_connect>
  printf("connect end \r\n");
 8001aec:	4822      	ldr	r0, [pc, #136]	; (8001b78 <main+0x20c>)
 8001aee:	f010 fabf 	bl	8012070 <puts>
	len = wiz_tls_read(&tlsContext, ethBuf0, ETH_MAX_BUF_SIZE);
 8001af2:	4c22      	ldr	r4, [pc, #136]	; (8001b7c <main+0x210>)
		printf("%s : %d \r\n",ethBuf0, len);
 8001af4:	4e22      	ldr	r6, [pc, #136]	; (8001b80 <main+0x214>)
	if(strncmp((char *)ethBuf0,"end",3)==0)
 8001af6:	4f23      	ldr	r7, [pc, #140]	; (8001b84 <main+0x218>)
	len = wiz_tls_read(&tlsContext, ethBuf0, ETH_MAX_BUF_SIZE);
 8001af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001afc:	4621      	mov	r1, r4
 8001afe:	a806      	add	r0, sp, #24
 8001b00:	f001 fb14 	bl	800312c <wiz_tls_read>
	if(len > 0)
 8001b04:	1e05      	subs	r5, r0, #0
 8001b06:	dd09      	ble.n	8001b1c <main+0x1b0>
		printf("%s : %d \r\n",ethBuf0, len);
 8001b08:	462a      	mov	r2, r5
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	4630      	mov	r0, r6
 8001b0e:	f010 fa3b 	bl	8011f88 <iprintf>
		wiz_tls_write(&tlsContext, ethBuf0, len);
 8001b12:	462a      	mov	r2, r5
 8001b14:	4621      	mov	r1, r4
 8001b16:	a806      	add	r0, sp, #24
 8001b18:	f001 fb0b 	bl	8003132 <wiz_tls_write>
	if(strncmp((char *)ethBuf0,"end",3)==0)
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	4639      	mov	r1, r7
 8001b20:	4620      	mov	r0, r4
 8001b22:	f010 fb53 	bl	80121cc <strncmp>
 8001b26:	2800      	cmp	r0, #0
 8001b28:	d1e6      	bne.n	8001af8 <main+0x18c>
	if(wiz_tls_close_notify(&tlsContext) == 0)
 8001b2a:	a806      	add	r0, sp, #24
 8001b2c:	f001 fb04 	bl	8003138 <wiz_tls_close_notify>
 8001b30:	b910      	cbnz	r0, 8001b38 <main+0x1cc>
		printf("SSL closed\r\n");
 8001b32:	4815      	ldr	r0, [pc, #84]	; (8001b88 <main+0x21c>)
 8001b34:	f010 fa9c 	bl	8012070 <puts>
	wiz_tls_deinit(&tlsContext);
 8001b38:	a806      	add	r0, sp, #24
 8001b3a:	f001 fa91 	bl	8003060 <wiz_tls_deinit>
 8001b3e:	e7db      	b.n	8001af8 <main+0x18c>
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40011000 	.word	0x40011000
 8001b48:	40011400 	.word	0x40011400
 8001b4c:	10110000 	.word	0x10110000
 8001b50:	40010c00 	.word	0x40010c00
 8001b54:	200027dc 	.word	0x200027dc
 8001b58:	40003800 	.word	0x40003800
 8001b5c:	20003034 	.word	0x20003034
 8001b60:	40013800 	.word	0x40013800
 8001b64:	200027d8 	.word	0x200027d8
 8001b68:	0801326e 	.word	0x0801326e
 8001b6c:	2000000c 	.word	0x2000000c
 8001b70:	0801328a 	.word	0x0801328a
 8001b74:	20000008 	.word	0x20000008
 8001b78:	080132a0 	.word	0x080132a0
 8001b7c:	20003074 	.word	0x20003074
 8001b80:	080132ae 	.word	0x080132ae
 8001b84:	08017b16 	.word	0x08017b16
 8001b88:	080132b9 	.word	0x080132b9

08001b8c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <HAL_MspInit+0x3c>)
{
 8001b8e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	619a      	str	r2, [r3, #24]
 8001b98:	699a      	ldr	r2, [r3, #24]
 8001b9a:	f002 0201 	and.w	r2, r2, #1
 8001b9e:	9200      	str	r2, [sp, #0]
 8001ba0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	69da      	ldr	r2, [r3, #28]
 8001ba4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ba8:	61da      	str	r2, [r3, #28]
 8001baa:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bac:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bb6:	6853      	ldr	r3, [r2, #4]
 8001bb8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc2:	b002      	add	sp, #8
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010000 	.word	0x40010000

08001bd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bd0:	b510      	push	{r4, lr}
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd6:	2210      	movs	r2, #16
 8001bd8:	2100      	movs	r1, #0
 8001bda:	a802      	add	r0, sp, #8
 8001bdc:	f010 f914 	bl	8011e08 <memset>
  if(hspi->Instance==SPI2)
 8001be0:	6822      	ldr	r2, [r4, #0]
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_SPI_MspInit+0x70>)
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d128      	bne.n	8001c3a <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001be8:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8001bec:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bee:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bf4:	61da      	str	r2, [r3, #28]
 8001bf6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	4812      	ldr	r0, [pc, #72]	; (8001c44 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bfa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001bfe:	9200      	str	r2, [sp, #0]
 8001c00:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	699a      	ldr	r2, [r3, #24]
 8001c04:	f042 0208 	orr.w	r2, r2, #8
 8001c08:	619a      	str	r2, [r3, #24]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001c14:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001c18:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c22:	f7fe fdc1 	bl	80007a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c2a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2e:	a902      	add	r1, sp, #8
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c36:	f7fe fdb7 	bl	80007a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c3a:	b006      	add	sp, #24
 8001c3c:	bd10      	pop	{r4, pc}
 8001c3e:	bf00      	nop
 8001c40:	40003800 	.word	0x40003800
 8001c44:	40010c00 	.word	0x40010c00

08001c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c48:	b510      	push	{r4, lr}
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4e:	2210      	movs	r2, #16
 8001c50:	2100      	movs	r1, #0
 8001c52:	a802      	add	r0, sp, #8
 8001c54:	f010 f8d8 	bl	8011e08 <memset>
  if(huart->Instance==USART1)
 8001c58:	6822      	ldr	r2, [r4, #0]
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_UART_MspInit+0x80>)
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d130      	bne.n	8001cc2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c60:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001c64:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c6c:	619a      	str	r2, [r3, #24]
 8001c6e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	4816      	ldr	r0, [pc, #88]	; (8001ccc <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c72:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c76:	9200      	str	r2, [sp, #0]
 8001c78:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7c:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	f042 0204 	orr.w	r2, r2, #4
 8001c82:	619a      	str	r2, [r3, #24]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c92:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f7fe fd84 	bl	80007a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	a902      	add	r1, sp, #8
 8001ca6:	4809      	ldr	r0, [pc, #36]	; (8001ccc <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ca8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001caa:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f7fe fd7b 	bl	80007a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cb2:	2025      	movs	r0, #37	; 0x25
 8001cb4:	4622      	mov	r2, r4
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	f7fe fcb2 	bl	8000620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cbc:	2025      	movs	r0, #37	; 0x25
 8001cbe:	f7fe fce3 	bl	8000688 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cc2:	b006      	add	sp, #24
 8001cc4:	bd10      	pop	{r4, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	40010800 	.word	0x40010800

08001cd0 <NMI_Handler>:
 8001cd0:	4770      	bx	lr

08001cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd2:	e7fe      	b.n	8001cd2 <HardFault_Handler>

08001cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd4:	e7fe      	b.n	8001cd4 <MemManage_Handler>

08001cd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd6:	e7fe      	b.n	8001cd6 <BusFault_Handler>

08001cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd8:	e7fe      	b.n	8001cd8 <UsageFault_Handler>

08001cda <SVC_Handler>:
 8001cda:	4770      	bx	lr

08001cdc <DebugMon_Handler>:
 8001cdc:	4770      	bx	lr

08001cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cde:	4770      	bx	lr

08001ce0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce0:	f7fe bc68 	b.w	80005b4 <HAL_IncTick>

08001ce4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ce4:	4801      	ldr	r0, [pc, #4]	; (8001cec <USART1_IRQHandler+0x8>)
 8001ce6:	f7ff bc45 	b.w	8001574 <HAL_UART_IRQHandler>
 8001cea:	bf00      	nop
 8001cec:	20003034 	.word	0x20003034

08001cf0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf0:	b570      	push	{r4, r5, r6, lr}
 8001cf2:	460e      	mov	r6, r1
 8001cf4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf6:	460c      	mov	r4, r1
 8001cf8:	1ba3      	subs	r3, r4, r6
 8001cfa:	429d      	cmp	r5, r3
 8001cfc:	dc01      	bgt.n	8001d02 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001cfe:	4628      	mov	r0, r5
 8001d00:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001d02:	f3af 8000 	nop.w
 8001d06:	f804 0b01 	strb.w	r0, [r4], #1
 8001d0a:	e7f5      	b.n	8001cf8 <_read+0x8>

08001d0c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001d0c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <_sbrk+0x2c>)
{
 8001d10:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001d12:	6819      	ldr	r1, [r3, #0]
 8001d14:	b909      	cbnz	r1, 8001d1a <_sbrk+0xe>
		heap_end = &end;
 8001d16:	4909      	ldr	r1, [pc, #36]	; (8001d3c <_sbrk+0x30>)
 8001d18:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001d1a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001d1c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001d1e:	4402      	add	r2, r0
 8001d20:	428a      	cmp	r2, r1
 8001d22:	d906      	bls.n	8001d32 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001d24:	f010 f802 	bl	8011d2c <__errno>
 8001d28:	230c      	movs	r3, #12
 8001d2a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001d32:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001d34:	bd08      	pop	{r3, pc}
 8001d36:	bf00      	nop
 8001d38:	20000164 	.word	0x20000164
 8001d3c:	20003878 	.word	0x20003878

08001d40 <_close>:

int _close(int file)
{
	return -1;
}
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	4770      	bx	lr

08001d46 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001d4a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001d4c:	604b      	str	r3, [r1, #4]
}
 8001d4e:	4770      	bx	lr

08001d50 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001d50:	2001      	movs	r0, #1
 8001d52:	4770      	bx	lr

08001d54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001d54:	2000      	movs	r0, #0
 8001d56:	4770      	bx	lr

08001d58 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <SystemInit+0x40>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	f042 0201 	orr.w	r2, r2, #1
 8001d60:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <SystemInit+0x44>)
 8001d66:	400a      	ands	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001d70:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d74:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d7c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001d84:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001d86:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001d8a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <SystemInit+0x48>)
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	f8ff0000 	.word	0xf8ff0000
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <W6100SpiReadByte>:
	}
	//printf("interrupt mask: %02x\r\n",getIMR());
}

uint8_t W6100SpiReadByte(void)
{
 8001da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	while (SPI_I2S_GetFlagStatus(W6100_SPI, SPI_I2S_FLAG_RXNE) == RESET);
	return SPI_I2S_ReceiveData(W6100_SPI);

#elif defined USE_HAL_DRIVER

	uint8_t rx = 0, tx = 0xFF;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f88d 300e 	strb.w	r3, [sp, #14]
 8001dac:	23ff      	movs	r3, #255	; 0xff
 8001dae:	f88d 300f 	strb.w	r3, [sp, #15]
	HAL_SPI_TransmitReceive(&W6100_SPI, &tx, &rx, W6100_SPI_SIZE, W6100_SPI_TIMEOUT);
 8001db2:	230a      	movs	r3, #10
 8001db4:	f10d 020e 	add.w	r2, sp, #14
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	f10d 010f 	add.w	r1, sp, #15
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <W6100SpiReadByte+0x2c>)
 8001dc2:	f7ff f8da 	bl	8000f7a <HAL_SPI_TransmitReceive>
	return rx;
#elif defined USE_HAL_DRIVER

	// Sppi read
#endif
}
 8001dc6:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8001dca:	b005      	add	sp, #20
 8001dcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dd0:	200027dc 	.word	0x200027dc

08001dd4 <W6100SpiWriteByte>:

void W6100SpiWriteByte(uint8_t byte)
{
 8001dd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	SPI_I2S_ReceiveData(W6100_SPI);

#elif defined USE_HAL_DRIVER

	uint8_t rx;
	HAL_SPI_TransmitReceive(&W6100_SPI, &byte, &rx, W6100_SPI_SIZE, W6100_SPI_TIMEOUT);
 8001dd6:	230a      	movs	r3, #10
{
 8001dd8:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_SPI_TransmitReceive(&W6100_SPI, &byte, &rx, W6100_SPI_SIZE, W6100_SPI_TIMEOUT);
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	f10d 0217 	add.w	r2, sp, #23
 8001de2:	2301      	movs	r3, #1
 8001de4:	f10d 010f 	add.w	r1, sp, #15
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <W6100SpiWriteByte+0x20>)
 8001dea:	f7ff f8c6 	bl	8000f7a <HAL_SPI_TransmitReceive>
#endif

}
 8001dee:	b007      	add	sp, #28
 8001df0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001df4:	200027dc 	.word	0x200027dc

08001df8 <W6100CsEnable>:

	GPIO_ResetBits(W6100_CS_PORT, W6100_CS_PIN);

#elif defined USE_HAL_DRIVER

	HAL_GPIO_WritePin(W6100_CS_PORT, W6100_CS_PIN, GPIO_PIN_RESET);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2180      	movs	r1, #128	; 0x80
 8001dfc:	4801      	ldr	r0, [pc, #4]	; (8001e04 <W6100CsEnable+0xc>)
 8001dfe:	f7fe bdbf 	b.w	8000980 <HAL_GPIO_WritePin>
 8001e02:	bf00      	nop
 8001e04:	40011400 	.word	0x40011400

08001e08 <W6100CsDisable>:

	GPIO_SetBits(W6100_CS_PORT, W6100_CS_PIN);

#elif defined USE_HAL_DRIVER

	HAL_GPIO_WritePin(W6100_CS_PORT, W6100_CS_PIN, GPIO_PIN_SET);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	4801      	ldr	r0, [pc, #4]	; (8001e14 <W6100CsDisable+0xc>)
 8001e0e:	f7fe bdb7 	b.w	8000980 <HAL_GPIO_WritePin>
 8001e12:	bf00      	nop
 8001e14:	40011400 	.word	0x40011400

08001e18 <W6100ResetAssert>:

	GPIO_ResetBits(W6100_RESET_PORT, W6100_RESET_PIN);

#elif defined USE_HAL_DRIVER

	HAL_GPIO_WritePin(W6100_RESET_PORT, W6100_RESET_PIN, GPIO_PIN_RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e1e:	4801      	ldr	r0, [pc, #4]	; (8001e24 <W6100ResetAssert+0xc>)
 8001e20:	f7fe bdae 	b.w	8000980 <HAL_GPIO_WritePin>
 8001e24:	40011400 	.word	0x40011400

08001e28 <W6100ResetDeassert>:

	GPIO_SetBits(W6100_RESET_PORT, W6100_RESET_PIN);

#elif defined USE_HAL_DRIVER

	HAL_GPIO_WritePin(W6100_RESET_PORT, W6100_RESET_PIN, GPIO_PIN_SET);
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e2e:	4801      	ldr	r0, [pc, #4]	; (8001e34 <W6100ResetDeassert+0xc>)
 8001e30:	f7fe bda6 	b.w	8000980 <HAL_GPIO_WritePin>
 8001e34:	40011400 	.word	0x40011400

08001e38 <W6100Reset>:
#endif

}

void W6100Reset(void)
{
 8001e38:	b508      	push	{r3, lr}
	W6100ResetAssert();
	delay(10);
	W6100ResetDeassert();
	delay(10);
#elif defined USE_HAL_DRIVER
	W6100ResetAssert();
 8001e3a:	f7ff ffed 	bl	8001e18 <W6100ResetAssert>
	HAL_Delay(10);
 8001e3e:	200a      	movs	r0, #10
 8001e40:	f7fe fbca 	bl	80005d8 <HAL_Delay>
	W6100ResetDeassert();
 8001e44:	f7ff fff0 	bl	8001e28 <W6100ResetDeassert>
	HAL_Delay(10);
#endif
}
 8001e48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(10);
 8001e4c:	200a      	movs	r0, #10
 8001e4e:	f7fe bbc3 	b.w	80005d8 <HAL_Delay>
	...

08001e54 <W6100Initialze>:
{
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	b086      	sub	sp, #24
	W6100Reset();
 8001e58:	f7ff ffee 	bl	8001e38 <W6100Reset>
	reg_wizchip_spi_cbfunc(W6100SpiReadByte, W6100SpiWriteByte, 0, 0);
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	491e      	ldr	r1, [pc, #120]	; (8001ed8 <W6100Initialze+0x84>)
 8001e60:	461a      	mov	r2, r3
 8001e62:	481e      	ldr	r0, [pc, #120]	; (8001edc <W6100Initialze+0x88>)
 8001e64:	f000 fc14 	bl	8002690 <reg_wizchip_spi_cbfunc>
	reg_wizchip_cs_cbfunc(W6100CsEnable, W6100CsDisable);
 8001e68:	491d      	ldr	r1, [pc, #116]	; (8001ee0 <W6100Initialze+0x8c>)
 8001e6a:	481e      	ldr	r0, [pc, #120]	; (8001ee4 <W6100Initialze+0x90>)
 8001e6c:	f000 fbfe 	bl	800266c <reg_wizchip_cs_cbfunc>
	unsigned char W6100_AdrSet[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 8001e70:	aa02      	add	r2, sp, #8
 8001e72:	4615      	mov	r5, r2
 8001e74:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <W6100Initialze+0x94>)
 8001e76:	f103 0610 	add.w	r6, r3, #16
 8001e7a:	4614      	mov	r4, r2
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	3308      	adds	r3, #8
 8001e82:	c403      	stmia	r4!, {r0, r1}
 8001e84:	42b3      	cmp	r3, r6
 8001e86:	4622      	mov	r2, r4
 8001e88:	d1f7      	bne.n	8001e7a <W6100Initialze+0x26>
			printf("Unknown PHY link status.\r\n");
 8001e8a:	4c18      	ldr	r4, [pc, #96]	; (8001eec <W6100Initialze+0x98>)
		if (ctlwizchip(CW_GET_PHYLINK, (void *)&temp) == -1)
 8001e8c:	a901      	add	r1, sp, #4
 8001e8e:	2017      	movs	r0, #23
 8001e90:	f000 fdfe 	bl	8002a90 <ctlwizchip>
 8001e94:	3001      	adds	r0, #1
 8001e96:	d102      	bne.n	8001e9e <W6100Initialze+0x4a>
			printf("Unknown PHY link status.\r\n");
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f010 f8e9 	bl	8012070 <puts>
	} while (temp == PHY_LINK_OFF);
 8001e9e:	9b01      	ldr	r3, [sp, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f3      	beq.n	8001e8c <W6100Initialze+0x38>
	printf("PHY OK.\r\n");
 8001ea4:	4812      	ldr	r0, [pc, #72]	; (8001ef0 <W6100Initialze+0x9c>)
 8001ea6:	f010 f8e3 	bl	8012070 <puts>
	temp = IK_DEST_UNREACH;
 8001eaa:	2302      	movs	r3, #2
	if (ctlwizchip(CW_INIT_WIZCHIP, (void *)W6100_AdrSet) == -1)
 8001eac:	4629      	mov	r1, r5
 8001eae:	2004      	movs	r0, #4
	temp = IK_DEST_UNREACH;
 8001eb0:	9301      	str	r3, [sp, #4]
	if (ctlwizchip(CW_INIT_WIZCHIP, (void *)W6100_AdrSet) == -1)
 8001eb2:	f000 fded 	bl	8002a90 <ctlwizchip>
 8001eb6:	3001      	adds	r0, #1
 8001eb8:	d102      	bne.n	8001ec0 <W6100Initialze+0x6c>
		printf("W6100 initialized fail.\r\n");
 8001eba:	480e      	ldr	r0, [pc, #56]	; (8001ef4 <W6100Initialze+0xa0>)
 8001ebc:	f010 f8d8 	bl	8012070 <puts>
	if (ctlwizchip(CW_SET_INTRMASK, &temp) == -1)
 8001ec0:	a901      	add	r1, sp, #4
 8001ec2:	2007      	movs	r0, #7
 8001ec4:	f000 fde4 	bl	8002a90 <ctlwizchip>
 8001ec8:	3001      	adds	r0, #1
 8001eca:	d102      	bne.n	8001ed2 <W6100Initialze+0x7e>
		printf("W6100 interrupt\r\n");
 8001ecc:	480a      	ldr	r0, [pc, #40]	; (8001ef8 <W6100Initialze+0xa4>)
 8001ece:	f010 f8cf 	bl	8012070 <puts>
}
 8001ed2:	b006      	add	sp, #24
 8001ed4:	bd70      	pop	{r4, r5, r6, pc}
 8001ed6:	bf00      	nop
 8001ed8:	08001dd5 	.word	0x08001dd5
 8001edc:	08001da5 	.word	0x08001da5
 8001ee0:	08001e09 	.word	0x08001e09
 8001ee4:	08001df9 	.word	0x08001df9
 8001ee8:	08013228 	.word	0x08013228
 8001eec:	080134ba 	.word	0x080134ba
 8001ef0:	080134d4 	.word	0x080134d4
 8001ef4:	080134dd 	.word	0x080134dd
 8001ef8:	080134f6 	.word	0x080134f6

08001efc <WIZCHIP_WRITE>:

#define _W6100_SPI_OP_          _WIZCHIP_SPI_VDM_OP_

//////////////////////////////////////////////////
void WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001efc:	b513      	push	{r0, r1, r4, lr}
   uint8_t tAD[4];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8001efe:	0c03      	lsrs	r3, r0, #16
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
   tAD[3] = wb;

   WIZCHIP_CRITICAL_ENTER();
 8001f00:	4c0f      	ldr	r4, [pc, #60]	; (8001f40 <WIZCHIP_WRITE+0x44>)
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8001f02:	f88d 3004 	strb.w	r3, [sp, #4]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8001f06:	0a03      	lsrs	r3, r0, #8
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 8001f08:	f88d 0006 	strb.w	r0, [sp, #6]
   tAD[3] = wb;
 8001f0c:	f88d 1007 	strb.w	r1, [sp, #7]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8001f10:	f88d 3005 	strb.w	r3, [sp, #5]
   WIZCHIP_CRITICAL_ENTER();
 8001f14:	68a3      	ldr	r3, [r4, #8]
 8001f16:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 8001f18:	6923      	ldr	r3, [r4, #16]
 8001f1a:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_WRITE_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 4);
 8001f1c:	2104      	movs	r1, #4
   tAD[2] |= (_W6100_SPI_WRITE_ | _W6100_SPI_OP_);
 8001f1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 4);
 8001f22:	eb0d 0001 	add.w	r0, sp, r1
   tAD[2] |= (_W6100_SPI_WRITE_ | _W6100_SPI_OP_);
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	f88d 3006 	strb.w	r3, [sp, #6]
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 4);
 8001f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f30:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0, tAD, 4, 1);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 8001f32:	6963      	ldr	r3, [r4, #20]
 8001f34:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001f36:	68e3      	ldr	r3, [r4, #12]
 8001f38:	4798      	blx	r3
}
 8001f3a:	b002      	add	sp, #8
 8001f3c:	bd10      	pop	{r4, pc}
 8001f3e:	bf00      	nop
 8001f40:	2000007c 	.word	0x2000007c

08001f44 <WIZCHIP_READ>:

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   uint8_t ret;
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8001f46:	0c03      	lsrs	r3, r0, #16
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);

   WIZCHIP_CRITICAL_ENTER();
 8001f48:	4c0c      	ldr	r4, [pc, #48]	; (8001f7c <WIZCHIP_READ+0x38>)
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8001f4a:	f88d 3004 	strb.w	r3, [sp, #4]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8001f4e:	0a03      	lsrs	r3, r0, #8
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 8001f50:	f88d 0006 	strb.w	r0, [sp, #6]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8001f54:	f88d 3005 	strb.w	r3, [sp, #5]
   WIZCHIP_CRITICAL_ENTER();
 8001f58:	68a3      	ldr	r3, [r4, #8]
 8001f5a:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 8001f5c:	6923      	ldr	r3, [r4, #16]
 8001f5e:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ ==  _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
 8001f60:	2103      	movs	r1, #3
 8001f62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f64:	a801      	add	r0, sp, #4
 8001f66:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte();
 8001f68:	69a3      	ldr	r3, [r4, #24]
 8001f6a:	4798      	blx	r3
 8001f6c:	4605      	mov	r5, r0
   ret = WIZCHIP.IF.BUS._read_data(IDM_DR);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!"   
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 8001f6e:	6963      	ldr	r3, [r4, #20]
 8001f70:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001f72:	68e3      	ldr	r3, [r4, #12]
 8001f74:	4798      	blx	r3
   return ret;
}
 8001f76:	4628      	mov	r0, r5
 8001f78:	b003      	add	sp, #12
 8001f7a:	bd30      	pop	{r4, r5, pc}
 8001f7c:	2000007c 	.word	0x2000007c

08001f80 <WIZCHIP_WRITE_BUF>:

void WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 8001f80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f82:	4616      	mov	r6, r2
 8001f84:	460d      	mov	r5, r1
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);


   WIZCHIP_CRITICAL_ENTER();
 8001f86:	4c10      	ldr	r4, [pc, #64]	; (8001fc8 <WIZCHIP_WRITE_BUF+0x48>)
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8001f88:	0c03      	lsrs	r3, r0, #16
 8001f8a:	f88d 3004 	strb.w	r3, [sp, #4]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8001f8e:	0a03      	lsrs	r3, r0, #8
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 8001f90:	f88d 0006 	strb.w	r0, [sp, #6]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8001f94:	f88d 3005 	strb.w	r3, [sp, #5]
   WIZCHIP_CRITICAL_ENTER();
 8001f98:	68a3      	ldr	r3, [r4, #8]
 8001f9a:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 8001f9c:	6923      	ldr	r3, [r4, #16]
 8001f9e:	4798      	blx	r3

#if((_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_WRITE_ | _W6100_SPI_OP_);
 8001fa0:	f89d 3006 	ldrb.w	r3, [sp, #6]

   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
 8001fa4:	a801      	add	r0, sp, #4
   tAD[2] |= (_W6100_SPI_WRITE_ | _W6100_SPI_OP_);
 8001fa6:	f043 0304 	orr.w	r3, r3, #4
 8001faa:	f88d 3006 	strb.w	r3, [sp, #6]
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
 8001fae:	2103      	movs	r1, #3
 8001fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fb2:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte_buf(pBuf, len);
 8001fb4:	4631      	mov	r1, r6
 8001fb6:	4628      	mov	r0, r5
 8001fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fba:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data_buf(IDM_DR,pBuf,len, 0);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 8001fbc:	6963      	ldr	r3, [r4, #20]
 8001fbe:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001fc0:	68e3      	ldr	r3, [r4, #12]
 8001fc2:	4798      	blx	r3
}
 8001fc4:	b002      	add	sp, #8
 8001fc6:	bd70      	pop	{r4, r5, r6, pc}
 8001fc8:	2000007c 	.word	0x2000007c

08001fcc <WIZCHIP_READ_BUF>:

void WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 8001fcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001fce:	4616      	mov	r6, r2
 8001fd0:	460d      	mov	r5, r1
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);

   WIZCHIP_CRITICAL_ENTER();
 8001fd2:	4c0d      	ldr	r4, [pc, #52]	; (8002008 <WIZCHIP_READ_BUF+0x3c>)
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8001fd4:	0c03      	lsrs	r3, r0, #16
 8001fd6:	f88d 3004 	strb.w	r3, [sp, #4]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8001fda:	0a03      	lsrs	r3, r0, #8
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 8001fdc:	f88d 0006 	strb.w	r0, [sp, #6]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8001fe0:	f88d 3005 	strb.w	r3, [sp, #5]
   WIZCHIP_CRITICAL_ENTER();
 8001fe4:	68a3      	ldr	r3, [r4, #8]
 8001fe6:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 8001fe8:	6923      	ldr	r3, [r4, #16]
 8001fea:	4798      	blx	r3

#if((_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD,3);
 8001fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fee:	a801      	add	r0, sp, #4
 8001ff0:	2103      	movs	r1, #3
 8001ff2:	4798      	blx	r3
   WIZCHIP.IF.SPI._read_byte_buf(pBuf, len);
 8001ff4:	4631      	mov	r1, r6
 8001ff6:	4628      	mov	r0, r5
 8001ff8:	6a23      	ldr	r3, [r4, #32]
 8001ffa:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD,3,1);
   WIZCHIP.IF.BUS._read_data_buf(IDM_DR,pBuf,len,0);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif
   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 8001ffc:	6963      	ldr	r3, [r4, #20]
 8001ffe:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002000:	68e3      	ldr	r3, [r4, #12]
 8002002:	4798      	blx	r3
}
 8002004:	b002      	add	sp, #8
 8002006:	bd70      	pop	{r4, r5, r6, pc}
 8002008:	2000007c 	.word	0x2000007c

0800200c <getSn_TX_FSR>:

datasize_t getSn_TX_FSR(uint8_t sn)
{
 800200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   datasize_t prev_val=-1,val=0;
 800200e:	2600      	movs	r6, #0
   do
   {
      prev_val = val;
      val = WIZCHIP_READ(_Sn_TX_FSR_(sn));
 8002010:	0140      	lsls	r0, r0, #5
 8002012:	f500 3501 	add.w	r5, r0, #132096	; 0x20400
 8002016:	3508      	adds	r5, #8
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_TX_FSR_(sn),1));
 8002018:	f505 7780 	add.w	r7, r5, #256	; 0x100
      val = WIZCHIP_READ(_Sn_TX_FSR_(sn));
 800201c:	4628      	mov	r0, r5
 800201e:	f7ff ff91 	bl	8001f44 <WIZCHIP_READ>
 8002022:	4604      	mov	r4, r0
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_TX_FSR_(sn),1));
 8002024:	4638      	mov	r0, r7
 8002026:	f7ff ff8d 	bl	8001f44 <WIZCHIP_READ>
 800202a:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 800202e:	b200      	sxth	r0, r0
   }while (val != prev_val);
 8002030:	4286      	cmp	r6, r0
 8002032:	d101      	bne.n	8002038 <getSn_TX_FSR+0x2c>
   return val;
}
 8002034:	4630      	mov	r0, r6
 8002036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002038:	4606      	mov	r6, r0
 800203a:	e7ef      	b.n	800201c <getSn_TX_FSR+0x10>

0800203c <getSn_RX_RSR>:

datasize_t getSn_RX_RSR(uint8_t sn)
{
 800203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   datasize_t prev_val=-1,val=0;
 800203e:	2600      	movs	r6, #0
   do
   {
      prev_val = val;
      val = WIZCHIP_READ(_Sn_RX_RSR_(sn));
 8002040:	0140      	lsls	r0, r0, #5
 8002042:	f500 3509 	add.w	r5, r0, #140288	; 0x22400
 8002046:	3508      	adds	r5, #8
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_RX_RSR_(sn),1));
 8002048:	f505 7780 	add.w	r7, r5, #256	; 0x100
      val = WIZCHIP_READ(_Sn_RX_RSR_(sn));
 800204c:	4628      	mov	r0, r5
 800204e:	f7ff ff79 	bl	8001f44 <WIZCHIP_READ>
 8002052:	4604      	mov	r4, r0
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_RX_RSR_(sn),1));
 8002054:	4638      	mov	r0, r7
 8002056:	f7ff ff75 	bl	8001f44 <WIZCHIP_READ>
 800205a:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 800205e:	b200      	sxth	r0, r0
   }while (val != prev_val);
 8002060:	4286      	cmp	r6, r0
 8002062:	d101      	bne.n	8002068 <getSn_RX_RSR+0x2c>
   return val;
}
 8002064:	4630      	mov	r0, r6
 8002066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002068:	4606      	mov	r6, r0
 800206a:	e7ef      	b.n	800204c <getSn_RX_RSR+0x10>

0800206c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, datasize_t len)
{
 800206c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   datasize_t ptr = 0;
   uint32_t addrsel = 0;
   ptr = getSn_TX_WR(sn);
 8002070:	0086      	lsls	r6, r0, #2
 8002072:	00f5      	lsls	r5, r6, #3
 8002074:	f505 3503 	add.w	r5, r5, #134144	; 0x20c00
 8002078:	3508      	adds	r5, #8
 800207a:	4628      	mov	r0, r5
{
 800207c:	4690      	mov	r8, r2
 800207e:	4689      	mov	r9, r1
   ptr = getSn_TX_WR(sn);
 8002080:	f7ff ff60 	bl	8001f44 <WIZCHIP_READ>
 8002084:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8002088:	4604      	mov	r4, r0
 800208a:	4638      	mov	r0, r7
 800208c:	f7ff ff5a 	bl	8001f44 <WIZCHIP_READ>
 8002090:	eb00 2404 	add.w	r4, r0, r4, lsl #8
 8002094:	b2a4      	uxth	r4, r4
   addrsel = ((uint32_t)ptr << 8) + WIZCHIP_TXBUF_BLOCK(sn);
 8002096:	b220      	sxth	r0, r4
 8002098:	3602      	adds	r6, #2
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
   ptr += len;
 800209a:	4444      	add	r4, r8
   addrsel = ((uint32_t)ptr << 8) + WIZCHIP_TXBUF_BLOCK(sn);
 800209c:	0200      	lsls	r0, r0, #8
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800209e:	4642      	mov	r2, r8
 80020a0:	4649      	mov	r1, r9
 80020a2:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   ptr += len;
 80020a6:	b2a4      	uxth	r4, r4
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80020a8:	f7ff ff6a 	bl	8001f80 <WIZCHIP_WRITE_BUF>
   setSn_TX_WR(sn,ptr);
 80020ac:	0a21      	lsrs	r1, r4, #8
 80020ae:	4628      	mov	r0, r5
 80020b0:	f7ff ff24 	bl	8001efc <WIZCHIP_WRITE>
 80020b4:	b2e1      	uxtb	r1, r4
 80020b6:	4638      	mov	r0, r7
}
 80020b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_TX_WR(sn,ptr);
 80020bc:	f7ff bf1e 	b.w	8001efc <WIZCHIP_WRITE>

080020c0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, datasize_t len)
{
 80020c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020c4:	4689      	mov	r9, r1
   datasize_t ptr = 0;
   uint32_t addrsel = 0;
   if(len == 0) return;
 80020c6:	4690      	mov	r8, r2
 80020c8:	b32a      	cbz	r2, 8002116 <wiz_recv_data+0x56>
   ptr = getSn_RX_RD(sn);
 80020ca:	0086      	lsls	r6, r0, #2
 80020cc:	00f5      	lsls	r5, r6, #3
 80020ce:	f505 350a 	add.w	r5, r5, #141312	; 0x22800
 80020d2:	3508      	adds	r5, #8
 80020d4:	4628      	mov	r0, r5
 80020d6:	f7ff ff35 	bl	8001f44 <WIZCHIP_READ>
 80020da:	f505 7780 	add.w	r7, r5, #256	; 0x100
 80020de:	4604      	mov	r4, r0
 80020e0:	4638      	mov	r0, r7
 80020e2:	f7ff ff2f 	bl	8001f44 <WIZCHIP_READ>
 80020e6:	eb00 2404 	add.w	r4, r0, r4, lsl #8
 80020ea:	b2a4      	uxth	r4, r4
   addrsel = ((uint32_t)ptr << 8) + WIZCHIP_RXBUF_BLOCK(sn);
 80020ec:	b220      	sxth	r0, r4
 80020ee:	3603      	adds	r6, #3
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
   ptr += len;
 80020f0:	4444      	add	r4, r8
   addrsel = ((uint32_t)ptr << 8) + WIZCHIP_RXBUF_BLOCK(sn);
 80020f2:	0200      	lsls	r0, r0, #8
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80020f4:	4642      	mov	r2, r8
 80020f6:	4649      	mov	r1, r9
 80020f8:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   ptr += len;
 80020fc:	b2a4      	uxth	r4, r4
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80020fe:	f7ff ff65 	bl	8001fcc <WIZCHIP_READ_BUF>
   setSn_RX_RD(sn,ptr);
 8002102:	0a21      	lsrs	r1, r4, #8
 8002104:	4628      	mov	r0, r5
 8002106:	f7ff fef9 	bl	8001efc <WIZCHIP_WRITE>
 800210a:	b2e1      	uxtb	r1, r4
 800210c:	4638      	mov	r0, r7
}
 800210e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_RX_RD(sn,ptr);
 8002112:	f7ff bef3 	b.w	8001efc <WIZCHIP_WRITE>
 8002116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800211c <close>:
}  


int8_t close(uint8_t sn)
{
   CHECK_SOCKNUM();
 800211c:	2807      	cmp	r0, #7
{
 800211e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002120:	4605      	mov	r5, r0
   CHECK_SOCKNUM();
 8002122:	d82c      	bhi.n	800217e <close+0x62>
   setSn_CR(sn,Sn_CR_CLOSE);
 8002124:	0144      	lsls	r4, r0, #5
 8002126:	3408      	adds	r4, #8
 8002128:	f504 5780 	add.w	r7, r4, #4096	; 0x1000
 800212c:	2110      	movs	r1, #16
 800212e:	4638      	mov	r0, r7
 8002130:	f7ff fee4 	bl	8001efc <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 8002134:	4638      	mov	r0, r7
 8002136:	f7ff ff05 	bl	8001f44 <WIZCHIP_READ>
 800213a:	4606      	mov	r6, r0
 800213c:	2800      	cmp	r0, #0
 800213e:	d1f9      	bne.n	8002134 <close+0x18>
   /* clear all interrupt of SOCKETn. */
   setSn_IRCLR(sn, 0xFF);
 8002140:	21ff      	movs	r1, #255	; 0xff
 8002142:	f504 5020 	add.w	r0, r4, #10240	; 0x2800
 8002146:	f7ff fed9 	bl	8001efc <WIZCHIP_WRITE>
   /* Release the sock_io_mode of SOCKETn. */
   sock_io_mode &= ~(1<<sn); 
 800214a:	2301      	movs	r3, #1
 800214c:	40ab      	lsls	r3, r5
 800214e:	43db      	mvns	r3, r3
 8002150:	490c      	ldr	r1, [pc, #48]	; (8002184 <close+0x68>)
 8002152:	b21b      	sxth	r3, r3
 8002154:	880a      	ldrh	r2, [r1, #0]
   sock_remained_size[sn] = 0;
   sock_is_sending &= ~(1<<sn);
   sock_pack_info[sn] = PACK_NONE;
   while(getSn_SR(sn) != SOCK_CLOSED);
 8002156:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
   sock_io_mode &= ~(1<<sn); 
 800215a:	401a      	ands	r2, r3
 800215c:	800a      	strh	r2, [r1, #0]
   sock_remained_size[sn] = 0;
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <close+0x6c>)
 8002160:	f822 6015 	strh.w	r6, [r2, r5, lsl #1]
   sock_is_sending &= ~(1<<sn);
 8002164:	4a09      	ldr	r2, [pc, #36]	; (800218c <close+0x70>)
 8002166:	8811      	ldrh	r1, [r2, #0]
 8002168:	400b      	ands	r3, r1
 800216a:	8013      	strh	r3, [r2, #0]
   sock_pack_info[sn] = PACK_NONE;
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <close+0x74>)
 800216e:	555e      	strb	r6, [r3, r5]
   while(getSn_SR(sn) != SOCK_CLOSED);
 8002170:	4620      	mov	r0, r4
 8002172:	f7ff fee7 	bl	8001f44 <WIZCHIP_READ>
 8002176:	2800      	cmp	r0, #0
 8002178:	d1fa      	bne.n	8002170 <close+0x54>
   return SOCK_OK;
 800217a:	2001      	movs	r0, #1
 800217c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   CHECK_SOCKNUM();
 800217e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002184:	20000168 	.word	0x20000168
 8002188:	20000174 	.word	0x20000174
 800218c:	2000016a 	.word	0x2000016a
 8002190:	2000016c 	.word	0x2000016c

08002194 <socket>:
   CHECK_SOCKNUM(); 
 8002194:	2807      	cmp	r0, #7
{ 
 8002196:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800219a:	4604      	mov	r4, r0
 800219c:	4688      	mov	r8, r1
 800219e:	4617      	mov	r7, r2
 80021a0:	461d      	mov	r5, r3
   CHECK_SOCKNUM(); 
 80021a2:	f200 80c5 	bhi.w	8002330 <socket+0x19c>
   switch (protocol & 0x0F)
 80021a6:	f001 030f 	and.w	r3, r1, #15
 80021aa:	3b01      	subs	r3, #1
 80021ac:	2b0d      	cmp	r3, #13
 80021ae:	f200 80c2 	bhi.w	8002336 <socket+0x1a2>
 80021b2:	e8df f003 	tbb	[pc, r3]
 80021b6:	4f07      	.short	0x4f07
 80021b8:	c0c0c04f 	.word	0xc0c0c04f
 80021bc:	4f1ec04f 	.word	0x4f1ec04f
 80021c0:	4f2dc04f 	.word	0x4f2dc04f
         getSIPR(taddr);
 80021c4:	2204      	movs	r2, #4
 80021c6:	4669      	mov	r1, sp
 80021c8:	485e      	ldr	r0, [pc, #376]	; (8002344 <socket+0x1b0>)
 80021ca:	f7ff feff 	bl	8001fcc <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 4);
 80021ce:	f89d 3000 	ldrb.w	r3, [sp]
 80021d2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80021d6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80021da:	440b      	add	r3, r1
 80021dc:	4413      	add	r3, r2
 80021de:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80021e2:	4413      	add	r3, r2
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	bbab      	cbnz	r3, 8002254 <socket+0xc0>
 80021e8:	f06f 000b 	mvn.w	r0, #11
}  
 80021ec:	b004      	add	sp, #16
 80021ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         getLLAR(taddr);
 80021f2:	2210      	movs	r2, #16
 80021f4:	4669      	mov	r1, sp
 80021f6:	4854      	ldr	r0, [pc, #336]	; (8002348 <socket+0x1b4>)
 80021f8:	f7ff fee8 	bl	8001fcc <WIZCHIP_READ_BUF>
 80021fc:	2200      	movs	r2, #0
         CHECK_IPZERO(taddr, 16);
 80021fe:	4613      	mov	r3, r2
 8002200:	f81d 1002 	ldrb.w	r1, [sp, r2]
 8002204:	3201      	adds	r2, #1
 8002206:	440b      	add	r3, r1
 8002208:	2a10      	cmp	r2, #16
 800220a:	b29b      	uxth	r3, r3
 800220c:	d1f8      	bne.n	8002200 <socket+0x6c>
 800220e:	e7ea      	b.n	80021e6 <socket+0x52>
         getSIPR(taddr);
 8002210:	2204      	movs	r2, #4
 8002212:	4669      	mov	r1, sp
 8002214:	484b      	ldr	r0, [pc, #300]	; (8002344 <socket+0x1b0>)
 8002216:	f7ff fed9 	bl	8001fcc <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 4);
 800221a:	f89d 3000 	ldrb.w	r3, [sp]
 800221e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8002222:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8002226:	440b      	add	r3, r1
 8002228:	4413      	add	r3, r2
 800222a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800222e:	4413      	add	r3, r2
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0d8      	beq.n	80021e8 <socket+0x54>
         getLLAR(taddr);
 8002236:	2210      	movs	r2, #16
 8002238:	4669      	mov	r1, sp
 800223a:	4843      	ldr	r0, [pc, #268]	; (8002348 <socket+0x1b4>)
 800223c:	f7ff fec6 	bl	8001fcc <WIZCHIP_READ_BUF>
 8002240:	2200      	movs	r2, #0
         CHECK_IPZERO(taddr, 16);
 8002242:	4613      	mov	r3, r2
 8002244:	f81d 1002 	ldrb.w	r1, [sp, r2]
 8002248:	3201      	adds	r2, #1
 800224a:	440b      	add	r3, r1
 800224c:	2a10      	cmp	r2, #16
 800224e:	b29b      	uxth	r3, r3
 8002250:	d1f8      	bne.n	8002244 <socket+0xb0>
 8002252:	e7c8      	b.n	80021e6 <socket+0x52>
   if((flag & 0x04)) return SOCKERR_SOCKFLAG;
 8002254:	076a      	lsls	r2, r5, #29
 8002256:	d471      	bmi.n	800233c <socket+0x1a8>
   if(flag != 0)
 8002258:	b195      	cbz	r5, 8002280 <socket+0xec>
 800225a:	f1b8 0f0d 	cmp.w	r8, #13
 800225e:	d80f      	bhi.n	8002280 <socket+0xec>
 8002260:	2301      	movs	r3, #1
 8002262:	f242 2202 	movw	r2, #8706	; 0x2202
 8002266:	fa03 f308 	lsl.w	r3, r3, r8
 800226a:	4213      	tst	r3, r2
 800226c:	d15d      	bne.n	800232a <socket+0x196>
 800226e:	f640 0208 	movw	r2, #2056	; 0x808
 8002272:	4213      	tst	r3, r2
 8002274:	d162      	bne.n	800233c <socket+0x1a8>
 8002276:	061b      	lsls	r3, r3, #24
 8002278:	d502      	bpl.n	8002280 <socket+0xec>
            if((flag & (SF_DHA_MANUAL | SF_FORCE_ARP)) != 0)
 800227a:	f015 0f03 	tst.w	r5, #3
            if((flag & (SF_MULTI_ENABLE | SF_UNI_BLOCK)) !=0)
 800227e:	d15d      	bne.n	800233c <socket+0x1a8>
   close(sn);
 8002280:	4620      	mov	r0, r4
   setSn_MR(sn,(protocol | (flag & 0xF0)));
 8002282:	0166      	lsls	r6, r4, #5
   close(sn);
 8002284:	f7ff ff4a 	bl	800211c <close>
   setSn_MR(sn,(protocol | (flag & 0xF0)));
 8002288:	3608      	adds	r6, #8
 800228a:	f025 010f 	bic.w	r1, r5, #15
 800228e:	ea41 0108 	orr.w	r1, r1, r8
 8002292:	4630      	mov	r0, r6
 8002294:	f7ff fe32 	bl	8001efc <WIZCHIP_WRITE>
   setSn_MR2(sn, flag & 0x03);  
 8002298:	f005 0103 	and.w	r1, r5, #3
 800229c:	f506 30a2 	add.w	r0, r6, #82944	; 0x14400
 80022a0:	f7ff fe2c 	bl	8001efc <WIZCHIP_WRITE>
   if(!port)
 80022a4:	b96f      	cbnz	r7, 80022c2 <socket+0x12e>
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80022a6:	f64f 71f0 	movw	r1, #65520	; 0xfff0
      port = sock_any_port++;
 80022aa:	4a28      	ldr	r2, [pc, #160]	; (800234c <socket+0x1b8>)
 80022ac:	8817      	ldrh	r7, [r2, #0]
 80022ae:	1c7b      	adds	r3, r7, #1
 80022b0:	b29b      	uxth	r3, r3
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80022b2:	428b      	cmp	r3, r1
 80022b4:	bf05      	ittet	eq
 80022b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80022ba:	f64f 77ef 	movweq	r7, #65519	; 0xffef
      port = sock_any_port++;
 80022be:	8013      	strhne	r3, [r2, #0]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80022c0:	8013      	strheq	r3, [r2, #0]
   setSn_PORTR(sn,port);
 80022c2:	f506 388a 	add.w	r8, r6, #70656	; 0x11400
 80022c6:	0a39      	lsrs	r1, r7, #8
 80022c8:	4640      	mov	r0, r8
 80022ca:	f7ff fe17 	bl	8001efc <WIZCHIP_WRITE>
 80022ce:	b2f9      	uxtb	r1, r7
 80022d0:	f508 7080 	add.w	r0, r8, #256	; 0x100
   setSn_CR(sn,Sn_CR_OPEN);
 80022d4:	f506 5780 	add.w	r7, r6, #4096	; 0x1000
   setSn_PORTR(sn,port);
 80022d8:	f7ff fe10 	bl	8001efc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80022dc:	2101      	movs	r1, #1
 80022de:	4638      	mov	r0, r7
 80022e0:	f7ff fe0c 	bl	8001efc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80022e4:	4638      	mov	r0, r7
 80022e6:	f7ff fe2d 	bl	8001f44 <WIZCHIP_READ>
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d1fa      	bne.n	80022e4 <socket+0x150>
   sock_io_mode &= ~(1 <<sn);
 80022ee:	2301      	movs	r3, #1
 80022f0:	40a3      	lsls	r3, r4
 80022f2:	43db      	mvns	r3, r3
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
 80022f4:	4916      	ldr	r1, [pc, #88]	; (8002350 <socket+0x1bc>)
   sock_io_mode &= ~(1 <<sn);
 80022f6:	b21b      	sxth	r3, r3
 80022f8:	880a      	ldrh	r2, [r1, #0]
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
 80022fa:	f005 0501 	and.w	r5, r5, #1
   sock_io_mode &= ~(1 <<sn);
 80022fe:	401a      	ands	r2, r3
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
 8002300:	40a5      	lsls	r5, r4
 8002302:	4315      	orrs	r5, r2
   sock_is_sending &= ~(1<<sn);
 8002304:	4a13      	ldr	r2, [pc, #76]	; (8002354 <socket+0x1c0>)
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
 8002306:	800d      	strh	r5, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 8002308:	8811      	ldrh	r1, [r2, #0]
   while(getSn_SR(sn) == SOCK_CLOSED) ;
 800230a:	f506 5640 	add.w	r6, r6, #12288	; 0x3000
   sock_is_sending &= ~(1<<sn);
 800230e:	400b      	ands	r3, r1
 8002310:	8013      	strh	r3, [r2, #0]
   sock_remained_size[sn] = 0;
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <socket+0x1c4>)
 8002314:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <socket+0x1c8>)
 800231a:	5518      	strb	r0, [r3, r4]
   while(getSn_SR(sn) == SOCK_CLOSED) ;
 800231c:	4630      	mov	r0, r6
 800231e:	f7ff fe11 	bl	8001f44 <WIZCHIP_READ>
 8002322:	2800      	cmp	r0, #0
 8002324:	d0fa      	beq.n	800231c <socket+0x188>
   return sn;
 8002326:	b260      	sxtb	r0, r4
 8002328:	e760      	b.n	80021ec <socket+0x58>
            if((flag & (SF_MULTI_ENABLE | SF_UNI_BLOCK)) !=0)
 800232a:	f015 0f90 	tst.w	r5, #144	; 0x90
 800232e:	e7a6      	b.n	800227e <socket+0xea>
   CHECK_SOCKNUM(); 
 8002330:	f04f 30ff 	mov.w	r0, #4294967295
 8002334:	e75a      	b.n	80021ec <socket+0x58>
        return SOCKERR_SOCKMODE;
 8002336:	f06f 0004 	mvn.w	r0, #4
 800233a:	e757      	b.n	80021ec <socket+0x58>
   if((flag & 0x04)) return SOCKERR_SOCKFLAG;
 800233c:	f06f 0005 	mvn.w	r0, #5
 8002340:	e754      	b.n	80021ec <socket+0x58>
 8002342:	bf00      	nop
 8002344:	00413800 	.word	0x00413800
 8002348:	00414000 	.word	0x00414000
 800234c:	20000078 	.word	0x20000078
 8002350:	20000168 	.word	0x20000168
 8002354:	2000016a 	.word	0x2000016a
 8002358:	20000174 	.word	0x20000174
 800235c:	2000016c 	.word	0x2000016c

08002360 <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port, uint8_t addrlen)
{ 

   CHECK_SOCKNUM();
 8002360:	2807      	cmp	r0, #7
{ 
 8002362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002366:	4607      	mov	r7, r0
 8002368:	460d      	mov	r5, r1
 800236a:	4691      	mov	r9, r2
 800236c:	4698      	mov	r8, r3
   CHECK_SOCKNUM();
 800236e:	d87d      	bhi.n	800246c <connect+0x10c>
   CHECK_TCPMODE();
 8002370:	0144      	lsls	r4, r0, #5
 8002372:	3408      	adds	r4, #8
 8002374:	4620      	mov	r0, r4
 8002376:	f7ff fde5 	bl	8001f44 <WIZCHIP_READ>
 800237a:	f000 0003 	and.w	r0, r0, #3
 800237e:	2801      	cmp	r0, #1
 8002380:	d003      	beq.n	800238a <connect+0x2a>
 8002382:	f06f 0004 	mvn.w	r0, #4
 8002386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   CHECK_SOCKINIT();
 800238a:	f504 5640 	add.w	r6, r4, #12288	; 0x3000
 800238e:	4630      	mov	r0, r6
 8002390:	f7ff fdd8 	bl	8001f44 <WIZCHIP_READ>
 8002394:	2813      	cmp	r0, #19
 8002396:	d16d      	bne.n	8002474 <connect+0x114>
 8002398:	4629      	mov	r1, r5
 800239a:	2300      	movs	r3, #0
  
   CHECK_IPZERO(addr, addrlen);
 800239c:	1b4a      	subs	r2, r1, r5
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	4590      	cmp	r8, r2
 80023a2:	d83b      	bhi.n	800241c <connect+0xbc>
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d069      	beq.n	800247c <connect+0x11c>
   if(port == 0)
 80023a8:	f1b9 0f00 	cmp.w	r9, #0
 80023ac:	d06a      	beq.n	8002484 <connect+0x124>
	   return SOCKERR_PORTZERO;

   setSn_DPORTR(sn, port);
 80023ae:	f504 3aa0 	add.w	sl, r4, #81920	; 0x14000
 80023b2:	ea4f 2119 	mov.w	r1, r9, lsr #8
 80023b6:	4650      	mov	r0, sl
 80023b8:	f7ff fda0 	bl	8001efc <WIZCHIP_WRITE>
 80023bc:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80023c0:	fa5f f189 	uxtb.w	r1, r9
 80023c4:	f7ff fd9a 	bl	8001efc <WIZCHIP_WRITE>
  
   if (addrlen == 16)     // addrlen=16, Sn_MR_TCP6(1001), Sn_MR_TCPD(1101))
 80023c8:	f1b8 0f10 	cmp.w	r8, #16
   {
      if( getSn_MR(sn) & 0x08)  
 80023cc:	4620      	mov	r0, r4
   if (addrlen == 16)     // addrlen=16, Sn_MR_TCP6(1001), Sn_MR_TCPD(1101))
 80023ce:	d12a      	bne.n	8002426 <connect+0xc6>
      if( getSn_MR(sn) & 0x08)  
 80023d0:	f7ff fdb8 	bl	8001f44 <WIZCHIP_READ>
 80023d4:	0701      	lsls	r1, r0, #28
 80023d6:	d5d4      	bpl.n	8002382 <connect+0x22>
      {
         setSn_DIP6R(sn,addr);
 80023d8:	4629      	mov	r1, r5
 80023da:	4642      	mov	r2, r8
 80023dc:	f504 3098 	add.w	r0, r4, #77824	; 0x13000
 80023e0:	f7ff fdce 	bl	8001f80 <WIZCHIP_WRITE_BUF>
         setSn_CR(sn,Sn_CR_CONNECT6);
 80023e4:	2184      	movs	r1, #132	; 0x84
   } 
   else           // addrlen=4, Sn_MR_TCP4(0001), Sn_MR_TCPD(1101)
   {
      if(getSn_MR(sn) == Sn_MR_TCP6) return SOCKERR_SOCKMODE;
      setSn_DIPR(sn,addr);
      setSn_CR(sn,Sn_CR_CONNECT);
 80023e6:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 80023ea:	f7ff fd87 	bl	8001efc <WIZCHIP_WRITE>
   }
   while(getSn_CR(sn));
 80023ee:	f504 5580 	add.w	r5, r4, #4096	; 0x1000
 80023f2:	4628      	mov	r0, r5
 80023f4:	f7ff fda6 	bl	8001f44 <WIZCHIP_READ>
 80023f8:	2800      	cmp	r0, #0
 80023fa:	d1fa      	bne.n	80023f2 <connect+0x92>

   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80023fc:	4b23      	ldr	r3, [pc, #140]	; (800248c <connect+0x12c>)
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	fa43 f707 	asr.w	r7, r3, r7
 8002404:	07fa      	lsls	r2, r7, #31
 8002406:	d42f      	bmi.n	8002468 <connect+0x108>

   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
      if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002408:	f504 5500 	add.w	r5, r4, #8192	; 0x2000
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 800240c:	4630      	mov	r0, r6
 800240e:	f7ff fd99 	bl	8001f44 <WIZCHIP_READ>
 8002412:	2817      	cmp	r0, #23
 8002414:	d113      	bne.n	800243e <connect+0xde>
      if (getSn_SR(sn) == SOCK_CLOSED)
      {
         return SOCKERR_SOCKCLOSED;
      }
   } 
   return SOCK_OK;
 8002416:	2001      	movs	r0, #1
 8002418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   CHECK_IPZERO(addr, addrlen);
 800241c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002420:	4413      	add	r3, r2
 8002422:	b29b      	uxth	r3, r3
 8002424:	e7ba      	b.n	800239c <connect+0x3c>
      if(getSn_MR(sn) == Sn_MR_TCP6) return SOCKERR_SOCKMODE;
 8002426:	f7ff fd8d 	bl	8001f44 <WIZCHIP_READ>
 800242a:	2809      	cmp	r0, #9
 800242c:	d0a9      	beq.n	8002382 <connect+0x22>
      setSn_DIPR(sn,addr);
 800242e:	4629      	mov	r1, r5
 8002430:	2204      	movs	r2, #4
 8002432:	f504 3090 	add.w	r0, r4, #73728	; 0x12000
 8002436:	f7ff fda3 	bl	8001f80 <WIZCHIP_WRITE_BUF>
      setSn_CR(sn,Sn_CR_CONNECT);
 800243a:	2104      	movs	r1, #4
 800243c:	e7d3      	b.n	80023e6 <connect+0x86>
      if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800243e:	4628      	mov	r0, r5
 8002440:	f7ff fd80 	bl	8001f44 <WIZCHIP_READ>
 8002444:	0703      	lsls	r3, r0, #28
 8002446:	d508      	bpl.n	800245a <connect+0xfa>
         setSn_IRCLR(sn, Sn_IR_TIMEOUT);
 8002448:	f504 5020 	add.w	r0, r4, #10240	; 0x2800
 800244c:	2108      	movs	r1, #8
 800244e:	f7ff fd55 	bl	8001efc <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8002452:	f06f 000c 	mvn.w	r0, #12
 8002456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (getSn_SR(sn) == SOCK_CLOSED)
 800245a:	4630      	mov	r0, r6
 800245c:	f7ff fd72 	bl	8001f44 <WIZCHIP_READ>
 8002460:	2800      	cmp	r0, #0
 8002462:	d1d3      	bne.n	800240c <connect+0xac>
         return SOCKERR_SOCKCLOSED;
 8002464:	f06f 0003 	mvn.w	r0, #3
}
 8002468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   CHECK_SOCKNUM();
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   CHECK_SOCKINIT();
 8002474:	f06f 0002 	mvn.w	r0, #2
 8002478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   CHECK_IPZERO(addr, addrlen);
 800247c:	f06f 000b 	mvn.w	r0, #11
 8002480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	   return SOCKERR_PORTZERO;
 8002484:	f06f 000a 	mvn.w	r0, #10
 8002488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800248c:	20000168 	.word	0x20000168

08002490 <send>:
   return SOCK_OK;
}


datasize_t send(uint8_t sn, uint8_t * buf, datasize_t len)
{
 8002490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/

   freesize = getSn_TxMAX(sn);
 8002494:	0145      	lsls	r5, r0, #5
 8002496:	3508      	adds	r5, #8
{
 8002498:	4607      	mov	r7, r0
   freesize = getSn_TxMAX(sn);
 800249a:	f505 3000 	add.w	r0, r5, #131072	; 0x20000
{
 800249e:	4616      	mov	r6, r2
 80024a0:	4688      	mov	r8, r1
   freesize = getSn_TxMAX(sn);
 80024a2:	f7ff fd4f 	bl	8001f44 <WIZCHIP_READ>
 80024a6:	0280      	lsls	r0, r0, #10
 80024a8:	b204      	sxth	r4, r0
 80024aa:	42b4      	cmp	r4, r6
 80024ac:	bfa8      	it	ge
 80024ae:	4634      	movge	r4, r6
 80024b0:	2601      	movs	r6, #1
      {
         if(tmp == SOCK_CLOSED) close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if(len <= freesize) break;
      if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  
 80024b2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002578 <send+0xe8>
 80024b6:	40be      	lsls	r6, r7
      tmp = getSn_SR(sn);
 80024b8:	f505 5a40 	add.w	sl, r5, #12288	; 0x3000
      freesize = (datasize_t)getSn_TX_FSR(sn);
 80024bc:	4638      	mov	r0, r7
 80024be:	f7ff fda5 	bl	800200c <getSn_TX_FSR>
 80024c2:	4683      	mov	fp, r0
      tmp = getSn_SR(sn);
 80024c4:	4650      	mov	r0, sl
 80024c6:	f7ff fd3d 	bl	8001f44 <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80024ca:	2817      	cmp	r0, #23
 80024cc:	d007      	beq.n	80024de <send+0x4e>
 80024ce:	281c      	cmp	r0, #28
 80024d0:	d005      	beq.n	80024de <send+0x4e>
         if(tmp == SOCK_CLOSED) close(sn);
 80024d2:	b3b0      	cbz	r0, 8002542 <send+0xb2>
         return SOCKERR_SOCKSTATUS;
 80024d4:	f06f 0406 	mvn.w	r4, #6
 
   while(getSn_CR(sn));   // wait to process the command...
   sock_is_sending |= (1<<sn);
 
   return len;
}
 80024d8:	4620      	mov	r0, r4
 80024da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(len <= freesize) break;
 80024de:	455c      	cmp	r4, fp
 80024e0:	dd05      	ble.n	80024ee <send+0x5e>
      if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  
 80024e2:	f8b9 3000 	ldrh.w	r3, [r9]
 80024e6:	4233      	tst	r3, r6
 80024e8:	d0e8      	beq.n	80024bc <send+0x2c>
 80024ea:	2400      	movs	r4, #0
 80024ec:	e7f4      	b.n	80024d8 <send+0x48>
   wiz_send_data(sn, buf, len);
 80024ee:	4622      	mov	r2, r4
 80024f0:	4641      	mov	r1, r8
 80024f2:	4638      	mov	r0, r7
 80024f4:	f7ff fdba 	bl	800206c <wiz_send_data>
   if(sock_is_sending & (1<<sn))
 80024f8:	4a1e      	ldr	r2, [pc, #120]	; (8002574 <send+0xe4>)
 80024fa:	8813      	ldrh	r3, [r2, #0]
 80024fc:	4690      	mov	r8, r2
 80024fe:	413b      	asrs	r3, r7
 8002500:	f013 0f01 	tst.w	r3, #1
 8002504:	d130      	bne.n	8002568 <send+0xd8>
   setSn_CR(sn,Sn_CR_SEND);
 8002506:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 800250a:	2120      	movs	r1, #32
 800250c:	4628      	mov	r0, r5
 800250e:	f7ff fcf5 	bl	8001efc <WIZCHIP_WRITE>
   while(getSn_CR(sn));   // wait to process the command...
 8002512:	4628      	mov	r0, r5
 8002514:	f7ff fd16 	bl	8001f44 <WIZCHIP_READ>
 8002518:	2800      	cmp	r0, #0
 800251a:	d1fa      	bne.n	8002512 <send+0x82>
   sock_is_sending |= (1<<sn);
 800251c:	f8b8 3000 	ldrh.w	r3, [r8]
 8002520:	431e      	orrs	r6, r3
 8002522:	f8a8 6000 	strh.w	r6, [r8]
   return len;
 8002526:	e7d7      	b.n	80024d8 <send+0x48>
         tmp = getSn_SR(sn);
 8002528:	4650      	mov	r0, sl
 800252a:	f7ff fd0b 	bl	8001f44 <WIZCHIP_READ>
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 800252e:	2817      	cmp	r0, #23
 8002530:	d00b      	beq.n	800254a <send+0xba>
 8002532:	281c      	cmp	r0, #28
 8002534:	d009      	beq.n	800254a <send+0xba>
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 8002536:	b120      	cbz	r0, 8002542 <send+0xb2>
 8002538:	4648      	mov	r0, r9
 800253a:	f7ff fd03 	bl	8001f44 <WIZCHIP_READ>
 800253e:	0702      	lsls	r2, r0, #28
 8002540:	d5c8      	bpl.n	80024d4 <send+0x44>
         if(tmp == SOCK_CLOSED) close(sn);
 8002542:	4638      	mov	r0, r7
 8002544:	f7ff fdea 	bl	800211c <close>
 8002548:	e7c4      	b.n	80024d4 <send+0x44>
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800254a:	f8bb 3000 	ldrh.w	r3, [fp]
 800254e:	4233      	tst	r3, r6
 8002550:	d1cb      	bne.n	80024ea <send+0x5a>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8002552:	4648      	mov	r0, r9
 8002554:	f7ff fcf6 	bl	8001f44 <WIZCHIP_READ>
 8002558:	06c3      	lsls	r3, r0, #27
 800255a:	d5e5      	bpl.n	8002528 <send+0x98>
      setSn_IRCLR(sn, Sn_IR_SENDOK);
 800255c:	2110      	movs	r1, #16
 800255e:	f505 5020 	add.w	r0, r5, #10240	; 0x2800
 8002562:	f7ff fccb 	bl	8001efc <WIZCHIP_WRITE>
 8002566:	e7ce      	b.n	8002506 <send+0x76>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8002568:	f505 5900 	add.w	r9, r5, #8192	; 0x2000
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800256c:	f8df b008 	ldr.w	fp, [pc, #8]	; 8002578 <send+0xe8>
 8002570:	e7ef      	b.n	8002552 <send+0xc2>
 8002572:	bf00      	nop
 8002574:	2000016a 	.word	0x2000016a
 8002578:	20000168 	.word	0x20000168

0800257c <recv>:


datasize_t recv(uint8_t sn, uint8_t * buf, datasize_t len)
{
 800257c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE();
   //CHECK_SOCKDATA();
   /************/
 
   recvsize = getSn_RxMAX(sn); 
 8002580:	0145      	lsls	r5, r0, #5
 8002582:	3508      	adds	r5, #8
{
 8002584:	4680      	mov	r8, r0
   recvsize = getSn_RxMAX(sn); 
 8002586:	f505 3008 	add.w	r0, r5, #139264	; 0x22000
{
 800258a:	4691      	mov	r9, r2
 800258c:	460f      	mov	r7, r1
   recvsize = getSn_RxMAX(sn); 
 800258e:	f7ff fcd9 	bl	8001f44 <WIZCHIP_READ>
 8002592:	f04f 0a01 	mov.w	sl, #1
 8002596:	4604      	mov	r4, r0
      {
         if(tmp == SOCK_CLOSED) close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if(recvsize) break;
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002598:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <recv+0x94>)
 800259a:	fa0a fa08 	lsl.w	sl, sl, r8
      tmp = getSn_SR(sn);
 800259e:	f505 5b40 	add.w	fp, r5, #12288	; 0x3000
      recvsize = (datasize_t)getSn_RX_RSR(sn);
 80025a2:	4640      	mov	r0, r8
 80025a4:	9201      	str	r2, [sp, #4]
 80025a6:	f7ff fd49 	bl	800203c <getSn_RX_RSR>
 80025aa:	4606      	mov	r6, r0
      tmp = getSn_SR(sn);
 80025ac:	4658      	mov	r0, fp
 80025ae:	f7ff fcc9 	bl	8001f44 <WIZCHIP_READ>
      if (tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT)
 80025b2:	2817      	cmp	r0, #23
 80025b4:	9a01      	ldr	r2, [sp, #4]
 80025b6:	d008      	beq.n	80025ca <recv+0x4e>
 80025b8:	281c      	cmp	r0, #28
 80025ba:	d006      	beq.n	80025ca <recv+0x4e>
         if(tmp == SOCK_CLOSED) close(sn);
 80025bc:	b910      	cbnz	r0, 80025c4 <recv+0x48>
 80025be:	4640      	mov	r0, r8
 80025c0:	f7ff fdac 	bl	800211c <close>
         return SOCKERR_SOCKSTATUS;
 80025c4:	f06f 0606 	mvn.w	r6, #6
 80025c8:	e004      	b.n	80025d4 <recv+0x58>
      if(recvsize) break;
 80025ca:	b93e      	cbnz	r6, 80025dc <recv+0x60>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80025cc:	8813      	ldrh	r3, [r2, #0]
 80025ce:	ea13 0f0a 	tst.w	r3, sl
 80025d2:	d0e6      	beq.n	80025a2 <recv+0x26>
   if(recvsize < len) len = recvsize;
   wiz_recv_data(sn, buf, len); 
   setSn_CR(sn,Sn_CR_RECV); 
   while(getSn_CR(sn));  
   return len;
}
 80025d4:	4630      	mov	r0, r6
 80025d6:	b003      	add	sp, #12
 80025d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   recvsize = getSn_RxMAX(sn); 
 80025dc:	02a0      	lsls	r0, r4, #10
 80025de:	b200      	sxth	r0, r0
 80025e0:	4548      	cmp	r0, r9
 80025e2:	bfa8      	it	ge
 80025e4:	4648      	movge	r0, r9
 80025e6:	42b0      	cmp	r0, r6
 80025e8:	bfa8      	it	ge
 80025ea:	4630      	movge	r0, r6
 80025ec:	b206      	sxth	r6, r0
   wiz_recv_data(sn, buf, len); 
 80025ee:	4639      	mov	r1, r7
 80025f0:	4640      	mov	r0, r8
 80025f2:	4632      	mov	r2, r6
   setSn_CR(sn,Sn_CR_RECV); 
 80025f4:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
   wiz_recv_data(sn, buf, len); 
 80025f8:	f7ff fd62 	bl	80020c0 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 80025fc:	2140      	movs	r1, #64	; 0x40
 80025fe:	4628      	mov	r0, r5
 8002600:	f7ff fc7c 	bl	8001efc <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 8002604:	4628      	mov	r0, r5
 8002606:	f7ff fc9d 	bl	8001f44 <WIZCHIP_READ>
 800260a:	2800      	cmp	r0, #0
 800260c:	d1fa      	bne.n	8002604 <recv+0x88>
 800260e:	e7e1      	b.n	80025d4 <recv+0x58>
 8002610:	20000168 	.word	0x20000168

08002614 <wizchip_cs_deselect>:
 * @details @ref wizchip_cs_deselect() provides the default de-selection @ref _WIZCHIP_, \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_select()
 */
void wizchip_cs_deselect(void)   {}
 8002614:	4770      	bx	lr

08002616 <wizchip_spi_read>:
 * @details @ref wizchip_spi_read() provides the default read one byte data from SPI of @ref _WIZCHIP_,\n
 *          but it is null function.
 * @return uint8_t 
 * @todo It should be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
uint8_t wizchip_spi_read(void)        {return 0;}
 8002616:	2000      	movs	r0, #0
 8002618:	4770      	bx	lr

0800261a <wizchip_spi_write>:
 *          but it is null function.
 * @param wb uint8_t data to be written
 * @return void 
 * @todo It should be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_write(uint8_t wb) {}
 800261a:	4770      	bx	lr

0800261c <wizchip_spi_read_buf>:
 * @return void
 * @note It is use @ref wizchip_spi_read() as default. \n
 *       It can be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_read_buf(uint8_t* buf, datasize_t len)
{
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	4605      	mov	r5, r0
 8002620:	460e      	mov	r6, r1
   for(datasize_t i=0; i < len; i++) *buf++ = WIZCHIP.IF.SPI._read_byte();
 8002622:	4604      	mov	r4, r0
 8002624:	4f05      	ldr	r7, [pc, #20]	; (800263c <wizchip_spi_read_buf+0x20>)
 8002626:	1b63      	subs	r3, r4, r5
 8002628:	b21b      	sxth	r3, r3
 800262a:	429e      	cmp	r6, r3
 800262c:	dc00      	bgt.n	8002630 <wizchip_spi_read_buf+0x14>
}
 800262e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   for(datasize_t i=0; i < len; i++) *buf++ = WIZCHIP.IF.SPI._read_byte();
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	4798      	blx	r3
 8002634:	f804 0b01 	strb.w	r0, [r4], #1
 8002638:	e7f5      	b.n	8002626 <wizchip_spi_read_buf+0xa>
 800263a:	bf00      	nop
 800263c:	2000007c 	.word	0x2000007c

08002640 <wizchip_spi_write_buf>:
 * @return void
 * @note It is use @ref wizchip_spi_write() as default. \n
 *       It can be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_write_buf(uint8_t* buf, datasize_t len)
{
 8002640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002642:	4605      	mov	r5, r0
 8002644:	460e      	mov	r6, r1
   for(datasize_t i=0; i < len; i++) WIZCHIP.IF.SPI._write_byte(*buf++);
 8002646:	4604      	mov	r4, r0
 8002648:	4f05      	ldr	r7, [pc, #20]	; (8002660 <wizchip_spi_write_buf+0x20>)
 800264a:	1b63      	subs	r3, r4, r5
 800264c:	b21b      	sxth	r3, r3
 800264e:	429e      	cmp	r6, r3
 8002650:	dc00      	bgt.n	8002654 <wizchip_spi_write_buf+0x14>
}
 8002652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   for(datasize_t i=0; i < len; i++) WIZCHIP.IF.SPI._write_byte(*buf++);
 8002654:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	4798      	blx	r3
 800265c:	e7f5      	b.n	800264a <wizchip_spi_write_buf+0xa>
 800265e:	bf00      	nop
 8002660:	2000007c 	.word	0x2000007c

08002664 <wizchip_cs_select>:
 8002664:	4770      	bx	lr

08002666 <wizchip_cris_enter>:
 8002666:	4770      	bx	lr

08002668 <wizchip_cris_exit>:
 8002668:	4770      	bx	lr
	...

0800266c <reg_wizchip_cs_cbfunc>:
   if(!cris_ex)   WIZCHIP.CRIS._e_x_i_t_  = wizchip_cris_exit;
   else           WIZCHIP.CRIS._e_x_i_t_  = cris_ex;
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <reg_wizchip_cs_cbfunc+0x18>)
   if(!cs_sel)    WIZCHIP.CS._s_e_l_e_c_t_   = wizchip_cs_select;
 800266e:	b928      	cbnz	r0, 800267c <reg_wizchip_cs_cbfunc+0x10>
 8002670:	4a05      	ldr	r2, [pc, #20]	; (8002688 <reg_wizchip_cs_cbfunc+0x1c>)
 8002672:	611a      	str	r2, [r3, #16]
   else           WIZCHIP.CS._s_e_l_e_c_t_   = cs_sel; 
   if(!cs_desel)  WIZCHIP.CS._d_e_s_e_l_e_c_t_ = wizchip_cs_deselect;
 8002674:	b921      	cbnz	r1, 8002680 <reg_wizchip_cs_cbfunc+0x14>
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <reg_wizchip_cs_cbfunc+0x20>)
 8002678:	615a      	str	r2, [r3, #20]
 800267a:	4770      	bx	lr
   else           WIZCHIP.CS._s_e_l_e_c_t_   = cs_sel; 
 800267c:	6118      	str	r0, [r3, #16]
 800267e:	e7f9      	b.n	8002674 <reg_wizchip_cs_cbfunc+0x8>
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
 8002680:	6159      	str	r1, [r3, #20]
 8002682:	4770      	bx	lr
 8002684:	2000007c 	.word	0x2000007c
 8002688:	08002665 	.word	0x08002665
 800268c:	08002615 	.word	0x08002615

08002690 <reg_wizchip_spi_cbfunc>:
#if (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_)
void reg_wizchip_spi_cbfunc( uint8_t (*spi_rb)(void), 
                             void (*spi_wb)(uint8_t wb),
                             void (*spi_rbuf)(uint8_t* buf, datasize_t len),
                             void (*spi_wbuf)(uint8_t* buf, datasize_t len) )
{
 8002690:	b530      	push	{r4, r5, lr}
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002692:	4c09      	ldr	r4, [pc, #36]	; (80026b8 <reg_wizchip_spi_cbfunc+0x28>)
 8002694:	8825      	ldrh	r5, [r4, #0]
 8002696:	05ad      	lsls	r5, r5, #22
 8002698:	d400      	bmi.n	800269c <reg_wizchip_spi_cbfunc+0xc>
 800269a:	e7fe      	b.n	800269a <reg_wizchip_spi_cbfunc+0xa>
   
   if(!spi_rb)    WIZCHIP.IF.SPI._read_byte      = wizchip_spi_read;
 800269c:	b900      	cbnz	r0, 80026a0 <reg_wizchip_spi_cbfunc+0x10>
 800269e:	4807      	ldr	r0, [pc, #28]	; (80026bc <reg_wizchip_spi_cbfunc+0x2c>)
   else           WIZCHIP.IF.SPI._read_byte      = spi_rb;
 80026a0:	61a0      	str	r0, [r4, #24]
   if(!spi_wb)    WIZCHIP.IF.SPI._write_byte     = wizchip_spi_write;
 80026a2:	b901      	cbnz	r1, 80026a6 <reg_wizchip_spi_cbfunc+0x16>
 80026a4:	4906      	ldr	r1, [pc, #24]	; (80026c0 <reg_wizchip_spi_cbfunc+0x30>)
   else           WIZCHIP.IF.SPI._write_byte     = spi_wb;
 80026a6:	61e1      	str	r1, [r4, #28]

   if(!spi_rbuf)  WIZCHIP.IF.SPI._read_byte_buf  = wizchip_spi_read_buf;
 80026a8:	b902      	cbnz	r2, 80026ac <reg_wizchip_spi_cbfunc+0x1c>
 80026aa:	4a06      	ldr	r2, [pc, #24]	; (80026c4 <reg_wizchip_spi_cbfunc+0x34>)
   else           WIZCHIP.IF.SPI._read_byte_buf  = spi_rbuf;
 80026ac:	6222      	str	r2, [r4, #32]
   if(!spi_wbuf)  WIZCHIP.IF.SPI._write_byte_buf = wizchip_spi_write_buf;
 80026ae:	b903      	cbnz	r3, 80026b2 <reg_wizchip_spi_cbfunc+0x22>
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <reg_wizchip_spi_cbfunc+0x38>)
   else           WIZCHIP.IF.SPI._write_byte_buf = spi_wbuf;
 80026b2:	6263      	str	r3, [r4, #36]	; 0x24
 80026b4:	bd30      	pop	{r4, r5, pc}
 80026b6:	bf00      	nop
 80026b8:	2000007c 	.word	0x2000007c
 80026bc:	08002617 	.word	0x08002617
 80026c0:	0800261b 	.word	0x0800261b
 80026c4:	0800261d 	.word	0x0800261d
 80026c8:	08002641 	.word	0x08002641

080026cc <wizchip_sw_reset>:
          break;
   }
}

void wizchip_sw_reset(void)
{
 80026cc:	b510      	push	{r4, lr}
   uint8_t gw[4], sn[4], sip[4], gw6[16], sn6[16], lla[16], gua[16];
   uint8_t mac[6];
   uint8_t islock = getSYSR();
 80026ce:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
{
 80026d2:	b096      	sub	sp, #88	; 0x58
   uint8_t islock = getSYSR();
 80026d4:	f7ff fc36 	bl	8001f44 <WIZCHIP_READ>

   CHIPUNLOCK();
 80026d8:	21ce      	movs	r1, #206	; 0xce
   uint8_t islock = getSYSR();
 80026da:	4604      	mov	r4, r0
   CHIPUNLOCK();
 80026dc:	4836      	ldr	r0, [pc, #216]	; (80027b8 <wizchip_sw_reset+0xec>)
 80026de:	f7ff fc0d 	bl	8001efc <WIZCHIP_WRITE>

   getSHAR(mac);
 80026e2:	2206      	movs	r2, #6
 80026e4:	a904      	add	r1, sp, #16
 80026e6:	4835      	ldr	r0, [pc, #212]	; (80027bc <wizchip_sw_reset+0xf0>)
 80026e8:	f7ff fc70 	bl	8001fcc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);	getGA6R(gw6); getSUB6R(sn6); getLLAR(lla); getGUAR(gua);
 80026ec:	2204      	movs	r2, #4
 80026ee:	4834      	ldr	r0, [pc, #208]	; (80027c0 <wizchip_sw_reset+0xf4>)
 80026f0:	eb0d 0102 	add.w	r1, sp, r2
 80026f4:	f7ff fc6a 	bl	8001fcc <WIZCHIP_READ_BUF>
 80026f8:	2204      	movs	r2, #4
 80026fa:	a902      	add	r1, sp, #8
 80026fc:	4831      	ldr	r0, [pc, #196]	; (80027c4 <wizchip_sw_reset+0xf8>)
 80026fe:	f7ff fc65 	bl	8001fcc <WIZCHIP_READ_BUF>
 8002702:	2204      	movs	r2, #4
 8002704:	a903      	add	r1, sp, #12
 8002706:	4830      	ldr	r0, [pc, #192]	; (80027c8 <wizchip_sw_reset+0xfc>)
 8002708:	f7ff fc60 	bl	8001fcc <WIZCHIP_READ_BUF>
 800270c:	2210      	movs	r2, #16
 800270e:	a906      	add	r1, sp, #24
 8002710:	482e      	ldr	r0, [pc, #184]	; (80027cc <wizchip_sw_reset+0x100>)
 8002712:	f7ff fc5b 	bl	8001fcc <WIZCHIP_READ_BUF>
 8002716:	2210      	movs	r2, #16
 8002718:	a90a      	add	r1, sp, #40	; 0x28
 800271a:	482d      	ldr	r0, [pc, #180]	; (80027d0 <wizchip_sw_reset+0x104>)
 800271c:	f7ff fc56 	bl	8001fcc <WIZCHIP_READ_BUF>
 8002720:	2210      	movs	r2, #16
 8002722:	a90e      	add	r1, sp, #56	; 0x38
 8002724:	482b      	ldr	r0, [pc, #172]	; (80027d4 <wizchip_sw_reset+0x108>)
 8002726:	f7ff fc51 	bl	8001fcc <WIZCHIP_READ_BUF>
 800272a:	2210      	movs	r2, #16
 800272c:	a912      	add	r1, sp, #72	; 0x48
 800272e:	482a      	ldr	r0, [pc, #168]	; (80027d8 <wizchip_sw_reset+0x10c>)
 8002730:	f7ff fc4c 	bl	8001fcc <WIZCHIP_READ_BUF>
   setSYCR0(SYCR0_RST);
 8002734:	2100      	movs	r1, #0
 8002736:	4829      	ldr	r0, [pc, #164]	; (80027dc <wizchip_sw_reset+0x110>)
 8002738:	f7ff fbe0 	bl	8001efc <WIZCHIP_WRITE>
   getSYCR0(); // for delay
 800273c:	4827      	ldr	r0, [pc, #156]	; (80027dc <wizchip_sw_reset+0x110>)
 800273e:	f7ff fc01 	bl	8001f44 <WIZCHIP_READ>

   NETUNLOCK();
 8002742:	213a      	movs	r1, #58	; 0x3a
 8002744:	4826      	ldr	r0, [pc, #152]	; (80027e0 <wizchip_sw_reset+0x114>)
 8002746:	f7ff fbd9 	bl	8001efc <WIZCHIP_WRITE>

   setSHAR(mac);
 800274a:	2206      	movs	r2, #6
 800274c:	a904      	add	r1, sp, #16
 800274e:	481b      	ldr	r0, [pc, #108]	; (80027bc <wizchip_sw_reset+0xf0>)
 8002750:	f7ff fc16 	bl	8001f80 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002754:	2204      	movs	r2, #4
 8002756:	481a      	ldr	r0, [pc, #104]	; (80027c0 <wizchip_sw_reset+0xf4>)
 8002758:	eb0d 0102 	add.w	r1, sp, r2
 800275c:	f7ff fc10 	bl	8001f80 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002760:	2204      	movs	r2, #4
 8002762:	a902      	add	r1, sp, #8
 8002764:	4817      	ldr	r0, [pc, #92]	; (80027c4 <wizchip_sw_reset+0xf8>)
 8002766:	f7ff fc0b 	bl	8001f80 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800276a:	2204      	movs	r2, #4
 800276c:	a903      	add	r1, sp, #12
 800276e:	4816      	ldr	r0, [pc, #88]	; (80027c8 <wizchip_sw_reset+0xfc>)
 8002770:	f7ff fc06 	bl	8001f80 <WIZCHIP_WRITE_BUF>
   setGA6R(gw6); 
 8002774:	2210      	movs	r2, #16
 8002776:	a906      	add	r1, sp, #24
 8002778:	4814      	ldr	r0, [pc, #80]	; (80027cc <wizchip_sw_reset+0x100>)
 800277a:	f7ff fc01 	bl	8001f80 <WIZCHIP_WRITE_BUF>
   setSUB6R(sn6); 
 800277e:	2210      	movs	r2, #16
 8002780:	a90a      	add	r1, sp, #40	; 0x28
 8002782:	4813      	ldr	r0, [pc, #76]	; (80027d0 <wizchip_sw_reset+0x104>)
 8002784:	f7ff fbfc 	bl	8001f80 <WIZCHIP_WRITE_BUF>
   setLLAR(lla);
 8002788:	2210      	movs	r2, #16
 800278a:	a90e      	add	r1, sp, #56	; 0x38
 800278c:	4811      	ldr	r0, [pc, #68]	; (80027d4 <wizchip_sw_reset+0x108>)
 800278e:	f7ff fbf7 	bl	8001f80 <WIZCHIP_WRITE_BUF>
   setGUAR(gua);
 8002792:	2210      	movs	r2, #16
 8002794:	a912      	add	r1, sp, #72	; 0x48
 8002796:	4810      	ldr	r0, [pc, #64]	; (80027d8 <wizchip_sw_reset+0x10c>)
 8002798:	f7ff fbf2 	bl	8001f80 <WIZCHIP_WRITE_BUF>
   if(islock & SYSR_CHPL) CHIPLOCK();
 800279c:	0622      	lsls	r2, r4, #24
 800279e:	d503      	bpl.n	80027a8 <wizchip_sw_reset+0xdc>
 80027a0:	21ff      	movs	r1, #255	; 0xff
 80027a2:	4805      	ldr	r0, [pc, #20]	; (80027b8 <wizchip_sw_reset+0xec>)
 80027a4:	f7ff fbaa 	bl	8001efc <WIZCHIP_WRITE>
   if(islock & SYSR_NETL) NETLOCK();
 80027a8:	0663      	lsls	r3, r4, #25
 80027aa:	d503      	bpl.n	80027b4 <wizchip_sw_reset+0xe8>
 80027ac:	21c5      	movs	r1, #197	; 0xc5
 80027ae:	480c      	ldr	r0, [pc, #48]	; (80027e0 <wizchip_sw_reset+0x114>)
 80027b0:	f7ff fba4 	bl	8001efc <WIZCHIP_WRITE>
}
 80027b4:	b016      	add	sp, #88	; 0x58
 80027b6:	bd10      	pop	{r4, pc}
 80027b8:	0041f400 	.word	0x0041f400
 80027bc:	00412000 	.word	0x00412000
 80027c0:	00413000 	.word	0x00413000
 80027c4:	00413400 	.word	0x00413400
 80027c8:	00413800 	.word	0x00413800
 80027cc:	00417000 	.word	0x00417000
 80027d0:	00416000 	.word	0x00416000
 80027d4:	00414000 	.word	0x00414000
 80027d8:	00415000 	.word	0x00415000
 80027dc:	00200400 	.word	0x00200400
 80027e0:	0041f500 	.word	0x0041f500

080027e4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80027e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e6:	4605      	mov	r5, r0
 80027e8:	460c      	mov	r4, r1
   int8_t i;
   int8_t tmp = 0;
   wizchip_sw_reset();
 80027ea:	f7ff ff6f 	bl	80026cc <wizchip_sw_reset>
   if(txsize)
 80027ee:	b915      	cbnz	r5, 80027f6 <wizchip_init+0x12>
				tmp += txsize[i];		
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_TXBUF_SIZE(i, txsize[i]);			
   }
   if(rxsize)
 80027f0:	b9dc      	cbnz	r4, 800282a <wizchip_init+0x46>
				tmp += rxsize[i];		
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_RXBUF_SIZE(i, rxsize[i]);
   }
   return 0;
 80027f2:	2000      	movs	r0, #0
 80027f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027f6:	1e6e      	subs	r6, r5, #1
   if(txsize)
 80027f8:	4632      	mov	r2, r6
 80027fa:	2300      	movs	r3, #0
 80027fc:	3507      	adds	r5, #7
				tmp += txsize[i];		
 80027fe:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8002802:	440b      	add	r3, r1
 8002804:	b25b      	sxtb	r3, r3
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 8002806:	2b10      	cmp	r3, #16
 8002808:	dd02      	ble.n	8002810 <wizchip_init+0x2c>
 800280a:	f04f 30ff 	mov.w	r0, #4294967295
 800280e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002810:	42aa      	cmp	r2, r5
 8002812:	d1f4      	bne.n	80027fe <wizchip_init+0x1a>
 8002814:	4d10      	ldr	r5, [pc, #64]	; (8002858 <wizchip_init+0x74>)
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_TXBUF_SIZE(i, txsize[i]);			
 8002816:	4f11      	ldr	r7, [pc, #68]	; (800285c <wizchip_init+0x78>)
 8002818:	4628      	mov	r0, r5
 800281a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800281e:	3520      	adds	r5, #32
 8002820:	f7ff fb6c 	bl	8001efc <WIZCHIP_WRITE>
 8002824:	42bd      	cmp	r5, r7
 8002826:	d1f7      	bne.n	8002818 <wizchip_init+0x34>
 8002828:	e7e2      	b.n	80027f0 <wizchip_init+0xc>
 800282a:	1e65      	subs	r5, r4, #1
   if(rxsize)
 800282c:	462a      	mov	r2, r5
 800282e:	2300      	movs	r3, #0
 8002830:	3407      	adds	r4, #7
				tmp += rxsize[i];		
 8002832:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8002836:	440b      	add	r3, r1
 8002838:	b25b      	sxtb	r3, r3
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 800283a:	2b10      	cmp	r3, #16
 800283c:	dce5      	bgt.n	800280a <wizchip_init+0x26>
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800283e:	4294      	cmp	r4, r2
 8002840:	d1f7      	bne.n	8002832 <wizchip_init+0x4e>
 8002842:	4c07      	ldr	r4, [pc, #28]	; (8002860 <wizchip_init+0x7c>)
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_RXBUF_SIZE(i, rxsize[i]);
 8002844:	4e07      	ldr	r6, [pc, #28]	; (8002864 <wizchip_init+0x80>)
 8002846:	4620      	mov	r0, r4
 8002848:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800284c:	3420      	adds	r4, #32
 800284e:	f7ff fb55 	bl	8001efc <WIZCHIP_WRITE>
 8002852:	42b4      	cmp	r4, r6
 8002854:	d1f7      	bne.n	8002846 <wizchip_init+0x62>
 8002856:	e7cc      	b.n	80027f2 <wizchip_init+0xe>
 8002858:	00020008 	.word	0x00020008
 800285c:	00020108 	.word	0x00020108
 8002860:	00022008 	.word	0x00022008
 8002864:	00022108 	.word	0x00022108

08002868 <wizchip_clrinterrupt>:
}

void wizchip_clrinterrupt(intr_kind intr)
{
 8002868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   int i;
   uint8_t ir   = (uint8_t)intr;
   uint8_t sir  = (uint8_t)((uint32_t)intr >> 8);
   uint8_t slir = (uint8_t)((uint32_t)intr >> 16);
   setIRCLR(ir);
 800286a:	b2c1      	uxtb	r1, r0
   uint8_t sir  = (uint8_t)((uint32_t)intr >> 8);
 800286c:	0a05      	lsrs	r5, r0, #8
   uint8_t slir = (uint8_t)((uint32_t)intr >> 16);
 800286e:	f3c0 4607 	ubfx	r6, r0, #16, #8
   setIRCLR(ir);
 8002872:	480c      	ldr	r0, [pc, #48]	; (80028a4 <wizchip_clrinterrupt+0x3c>)
 8002874:	f7ff fb42 	bl	8001efc <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8002878:	2400      	movs	r4, #0
   {
   	if(sir&(1<<i))   	setSn_IRCLR(i,0xFF);
 800287a:	f642 0708 	movw	r7, #10248	; 0x2808
 800287e:	b2ed      	uxtb	r5, r5
 8002880:	fa45 f304 	asr.w	r3, r5, r4
 8002884:	07db      	lsls	r3, r3, #31
 8002886:	d504      	bpl.n	8002892 <wizchip_clrinterrupt+0x2a>
 8002888:	21ff      	movs	r1, #255	; 0xff
 800288a:	eb07 1044 	add.w	r0, r7, r4, lsl #5
 800288e:	f7ff fb35 	bl	8001efc <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8002892:	3401      	adds	r4, #1
 8002894:	2c08      	cmp	r4, #8
 8002896:	d1f3      	bne.n	8002880 <wizchip_clrinterrupt+0x18>
   }
   setSLIRCLR(slir);
 8002898:	4631      	mov	r1, r6
}
 800289a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   setSLIRCLR(slir);
 800289e:	4802      	ldr	r0, [pc, #8]	; (80028a8 <wizchip_clrinterrupt+0x40>)
 80028a0:	f7ff bb2c 	b.w	8001efc <WIZCHIP_WRITE>
 80028a4:	00210800 	.word	0x00210800
 80028a8:	00212800 	.word	0x00212800

080028ac <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80028ac:	b510      	push	{r4, lr}
   uint32_t ret;
   ret = (((uint32_t)getSLIR())<<16) | (((uint32_t)getSIR())<<8) | (((uint32_t)getIR()));
 80028ae:	4808      	ldr	r0, [pc, #32]	; (80028d0 <wizchip_getinterrupt+0x24>)
 80028b0:	f7ff fb48 	bl	8001f44 <WIZCHIP_READ>
 80028b4:	4604      	mov	r4, r0
 80028b6:	4807      	ldr	r0, [pc, #28]	; (80028d4 <wizchip_getinterrupt+0x28>)
 80028b8:	f7ff fb44 	bl	8001f44 <WIZCHIP_READ>
 80028bc:	0200      	lsls	r0, r0, #8
 80028be:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80028c2:	f44f 1004 	mov.w	r0, #2162688	; 0x210000
 80028c6:	f7ff fb3d 	bl	8001f44 <WIZCHIP_READ>
   return (intr_kind)ret;
}
 80028ca:	4320      	orrs	r0, r4
 80028cc:	bd10      	pop	{r4, pc}
 80028ce:	bf00      	nop
 80028d0:	00210200 	.word	0x00210200
 80028d4:	00210100 	.word	0x00210100

080028d8 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80028d8:	b510      	push	{r4, lr}
 80028da:	4604      	mov	r4, r0
   uint8_t imr   = (uint8_t)intr;
   uint8_t simr  = (uint8_t)((uint32_t)intr >> 8);
   uint8_t slimr = (uint8_t)((uint32_t)intr >> 16);
   setIMR(imr);
 80028dc:	b2c1      	uxtb	r1, r0
 80028de:	4807      	ldr	r0, [pc, #28]	; (80028fc <wizchip_setinterruptmask+0x24>)
 80028e0:	f7ff fb0c 	bl	8001efc <WIZCHIP_WRITE>
   setSIMR(simr);
 80028e4:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80028e8:	4805      	ldr	r0, [pc, #20]	; (8002900 <wizchip_setinterruptmask+0x28>)
 80028ea:	f7ff fb07 	bl	8001efc <WIZCHIP_WRITE>
   setSLIMR(slimr);
 80028ee:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80028f2:	4804      	ldr	r0, [pc, #16]	; (8002904 <wizchip_setinterruptmask+0x2c>)
}
 80028f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setSLIMR(slimr);
 80028f8:	f7ff bb00 	b.w	8001efc <WIZCHIP_WRITE>
 80028fc:	00210400 	.word	0x00210400
 8002900:	00211400 	.word	0x00211400
 8002904:	00212400 	.word	0x00212400

08002908 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002908:	b510      	push	{r4, lr}
   uint32_t ret;
   ret = (((uint32_t)getSLIMR())<<16) | (((uint32_t)getSIMR())<<8) | (((uint32_t)getIMR()));
 800290a:	4807      	ldr	r0, [pc, #28]	; (8002928 <wizchip_getinterruptmask+0x20>)
 800290c:	f7ff fb1a 	bl	8001f44 <WIZCHIP_READ>
 8002910:	4604      	mov	r4, r0
 8002912:	4806      	ldr	r0, [pc, #24]	; (800292c <wizchip_getinterruptmask+0x24>)
 8002914:	f7ff fb16 	bl	8001f44 <WIZCHIP_READ>
 8002918:	0200      	lsls	r0, r0, #8
 800291a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800291e:	4804      	ldr	r0, [pc, #16]	; (8002930 <wizchip_getinterruptmask+0x28>)
 8002920:	f7ff fb10 	bl	8001f44 <WIZCHIP_READ>
   return (intr_kind)ret;
}
 8002924:	4320      	orrs	r0, r4
 8002926:	bd10      	pop	{r4, pc}
 8002928:	00212400 	.word	0x00212400
 800292c:	00211400 	.word	0x00211400
 8002930:	00210400 	.word	0x00210400

08002934 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8002934:	b508      	push	{r3, lr}
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   return (getPHYSR() & PHYSR_LNK);
 8002936:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800293a:	f7ff fb03 	bl	8001f44 <WIZCHIP_READ>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if(wiz_mdio_read(PHYRAR_BMSR) & BMSR_LINK_STATUS) return PHY_LINK_ON;
   return PHY_LINK_OFF;
#endif  
}
 800293e:	f000 0001 	and.w	r0, r0, #1
 8002942:	bd08      	pop	{r3, pc}

08002944 <wizphy_reset>:

void wizphy_reset(void)
{
 8002944:	b570      	push	{r4, r5, r6, lr}
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1() | PHYCR1_RST;
 8002946:	4e0b      	ldr	r6, [pc, #44]	; (8002974 <wizphy_reset+0x30>)
   PHYUNLOCK();
 8002948:	4d0b      	ldr	r5, [pc, #44]	; (8002978 <wizphy_reset+0x34>)
   uint8_t tmp = getPHYCR1() | PHYCR1_RST;
 800294a:	4630      	mov	r0, r6
 800294c:	f7ff fafa 	bl	8001f44 <WIZCHIP_READ>
 8002950:	4604      	mov	r4, r0
   PHYUNLOCK();
 8002952:	2153      	movs	r1, #83	; 0x53
 8002954:	4628      	mov	r0, r5
 8002956:	f7ff fad1 	bl	8001efc <WIZCHIP_WRITE>
   uint8_t tmp = getPHYCR1() | PHYCR1_RST;
 800295a:	f044 0101 	orr.w	r1, r4, #1
   setPHYCR1(tmp);
 800295e:	4630      	mov	r0, r6
 8002960:	b2c9      	uxtb	r1, r1
 8002962:	f7ff facb 	bl	8001efc <WIZCHIP_WRITE>
   PHYLOCK();
 8002966:	4628      	mov	r0, r5
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
	wiz_mdio_write(PHYRAR_BMCR, wiz_mdio_read(PHYRAR_BMCR) | BMCR_RST);
	while(wiz_mdio_read(PHYRAR_BMCR) & BMCR_RST);
#endif
}
 8002968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   PHYLOCK();
 800296c:	21ff      	movs	r1, #255	; 0xff
 800296e:	f7ff bac5 	b.w	8001efc <WIZCHIP_WRITE>
 8002972:	bf00      	nop
 8002974:	00301d00 	.word	0x00301d00
 8002978:	0041f600 	.word	0x0041f600

0800297c <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800297c:	b510      	push	{r4, lr}
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
   if(phyconf->mode == PHY_MODE_TE)
 800297e:	7803      	ldrb	r3, [r0, #0]
{
 8002980:	4604      	mov	r4, r0
   if(phyconf->mode == PHY_MODE_TE)
 8002982:	2b02      	cmp	r3, #2
   {
      setPHYCR1(getPHYCR1() | PHYCR1_TE);
 8002984:	4811      	ldr	r0, [pc, #68]	; (80029cc <wizphy_setphyconf+0x50>)
   if(phyconf->mode == PHY_MODE_TE)
 8002986:	d109      	bne.n	800299c <wizphy_setphyconf+0x20>
      setPHYCR1(getPHYCR1() | PHYCR1_TE);
 8002988:	f7ff fadc 	bl	8001f44 <WIZCHIP_READ>
 800298c:	f040 0108 	orr.w	r1, r0, #8
 8002990:	b2c9      	uxtb	r1, r1
 8002992:	480e      	ldr	r0, [pc, #56]	; (80029cc <wizphy_setphyconf+0x50>)
 8002994:	f7ff fab2 	bl	8001efc <WIZCHIP_WRITE>
      tmp = PHYCR0_AUTO;
   }
   else
   {
      setPHYCR1(getPHYCR1() & ~PHYCR1_TE);
      if(phyconf->mode == PHY_MODE_AUTONEGO) tmp = PHYCR0_AUTO;
 8002998:	2100      	movs	r1, #0
 800299a:	e012      	b.n	80029c2 <wizphy_setphyconf+0x46>
      setPHYCR1(getPHYCR1() & ~PHYCR1_TE);
 800299c:	f7ff fad2 	bl	8001f44 <WIZCHIP_READ>
 80029a0:	f000 01f7 	and.w	r1, r0, #247	; 0xf7
 80029a4:	4809      	ldr	r0, [pc, #36]	; (80029cc <wizphy_setphyconf+0x50>)
 80029a6:	f7ff faa9 	bl	8001efc <WIZCHIP_WRITE>
      if(phyconf->mode == PHY_MODE_AUTONEGO) tmp = PHYCR0_AUTO;
 80029aa:	7823      	ldrb	r3, [r4, #0]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d0f3      	beq.n	8002998 <wizphy_setphyconf+0x1c>
      else
      {
         tmp |= 0x04;
         if(phyconf->speed  == PHY_SPEED_10)    tmp |= 0x02;
 80029b0:	7863      	ldrb	r3, [r4, #1]
 80029b2:	2b00      	cmp	r3, #0
         if(phyconf->duplex == PHY_DUPLEX_HALF) tmp |= 0x01;
 80029b4:	78a3      	ldrb	r3, [r4, #2]
         if(phyconf->speed  == PHY_SPEED_10)    tmp |= 0x02;
 80029b6:	bf14      	ite	ne
 80029b8:	2104      	movne	r1, #4
 80029ba:	2106      	moveq	r1, #6
         if(phyconf->duplex == PHY_DUPLEX_HALF) tmp |= 0x01;
 80029bc:	b90b      	cbnz	r3, 80029c2 <wizphy_setphyconf+0x46>
 80029be:	f041 0101 	orr.w	r1, r1, #1
      }
   }
   setPHYCR0(tmp);
 80029c2:	4803      	ldr	r0, [pc, #12]	; (80029d0 <wizphy_setphyconf+0x54>)
         if(phyconf->speed == PHY_SPEED_100)    tmp |= BMCR_SPD;
      }
      wiz_mdio_write(PHYRAR_BMCR, tmp);
   }
#endif   
}
 80029c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setPHYCR0(tmp);
 80029c8:	f7ff ba98 	b.w	8001efc <WIZCHIP_WRITE>
 80029cc:	00301d00 	.word	0x00301d00
 80029d0:	00301c00 	.word	0x00301c00

080029d4 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80029d4:	b538      	push	{r3, r4, r5, lr}
 80029d6:	4605      	mov	r5, r0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
   tmp = getPHYSR();
 80029d8:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80029dc:	f7ff fab2 	bl	8001f44 <WIZCHIP_READ>
 80029e0:	4604      	mov	r4, r0
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 80029e2:	480b      	ldr	r0, [pc, #44]	; (8002a10 <wizphy_getphyconf+0x3c>)
 80029e4:	f7ff faae 	bl	8001f44 <WIZCHIP_READ>
 80029e8:	0703      	lsls	r3, r0, #28
 80029ea:	bf4e      	itee	mi
 80029ec:	2302      	movmi	r3, #2
   else                        phyconf->mode = (tmp & (1<<5)) ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 80029ee:	f084 0320 	eorpl.w	r3, r4, #32
 80029f2:	f3c3 1340 	ubfxpl	r3, r3, #5, #1
 80029f6:	702b      	strb	r3, [r5, #0]
   phyconf->speed  = (tmp & (1<<4)) ? PHY_SPEED_10    : PHY_SPEED_100;
 80029f8:	f084 0310 	eor.w	r3, r4, #16
   phyconf->duplex = (tmp & (1<<3)) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 80029fc:	f084 0408 	eor.w	r4, r4, #8
   phyconf->speed  = (tmp & (1<<4)) ? PHY_SPEED_10    : PHY_SPEED_100;
 8002a00:	f3c3 1300 	ubfx	r3, r3, #4, #1
   phyconf->duplex = (tmp & (1<<3)) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 8002a04:	f3c4 04c0 	ubfx	r4, r4, #3, #1
   phyconf->speed  = (tmp & (1<<4)) ? PHY_SPEED_10    : PHY_SPEED_100;
 8002a08:	706b      	strb	r3, [r5, #1]
   phyconf->duplex = (tmp & (1<<3)) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 8002a0a:	70ac      	strb	r4, [r5, #2]
 8002a0c:	bd38      	pop	{r3, r4, r5, pc}
 8002a0e:	bf00      	nop
 8002a10:	00301d00 	.word	0x00301d00

08002a14 <wizphy_getphystatus>:
   phyconf->speed  = (tmp & BMCR_SPD) ? PHY_SPEED_100     : PHY_SPEED_10;
#endif
}

void wizphy_getphystatus(wiz_PhyConf* phyconf)
{
 8002a14:	b538      	push	{r3, r4, r5, lr}
 8002a16:	4605      	mov	r5, r0
   uint8_t tmp = 0;
   tmp = getPHYSR();
 8002a18:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8002a1c:	f7ff fa92 	bl	8001f44 <WIZCHIP_READ>
 8002a20:	4604      	mov	r4, r0
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 8002a22:	480b      	ldr	r0, [pc, #44]	; (8002a50 <wizphy_getphystatus+0x3c>)
 8002a24:	f7ff fa8e 	bl	8001f44 <WIZCHIP_READ>
 8002a28:	0703      	lsls	r3, r0, #28
 8002a2a:	bf4e      	itee	mi
 8002a2c:	2302      	movmi	r3, #2
   else phyconf->mode   = (tmp & (1<<5))    ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 8002a2e:	f084 0320 	eorpl.w	r3, r4, #32
 8002a32:	f3c3 1340 	ubfxpl	r3, r3, #5, #1
 8002a36:	702b      	strb	r3, [r5, #0]
   phyconf->speed  = (tmp & PHYSR_SPD) ? PHY_SPEED_10    : PHY_SPEED_100;
 8002a38:	f084 0302 	eor.w	r3, r4, #2
   phyconf->duplex = (tmp & PHYSR_DPX) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 8002a3c:	f084 0404 	eor.w	r4, r4, #4
   phyconf->speed  = (tmp & PHYSR_SPD) ? PHY_SPEED_10    : PHY_SPEED_100;
 8002a40:	f3c3 0340 	ubfx	r3, r3, #1, #1
   phyconf->duplex = (tmp & PHYSR_DPX) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 8002a44:	f3c4 0480 	ubfx	r4, r4, #2, #1
   phyconf->speed  = (tmp & PHYSR_SPD) ? PHY_SPEED_10    : PHY_SPEED_100;
 8002a48:	706b      	strb	r3, [r5, #1]
   phyconf->duplex = (tmp & PHYSR_DPX) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 8002a4a:	70ac      	strb	r4, [r5, #2]
 8002a4c:	bd38      	pop	{r3, r4, r5, pc}
 8002a4e:	bf00      	nop
 8002a50:	00301d00 	.word	0x00301d00

08002a54 <wizphy_setphypmode>:
}

void wizphy_setphypmode(uint8_t pmode)
{
 8002a54:	b510      	push	{r4, lr}
 8002a56:	4604      	mov	r4, r0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1();
 8002a58:	4807      	ldr	r0, [pc, #28]	; (8002a78 <wizphy_setphypmode+0x24>)
 8002a5a:	f7ff fa73 	bl	8001f44 <WIZCHIP_READ>
   if (pmode == PHY_POWER_DOWN)    tmp |= PHYCR1_PWDN;
 8002a5e:	2c01      	cmp	r4, #1
 8002a60:	bf0a      	itet	eq
 8002a62:	f040 0120 	orreq.w	r1, r0, #32
   else                            tmp &= ~PHYCR1_PWDN;
 8002a66:	f000 01df 	andne.w	r1, r0, #223	; 0xdf
   if (pmode == PHY_POWER_DOWN)    tmp |= PHYCR1_PWDN;
 8002a6a:	b2c9      	uxtbeq	r1, r1
   setPHYCR1(tmp);
 8002a6c:	4802      	ldr	r0, [pc, #8]	; (8002a78 <wizphy_setphypmode+0x24>)
   tmp = wiz_mdio_read(PHYRAR_BMCR);
   if (pmode == PHY_POWER_DOWN)    tmp |= BMCR_PWDN;
   else                            tmp &= ~BMCR_PWDN;
   wiz_mdio_write(PHYRAR_BMCR, tmp);
#endif   
}
 8002a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setPHYCR1(tmp);
 8002a72:	f7ff ba43 	b.w	8001efc <WIZCHIP_WRITE>
 8002a76:	bf00      	nop
 8002a78:	00301d00 	.word	0x00301d00

08002a7c <wizphy_getphypmode>:

int8_t wizphy_getphypmode(void)
{
 8002a7c:	b508      	push	{r3, lr}
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   if (getPHYCR1() & PHYCR1_PWDN)              return PHY_POWER_DOWN;
 8002a7e:	4803      	ldr	r0, [pc, #12]	; (8002a8c <wizphy_getphypmode+0x10>)
 8002a80:	f7ff fa60 	bl	8001f44 <WIZCHIP_READ>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if (wiz_mdio_read(PHYRAR_BMCR) & BMCR_PWDN) return PHY_POWER_DOWN;
#endif   
   return PHY_POWER_NORM;
}
 8002a84:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8002a88:	bd08      	pop	{r3, pc}
 8002a8a:	bf00      	nop
 8002a8c:	00301d00 	.word	0x00301d00

08002a90 <ctlwizchip>:
{
 8002a90:	b538      	push	{r3, r4, r5, lr}
 8002a92:	460c      	mov	r4, r1
   uint8_t tmp = *(uint8_t*) arg;
 8002a94:	780d      	ldrb	r5, [r1, #0]
   switch(cwtype)
 8002a96:	2817      	cmp	r0, #23
 8002a98:	f200 80ba 	bhi.w	8002c10 <ctlwizchip+0x180>
 8002a9c:	e8df f000 	tbb	[pc, r0]
 8002aa0:	3831210c 	.word	0x3831210c
 8002aa4:	4945413b 	.word	0x4945413b
 8002aa8:	6358504d 	.word	0x6358504d
 8002aac:	8c847671 	.word	0x8c847671
 8002ab0:	a6a29f99 	.word	0xa6a29f99
 8002ab4:	b5b2aeaa 	.word	0xb5b2aeaa
         if(tmp & SYS_CHIP_LOCK) CHIPLOCK();
 8002ab8:	076b      	lsls	r3, r5, #29
 8002aba:	d503      	bpl.n	8002ac4 <ctlwizchip+0x34>
 8002abc:	21ff      	movs	r1, #255	; 0xff
 8002abe:	4856      	ldr	r0, [pc, #344]	; (8002c18 <ctlwizchip+0x188>)
 8002ac0:	f7ff fa1c 	bl	8001efc <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETLOCK();
 8002ac4:	07ac      	lsls	r4, r5, #30
 8002ac6:	d503      	bpl.n	8002ad0 <ctlwizchip+0x40>
 8002ac8:	21c5      	movs	r1, #197	; 0xc5
 8002aca:	4854      	ldr	r0, [pc, #336]	; (8002c1c <ctlwizchip+0x18c>)
 8002acc:	f7ff fa16 	bl	8001efc <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYLOCK();
 8002ad0:	07e8      	lsls	r0, r5, #31
 8002ad2:	d401      	bmi.n	8002ad8 <ctlwizchip+0x48>
   return 0;
 8002ad4:	2000      	movs	r0, #0
         break;
 8002ad6:	bd38      	pop	{r3, r4, r5, pc}
         if(tmp & SYS_PHY_LOCK)  PHYLOCK();
 8002ad8:	21ff      	movs	r1, #255	; 0xff
         if(tmp & SYS_PHY_LOCK)  PHYUNLOCK();
 8002ada:	4851      	ldr	r0, [pc, #324]	; (8002c20 <ctlwizchip+0x190>)
         setINTPTMR(*(uint16_t*)arg);
 8002adc:	f7ff fa0e 	bl	8001efc <WIZCHIP_WRITE>
 8002ae0:	e7f8      	b.n	8002ad4 <ctlwizchip+0x44>
         if(tmp & SYS_CHIP_LOCK) CHIPUNLOCK();
 8002ae2:	0769      	lsls	r1, r5, #29
 8002ae4:	d503      	bpl.n	8002aee <ctlwizchip+0x5e>
 8002ae6:	21ce      	movs	r1, #206	; 0xce
 8002ae8:	484b      	ldr	r0, [pc, #300]	; (8002c18 <ctlwizchip+0x188>)
 8002aea:	f7ff fa07 	bl	8001efc <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETUNLOCK();
 8002aee:	07aa      	lsls	r2, r5, #30
 8002af0:	d503      	bpl.n	8002afa <ctlwizchip+0x6a>
 8002af2:	213a      	movs	r1, #58	; 0x3a
 8002af4:	4849      	ldr	r0, [pc, #292]	; (8002c1c <ctlwizchip+0x18c>)
 8002af6:	f7ff fa01 	bl	8001efc <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYUNLOCK();
 8002afa:	07eb      	lsls	r3, r5, #31
 8002afc:	d5ea      	bpl.n	8002ad4 <ctlwizchip+0x44>
 8002afe:	2153      	movs	r1, #83	; 0x53
 8002b00:	e7eb      	b.n	8002ada <ctlwizchip+0x4a>
         *(uint8_t*)arg = getSYSR() >> 5;
 8002b02:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b06:	f7ff fa1d 	bl	8001f44 <WIZCHIP_READ>
 8002b0a:	0940      	lsrs	r0, r0, #5
         *(uint8_t*)arg = wizphy_getphylink();
 8002b0c:	7020      	strb	r0, [r4, #0]
 8002b0e:	e7e1      	b.n	8002ad4 <ctlwizchip+0x44>
         wizchip_sw_reset();
 8002b10:	f7ff fddc 	bl	80026cc <wizchip_sw_reset>
 8002b14:	e7de      	b.n	8002ad4 <ctlwizchip+0x44>
         return wizchip_init(ptmp[0], ptmp[1]);
 8002b16:	4620      	mov	r0, r4
}
 8002b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
         return wizchip_init(ptmp[0], ptmp[1]);
 8002b1c:	3108      	adds	r1, #8
 8002b1e:	f7ff be61 	b.w	80027e4 <wizchip_init>
        *(intr_kind*)arg = wizchip_getinterrupt();
 8002b22:	f7ff fec3 	bl	80028ac <wizchip_getinterrupt>
         *(intr_kind*)arg = wizchip_getinterruptmask();
 8002b26:	6020      	str	r0, [r4, #0]
 8002b28:	e7d4      	b.n	8002ad4 <ctlwizchip+0x44>
         wizchip_clrinterrupt(*(intr_kind*)arg);
 8002b2a:	6808      	ldr	r0, [r1, #0]
 8002b2c:	f7ff fe9c 	bl	8002868 <wizchip_clrinterrupt>
 8002b30:	e7d0      	b.n	8002ad4 <ctlwizchip+0x44>
         wizchip_setinterruptmask(*(intr_kind*)arg);
 8002b32:	6808      	ldr	r0, [r1, #0]
 8002b34:	f7ff fed0 	bl	80028d8 <wizchip_setinterruptmask>
 8002b38:	e7cc      	b.n	8002ad4 <ctlwizchip+0x44>
         *(intr_kind*)arg = wizchip_getinterruptmask();
 8002b3a:	f7ff fee5 	bl	8002908 <wizchip_getinterruptmask>
 8002b3e:	e7f2      	b.n	8002b26 <ctlwizchip+0x96>
         setINTPTMR(*(uint16_t*)arg);
 8002b40:	8809      	ldrh	r1, [r1, #0]
 8002b42:	4838      	ldr	r0, [pc, #224]	; (8002c24 <ctlwizchip+0x194>)
 8002b44:	0a09      	lsrs	r1, r1, #8
 8002b46:	f7ff f9d9 	bl	8001efc <WIZCHIP_WRITE>
 8002b4a:	7821      	ldrb	r1, [r4, #0]
 8002b4c:	4836      	ldr	r0, [pc, #216]	; (8002c28 <ctlwizchip+0x198>)
 8002b4e:	e7c5      	b.n	8002adc <ctlwizchip+0x4c>
         *(uint16_t*)arg = getINTPTMR();
 8002b50:	4834      	ldr	r0, [pc, #208]	; (8002c24 <ctlwizchip+0x194>)
 8002b52:	f7ff f9f7 	bl	8001f44 <WIZCHIP_READ>
 8002b56:	4605      	mov	r5, r0
 8002b58:	4833      	ldr	r0, [pc, #204]	; (8002c28 <ctlwizchip+0x198>)
         *(uint16_t*)arg = getVER();
 8002b5a:	f7ff f9f3 	bl	8001f44 <WIZCHIP_READ>
 8002b5e:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8002b62:	8020      	strh	r0, [r4, #0]
 8002b64:	e7b6      	b.n	8002ad4 <ctlwizchip+0x44>
         tmp = getSYCR1();
 8002b66:	4831      	ldr	r0, [pc, #196]	; (8002c2c <ctlwizchip+0x19c>)
 8002b68:	f7ff f9ec 	bl	8001f44 <WIZCHIP_READ>
         if(*(uint8_t*)arg == 1) setSYCR1(tmp | SYCR1_IEN);
 8002b6c:	7823      	ldrb	r3, [r4, #0]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d103      	bne.n	8002b7a <ctlwizchip+0xea>
 8002b72:	f060 017f 	orn	r1, r0, #127	; 0x7f
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
 8002b76:	b2c9      	uxtb	r1, r1
 8002b78:	e001      	b.n	8002b7e <ctlwizchip+0xee>
         else                      setSYCR1(tmp & ~SYCR1_IEN);
 8002b7a:	f000 017f 	and.w	r1, r0, #127	; 0x7f
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
 8002b7e:	482b      	ldr	r0, [pc, #172]	; (8002c2c <ctlwizchip+0x19c>)
 8002b80:	e7ac      	b.n	8002adc <ctlwizchip+0x4c>
         *((uint8_t*)arg) = getSYCR1() >> 7;
 8002b82:	482a      	ldr	r0, [pc, #168]	; (8002c2c <ctlwizchip+0x19c>)
 8002b84:	f7ff f9de 	bl	8001f44 <WIZCHIP_READ>
 8002b88:	09c0      	lsrs	r0, r0, #7
 8002b8a:	e7bf      	b.n	8002b0c <ctlwizchip+0x7c>
         ((uint8_t*)arg)[5] = 0;
 8002b8c:	2000      	movs	r0, #0
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8002b8e:	4b28      	ldr	r3, [pc, #160]	; (8002c30 <ctlwizchip+0x1a0>)
 8002b90:	789a      	ldrb	r2, [r3, #2]
 8002b92:	700a      	strb	r2, [r1, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002b94:	78da      	ldrb	r2, [r3, #3]
 8002b96:	704a      	strb	r2, [r1, #1]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8002b98:	791a      	ldrb	r2, [r3, #4]
 8002b9a:	708a      	strb	r2, [r1, #2]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002b9c:	795a      	ldrb	r2, [r3, #5]
 8002b9e:	70ca      	strb	r2, [r1, #3]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002ba0:	799b      	ldrb	r3, [r3, #6]
         ((uint8_t*)arg)[5] = 0;
 8002ba2:	7148      	strb	r0, [r1, #5]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002ba4:	710b      	strb	r3, [r1, #4]
         break;   
 8002ba6:	bd38      	pop	{r3, r4, r5, pc}
         *(uint16_t*)arg = getVER();
 8002ba8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002bac:	f7ff f9ca 	bl	8001f44 <WIZCHIP_READ>
 8002bb0:	4605      	mov	r5, r0
 8002bb2:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002bb6:	e7d0      	b.n	8002b5a <ctlwizchip+0xca>
         tmp = getSYCR1();
 8002bb8:	481c      	ldr	r0, [pc, #112]	; (8002c2c <ctlwizchip+0x19c>)
 8002bba:	f7ff f9c3 	bl	8001f44 <WIZCHIP_READ>
         if(*(uint8_t*)arg == SYSCLK_100MHZ)     setSYCR1(tmp & ~SYCR1_CLKSEL);
 8002bbe:	7824      	ldrb	r4, [r4, #0]
 8002bc0:	b914      	cbnz	r4, 8002bc8 <ctlwizchip+0x138>
 8002bc2:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8002bc6:	e7da      	b.n	8002b7e <ctlwizchip+0xee>
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
 8002bc8:	2c01      	cmp	r4, #1
 8002bca:	d183      	bne.n	8002ad4 <ctlwizchip+0x44>
 8002bcc:	f040 0101 	orr.w	r1, r0, #1
 8002bd0:	e7d1      	b.n	8002b76 <ctlwizchip+0xe6>
         *(uint8_t*)arg = (getSYCR1() & SYCR1_CLKSEL);
 8002bd2:	4816      	ldr	r0, [pc, #88]	; (8002c2c <ctlwizchip+0x19c>)
 8002bd4:	f7ff f9b6 	bl	8001f44 <WIZCHIP_READ>
 8002bd8:	f000 0001 	and.w	r0, r0, #1
 8002bdc:	e796      	b.n	8002b0c <ctlwizchip+0x7c>
         wizphy_reset();
 8002bde:	f7ff feb1 	bl	8002944 <wizphy_reset>
 8002be2:	e777      	b.n	8002ad4 <ctlwizchip+0x44>
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8002be4:	4608      	mov	r0, r1
 8002be6:	f7ff fec9 	bl	800297c <wizphy_setphyconf>
 8002bea:	e773      	b.n	8002ad4 <ctlwizchip+0x44>
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8002bec:	4608      	mov	r0, r1
 8002bee:	f7ff fef1 	bl	80029d4 <wizphy_getphyconf>
 8002bf2:	e76f      	b.n	8002ad4 <ctlwizchip+0x44>
         wizphy_getphystatus((wiz_PhyConf*)arg);
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	f7ff ff0d 	bl	8002a14 <wizphy_getphystatus>
 8002bfa:	e76b      	b.n	8002ad4 <ctlwizchip+0x44>
         wizphy_setphypmode(tmp);
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	f7ff ff29 	bl	8002a54 <wizphy_setphypmode>
 8002c02:	e767      	b.n	8002ad4 <ctlwizchip+0x44>
         *(uint8_t*)arg = wizphy_getphypmode();
 8002c04:	f7ff ff3a 	bl	8002a7c <wizphy_getphypmode>
 8002c08:	e780      	b.n	8002b0c <ctlwizchip+0x7c>
         *(uint8_t*)arg = wizphy_getphylink();
 8002c0a:	f7ff fe93 	bl	8002934 <wizphy_getphylink>
 8002c0e:	e77d      	b.n	8002b0c <ctlwizchip+0x7c>
         return -1;
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002c14:	bd38      	pop	{r3, r4, r5, pc}
 8002c16:	bf00      	nop
 8002c18:	0041f400 	.word	0x0041f400
 8002c1c:	0041f500 	.word	0x0041f500
 8002c20:	0041f600 	.word	0x0041f600
 8002c24:	0041c500 	.word	0x0041c500
 8002c28:	0041c600 	.word	0x0041c600
 8002c2c:	00200500 	.word	0x00200500
 8002c30:	2000007c 	.word	0x2000007c

08002c34 <wizchip_setnetinfo>:

void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002c34:	b510      	push	{r4, lr}
 8002c36:	4604      	mov	r4, r0
   uint8_t i=0;
   setSHAR(pnetinfo->mac);
 8002c38:	4601      	mov	r1, r0
 8002c3a:	2206      	movs	r2, #6
 8002c3c:	4824      	ldr	r0, [pc, #144]	; (8002cd0 <wizchip_setnetinfo+0x9c>)
 8002c3e:	f7ff f99f 	bl	8001f80 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002c42:	2204      	movs	r2, #4
 8002c44:	f104 010e 	add.w	r1, r4, #14
 8002c48:	4822      	ldr	r0, [pc, #136]	; (8002cd4 <wizchip_setnetinfo+0xa0>)
 8002c4a:	f7ff f999 	bl	8001f80 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002c4e:	2204      	movs	r2, #4
 8002c50:	f104 010a 	add.w	r1, r4, #10
 8002c54:	4820      	ldr	r0, [pc, #128]	; (8002cd8 <wizchip_setnetinfo+0xa4>)
 8002c56:	f7ff f993 	bl	8001f80 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);   
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	1da1      	adds	r1, r4, #6
 8002c5e:	481f      	ldr	r0, [pc, #124]	; (8002cdc <wizchip_setnetinfo+0xa8>)
 8002c60:	f7ff f98e 	bl	8001f80 <WIZCHIP_WRITE_BUF>
   setGA6R(pnetinfo->gw6);
 8002c64:	2210      	movs	r2, #16
 8002c66:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8002c6a:	481d      	ldr	r0, [pc, #116]	; (8002ce0 <wizchip_setnetinfo+0xac>)
 8002c6c:	f7ff f988 	bl	8001f80 <WIZCHIP_WRITE_BUF>
   setSUB6R(pnetinfo->sn6);
 8002c70:	2210      	movs	r2, #16
 8002c72:	f104 0132 	add.w	r1, r4, #50	; 0x32
 8002c76:	481b      	ldr	r0, [pc, #108]	; (8002ce4 <wizchip_setnetinfo+0xb0>)
 8002c78:	f7ff f982 	bl	8001f80 <WIZCHIP_WRITE_BUF>
   setLLAR(pnetinfo->lla);
 8002c7c:	2210      	movs	r2, #16
 8002c7e:	f104 0112 	add.w	r1, r4, #18
 8002c82:	4819      	ldr	r0, [pc, #100]	; (8002ce8 <wizchip_setnetinfo+0xb4>)
 8002c84:	f7ff f97c 	bl	8001f80 <WIZCHIP_WRITE_BUF>
   setGUAR(pnetinfo->gua);
 8002c88:	2210      	movs	r2, #16
 8002c8a:	f104 0122 	add.w	r1, r4, #34	; 0x22
 8002c8e:	4817      	ldr	r0, [pc, #92]	; (8002cec <wizchip_setnetinfo+0xb8>)
 8002c90:	f7ff f976 	bl	8001f80 <WIZCHIP_WRITE_BUF>

   for(i=0; i<4; i++)  _DNS_[i]  = pnetinfo->dns[i];
 8002c94:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <wizchip_setnetinfo+0xbc>)
 8002c96:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8002c9a:	f104 0166 	add.w	r1, r4, #102	; 0x66
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 8002ca4:	705a      	strb	r2, [r3, #1]
 8002ca6:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 8002caa:	709a      	strb	r2, [r3, #2]
 8002cac:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
 8002cb0:	70da      	strb	r2, [r3, #3]
 8002cb2:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <wizchip_setnetinfo+0xc0>)
 8002cb4:	f104 0356 	add.w	r3, r4, #86	; 0x56
   for(i=0; i<16; i++) _DNS6_[i] = pnetinfo->dns6[i];
 8002cb8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8002cbc:	4299      	cmp	r1, r3
 8002cbe:	f802 0f01 	strb.w	r0, [r2, #1]!
 8002cc2:	d1f9      	bne.n	8002cb8 <wizchip_setnetinfo+0x84>

   _IPMODE_   = pnetinfo->ipmode;
 8002cc4:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <wizchip_setnetinfo+0xc4>)
 8002cca:	701a      	strb	r2, [r3, #0]
 8002ccc:	bd10      	pop	{r4, pc}
 8002cce:	bf00      	nop
 8002cd0:	00412000 	.word	0x00412000
 8002cd4:	00413000 	.word	0x00413000
 8002cd8:	00413400 	.word	0x00413400
 8002cdc:	00413800 	.word	0x00413800
 8002ce0:	00417000 	.word	0x00417000
 8002ce4:	00416000 	.word	0x00416000
 8002ce8:	00414000 	.word	0x00414000
 8002cec:	00415000 	.word	0x00415000
 8002cf0:	20000194 	.word	0x20000194
 8002cf4:	20000183 	.word	0x20000183
 8002cf8:	20000198 	.word	0x20000198

08002cfc <wizchip_getnetinfo>:
}

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002cfc:	b510      	push	{r4, lr}
 8002cfe:	4604      	mov	r4, r0
   uint8_t i = 0;
   getSHAR(pnetinfo->mac);
 8002d00:	4601      	mov	r1, r0
 8002d02:	2206      	movs	r2, #6
 8002d04:	4824      	ldr	r0, [pc, #144]	; (8002d98 <wizchip_getnetinfo+0x9c>)
 8002d06:	f7ff f961 	bl	8001fcc <WIZCHIP_READ_BUF>

   getGAR(pnetinfo->gw);
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	f104 010e 	add.w	r1, r4, #14
 8002d10:	4822      	ldr	r0, [pc, #136]	; (8002d9c <wizchip_getnetinfo+0xa0>)
 8002d12:	f7ff f95b 	bl	8001fcc <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8002d16:	2204      	movs	r2, #4
 8002d18:	f104 010a 	add.w	r1, r4, #10
 8002d1c:	4820      	ldr	r0, [pc, #128]	; (8002da0 <wizchip_getnetinfo+0xa4>)
 8002d1e:	f7ff f955 	bl	8001fcc <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002d22:	2204      	movs	r2, #4
 8002d24:	1da1      	adds	r1, r4, #6
 8002d26:	481f      	ldr	r0, [pc, #124]	; (8002da4 <wizchip_getnetinfo+0xa8>)
 8002d28:	f7ff f950 	bl	8001fcc <WIZCHIP_READ_BUF>
   
   getGA6R(pnetinfo->gw6);
 8002d2c:	2210      	movs	r2, #16
 8002d2e:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8002d32:	481d      	ldr	r0, [pc, #116]	; (8002da8 <wizchip_getnetinfo+0xac>)
 8002d34:	f7ff f94a 	bl	8001fcc <WIZCHIP_READ_BUF>
   getSUB6R(pnetinfo->sn6);
 8002d38:	2210      	movs	r2, #16
 8002d3a:	f104 0132 	add.w	r1, r4, #50	; 0x32
 8002d3e:	481b      	ldr	r0, [pc, #108]	; (8002dac <wizchip_getnetinfo+0xb0>)
 8002d40:	f7ff f944 	bl	8001fcc <WIZCHIP_READ_BUF>
   getLLAR(pnetinfo->lla);
 8002d44:	2210      	movs	r2, #16
 8002d46:	f104 0112 	add.w	r1, r4, #18
 8002d4a:	4819      	ldr	r0, [pc, #100]	; (8002db0 <wizchip_getnetinfo+0xb4>)
 8002d4c:	f7ff f93e 	bl	8001fcc <WIZCHIP_READ_BUF>
   getGUAR(pnetinfo->gua);
 8002d50:	2210      	movs	r2, #16
 8002d52:	f104 0122 	add.w	r1, r4, #34	; 0x22
 8002d56:	4817      	ldr	r0, [pc, #92]	; (8002db4 <wizchip_getnetinfo+0xb8>)
 8002d58:	f7ff f938 	bl	8001fcc <WIZCHIP_READ_BUF>
   for(i=0; i<4; i++)  pnetinfo->dns[i] = _DNS_[i];
 8002d5c:	4b16      	ldr	r3, [pc, #88]	; (8002db8 <wizchip_getnetinfo+0xbc>)
 8002d5e:	f104 0166 	add.w	r1, r4, #102	; 0x66
 8002d62:	781a      	ldrb	r2, [r3, #0]
 8002d64:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
 8002d68:	785a      	ldrb	r2, [r3, #1]
 8002d6a:	f884 2053 	strb.w	r2, [r4, #83]	; 0x53
 8002d6e:	789a      	ldrb	r2, [r3, #2]
 8002d70:	78db      	ldrb	r3, [r3, #3]
 8002d72:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8002d76:	4a11      	ldr	r2, [pc, #68]	; (8002dbc <wizchip_getnetinfo+0xc0>)
 8002d78:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8002d7c:	f104 0356 	add.w	r3, r4, #86	; 0x56
   for(i=0; i<16; i++) pnetinfo->dns6[i]  = _DNS6_[i];
 8002d80:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8002d84:	f803 0b01 	strb.w	r0, [r3], #1
 8002d88:	4299      	cmp	r1, r3
 8002d8a:	d1f9      	bne.n	8002d80 <wizchip_getnetinfo+0x84>

   pnetinfo->ipmode = _IPMODE_;
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <wizchip_getnetinfo+0xc4>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 8002d94:	bd10      	pop	{r4, pc}
 8002d96:	bf00      	nop
 8002d98:	00412000 	.word	0x00412000
 8002d9c:	00413000 	.word	0x00413000
 8002da0:	00413400 	.word	0x00413400
 8002da4:	00413800 	.word	0x00413800
 8002da8:	00417000 	.word	0x00417000
 8002dac:	00416000 	.word	0x00416000
 8002db0:	00414000 	.word	0x00414000
 8002db4:	00415000 	.word	0x00415000
 8002db8:	20000194 	.word	0x20000194
 8002dbc:	20000183 	.word	0x20000183
 8002dc0:	20000198 	.word	0x20000198

08002dc4 <wizchip_setnetmode>:
}

void wizchip_setnetmode(netmode_type netmode)
{
 8002dc4:	b510      	push	{r4, lr}
 8002dc6:	4604      	mov	r4, r0
   uint32_t tmp = (uint32_t) netmode;
   setNETMR ((uint8_t)tmp);
 8002dc8:	b2c1      	uxtb	r1, r0
 8002dca:	480a      	ldr	r0, [pc, #40]	; (8002df4 <wizchip_setnetmode+0x30>)
 8002dcc:	f7ff f896 	bl	8001efc <WIZCHIP_WRITE>
   setNETMR2((uint8_t)(tmp>>8));
 8002dd0:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8002dd4:	4808      	ldr	r0, [pc, #32]	; (8002df8 <wizchip_setnetmode+0x34>)
 8002dd6:	f7ff f891 	bl	8001efc <WIZCHIP_WRITE>
   setNET4MR((uint8_t)(tmp>>16));
 8002dda:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8002dde:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002de2:	f7ff f88b 	bl	8001efc <WIZCHIP_WRITE>
   setNET6MR((uint8_t)(tmp>>24));
 8002de6:	0e21      	lsrs	r1, r4, #24
 8002de8:	4804      	ldr	r0, [pc, #16]	; (8002dfc <wizchip_setnetmode+0x38>)
}
 8002dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setNET6MR((uint8_t)(tmp>>24));
 8002dee:	f7ff b885 	b.w	8001efc <WIZCHIP_WRITE>
 8002df2:	bf00      	nop
 8002df4:	00400800 	.word	0x00400800
 8002df8:	00400900 	.word	0x00400900
 8002dfc:	00400400 	.word	0x00400400

08002e00 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8002e00:	b510      	push	{r4, lr}
   uint32_t ret = 0;
   ret = getNETMR();
 8002e02:	4808      	ldr	r0, [pc, #32]	; (8002e24 <wizchip_getnetmode+0x24>)
 8002e04:	f7ff f89e 	bl	8001f44 <WIZCHIP_READ>
   ret = (ret << 8)  + getNETMR2();
 8002e08:	4807      	ldr	r0, [pc, #28]	; (8002e28 <wizchip_getnetmode+0x28>)
 8002e0a:	f7ff f89b 	bl	8001f44 <WIZCHIP_READ>
   ret = (ret << 16) + getNET4MR();
 8002e0e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002e12:	f7ff f897 	bl	8001f44 <WIZCHIP_READ>
   ret = (ret << 24) + getNET6MR();
 8002e16:	0604      	lsls	r4, r0, #24
 8002e18:	4804      	ldr	r0, [pc, #16]	; (8002e2c <wizchip_getnetmode+0x2c>)
 8002e1a:	f7ff f893 	bl	8001f44 <WIZCHIP_READ>
   return (netmode_type)ret;
}
 8002e1e:	4420      	add	r0, r4
 8002e20:	bd10      	pop	{r4, pc}
 8002e22:	bf00      	nop
 8002e24:	00400800 	.word	0x00400800
 8002e28:	00400900 	.word	0x00400900
 8002e2c:	00400400 	.word	0x00400400

08002e30 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8002e30:	b510      	push	{r4, lr}
 8002e32:	4604      	mov	r4, r0
   setRCR(nettime->s_retry_cnt);
 8002e34:	7801      	ldrb	r1, [r0, #0]
 8002e36:	480e      	ldr	r0, [pc, #56]	; (8002e70 <wizchip_settimeout+0x40>)
 8002e38:	f7ff f860 	bl	8001efc <WIZCHIP_WRITE>
   setRTR(nettime->s_time_100us);
 8002e3c:	8861      	ldrh	r1, [r4, #2]
 8002e3e:	f44f 0084 	mov.w	r0, #4325376	; 0x420000
 8002e42:	0a09      	lsrs	r1, r1, #8
 8002e44:	f7ff f85a 	bl	8001efc <WIZCHIP_WRITE>
 8002e48:	78a1      	ldrb	r1, [r4, #2]
 8002e4a:	480a      	ldr	r0, [pc, #40]	; (8002e74 <wizchip_settimeout+0x44>)
 8002e4c:	f7ff f856 	bl	8001efc <WIZCHIP_WRITE>
   setSLRCR(nettime->sl_retry_cnt);
 8002e50:	7921      	ldrb	r1, [r4, #4]
 8002e52:	4809      	ldr	r0, [pc, #36]	; (8002e78 <wizchip_settimeout+0x48>)
 8002e54:	f7ff f852 	bl	8001efc <WIZCHIP_WRITE>
   setSLRTR(nettime->sl_time_100us);
 8002e58:	88e1      	ldrh	r1, [r4, #6]
 8002e5a:	4808      	ldr	r0, [pc, #32]	; (8002e7c <wizchip_settimeout+0x4c>)
 8002e5c:	0a09      	lsrs	r1, r1, #8
 8002e5e:	f7ff f84d 	bl	8001efc <WIZCHIP_WRITE>
 8002e62:	79a1      	ldrb	r1, [r4, #6]
 8002e64:	4806      	ldr	r0, [pc, #24]	; (8002e80 <wizchip_settimeout+0x50>)
}
 8002e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setSLRTR(nettime->sl_time_100us);
 8002e6a:	f7ff b847 	b.w	8001efc <WIZCHIP_WRITE>
 8002e6e:	bf00      	nop
 8002e70:	00420400 	.word	0x00420400
 8002e74:	00420100 	.word	0x00420100
 8002e78:	00420c00 	.word	0x00420c00
 8002e7c:	00420800 	.word	0x00420800
 8002e80:	00420900 	.word	0x00420900

08002e84 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8002e84:	b538      	push	{r3, r4, r5, lr}
 8002e86:	4604      	mov	r4, r0
   nettime->s_retry_cnt   = getRCR();
 8002e88:	480e      	ldr	r0, [pc, #56]	; (8002ec4 <wizchip_gettimeout+0x40>)
 8002e8a:	f7ff f85b 	bl	8001f44 <WIZCHIP_READ>
 8002e8e:	7020      	strb	r0, [r4, #0]
   nettime->s_time_100us  = getRTR();
 8002e90:	f44f 0084 	mov.w	r0, #4325376	; 0x420000
 8002e94:	f7ff f856 	bl	8001f44 <WIZCHIP_READ>
 8002e98:	4605      	mov	r5, r0
 8002e9a:	480b      	ldr	r0, [pc, #44]	; (8002ec8 <wizchip_gettimeout+0x44>)
 8002e9c:	f7ff f852 	bl	8001f44 <WIZCHIP_READ>
 8002ea0:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8002ea4:	8060      	strh	r0, [r4, #2]
   nettime->sl_retry_cnt  = getSLRCR();
 8002ea6:	4809      	ldr	r0, [pc, #36]	; (8002ecc <wizchip_gettimeout+0x48>)
 8002ea8:	f7ff f84c 	bl	8001f44 <WIZCHIP_READ>
 8002eac:	7120      	strb	r0, [r4, #4]
   nettime->sl_time_100us = getSLRTR();
 8002eae:	4808      	ldr	r0, [pc, #32]	; (8002ed0 <wizchip_gettimeout+0x4c>)
 8002eb0:	f7ff f848 	bl	8001f44 <WIZCHIP_READ>
 8002eb4:	4605      	mov	r5, r0
 8002eb6:	4807      	ldr	r0, [pc, #28]	; (8002ed4 <wizchip_gettimeout+0x50>)
 8002eb8:	f7ff f844 	bl	8001f44 <WIZCHIP_READ>
 8002ebc:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8002ec0:	80e0      	strh	r0, [r4, #6]
 8002ec2:	bd38      	pop	{r3, r4, r5, pc}
 8002ec4:	00420400 	.word	0x00420400
 8002ec8:	00420100 	.word	0x00420100
 8002ecc:	00420c00 	.word	0x00420c00
 8002ed0:	00420800 	.word	0x00420800
 8002ed4:	00420900 	.word	0x00420900

08002ed8 <ctlnetwork>:
{
 8002ed8:	b510      	push	{r4, lr}
 8002eda:	460c      	mov	r4, r1
   switch(cntype)
 8002edc:	2807      	cmp	r0, #7
 8002ede:	d828      	bhi.n	8002f32 <ctlnetwork+0x5a>
 8002ee0:	e8df f000 	tbb	[pc, r0]
 8002ee4:	110d0904 	.word	0x110d0904
 8002ee8:	221d1915 	.word	0x221d1915
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8002eec:	4608      	mov	r0, r1
 8002eee:	f7ff fea1 	bl	8002c34 <wizchip_setnetinfo>
   return 0;
 8002ef2:	2000      	movs	r0, #0
         break;
 8002ef4:	bd10      	pop	{r4, pc}
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8002ef6:	4608      	mov	r0, r1
 8002ef8:	f7ff ff00 	bl	8002cfc <wizchip_getnetinfo>
 8002efc:	e7f9      	b.n	8002ef2 <ctlnetwork+0x1a>
         wizchip_setnetmode(*(netmode_type*)arg);
 8002efe:	6808      	ldr	r0, [r1, #0]
 8002f00:	f7ff ff60 	bl	8002dc4 <wizchip_setnetmode>
 8002f04:	e7f5      	b.n	8002ef2 <ctlnetwork+0x1a>
         *(netmode_type*)arg = wizchip_getnetmode();
 8002f06:	f7ff ff7b 	bl	8002e00 <wizchip_getnetmode>
 8002f0a:	6020      	str	r0, [r4, #0]
 8002f0c:	e7f1      	b.n	8002ef2 <ctlnetwork+0x1a>
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8002f0e:	4608      	mov	r0, r1
 8002f10:	f7ff ff8e 	bl	8002e30 <wizchip_settimeout>
 8002f14:	e7ed      	b.n	8002ef2 <ctlnetwork+0x1a>
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8002f16:	4608      	mov	r0, r1
 8002f18:	f7ff ffb4 	bl	8002e84 <wizchip_gettimeout>
 8002f1c:	e7e9      	b.n	8002ef2 <ctlnetwork+0x1a>
         setSLPSR(*(uint8_t*)arg);
 8002f1e:	7809      	ldrb	r1, [r1, #0]
 8002f20:	4805      	ldr	r0, [pc, #20]	; (8002f38 <ctlnetwork+0x60>)
 8002f22:	f7fe ffeb 	bl	8001efc <WIZCHIP_WRITE>
 8002f26:	e7e4      	b.n	8002ef2 <ctlnetwork+0x1a>
    	  *(uint8_t*)arg= getSLPSR();
 8002f28:	4803      	ldr	r0, [pc, #12]	; (8002f38 <ctlnetwork+0x60>)
 8002f2a:	f7ff f80b 	bl	8001f44 <WIZCHIP_READ>
 8002f2e:	7020      	strb	r0, [r4, #0]
 8002f30:	e7df      	b.n	8002ef2 <ctlnetwork+0x1a>
         return -1;
 8002f32:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002f36:	bd10      	pop	{r4, pc}
 8002f38:	00212c00 	.word	0x00212c00

08002f3c <WIZnetRecv>:

//todo Add udp functions, ex) sendto recvfrom

/*Shell for mbedtls recv function*/
int WIZnetRecv(void *ctx, unsigned char *buf, unsigned int len )
{
 8002f3c:	b508      	push	{r3, lr}
      return (recv(*((int *)ctx),buf,len));
 8002f3e:	b212      	sxth	r2, r2
 8002f40:	7800      	ldrb	r0, [r0, #0]
 8002f42:	f7ff fb1b 	bl	800257c <recv>
}
 8002f46:	bd08      	pop	{r3, pc}

08002f48 <WIZnetSend>:

/*Shell for mbedtls send function*/
int WIZnetSend(void *ctx, unsigned char *buf, unsigned int len )
{
 8002f48:	b508      	push	{r3, lr}
      return (send(*((int *)ctx),buf,len));
 8002f4a:	b212      	sxth	r2, r2
 8002f4c:	7800      	ldrb	r0, [r0, #0]
 8002f4e:	f7ff fa9f 	bl	8002490 <send>
}
 8002f52:	bd08      	pop	{r3, pc}

08002f54 <WIZnetDebugCB>:
/*Shell for mbedtls debug function.
 *DEBUG_LEBEL can be changed from 0 to 3*/
#ifdef MBEDTLS_DEBUG_C
void WIZnetDebugCB(void *ctx, int level, const char *file, int line, const char *str)
{
    if(level <= DEBUG_LEVEL)
 8002f54:	2902      	cmp	r1, #2
{
 8002f56:	9b00      	ldr	r3, [sp, #0]
    if(level <= DEBUG_LEVEL)
 8002f58:	dc03      	bgt.n	8002f62 <WIZnetDebugCB+0xe>
    {
       printf("%s\r\n",str);
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4801      	ldr	r0, [pc, #4]	; (8002f64 <WIZnetDebugCB+0x10>)
 8002f5e:	f00f b813 	b.w	8011f88 <iprintf>
 8002f62:	4770      	bx	lr
 8002f64:	08013507 	.word	0x08013507

08002f68 <wiz_tls_init>:
#endif

/* SSL context intialization
 * */
unsigned int wiz_tls_init(wiz_tls_context* tlsContext, int* socket_fd)
{
 8002f68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f6a:	4604      	mov	r4, r0
#if defined (MBEDTLS_ERROR_C)
	char error_buf[100];
#endif

#if defined (MBEDTLS_DEBUG_C)
	debug_set_threshold(DEBUG_LEVEL);
 8002f6c:	2002      	movs	r0, #2
{
 8002f6e:	460e      	mov	r6, r1
	debug_set_threshold(DEBUG_LEVEL);
 8002f70:	f003 f948 	bl	8006204 <mbedtls_debug_set_threshold>
#if defined (MBEDTLS_ENTROPY_C)
	tlsContext->entropy = malloc(sizeof(mbedtls_entropy_context));
	mbedtls_entropy_init( tlsContext->entropy);
#endif

	tlsContext->ctr_drbg = malloc(sizeof(mbedtls_ctr_drbg_context));
 8002f74:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002f78:	f00e ff02 	bl	8011d80 <malloc>
 8002f7c:	4605      	mov	r5, r0
 8002f7e:	6020      	str	r0, [r4, #0]
	tlsContext->ssl = malloc(sizeof(mbedtls_ssl_context));
 8002f80:	20bc      	movs	r0, #188	; 0xbc
 8002f82:	f00e fefd 	bl	8011d80 <malloc>
 8002f86:	6060      	str	r0, [r4, #4]
	tlsContext->conf = malloc(sizeof(mbedtls_ssl_config));
 8002f88:	2054      	movs	r0, #84	; 0x54
 8002f8a:	f00e fef9 	bl	8011d80 <malloc>
 8002f8e:	60a0      	str	r0, [r4, #8]
	tlsContext->cacert = malloc(sizeof(mbedtls_x509_crt));
 8002f90:	f44f 709a 	mov.w	r0, #308	; 0x134
 8002f94:	f00e fef4 	bl	8011d80 <malloc>
 8002f98:	60e0      	str	r0, [r4, #12]

	mbedtls_ctr_drbg_init(tlsContext->ctr_drbg);
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	f003 f879 	bl	8006092 <mbedtls_ctr_drbg_init>
	mbedtls_x509_crt_init(tlsContext->cacert);
 8002fa0:	68e0      	ldr	r0, [r4, #12]
 8002fa2:	f00e fa9f 	bl	80114e4 <mbedtls_x509_crt_init>
	mbedtls_ssl_init(tlsContext->ssl);
 8002fa6:	6860      	ldr	r0, [r4, #4]
 8002fa8:	f00c fd30 	bl	800fa0c <mbedtls_ssl_init>
	mbedtls_ssl_config_init(tlsContext->conf);
 8002fac:	68a0      	ldr	r0, [r4, #8]
 8002fae:	f00d f96b 	bl	8010288 <mbedtls_ssl_config_init>
	*/

#if defined (MBEDTLS_X509_CRT_PARSE_C)

#if defined (MBEDTLS_DEBUG_C)
	printf(" Loading the CA root certificate \r\n");
 8002fb2:	4821      	ldr	r0, [pc, #132]	; (8003038 <wiz_tls_init+0xd0>)
 8002fb4:	f00f f85c 	bl	8012070 <puts>
#endif
	mbedtls_ssl_config_defaults((tlsContext->conf),
 8002fb8:	2300      	movs	r3, #0
 8002fba:	68a0      	ldr	r0, [r4, #8]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f00d f966 	bl	8010290 <mbedtls_ssl_config_defaults>
								MBEDTLS_SSL_IS_CLIENT,
								MBEDTLS_SSL_TRANSPORT_STREAM,
								MBEDTLS_SSL_PRESET_DEFAULT);
	mbedtls_ssl_setup(tlsContext->ssl, tlsContext->conf);
 8002fc4:	68a1      	ldr	r1, [r4, #8]
 8002fc6:	6860      	ldr	r0, [r4, #4]
 8002fc8:	f00d f89e 	bl	8010108 <mbedtls_ssl_setup>
	mbedtls_ssl_set_hostname(tlsContext->ssl, sslHostName);
 8002fcc:	491b      	ldr	r1, [pc, #108]	; (800303c <wiz_tls_init+0xd4>)
 8002fce:	6860      	ldr	r0, [r4, #4]
 8002fd0:	f00c fd36 	bl	800fa40 <mbedtls_ssl_set_hostname>

#if defined (MBEDTLS_CERTS_C)
	printf("Certificate[%d] : \r\n %s|end-----\r\n", strlen(CERTIFICATE), (unsigned char *)CERTIFICATE);
 8002fd4:	4a1a      	ldr	r2, [pc, #104]	; (8003040 <wiz_tls_init+0xd8>)
 8002fd6:	f44f 6189 	mov.w	r1, #1096	; 0x448
 8002fda:	481a      	ldr	r0, [pc, #104]	; (8003044 <wiz_tls_init+0xdc>)
 8002fdc:	f00e ffd4 	bl	8011f88 <iprintf>
	ret = mbedtls_x509_crt_parse((tlsContext->cacert),(unsigned char *)CERTIFICATE, strlen(CERTIFICATE)+1);
 8002fe0:	4917      	ldr	r1, [pc, #92]	; (8003040 <wiz_tls_init+0xd8>)
 8002fe2:	f240 4249 	movw	r2, #1097	; 0x449
 8002fe6:	68e0      	ldr	r0, [r4, #12]
 8002fe8:	f00e fdfe 	bl	8011be8 <mbedtls_x509_crt_parse>
#if defined (MBEDTLS_DEBUG_C)
	printf("SSL_CERTS_C not define .\r\n");
#endif
#endif
#endif
	if(ret < 0)
 8002fec:	1e01      	subs	r1, r0, #0
 8002fee:	da02      	bge.n	8002ff6 <wiz_tls_init+0x8e>
	{
#if defined (MBEDTLS_CERTS_C)
		printf("x509_crt_parse failed.%x \r\n",ret);
 8002ff0:	4815      	ldr	r0, [pc, #84]	; (8003048 <wiz_tls_init+0xe0>)
 8002ff2:	f00e ffc9 	bl	8011f88 <iprintf>
	}
	/*
		set ssl session param
	*/

	mbedtls_ssl_conf_ca_chain(tlsContext->conf, tlsContext->cacert, NULL);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	68e1      	ldr	r1, [r4, #12]
 8002ffa:	68a0      	ldr	r0, [r4, #8]
 8002ffc:	f00c fd1d 	bl	800fa3a <mbedtls_ssl_conf_ca_chain>
	//mbedtls_ssl_conf_authmode(tlsContext->conf, MBEDTLS_SSL_VERIFY_REQUIRED);//This option is for server certificate verification
	mbedtls_ssl_conf_authmode(tlsContext->conf, MBEDTLS_SSL_VERIFY_NONE);
 8003000:	68a0      	ldr	r0, [r4, #8]
 8003002:	2100      	movs	r1, #0
 8003004:	f00c fd06 	bl	800fa14 <mbedtls_ssl_conf_authmode>
	mbedtls_ssl_conf_rng(tlsContext->conf,SSLRandomCB,tlsContext->ctr_drbg);
 8003008:	6822      	ldr	r2, [r4, #0]
 800300a:	68a0      	ldr	r0, [r4, #8]
 800300c:	490f      	ldr	r1, [pc, #60]	; (800304c <wiz_tls_init+0xe4>)
 800300e:	f00c fd08 	bl	800fa22 <mbedtls_ssl_conf_rng>
#if defined (MBEDTLS_DEBUG_C)
	mbedtls_ssl_conf_dbg(tlsContext->conf, WIZnetDebugCB, stdout);
 8003012:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <wiz_tls_init+0xe8>)
 8003014:	68a0      	ldr	r0, [r4, #8]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	490e      	ldr	r1, [pc, #56]	; (8003054 <wiz_tls_init+0xec>)
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	f00c fd04 	bl	800fa28 <mbedtls_ssl_conf_dbg>
#endif
	mbedtls_ssl_set_bio(tlsContext->ssl, socket_fd, SSLSendCB, SSLRecvCB, SSLRecvTimeOutCB);		 //set client's socket send and receive functions
 8003020:	2300      	movs	r3, #0
 8003022:	6860      	ldr	r0, [r4, #4]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	4a0c      	ldr	r2, [pc, #48]	; (8003058 <wiz_tls_init+0xf0>)
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <wiz_tls_init+0xf4>)
 800302a:	4631      	mov	r1, r6
 800302c:	f00c fcff 	bl	800fa2e <mbedtls_ssl_set_bio>

	return 1;
}
 8003030:	2001      	movs	r0, #1
 8003032:	b002      	add	sp, #8
 8003034:	bd70      	pop	{r4, r5, r6, pc}
 8003036:	bf00      	nop
 8003038:	080139d3 	.word	0x080139d3
 800303c:	200000a4 	.word	0x200000a4
 8003040:	0801350c 	.word	0x0801350c
 8003044:	080139f6 	.word	0x080139f6
 8003048:	08013a19 	.word	0x08013a19
 800304c:	0800314b 	.word	0x0800314b
 8003050:	200000e4 	.word	0x200000e4
 8003054:	08002f55 	.word	0x08002f55
 8003058:	08002f49 	.word	0x08002f49
 800305c:	08002f3d 	.word	0x08002f3d

08003060 <wiz_tls_deinit>:

/*Free the memory for ssl context*/
void wiz_tls_deinit(wiz_tls_context* tlsContext)
{
 8003060:	b510      	push	{r4, lr}
 8003062:	4604      	mov	r4, r0
	/*  free SSL context memory  */
	mbedtls_ssl_free( tlsContext->ssl );
 8003064:	6840      	ldr	r0, [r0, #4]
 8003066:	f00d f8a7 	bl	80101b8 <mbedtls_ssl_free>
	mbedtls_ssl_config_free( tlsContext->conf );
 800306a:	68a0      	ldr	r0, [r4, #8]
 800306c:	f00d f94c 	bl	8010308 <mbedtls_ssl_config_free>
#if defined (MBEDTLS_DEBUG_C)
	mbedtls_ctr_drbg_free( tlsContext->ctr_drbg );
 8003070:	6820      	ldr	r0, [r4, #0]
 8003072:	f003 f813 	bl	800609c <mbedtls_ctr_drbg_free>
#endif
	//mbedtls_entropy_free( tlsContext->entropy );
#if defined(MBEDTLS_X509_CRT_PARSE_C)
	mbedtls_x509_crt_free( tlsContext->cacert );
 8003076:	68e0      	ldr	r0, [r4, #12]
 8003078:	f00e fa39 	bl	80114ee <mbedtls_x509_crt_free>
#endif
	free(tlsContext->ctr_drbg);
 800307c:	6820      	ldr	r0, [r4, #0]
 800307e:	f00e fe87 	bl	8011d90 <free>
	free(tlsContext->ssl);
 8003082:	6860      	ldr	r0, [r4, #4]
 8003084:	f00e fe84 	bl	8011d90 <free>
	free(tlsContext->conf);
 8003088:	68a0      	ldr	r0, [r4, #8]
 800308a:	f00e fe81 	bl	8011d90 <free>
	free(tlsContext->cacert);
 800308e:	68e0      	ldr	r0, [r4, #12]
}
 8003090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free(tlsContext->cacert);
 8003094:	f00e be7c 	b.w	8011d90 <free>

08003098 <wiz_tls_connect>:

/* SSL handshake */
unsigned int wiz_tls_connect(wiz_tls_context* tlsContext, unsigned short port, uint8_t * addr)
{
 8003098:	b570      	push	{r4, r5, r6, lr}
 800309a:	4605      	mov	r5, r0
 800309c:	460e      	mov	r6, r1
 800309e:	4614      	mov	r4, r2
    int ret;

    memset(tempBuf,0,1024);
 80030a0:	2100      	movs	r1, #0
 80030a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030a6:	481d      	ldr	r0, [pc, #116]	; (800311c <wiz_tls_connect+0x84>)
 80030a8:	f00e feae 	bl	8011e08 <memset>

	/*socket open*/
	ret = socket(*((uint8_t*)(tlsContext->ssl->p_bio)), Sn_MR_TCP, 0, 0x00);
 80030ac:	686b      	ldr	r3, [r5, #4]
 80030ae:	2101      	movs	r1, #1
 80030b0:	69d8      	ldr	r0, [r3, #28]
 80030b2:	2300      	movs	r3, #0
 80030b4:	7800      	ldrb	r0, [r0, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	f7ff f86c 	bl	8002194 <socket>
	if(ret != *((uint8_t*)(tlsContext->ssl->p_bio)))
 80030bc:	686a      	ldr	r2, [r5, #4]
 80030be:	69d2      	ldr	r2, [r2, #28]
 80030c0:	7812      	ldrb	r2, [r2, #0]
 80030c2:	4290      	cmp	r0, r2
 80030c4:	d000      	beq.n	80030c8 <wiz_tls_connect+0x30>
		return ret;
 80030c6:	bd70      	pop	{r4, r5, r6, pc}

	/*Connect to the target*/
	ret = connect(*((uint8_t*)tlsContext->ssl->p_bio), addr, port, 4);
 80030c8:	2304      	movs	r3, #4
 80030ca:	4632      	mov	r2, r6
 80030cc:	4621      	mov	r1, r4
 80030ce:	f7ff f947 	bl	8002360 <connect>
	if(ret != SOCK_OK)
 80030d2:	2801      	cmp	r0, #1
 80030d4:	d10f      	bne.n	80030f6 <wiz_tls_connect+0x5e>
		return ret;

#if defined(MBEDTLS_DEBUG_C)
    printf( "  . Performing the SSL/TLS handshake..." );
 80030d6:	4812      	ldr	r0, [pc, #72]	; (8003120 <wiz_tls_connect+0x88>)
 80030d8:	f00e ff56 	bl	8011f88 <iprintf>
#endif

    while( ( ret = mbedtls_ssl_handshake( tlsContext->ssl ) ) != 0 )
 80030dc:	6868      	ldr	r0, [r5, #4]
 80030de:	f00c fcff 	bl	800fae0 <mbedtls_ssl_handshake>
 80030e2:	4604      	mov	r4, r0
 80030e4:	b940      	cbnz	r0, 80030f8 <wiz_tls_connect+0x60>
            return( -1 );
        }
    }

#if defined(MBEDTLS_DEBUG_C)
    printf( "ok\n\r    [ Ciphersuite is %s ]\n\r",
 80030e6:	6868      	ldr	r0, [r5, #4]
 80030e8:	f00c fce0 	bl	800faac <mbedtls_ssl_get_ciphersuite>
 80030ec:	4601      	mov	r1, r0
 80030ee:	480d      	ldr	r0, [pc, #52]	; (8003124 <wiz_tls_connect+0x8c>)
 80030f0:	f00e ff4a 	bl	8011f88 <iprintf>
            mbedtls_ssl_get_ciphersuite( tlsContext->ssl ) );
#endif

    return( 0 );
 80030f4:	4620      	mov	r0, r4
}
 80030f6:	bd70      	pop	{r4, r5, r6, pc}
        if( ret != MBEDTLS_ERR_SSL_WANT_READ && ret != MBEDTLS_ERR_SSL_WANT_WRITE )
 80030f8:	f024 0380 	bic.w	r3, r4, #128	; 0x80
 80030fc:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 8003100:	d0ec      	beq.n	80030dc <wiz_tls_connect+0x44>
            mbedtls_strerror( ret, (char *) tempBuf, DEBUG_BUFFER_SIZE );
 8003102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003106:	4905      	ldr	r1, [pc, #20]	; (800311c <wiz_tls_connect+0x84>)
 8003108:	f003 fa52 	bl	80065b0 <mbedtls_strerror>
            printf( " failed\n\r  ! mbedtls_ssl_handshake returned %d: %s\n\r", ret, tempBuf );
 800310c:	4a03      	ldr	r2, [pc, #12]	; (800311c <wiz_tls_connect+0x84>)
 800310e:	4621      	mov	r1, r4
 8003110:	4805      	ldr	r0, [pc, #20]	; (8003128 <wiz_tls_connect+0x90>)
 8003112:	f00e ff39 	bl	8011f88 <iprintf>
            return( -1 );
 8003116:	f04f 30ff 	mov.w	r0, #4294967295
 800311a:	bd70      	pop	{r4, r5, r6, pc}
 800311c:	20000199 	.word	0x20000199
 8003120:	08013956 	.word	0x08013956
 8003124:	080139b3 	.word	0x080139b3
 8003128:	0801397e 	.word	0x0801397e

0800312c <wiz_tls_read>:

unsigned int wiz_tls_read(wiz_tls_context* tlsContext, unsigned char* readbuf, unsigned int len)
{
	return mbedtls_ssl_read( tlsContext->ssl, readbuf, len );
 800312c:	6840      	ldr	r0, [r0, #4]
 800312e:	f00c bd05 	b.w	800fb3c <mbedtls_ssl_read>

08003132 <wiz_tls_write>:
}

unsigned int wiz_tls_write(wiz_tls_context* tlsContext, unsigned char* writebuf, unsigned int len)
{
	return mbedtls_ssl_write( tlsContext->ssl, writebuf, len );
 8003132:	6840      	ldr	r0, [r0, #4]
 8003134:	f00c be08 	b.w	800fd48 <mbedtls_ssl_write>

08003138 <wiz_tls_close_notify>:
	}
}

/* ssl Close notify */
unsigned int wiz_tls_close_notify(wiz_tls_context* tlsContext)
{
 8003138:	b510      	push	{r4, lr}
 800313a:	4604      	mov	r4, r0
	uint32_t rc;
	do rc = mbedtls_ssl_close_notify( tlsContext->ssl );
 800313c:	6860      	ldr	r0, [r4, #4]
 800313e:	f00c fe73 	bl	800fe28 <mbedtls_ssl_close_notify>
	while( rc == MBEDTLS_ERR_SSL_WANT_WRITE );
 8003142:	f510 4fd1 	cmn.w	r0, #26752	; 0x6880
 8003146:	d0f9      	beq.n	800313c <wiz_tls_close_notify+0x4>
	//SSLDeinit(tlsContext);
	return rc;
}
 8003148:	bd10      	pop	{r4, pc}

0800314a <SSLRandomCB>:
{
	srand(randSeed);
}

int SSLRandomCB( void *p_rng, unsigned char *output, size_t output_len )
{
 800314a:	b570      	push	{r4, r5, r6, lr}
 800314c:	460d      	mov	r5, r1
    int i;

	if(output_len <= 0)
 800314e:	b18a      	cbz	r2, 8003174 <SSLRandomCB+0x2a>
	{
         return (1);
	}
    for(i = 0;i < output_len;i++)
    {
       *output++ = rand() % 0xff;
 8003150:	26ff      	movs	r6, #255	; 0xff
 8003152:	188c      	adds	r4, r1, r2
    for(i = 0;i < output_len;i++)
 8003154:	42a5      	cmp	r5, r4
 8003156:	d105      	bne.n	8003164 <SSLRandomCB+0x1a>
	}
    srand(rand());
 8003158:	f00e ffba 	bl	80120d0 <rand>
 800315c:	f00e ff90 	bl	8012080 <srand>
	return (0);
 8003160:	2000      	movs	r0, #0
 8003162:	bd70      	pop	{r4, r5, r6, pc}
       *output++ = rand() % 0xff;
 8003164:	f00e ffb4 	bl	80120d0 <rand>
 8003168:	fb90 f3f6 	sdiv	r3, r0, r6
 800316c:	4418      	add	r0, r3
 800316e:	f805 0b01 	strb.w	r0, [r5], #1
 8003172:	e7ef      	b.n	8003154 <SSLRandomCB+0xa>
         return (1);
 8003174:	2001      	movs	r0, #1
}
 8003176:	bd70      	pop	{r4, r5, r6, pc}

08003178 <aes_gen_tables>:
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8003178:	2301      	movs	r3, #1
 800317a:	2200      	movs	r2, #0
{
 800317c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003180:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    {
        pow[i] = x;
        log[x] = i;
 8003184:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
        pow[i] = x;
 8003188:	a804      	add	r0, sp, #16
 800318a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 800318e:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003192:	bf18      	it	ne
 8003194:	201b      	movne	r0, #27
        log[x] = i;
 8003196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 800319a:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    for( i = 0, x = 1; i < 256; i++ )
 800319e:	3201      	adds	r2, #1
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80031a0:	4043      	eors	r3, r0
    for( i = 0, x = 1; i < 256; i++ )
 80031a2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80031a6:	b2db      	uxtb	r3, r3
    for( i = 0, x = 1; i < 256; i++ )
 80031a8:	d1ee      	bne.n	8003188 <aes_gen_tables+0x10>
 80031aa:	2301      	movs	r3, #1
 80031ac:	2200      	movs	r2, #0
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 80031ae:	4c67      	ldr	r4, [pc, #412]	; (800334c <aes_gen_tables+0x1d4>)
        x = XTIME( x ) & 0xFF;
 80031b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80031b4:	bf18      	it	ne
 80031b6:	201b      	movne	r0, #27
        RCON[i] = (uint32_t) x;
 80031b8:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    for( i = 0, x = 1; i < 10; i++ )
 80031bc:	3201      	adds	r2, #1
        x = XTIME( x ) & 0xFF;
 80031be:	ea80 0343 	eor.w	r3, r0, r3, lsl #1
    for( i = 0, x = 1; i < 10; i++ )
 80031c2:	2a0a      	cmp	r2, #10
        x = XTIME( x ) & 0xFF;
 80031c4:	b2db      	uxtb	r3, r3
    for( i = 0, x = 1; i < 10; i++ )
 80031c6:	d1f3      	bne.n	80031b0 <aes_gen_tables+0x38>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 80031c8:	2363      	movs	r3, #99	; 0x63
 80031ca:	4e61      	ldr	r6, [pc, #388]	; (8003350 <aes_gen_tables+0x1d8>)
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
 80031cc:	2401      	movs	r4, #1
    FSb[0x00] = 0x63;
 80031ce:	7033      	strb	r3, [r6, #0]
    RSb[0x63] = 0x00;
 80031d0:	2300      	movs	r3, #0
 80031d2:	4d60      	ldr	r5, [pc, #384]	; (8003354 <aes_gen_tables+0x1dc>)
 80031d4:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63
    {
        x = pow[255 - log[i]];
 80031d8:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
 80031dc:	aa04      	add	r2, sp, #16
 80031de:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80031e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80031e6:	ea4f 1ee3 	mov.w	lr, r3, asr #7
 80031ea:	ea4e 0e43 	orr.w	lr, lr, r3, lsl #1
 80031ee:	fa5f fe8e 	uxtb.w	lr, lr
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80031f2:	ea4f 17ee 	mov.w	r7, lr, asr #7
 80031f6:	ea47 074e 	orr.w	r7, r7, lr, lsl #1
 80031fa:	b2ff      	uxtb	r7, r7
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80031fc:	11f8      	asrs	r0, r7, #7
 80031fe:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 8003202:	b2c0      	uxtb	r0, r0
 8003204:	f083 0363 	eor.w	r3, r3, #99	; 0x63
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8003208:	11c2      	asrs	r2, r0, #7
 800320a:	ea83 030e 	eor.w	r3, r3, lr
 800320e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8003212:	407b      	eors	r3, r7
 8003214:	4043      	eors	r3, r0
 8003216:	b2d2      	uxtb	r2, r2
        x ^= y ^ 0x63;
 8003218:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
 800321a:	5533      	strb	r3, [r6, r4]
        RSb[x] = (unsigned char) i;
 800321c:	54ec      	strb	r4, [r5, r3]
    for( i = 1; i < 256; i++ )
 800321e:	3401      	adds	r4, #1
 8003220:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8003224:	d1d8      	bne.n	80031d8 <aes_gen_tables+0x60>
        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8003226:	2200      	movs	r2, #0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8003228:	6b8b      	ldr	r3, [r1, #56]	; 0x38
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 800322a:	6acf      	ldr	r7, [r1, #44]	; 0x2c
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800322c:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 800322e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
        x = FSb[i];
 8003230:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8003350 <aes_gen_tables+0x1d8>
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8003234:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8003236:	6b4b      	ldr	r3, [r1, #52]	; 0x34
        FT0[i] = ( (uint32_t) y       ) ^
 8003238:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8003368 <aes_gen_tables+0x1f0>
        FT1[i] = ROTL8( FT0[i] );
 800323c:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800336c <aes_gen_tables+0x1f4>
        FT2[i] = ROTL8( FT1[i] );
 8003240:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8003370 <aes_gen_tables+0x1f8>
        FT3[i] = ROTL8( FT2[i] );
 8003244:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8003374 <aes_gen_tables+0x1fc>
        x = RSb[i];
 8003248:	f8df b108 	ldr.w	fp, [pc, #264]	; 8003354 <aes_gen_tables+0x1dc>
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 800324c:	9303      	str	r3, [sp, #12]
        x = FSb[i];
 800324e:	f812 100e 	ldrb.w	r1, [r2, lr]
 8003252:	0094      	lsls	r4, r2, #2
        y = XTIME( x ) & 0xFF;
 8003254:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003258:	bf14      	ite	ne
 800325a:	201b      	movne	r0, #27
 800325c:	2000      	moveq	r0, #0
                 ( (uint32_t) x << 16 ) ^
 800325e:	040b      	lsls	r3, r1, #16
        y = XTIME( x ) & 0xFF;
 8003260:	ea80 0041 	eor.w	r0, r0, r1, lsl #1
 8003264:	b2c0      	uxtb	r0, r0
                 ( (uint32_t) x <<  8 ) ^
 8003266:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800326a:	4043      	eors	r3, r0
        z =  ( y ^ x ) & 0xFF;
 800326c:	4041      	eors	r1, r0
                 ( (uint32_t) x << 16 ) ^
 800326e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
        FT1[i] = ROTL8( FT0[i] );
 8003272:	ea4f 6133 	mov.w	r1, r3, ror #24
        FT0[i] = ( (uint32_t) y       ) ^
 8003276:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
        FT1[i] = ROTL8( FT0[i] );
 800327a:	f848 1022 	str.w	r1, [r8, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 800327e:	ea4f 4133 	mov.w	r1, r3, ror #16
        FT3[i] = ROTL8( FT2[i] );
 8003282:	ea4f 2333 	mov.w	r3, r3, ror #8
 8003286:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
        x = RSb[i];
 800328a:	f81b 3002 	ldrb.w	r3, [fp, r2]
        FT2[i] = ROTL8( FT1[i] );
 800328e:	f849 1022 	str.w	r1, [r9, r2, lsl #2]
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8003292:	2b00      	cmp	r3, #0
 8003294:	d054      	beq.n	8003340 <aes_gen_tables+0x1c8>
 8003296:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 800329a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800329e:	9801      	ldr	r0, [sp, #4]
 80032a0:	1845      	adds	r5, r0, r1
 80032a2:	20ff      	movs	r0, #255	; 0xff
 80032a4:	fb95 f6f0 	sdiv	r6, r5, r0
 80032a8:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 80032ac:	1bae      	subs	r6, r5, r6
 80032ae:	ad04      	add	r5, sp, #16
 80032b0:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80032b4:	9e02      	ldr	r6, [sp, #8]
 80032b6:	4431      	add	r1, r6
 80032b8:	fb91 f0f0 	sdiv	r0, r1, r0
 80032bc:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 80032c0:	1a09      	subs	r1, r1, r0
 80032c2:	a804      	add	r0, sp, #16
 80032c4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80032c8:	0209      	lsls	r1, r1, #8
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80032ca:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d03a      	beq.n	8003346 <aes_gen_tables+0x1ce>
 80032d0:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 80032d4:	9803      	ldr	r0, [sp, #12]
 80032d6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80032da:	4401      	add	r1, r0
 80032dc:	20ff      	movs	r0, #255	; 0xff
 80032de:	fb91 f0f0 	sdiv	r0, r1, r0
 80032e2:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 80032e6:	1a08      	subs	r0, r1, r0
 80032e8:	a904      	add	r1, sp, #16
 80032ea:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80032ee:	0409      	lsls	r1, r1, #16
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80032f0:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80032f2:	b173      	cbz	r3, 8003312 <aes_gen_tables+0x19a>
 80032f4:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 80032f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032fc:	21ff      	movs	r1, #255	; 0xff
 80032fe:	443b      	add	r3, r7
 8003300:	fb93 f1f1 	sdiv	r1, r3, r1
 8003304:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8003308:	1a59      	subs	r1, r3, r1
 800330a:	ab04      	add	r3, sp, #16
 800330c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003310:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8003312:	405d      	eors	r5, r3
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8003314:	4b10      	ldr	r3, [pc, #64]	; (8003358 <aes_gen_tables+0x1e0>)

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 8003316:	ea4f 6135 	mov.w	r1, r5, ror #24
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800331a:	50e5      	str	r5, [r4, r3]
        RT1[i] = ROTL8( RT0[i] );
 800331c:	4b0f      	ldr	r3, [pc, #60]	; (800335c <aes_gen_tables+0x1e4>)
    for( i = 0; i < 256; i++ )
 800331e:	3201      	adds	r2, #1
        RT1[i] = ROTL8( RT0[i] );
 8003320:	50e1      	str	r1, [r4, r3]
        RT2[i] = ROTL8( RT1[i] );
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <aes_gen_tables+0x1e8>)
 8003324:	ea4f 4135 	mov.w	r1, r5, ror #16
 8003328:	50e1      	str	r1, [r4, r3]
        RT3[i] = ROTL8( RT2[i] );
 800332a:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <aes_gen_tables+0x1ec>)
 800332c:	ea4f 2535 	mov.w	r5, r5, ror #8
    for( i = 0; i < 256; i++ )
 8003330:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        RT3[i] = ROTL8( RT2[i] );
 8003334:	50e5      	str	r5, [r4, r3]
    for( i = 0; i < 256; i++ )
 8003336:	d18a      	bne.n	800324e <aes_gen_tables+0xd6>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 8003338:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
 800333c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8003340:	461d      	mov	r5, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8003342:	4619      	mov	r1, r3
 8003344:	e7c1      	b.n	80032ca <aes_gen_tables+0x152>
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8003346:	4619      	mov	r1, r3
 8003348:	e7d2      	b.n	80032f0 <aes_gen_tables+0x178>
 800334a:	bf00      	nop
 800334c:	2000169c 	.word	0x2000169c
 8003350:	20000599 	.word	0x20000599
 8003354:	200016c4 	.word	0x200016c4
 8003358:	200017c4 	.word	0x200017c4
 800335c:	20001bc4 	.word	0x20001bc4
 8003360:	20001fc4 	.word	0x20001fc4
 8003364:	200023c4 	.word	0x200023c4
 8003368:	2000069c 	.word	0x2000069c
 800336c:	20000a9c 	.word	0x20000a9c
 8003370:	20000e9c 	.word	0x20000e9c
 8003374:	2000129c 	.word	0x2000129c

08003378 <mbedtls_aes_init>:

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8003378:	f44f 728c 	mov.w	r2, #280	; 0x118
 800337c:	2100      	movs	r1, #0
 800337e:	f00e bd43 	b.w	8011e08 <memset>

08003382 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 8003382:	b118      	cbz	r0, 800338c <mbedtls_aes_free+0xa>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8003384:	f44f 718c 	mov.w	r1, #280	; 0x118
 8003388:	f005 b8ca 	b.w	8008520 <mbedtls_platform_zeroize>
 800338c:	4770      	bx	lr
	...

08003390 <mbedtls_aes_setkey_enc>:
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8003390:	2ac0      	cmp	r2, #192	; 0xc0
{
 8003392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003394:	4605      	mov	r5, r0
 8003396:	460c      	mov	r4, r1
 8003398:	4616      	mov	r6, r2
    switch( keybits )
 800339a:	d058      	beq.n	800344e <mbedtls_aes_setkey_enc+0xbe>
 800339c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80033a0:	d057      	beq.n	8003452 <mbedtls_aes_setkey_enc+0xc2>
 80033a2:	2a80      	cmp	r2, #128	; 0x80
 80033a4:	f040 810a 	bne.w	80035bc <mbedtls_aes_setkey_enc+0x22c>
    {
        case 128: ctx->nr = 10; break;
 80033a8:	230a      	movs	r3, #10
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 80033aa:	4f86      	ldr	r7, [pc, #536]	; (80035c4 <mbedtls_aes_setkey_enc+0x234>)
        case 256: ctx->nr = 14; break;
 80033ac:	602b      	str	r3, [r5, #0]
    if( aes_init_done == 0 )
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	b91b      	cbnz	r3, 80033ba <mbedtls_aes_setkey_enc+0x2a>
    {
        aes_gen_tables();
 80033b2:	f7ff fee1 	bl	8003178 <aes_gen_tables>
        aes_init_done = 1;
 80033b6:	2301      	movs	r3, #1
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	4621      	mov	r1, r4
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 80033bc:	2200      	movs	r2, #0
    ctx->rk = RK = ctx->buf;
 80033be:	f105 0008 	add.w	r0, r5, #8
 80033c2:	6068      	str	r0, [r5, #4]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 80033c4:	0976      	lsrs	r6, r6, #5
 80033c6:	42b2      	cmp	r2, r6
 80033c8:	f101 0104 	add.w	r1, r1, #4
 80033cc:	d143      	bne.n	8003456 <mbedtls_aes_setkey_enc+0xc6>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 80033ce:	682b      	ldr	r3, [r5, #0]
 80033d0:	2b0c      	cmp	r3, #12
 80033d2:	d052      	beq.n	800347a <mbedtls_aes_setkey_enc+0xea>
 80033d4:	2b0e      	cmp	r3, #14
 80033d6:	f000 8093 	beq.w	8003500 <mbedtls_aes_setkey_enc+0x170>
 80033da:	2b0a      	cmp	r3, #10
 80033dc:	d135      	bne.n	800344a <mbedtls_aes_setkey_enc+0xba>
 80033de:	2400      	movs	r4, #0
 80033e0:	f105 0018 	add.w	r0, r5, #24
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 80033e4:	4e78      	ldr	r6, [pc, #480]	; (80035c8 <mbedtls_aes_setkey_enc+0x238>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80033e6:	4d79      	ldr	r5, [pc, #484]	; (80035cc <mbedtls_aes_setkey_enc+0x23c>)
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80033e8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80033ec:	f850 1c04 	ldr.w	r1, [r0, #-4]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80033f0:	f850 3c10 	ldr.w	r3, [r0, #-16]
            for( i = 0; i < 10; i++, RK += 4 )
 80033f4:	3401      	adds	r4, #1
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80033f6:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80033f8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80033fc:	5caa      	ldrb	r2, [r5, r2]
            for( i = 0; i < 10; i++, RK += 4 )
 80033fe:	2c0a      	cmp	r4, #10
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8003400:	ea83 0302 	eor.w	r3, r3, r2
 8003404:	ea4f 6211 	mov.w	r2, r1, lsr #24
 8003408:	5caa      	ldrb	r2, [r5, r2]
 800340a:	f100 0010 	add.w	r0, r0, #16
 800340e:	ea83 4302 	eor.w	r3, r3, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8003412:	b2ca      	uxtb	r2, r1
 8003414:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8003416:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 800341a:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800341e:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8003420:	ea83 2302 	eor.w	r3, r3, r2, lsl #8

                RK[5]  = RK[1] ^ RK[4];
 8003424:	f850 2c1c 	ldr.w	r2, [r0, #-28]
                RK[4]  = RK[0] ^ RCON[i] ^
 8003428:	f840 3c10 	str.w	r3, [r0, #-16]
                RK[5]  = RK[1] ^ RK[4];
 800342c:	ea83 0302 	eor.w	r3, r3, r2
                RK[6]  = RK[2] ^ RK[5];
 8003430:	f850 2c18 	ldr.w	r2, [r0, #-24]
                RK[5]  = RK[1] ^ RK[4];
 8003434:	f840 3c0c 	str.w	r3, [r0, #-12]
                RK[6]  = RK[2] ^ RK[5];
 8003438:	ea83 0302 	eor.w	r3, r3, r2
 800343c:	f840 3c08 	str.w	r3, [r0, #-8]
                RK[7]  = RK[3] ^ RK[6];
 8003440:	ea83 0301 	eor.w	r3, r3, r1
 8003444:	f840 3c04 	str.w	r3, [r0, #-4]
            for( i = 0; i < 10; i++, RK += 4 )
 8003448:	d1ce      	bne.n	80033e8 <mbedtls_aes_setkey_enc+0x58>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 800344a:	2000      	movs	r0, #0
}
 800344c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 192: ctx->nr = 12; break;
 800344e:	230c      	movs	r3, #12
 8003450:	e7ab      	b.n	80033aa <mbedtls_aes_setkey_enc+0x1a>
        case 256: ctx->nr = 14; break;
 8003452:	230e      	movs	r3, #14
 8003454:	e7a9      	b.n	80033aa <mbedtls_aes_setkey_enc+0x1a>
        GET_UINT32_LE( RK[i], key, i << 2 );
 8003456:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 800345a:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 800345e:	041b      	lsls	r3, r3, #16
 8003460:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8003464:	f811 4c04 	ldrb.w	r4, [r1, #-4]
 8003468:	4323      	orrs	r3, r4
 800346a:	f811 4c01 	ldrb.w	r4, [r1, #-1]
 800346e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8003472:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8003476:	3201      	adds	r2, #1
 8003478:	e7a5      	b.n	80033c6 <mbedtls_aes_setkey_enc+0x36>
    switch( ctx->nr )
 800347a:	2400      	movs	r4, #0
 800347c:	f105 0020 	add.w	r0, r5, #32
                RK[6]  = RK[0] ^ RCON[i] ^
 8003480:	4e51      	ldr	r6, [pc, #324]	; (80035c8 <mbedtls_aes_setkey_enc+0x238>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8003482:	4d52      	ldr	r5, [pc, #328]	; (80035cc <mbedtls_aes_setkey_enc+0x23c>)
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8003484:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8003488:	f850 1c04 	ldr.w	r1, [r0, #-4]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800348c:	f850 3c18 	ldr.w	r3, [r0, #-24]
            for( i = 0; i < 8; i++, RK += 6 )
 8003490:	3401      	adds	r4, #1
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8003492:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8003494:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8003498:	5caa      	ldrb	r2, [r5, r2]
            for( i = 0; i < 8; i++, RK += 6 )
 800349a:	2c08      	cmp	r4, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800349c:	ea83 0302 	eor.w	r3, r3, r2
 80034a0:	ea4f 6211 	mov.w	r2, r1, lsr #24
 80034a4:	5caa      	ldrb	r2, [r5, r2]
 80034a6:	f100 0018 	add.w	r0, r0, #24
 80034aa:	ea83 4302 	eor.w	r3, r3, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 80034ae:	b2ca      	uxtb	r2, r1
 80034b0:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80034b2:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 80034b6:	f3c1 4207 	ubfx	r2, r1, #16, #8
 80034ba:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80034bc:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
                RK[7]  = RK[1] ^ RK[6];
 80034c0:	f850 2c2c 	ldr.w	r2, [r0, #-44]
                RK[6]  = RK[0] ^ RCON[i] ^
 80034c4:	f840 3c18 	str.w	r3, [r0, #-24]
                RK[7]  = RK[1] ^ RK[6];
 80034c8:	ea83 0302 	eor.w	r3, r3, r2
                RK[8]  = RK[2] ^ RK[7];
 80034cc:	f850 2c28 	ldr.w	r2, [r0, #-40]
                RK[7]  = RK[1] ^ RK[6];
 80034d0:	f840 3c14 	str.w	r3, [r0, #-20]
                RK[8]  = RK[2] ^ RK[7];
 80034d4:	ea83 0302 	eor.w	r3, r3, r2
                RK[9]  = RK[3] ^ RK[8];
 80034d8:	f850 2c24 	ldr.w	r2, [r0, #-36]
                RK[8]  = RK[2] ^ RK[7];
 80034dc:	f840 3c10 	str.w	r3, [r0, #-16]
                RK[9]  = RK[3] ^ RK[8];
 80034e0:	ea83 0302 	eor.w	r3, r3, r2
                RK[10] = RK[4] ^ RK[9];
 80034e4:	f850 2c20 	ldr.w	r2, [r0, #-32]
                RK[9]  = RK[3] ^ RK[8];
 80034e8:	f840 3c0c 	str.w	r3, [r0, #-12]
                RK[10] = RK[4] ^ RK[9];
 80034ec:	ea83 0302 	eor.w	r3, r3, r2
 80034f0:	f840 3c08 	str.w	r3, [r0, #-8]
                RK[11] = RK[5] ^ RK[10];
 80034f4:	ea83 0301 	eor.w	r3, r3, r1
 80034f8:	f840 3c04 	str.w	r3, [r0, #-4]
            for( i = 0; i < 8; i++, RK += 6 )
 80034fc:	d1c2      	bne.n	8003484 <mbedtls_aes_setkey_enc+0xf4>
 80034fe:	e7a4      	b.n	800344a <mbedtls_aes_setkey_enc+0xba>
    switch( ctx->nr )
 8003500:	2400      	movs	r4, #0
 8003502:	f105 0028 	add.w	r0, r5, #40	; 0x28
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8003506:	4a31      	ldr	r2, [pc, #196]	; (80035cc <mbedtls_aes_setkey_enc+0x23c>)
                RK[8]  = RK[0] ^ RCON[i] ^
 8003508:	4d2f      	ldr	r5, [pc, #188]	; (80035c8 <mbedtls_aes_setkey_enc+0x238>)
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800350a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800350e:	f850 1c04 	ldr.w	r1, [r0, #-4]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8003512:	f850 6c20 	ldr.w	r6, [r0, #-32]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8003516:	f850 7c10 	ldr.w	r7, [r0, #-16]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800351a:	4073      	eors	r3, r6
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800351c:	f3c1 2607 	ubfx	r6, r1, #8, #8
 8003520:	5d96      	ldrb	r6, [r2, r6]
            for( i = 0; i < 7; i++, RK += 8 )
 8003522:	3401      	adds	r4, #1
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8003524:	4073      	eors	r3, r6
 8003526:	0e0e      	lsrs	r6, r1, #24
 8003528:	5d96      	ldrb	r6, [r2, r6]
            for( i = 0; i < 7; i++, RK += 8 )
 800352a:	2c07      	cmp	r4, #7
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800352c:	ea83 4306 	eor.w	r3, r3, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 8003530:	b2ce      	uxtb	r6, r1
 8003532:	5d96      	ldrb	r6, [r2, r6]
 8003534:	f100 0020 	add.w	r0, r0, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8003538:	ea83 6306 	eor.w	r3, r3, r6, lsl #24
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 800353c:	f3c1 4607 	ubfx	r6, r1, #16, #8
 8003540:	5d96      	ldrb	r6, [r2, r6]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8003542:	ea83 2306 	eor.w	r3, r3, r6, lsl #8
                RK[9]  = RK[1] ^ RK[8];
 8003546:	f850 6c3c 	ldr.w	r6, [r0, #-60]
                RK[8]  = RK[0] ^ RCON[i] ^
 800354a:	f840 3c20 	str.w	r3, [r0, #-32]
                RK[9]  = RK[1] ^ RK[8];
 800354e:	ea83 0306 	eor.w	r3, r3, r6
                RK[10] = RK[2] ^ RK[9];
 8003552:	f850 6c38 	ldr.w	r6, [r0, #-56]
                RK[9]  = RK[1] ^ RK[8];
 8003556:	f840 3c1c 	str.w	r3, [r0, #-28]
                RK[10] = RK[2] ^ RK[9];
 800355a:	ea83 0306 	eor.w	r3, r3, r6
                RK[11] = RK[3] ^ RK[10];
 800355e:	f850 6c34 	ldr.w	r6, [r0, #-52]
                RK[10] = RK[2] ^ RK[9];
 8003562:	f840 3c18 	str.w	r3, [r0, #-24]
                RK[11] = RK[3] ^ RK[10];
 8003566:	ea83 0306 	eor.w	r3, r3, r6
 800356a:	f840 3c14 	str.w	r3, [r0, #-20]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800356e:	b2de      	uxtb	r6, r3
 8003570:	5d96      	ldrb	r6, [r2, r6]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8003572:	ea86 0607 	eor.w	r6, r6, r7
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 8003576:	ea4f 6713 	mov.w	r7, r3, lsr #24
 800357a:	5dd7      	ldrb	r7, [r2, r7]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800357c:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8003580:	f3c3 2707 	ubfx	r7, r3, #8, #8
 8003584:	5dd7      	ldrb	r7, [r2, r7]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8003586:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800358a:	5cd3      	ldrb	r3, [r2, r3]
 800358c:	ea86 2607 	eor.w	r6, r6, r7, lsl #8
 8003590:	ea86 4303 	eor.w	r3, r6, r3, lsl #16
                RK[13] = RK[5] ^ RK[12];
 8003594:	f850 6c2c 	ldr.w	r6, [r0, #-44]
                RK[12] = RK[4] ^
 8003598:	f840 3c10 	str.w	r3, [r0, #-16]
                RK[13] = RK[5] ^ RK[12];
 800359c:	ea83 0306 	eor.w	r3, r3, r6
                RK[14] = RK[6] ^ RK[13];
 80035a0:	f850 6c28 	ldr.w	r6, [r0, #-40]
                RK[13] = RK[5] ^ RK[12];
 80035a4:	f840 3c0c 	str.w	r3, [r0, #-12]
                RK[14] = RK[6] ^ RK[13];
 80035a8:	ea83 0306 	eor.w	r3, r3, r6
                RK[15] = RK[7] ^ RK[14];
 80035ac:	ea81 0103 	eor.w	r1, r1, r3
                RK[14] = RK[6] ^ RK[13];
 80035b0:	f840 3c08 	str.w	r3, [r0, #-8]
                RK[15] = RK[7] ^ RK[14];
 80035b4:	f840 1c04 	str.w	r1, [r0, #-4]
            for( i = 0; i < 7; i++, RK += 8 )
 80035b8:	d1a7      	bne.n	800350a <mbedtls_aes_setkey_enc+0x17a>
 80035ba:	e746      	b.n	800344a <mbedtls_aes_setkey_enc+0xba>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 80035bc:	f06f 001f 	mvn.w	r0, #31
 80035c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035c2:	bf00      	nop
 80035c4:	200027c4 	.word	0x200027c4
 80035c8:	2000169c 	.word	0x2000169c
 80035cc:	20000599 	.word	0x20000599

080035d0 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80035d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035d4:	4604      	mov	r4, r0
 80035d6:	460d      	mov	r5, r1
 80035d8:	4616      	mov	r6, r2
 80035da:	b0c9      	sub	sp, #292	; 0x124
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 80035dc:	a802      	add	r0, sp, #8
 80035de:	f7ff fecb 	bl	8003378 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80035e2:	f104 0308 	add.w	r3, r4, #8
 80035e6:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 80035e8:	4632      	mov	r2, r6
 80035ea:	4629      	mov	r1, r5
 80035ec:	a802      	add	r0, sp, #8
 80035ee:	f7ff fecf 	bl	8003390 <mbedtls_aes_setkey_enc>
 80035f2:	4680      	mov	r8, r0
 80035f4:	2800      	cmp	r0, #0
 80035f6:	d14b      	bne.n	8003690 <mbedtls_aes_setkey_dec+0xc0>
        goto exit;

    ctx->nr = cty.nr;
 80035f8:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80035fa:	9803      	ldr	r0, [sp, #12]
 80035fc:	010a      	lsls	r2, r1, #4
 80035fe:	1883      	adds	r3, r0, r2

    *RK++ = *SK++;
 8003600:	5882      	ldr	r2, [r0, r2]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8003602:	4d27      	ldr	r5, [pc, #156]	; (80036a0 <mbedtls_aes_setkey_dec+0xd0>)
    *RK++ = *SK++;
 8003604:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
 8003606:	685a      	ldr	r2, [r3, #4]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8003608:	f8df 909c 	ldr.w	r9, [pc, #156]	; 80036a8 <mbedtls_aes_setkey_dec+0xd8>
    *RK++ = *SK++;
 800360c:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
 800360e:	689a      	ldr	r2, [r3, #8]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8003610:	f8df a098 	ldr.w	sl, [pc, #152]	; 80036ac <mbedtls_aes_setkey_dec+0xdc>
    *RK++ = *SK++;
 8003614:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
 8003616:	68d8      	ldr	r0, [r3, #12]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8003618:	f8df b094 	ldr.w	fp, [pc, #148]	; 80036b0 <mbedtls_aes_setkey_dec+0xe0>
    ctx->nr = cty.nr;
 800361c:	6021      	str	r1, [r4, #0]
    *RK++ = *SK++;
 800361e:	f104 0218 	add.w	r2, r4, #24
 8003622:	6160      	str	r0, [r4, #20]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8003624:	3901      	subs	r1, #1
 8003626:	3b10      	subs	r3, #16
 8003628:	2900      	cmp	r1, #0
 800362a:	dd29      	ble.n	8003680 <mbedtls_aes_setkey_dec+0xb0>
 800362c:	1f1e      	subs	r6, r3, #4
 800362e:	f1a2 0e04 	sub.w	lr, r2, #4
 8003632:	f103 0c0c 	add.w	ip, r3, #12
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8003636:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800363a:	b2c4      	uxtb	r4, r0
 800363c:	5d2f      	ldrb	r7, [r5, r4]
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 800363e:	0e04      	lsrs	r4, r0, #24
 8003640:	5d2c      	ldrb	r4, [r5, r4]
        for( j = 0; j < 4; j++, SK++ )
 8003642:	45b4      	cmp	ip, r6
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8003644:	9401      	str	r4, [sp, #4]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8003646:	4c17      	ldr	r4, [pc, #92]	; (80036a4 <mbedtls_aes_setkey_dec+0xd4>)
 8003648:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800364c:	9c01      	ldr	r4, [sp, #4]
 800364e:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8003652:	ea87 0704 	eor.w	r7, r7, r4
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8003656:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800365a:	5d2c      	ldrb	r4, [r5, r4]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 800365c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8003660:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 8003664:	5c28      	ldrb	r0, [r5, r0]
 8003666:	ea84 0407 	eor.w	r4, r4, r7
 800366a:	f85b 7020 	ldr.w	r7, [fp, r0, lsl #2]
 800366e:	ea84 0407 	eor.w	r4, r4, r7
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8003672:	f84e 4f04 	str.w	r4, [lr, #4]!
        for( j = 0; j < 4; j++, SK++ )
 8003676:	d1de      	bne.n	8003636 <mbedtls_aes_setkey_dec+0x66>
 8003678:	3210      	adds	r2, #16
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800367a:	3901      	subs	r1, #1
 800367c:	3b10      	subs	r3, #16
 800367e:	e7d3      	b.n	8003628 <mbedtls_aes_setkey_dec+0x58>
        }
    }

    *RK++ = *SK++;
 8003680:	6819      	ldr	r1, [r3, #0]
 8003682:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
 8003688:	6899      	ldr	r1, [r3, #8]
 800368a:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
 8003690:	a802      	add	r0, sp, #8
 8003692:	f7ff fe76 	bl	8003382 <mbedtls_aes_free>

    return( ret );
}
 8003696:	4640      	mov	r0, r8
 8003698:	b049      	add	sp, #292	; 0x124
 800369a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800369e:	bf00      	nop
 80036a0:	20000599 	.word	0x20000599
 80036a4:	200017c4 	.word	0x200017c4
 80036a8:	200023c4 	.word	0x200023c4
 80036ac:	20001bc4 	.word	0x20001bc4
 80036b0:	20001fc4 	.word	0x20001fc4

080036b4 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80036b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 80036b8:	6845      	ldr	r5, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80036ba:	684e      	ldr	r6, [r1, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80036bc:	680c      	ldr	r4, [r1, #0]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80036be:	f8d1 c008 	ldr.w	ip, [r1, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80036c2:	68cf      	ldr	r7, [r1, #12]
 80036c4:	68e9      	ldr	r1, [r5, #12]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80036c6:	682b      	ldr	r3, [r5, #0]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80036c8:	404f      	eors	r7, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80036ca:	6801      	ldr	r1, [r0, #0]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80036cc:	405c      	eors	r4, r3
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80036ce:	1049      	asrs	r1, r1, #1
 80036d0:	3901      	subs	r1, #1
 80036d2:	9101      	str	r1, [sp, #4]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80036d4:	4629      	mov	r1, r5
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80036d6:	686b      	ldr	r3, [r5, #4]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80036d8:	f851 9f10 	ldr.w	r9, [r1, #16]!
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80036dc:	4073      	eors	r3, r6
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80036de:	68ae      	ldr	r6, [r5, #8]
 80036e0:	48d6      	ldr	r0, [pc, #856]	; (8003a3c <mbedtls_internal_aes_encrypt+0x388>)
 80036e2:	4dd7      	ldr	r5, [pc, #860]	; (8003a40 <mbedtls_internal_aes_encrypt+0x38c>)
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80036e4:	f8df e35c 	ldr.w	lr, [pc, #860]	; 8003a44 <mbedtls_internal_aes_encrypt+0x390>
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80036e8:	ea8c 0c06 	eor.w	ip, ip, r6
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80036ec:	9e01      	ldr	r6, [sp, #4]
 80036ee:	4688      	mov	r8, r1
 80036f0:	2e00      	cmp	r6, #0
 80036f2:	f101 0120 	add.w	r1, r1, #32
 80036f6:	fa5f fa84 	uxtb.w	sl, r4
 80036fa:	ea4f 6b17 	mov.w	fp, r7, lsr #24
 80036fe:	f300 80d1 	bgt.w	80038a4 <mbedtls_internal_aes_encrypt+0x1f0>
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003702:	f850 602b 	ldr.w	r6, [r0, fp, lsl #2]
 8003706:	f855 102a 	ldr.w	r1, [r5, sl, lsl #2]
 800370a:	f8df e340 	ldr.w	lr, [pc, #832]	; 8003a4c <mbedtls_internal_aes_encrypt+0x398>
 800370e:	4071      	eors	r1, r6
 8003710:	ea81 0909 	eor.w	r9, r1, r9
 8003714:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003718:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800371c:	4ec9      	ldr	r6, [pc, #804]	; (8003a44 <mbedtls_internal_aes_encrypt+0x390>)
 800371e:	ea89 0901 	eor.w	r9, r9, r1
 8003722:	f3cc 4107 	ubfx	r1, ip, #16, #8
 8003726:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800372a:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 800372e:	ea89 0901 	eor.w	r9, r9, r1
 8003732:	b2d9      	uxtb	r1, r3
 8003734:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8003738:	f850 a02a 	ldr.w	sl, [r0, sl, lsl #2]
 800373c:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 8003740:	ea81 0a0a 	eor.w	sl, r1, sl
 8003744:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003748:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800374c:	ea8a 0a01 	eor.w	sl, sl, r1
 8003750:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8003754:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8003758:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800375c:	ea8a 0a01 	eor.w	sl, sl, r1
 8003760:	f3c7 4107 	ubfx	r1, r7, #16, #8
 8003764:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8003768:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800376c:	ea8a 0a01 	eor.w	sl, sl, r1
 8003770:	fa5f f18c 	uxtb.w	r1, ip
 8003774:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8003778:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 800377c:	ea81 0b0b 	eor.w	fp, r1, fp
 8003780:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8003784:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 8003788:	ea8b 0101 	eor.w	r1, fp, r1
 800378c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8003790:	b2ff      	uxtb	r7, r7
 8003792:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 8003796:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 800379a:	ea81 010b 	eor.w	r1, r1, fp
 800379e:	4045      	eors	r5, r0
 80037a0:	f3c4 4b07 	ubfx	fp, r4, #16, #8
 80037a4:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80037a8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80037ac:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 80037b0:	4068      	eors	r0, r5
 80037b2:	4060      	eors	r0, r4
 80037b4:	4058      	eors	r0, r3

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80037b6:	4ba4      	ldr	r3, [pc, #656]	; (8003a48 <mbedtls_internal_aes_encrypt+0x394>)
 80037b8:	fa5f f489 	uxtb.w	r4, r9
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80037bc:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80037c0:	5d1e      	ldrb	r6, [r3, r4]
    X0 = *RK++ ^ \
 80037c2:	f8d8 4010 	ldr.w	r4, [r8, #16]
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80037c6:	ea81 010b 	eor.w	r1, r1, fp
    X0 = *RK++ ^ \
 80037ca:	4066      	eors	r6, r4
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80037cc:	0e04      	lsrs	r4, r0, #24
 80037ce:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 80037d0:	ea86 6604 	eor.w	r6, r6, r4, lsl #24
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80037d4:	f3ca 2407 	ubfx	r4, sl, #8, #8
 80037d8:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 80037da:	ea86 2604 	eor.w	r6, r6, r4, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80037de:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80037e2:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 80037e4:	ea86 4604 	eor.w	r6, r6, r4, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 80037e8:	fa5f f48a 	uxtb.w	r4, sl
 80037ec:	5d1d      	ldrb	r5, [r3, r4]
    X1 = *RK++ ^ \
 80037ee:	f8d8 4014 	ldr.w	r4, [r8, #20]
 80037f2:	406c      	eors	r4, r5
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80037f4:	ea4f 6519 	mov.w	r5, r9, lsr #24
 80037f8:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 80037fa:	ea84 6405 	eor.w	r4, r4, r5, lsl #24
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80037fe:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8003802:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 8003804:	ea84 2405 	eor.w	r4, r4, r5, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8003808:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800380c:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 800380e:	ea84 4405 	eor.w	r4, r4, r5, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8003812:	b2cd      	uxtb	r5, r1
 8003814:	5d5f      	ldrb	r7, [r3, r5]
    X2 = *RK++ ^ \
 8003816:	f8d8 5018 	ldr.w	r5, [r8, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800381a:	0e09      	lsrs	r1, r1, #24
    X2 = *RK++ ^ \
 800381c:	407d      	eors	r5, r7
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800381e:	ea4f 671a 	mov.w	r7, sl, lsr #24
 8003822:	5ddf      	ldrb	r7, [r3, r7]
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8003824:	f3ca 4a07 	ubfx	sl, sl, #16, #8
    X2 = *RK++ ^ \
 8003828:	ea85 6507 	eor.w	r5, r5, r7, lsl #24
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800382c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8003830:	5ddf      	ldrb	r7, [r3, r7]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8003832:	b2c0      	uxtb	r0, r0
    X2 = *RK++ ^ \
 8003834:	ea85 2507 	eor.w	r5, r5, r7, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8003838:	f3c9 4707 	ubfx	r7, r9, #16, #8
 800383c:	5ddf      	ldrb	r7, [r3, r7]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800383e:	5c18      	ldrb	r0, [r3, r0]
    X2 = *RK++ ^ \
 8003840:	ea85 4507 	eor.w	r5, r5, r7, lsl #16
    X3 = *RK++ ^ \
 8003844:	f8d8 701c 	ldr.w	r7, [r8, #28]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8003848:	5c59      	ldrb	r1, [r3, r1]
    X3 = *RK++ ^ \
 800384a:	4078      	eors	r0, r7
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800384c:	f3c9 2907 	ubfx	r9, r9, #8, #8
    X3 = *RK++ ^ \
 8003850:	ea80 6001 	eor.w	r0, r0, r1, lsl #24
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003854:	f813 1009 	ldrb.w	r1, [r3, r9]
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8003858:	f813 300a 	ldrb.w	r3, [r3, sl]
    X3 = *RK++ ^ \
 800385c:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
 8003860:	ea80 4303 	eor.w	r3, r0, r3, lsl #16
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );

    return( 0 );
}
 8003864:	2000      	movs	r0, #0
    PUT_UINT32_LE( X0, output,  0 );
 8003866:	0a31      	lsrs	r1, r6, #8
 8003868:	7051      	strb	r1, [r2, #1]
 800386a:	0c31      	lsrs	r1, r6, #16
 800386c:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 800386e:	0a21      	lsrs	r1, r4, #8
 8003870:	7151      	strb	r1, [r2, #5]
 8003872:	0c21      	lsrs	r1, r4, #16
 8003874:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 8003876:	0a29      	lsrs	r1, r5, #8
 8003878:	7251      	strb	r1, [r2, #9]
 800387a:	0c29      	lsrs	r1, r5, #16
 800387c:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 800387e:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X0, output,  0 );
 8003880:	7016      	strb	r6, [r2, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8003882:	7114      	strb	r4, [r2, #4]
    PUT_UINT32_LE( X0, output,  0 );
 8003884:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X1, output,  4 );
 8003886:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X2, output,  8 );
 8003888:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 800388a:	7313      	strb	r3, [r2, #12]
    PUT_UINT32_LE( X2, output,  8 );
 800388c:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 800388e:	7351      	strb	r1, [r2, #13]
 8003890:	0c19      	lsrs	r1, r3, #16
 8003892:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X0, output,  0 );
 8003894:	70d6      	strb	r6, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 8003896:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 8003898:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 800389a:	7391      	strb	r1, [r2, #14]
 800389c:	73d3      	strb	r3, [r2, #15]
}
 800389e:	b003      	add	sp, #12
 80038a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80038a4:	f850 802b 	ldr.w	r8, [r0, fp, lsl #2]
 80038a8:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 80038ac:	f851 6c20 	ldr.w	r6, [r1, #-32]
 80038b0:	ea8a 0a08 	eor.w	sl, sl, r8
 80038b4:	ea8a 0a06 	eor.w	sl, sl, r6
 80038b8:	4e64      	ldr	r6, [pc, #400]	; (8003a4c <mbedtls_internal_aes_encrypt+0x398>)
 80038ba:	f3c3 2807 	ubfx	r8, r3, #8, #8
 80038be:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 80038c2:	fa5f f983 	uxtb.w	r9, r3
 80038c6:	ea8a 0a08 	eor.w	sl, sl, r8
 80038ca:	f3cc 4807 	ubfx	r8, ip, #16, #8
 80038ce:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 80038d2:	f855 b029 	ldr.w	fp, [r5, r9, lsl #2]
 80038d6:	ea8a 0a08 	eor.w	sl, sl, r8
 80038da:	ea4f 6814 	mov.w	r8, r4, lsr #24
 80038de:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
 80038e2:	f851 6c1c 	ldr.w	r6, [r1, #-28]
 80038e6:	ea8b 0b08 	eor.w	fp, fp, r8
 80038ea:	ea8b 0b06 	eor.w	fp, fp, r6
 80038ee:	4e57      	ldr	r6, [pc, #348]	; (8003a4c <mbedtls_internal_aes_encrypt+0x398>)
 80038f0:	f3cc 2807 	ubfx	r8, ip, #8, #8
 80038f4:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 80038f8:	fa5f f98c 	uxtb.w	r9, ip
 80038fc:	ea8b 0b08 	eor.w	fp, fp, r8
 8003900:	f3c7 4807 	ubfx	r8, r7, #16, #8
 8003904:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 8003908:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 800390c:	ea8b 0b08 	eor.w	fp, fp, r8
 8003910:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8003914:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
 8003918:	f851 6c18 	ldr.w	r6, [r1, #-24]
 800391c:	ea89 0808 	eor.w	r8, r9, r8
 8003920:	ea88 0806 	eor.w	r8, r8, r6
 8003924:	4e49      	ldr	r6, [pc, #292]	; (8003a4c <mbedtls_internal_aes_encrypt+0x398>)
 8003926:	f3c7 2907 	ubfx	r9, r7, #8, #8
 800392a:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 800392e:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8003932:	ea88 0809 	eor.w	r8, r8, r9
 8003936:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800393a:	f85e 9029 	ldr.w	r9, [lr, r9, lsl #2]
 800393e:	b2ff      	uxtb	r7, r7
 8003940:	ea88 0809 	eor.w	r8, r8, r9
 8003944:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8003948:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 800394c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003950:	ea87 0909 	eor.w	r9, r7, r9
 8003954:	f851 7c14 	ldr.w	r7, [r1, #-20]
 8003958:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800395c:	ea89 0907 	eor.w	r9, r9, r7
 8003960:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003964:	fa5f f48a 	uxtb.w	r4, sl
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003968:	ea89 0907 	eor.w	r9, r9, r7
 800396c:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003970:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003974:	ea89 0907 	eor.w	r9, r9, r7
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003978:	ea4f 6319 	mov.w	r3, r9, lsr #24
 800397c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003980:	fa5f f78b 	uxtb.w	r7, fp
 8003984:	405c      	eors	r4, r3
 8003986:	f851 3c10 	ldr.w	r3, [r1, #-16]
 800398a:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800398e:	405c      	eors	r4, r3
 8003990:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8003994:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8003998:	fa5f fc88 	uxtb.w	ip, r8
 800399c:	405c      	eors	r4, r3
 800399e:	f3c8 4307 	ubfx	r3, r8, #16, #8
 80039a2:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80039a6:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 80039aa:	405c      	eors	r4, r3
 80039ac:	ea4f 631a 	mov.w	r3, sl, lsr #24
 80039b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80039b4:	405f      	eors	r7, r3
 80039b6:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80039ba:	407b      	eors	r3, r7
 80039bc:	f3c8 2707 	ubfx	r7, r8, #8, #8
 80039c0:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80039c4:	ea4f 6818 	mov.w	r8, r8, lsr #24
 80039c8:	407b      	eors	r3, r7
 80039ca:	f3c9 4707 	ubfx	r7, r9, #16, #8
 80039ce:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 80039d2:	407b      	eors	r3, r7
 80039d4:	ea4f 671b 	mov.w	r7, fp, lsr #24
 80039d8:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 80039dc:	f3cb 4b07 	ubfx	fp, fp, #16, #8
 80039e0:	ea8c 0c07 	eor.w	ip, ip, r7
 80039e4:	f851 7c08 	ldr.w	r7, [r1, #-8]
 80039e8:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
 80039ec:	ea8c 0c07 	eor.w	ip, ip, r7
 80039f0:	f3c9 2707 	ubfx	r7, r9, #8, #8
 80039f4:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80039f8:	fa5f f989 	uxtb.w	r9, r9
 80039fc:	ea8c 0c07 	eor.w	ip, ip, r7
 8003a00:	f3ca 4707 	ubfx	r7, sl, #16, #8
 8003a04:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8003a08:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8003a0c:	ea8c 0c07 	eor.w	ip, ip, r7
 8003a10:	f855 7029 	ldr.w	r7, [r5, r9, lsl #2]
 8003a14:	f8d1 9000 	ldr.w	r9, [r1]
 8003a18:	ea87 0808 	eor.w	r8, r7, r8
 8003a1c:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8003a20:	ea88 0707 	eor.w	r7, r8, r7
 8003a24:	f856 802a 	ldr.w	r8, [r6, sl, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003a28:	9e01      	ldr	r6, [sp, #4]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003a2a:	ea87 0708 	eor.w	r7, r7, r8
 8003a2e:	f85e 802b 	ldr.w	r8, [lr, fp, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003a32:	3e01      	subs	r6, #1
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003a34:	ea87 0708 	eor.w	r7, r7, r8
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003a38:	9601      	str	r6, [sp, #4]
 8003a3a:	e657      	b.n	80036ec <mbedtls_internal_aes_encrypt+0x38>
 8003a3c:	2000129c 	.word	0x2000129c
 8003a40:	2000069c 	.word	0x2000069c
 8003a44:	20000e9c 	.word	0x20000e9c
 8003a48:	20000599 	.word	0x20000599
 8003a4c:	20000a9c 	.word	0x20000a9c

08003a50 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8003a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8003a54:	6845      	ldr	r5, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8003a56:	f8d1 c000 	ldr.w	ip, [r1]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8003a5a:	684c      	ldr	r4, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8003a5c:	688e      	ldr	r6, [r1, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8003a5e:	68cf      	ldr	r7, [r1, #12]
 8003a60:	68e9      	ldr	r1, [r5, #12]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8003a62:	682b      	ldr	r3, [r5, #0]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8003a64:	404f      	eors	r7, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003a66:	6801      	ldr	r1, [r0, #0]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8003a68:	ea8c 0c03 	eor.w	ip, ip, r3
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003a6c:	1049      	asrs	r1, r1, #1
 8003a6e:	3901      	subs	r1, #1
 8003a70:	9101      	str	r1, [sp, #4]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8003a72:	4629      	mov	r1, r5
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8003a74:	686b      	ldr	r3, [r5, #4]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8003a76:	f851 9f10 	ldr.w	r9, [r1, #16]!
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8003a7a:	405c      	eors	r4, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8003a7c:	68ab      	ldr	r3, [r5, #8]
 8003a7e:	48d6      	ldr	r0, [pc, #856]	; (8003dd8 <mbedtls_internal_aes_decrypt+0x388>)
 8003a80:	4dd6      	ldr	r5, [pc, #856]	; (8003ddc <mbedtls_internal_aes_decrypt+0x38c>)
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003a82:	f8df e35c 	ldr.w	lr, [pc, #860]	; 8003de0 <mbedtls_internal_aes_decrypt+0x390>
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8003a86:	4073      	eors	r3, r6
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003a88:	9e01      	ldr	r6, [sp, #4]
 8003a8a:	4688      	mov	r8, r1
 8003a8c:	2e00      	cmp	r6, #0
 8003a8e:	f101 0120 	add.w	r1, r1, #32
 8003a92:	fa5f fb8c 	uxtb.w	fp, ip
 8003a96:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8003a9a:	f300 80d0 	bgt.w	8003c3e <mbedtls_internal_aes_decrypt+0x1ee>
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003a9e:	f850 602a 	ldr.w	r6, [r0, sl, lsl #2]
 8003aa2:	f855 102b 	ldr.w	r1, [r5, fp, lsl #2]
 8003aa6:	f8df e340 	ldr.w	lr, [pc, #832]	; 8003de8 <mbedtls_internal_aes_decrypt+0x398>
 8003aaa:	4071      	eors	r1, r6
 8003aac:	ea81 0909 	eor.w	r9, r1, r9
 8003ab0:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8003ab4:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8003ab8:	4ec9      	ldr	r6, [pc, #804]	; (8003de0 <mbedtls_internal_aes_decrypt+0x390>)
 8003aba:	ea89 0901 	eor.w	r9, r9, r1
 8003abe:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8003ac2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8003ac6:	ea4f 6a13 	mov.w	sl, r3, lsr #24
 8003aca:	ea89 0901 	eor.w	r9, r9, r1
 8003ace:	b2e1      	uxtb	r1, r4
 8003ad0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8003ad4:	f850 a02a 	ldr.w	sl, [r0, sl, lsl #2]
 8003ad8:	ea4f 6b17 	mov.w	fp, r7, lsr #24
 8003adc:	ea81 0a0a 	eor.w	sl, r1, sl
 8003ae0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003ae4:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8003ae8:	ea8a 0a01 	eor.w	sl, sl, r1
 8003aec:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8003af0:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8003af4:	ea8a 0a01 	eor.w	sl, sl, r1
 8003af8:	f3c7 4107 	ubfx	r1, r7, #16, #8
 8003afc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8003b00:	b2ff      	uxtb	r7, r7
 8003b02:	ea8a 0a01 	eor.w	sl, sl, r1
 8003b06:	b2d9      	uxtb	r1, r3
 8003b08:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8003b0c:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8003b10:	ea81 0b0b 	eor.w	fp, r1, fp
 8003b14:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8003b18:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003b1c:	ea8b 0101 	eor.w	r1, fp, r1
 8003b20:	f3c4 2b07 	ubfx	fp, r4, #8, #8
 8003b24:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 8003b28:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8003b2c:	ea81 010b 	eor.w	r1, r1, fp
 8003b30:	f3cc 4b07 	ubfx	fp, ip, #16, #8
 8003b34:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8003b38:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 8003b3c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8003b40:	4045      	eors	r5, r0
 8003b42:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8003b46:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8003b4a:	4068      	eors	r0, r5
 8003b4c:	4058      	eors	r0, r3
 8003b4e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8003b52:	fa5f f489 	uxtb.w	r4, r9
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003b56:	4058      	eors	r0, r3
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8003b58:	4ba2      	ldr	r3, [pc, #648]	; (8003de4 <mbedtls_internal_aes_decrypt+0x394>)
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003b5a:	ea81 010b 	eor.w	r1, r1, fp
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8003b5e:	5d1e      	ldrb	r6, [r3, r4]
    X0 = *RK++ ^ \
 8003b60:	f8d8 4010 	ldr.w	r4, [r8, #16]
 8003b64:	4066      	eors	r6, r4
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8003b66:	ea4f 641a 	mov.w	r4, sl, lsr #24
 8003b6a:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 8003b6c:	ea86 6604 	eor.w	r6, r6, r4, lsl #24
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003b70:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8003b74:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 8003b76:	ea86 2604 	eor.w	r6, r6, r4, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8003b7a:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8003b7e:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 8003b80:	ea86 4604 	eor.w	r6, r6, r4, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8003b84:	fa5f f48a 	uxtb.w	r4, sl
 8003b88:	5d1d      	ldrb	r5, [r3, r4]
    X1 = *RK++ ^ \
 8003b8a:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8003b8e:	406c      	eors	r4, r5
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8003b90:	0e0d      	lsrs	r5, r1, #24
 8003b92:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 8003b94:	ea84 6405 	eor.w	r4, r4, r5, lsl #24
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003b98:	f3c9 2507 	ubfx	r5, r9, #8, #8
 8003b9c:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 8003b9e:	ea84 2405 	eor.w	r4, r4, r5, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8003ba2:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8003ba6:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 8003ba8:	ea84 4405 	eor.w	r4, r4, r5, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8003bac:	b2cd      	uxtb	r5, r1
 8003bae:	5d5f      	ldrb	r7, [r3, r5]
    X2 = *RK++ ^ \
 8003bb0:	f8d8 5018 	ldr.w	r5, [r8, #24]
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003bb4:	f3c1 2107 	ubfx	r1, r1, #8, #8
    X2 = *RK++ ^ \
 8003bb8:	407d      	eors	r5, r7
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8003bba:	0e07      	lsrs	r7, r0, #24
 8003bbc:	5ddf      	ldrb	r7, [r3, r7]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8003bbe:	b2c0      	uxtb	r0, r0
    X2 = *RK++ ^ \
 8003bc0:	ea85 6507 	eor.w	r5, r5, r7, lsl #24
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8003bc4:	f3ca 2707 	ubfx	r7, sl, #8, #8
 8003bc8:	5ddf      	ldrb	r7, [r3, r7]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8003bca:	5c18      	ldrb	r0, [r3, r0]
    X2 = *RK++ ^ \
 8003bcc:	ea85 2507 	eor.w	r5, r5, r7, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8003bd0:	f3c9 4707 	ubfx	r7, r9, #16, #8
 8003bd4:	5ddf      	ldrb	r7, [r3, r7]
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8003bd6:	ea4f 6919 	mov.w	r9, r9, lsr #24
    X2 = *RK++ ^ \
 8003bda:	ea85 4507 	eor.w	r5, r5, r7, lsl #16
    X3 = *RK++ ^ \
 8003bde:	f8d8 701c 	ldr.w	r7, [r8, #28]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003be2:	5c59      	ldrb	r1, [r3, r1]
    X3 = *RK++ ^ \
 8003be4:	4078      	eors	r0, r7
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8003be6:	f813 7009 	ldrb.w	r7, [r3, r9]
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8003bea:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 8003bee:	f813 300a 	ldrb.w	r3, [r3, sl]
    X3 = *RK++ ^ \
 8003bf2:	ea80 6007 	eor.w	r0, r0, r7, lsl #24
 8003bf6:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
 8003bfa:	ea80 4303 	eor.w	r3, r0, r3, lsl #16
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );

    return( 0 );
}
 8003bfe:	2000      	movs	r0, #0
    PUT_UINT32_LE( X0, output,  0 );
 8003c00:	0a31      	lsrs	r1, r6, #8
 8003c02:	7051      	strb	r1, [r2, #1]
 8003c04:	0c31      	lsrs	r1, r6, #16
 8003c06:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 8003c08:	0a21      	lsrs	r1, r4, #8
 8003c0a:	7151      	strb	r1, [r2, #5]
 8003c0c:	0c21      	lsrs	r1, r4, #16
 8003c0e:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 8003c10:	0a29      	lsrs	r1, r5, #8
 8003c12:	7251      	strb	r1, [r2, #9]
 8003c14:	0c29      	lsrs	r1, r5, #16
 8003c16:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 8003c18:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X0, output,  0 );
 8003c1a:	7016      	strb	r6, [r2, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8003c1c:	7114      	strb	r4, [r2, #4]
    PUT_UINT32_LE( X0, output,  0 );
 8003c1e:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X1, output,  4 );
 8003c20:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X2, output,  8 );
 8003c22:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 8003c24:	7313      	strb	r3, [r2, #12]
    PUT_UINT32_LE( X2, output,  8 );
 8003c26:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 8003c28:	7351      	strb	r1, [r2, #13]
 8003c2a:	0c19      	lsrs	r1, r3, #16
 8003c2c:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X0, output,  0 );
 8003c2e:	70d6      	strb	r6, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 8003c30:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 8003c32:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 8003c34:	7391      	strb	r1, [r2, #14]
 8003c36:	73d3      	strb	r3, [r2, #15]
}
 8003c38:	b003      	add	sp, #12
 8003c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003c3e:	f850 802a 	ldr.w	r8, [r0, sl, lsl #2]
 8003c42:	f855 902b 	ldr.w	r9, [r5, fp, lsl #2]
 8003c46:	f851 6c20 	ldr.w	r6, [r1, #-32]
 8003c4a:	ea89 0908 	eor.w	r9, r9, r8
 8003c4e:	ea89 0906 	eor.w	r9, r9, r6
 8003c52:	4e65      	ldr	r6, [pc, #404]	; (8003de8 <mbedtls_internal_aes_decrypt+0x398>)
 8003c54:	f3c7 2807 	ubfx	r8, r7, #8, #8
 8003c58:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 8003c5c:	fa5f fa84 	uxtb.w	sl, r4
 8003c60:	ea89 0908 	eor.w	r9, r9, r8
 8003c64:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8003c68:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 8003c6c:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 8003c70:	ea89 0908 	eor.w	r9, r9, r8
 8003c74:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8003c78:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
 8003c7c:	f851 6c1c 	ldr.w	r6, [r1, #-28]
 8003c80:	ea8a 0a08 	eor.w	sl, sl, r8
 8003c84:	ea8a 0a06 	eor.w	sl, sl, r6
 8003c88:	4e57      	ldr	r6, [pc, #348]	; (8003de8 <mbedtls_internal_aes_decrypt+0x398>)
 8003c8a:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8003c8e:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 8003c92:	fa5f fb83 	uxtb.w	fp, r3
 8003c96:	ea8a 0a08 	eor.w	sl, sl, r8
 8003c9a:	f3c7 4807 	ubfx	r8, r7, #16, #8
 8003c9e:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 8003ca2:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8003ca6:	ea8a 0a08 	eor.w	sl, sl, r8
 8003caa:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8003cae:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
 8003cb2:	f851 6c18 	ldr.w	r6, [r1, #-24]
 8003cb6:	ea8b 0808 	eor.w	r8, fp, r8
 8003cba:	ea88 0806 	eor.w	r8, r8, r6
 8003cbe:	4e4a      	ldr	r6, [pc, #296]	; (8003de8 <mbedtls_internal_aes_decrypt+0x398>)
 8003cc0:	f3c4 2b07 	ubfx	fp, r4, #8, #8
 8003cc4:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8003cc8:	b2ff      	uxtb	r7, r7
 8003cca:	ea88 080b 	eor.w	r8, r8, fp
 8003cce:	f3cc 4b07 	ubfx	fp, ip, #16, #8
 8003cd2:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8003cd6:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8003cda:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 8003cde:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003ce2:	ea87 0c0c 	eor.w	ip, r7, ip
 8003ce6:	f851 7c14 	ldr.w	r7, [r1, #-20]
 8003cea:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8003cee:	ea8c 0707 	eor.w	r7, ip, r7
 8003cf2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8003cf6:	405f      	eors	r7, r3
 8003cf8:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003cfc:	ea4f 641a 	mov.w	r4, sl, lsr #24
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003d00:	405f      	eors	r7, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003d02:	fa5f f389 	uxtb.w	r3, r9
 8003d06:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8003d0a:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003d0e:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003d12:	ea83 0c04 	eor.w	ip, r3, r4
 8003d16:	f851 3c10 	ldr.w	r3, [r1, #-16]
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003d1a:	ea88 080b 	eor.w	r8, r8, fp
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003d1e:	ea8c 0c03 	eor.w	ip, ip, r3
 8003d22:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8003d26:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8003d2a:	fa5f f48a 	uxtb.w	r4, sl
 8003d2e:	ea8c 0c03 	eor.w	ip, ip, r3
 8003d32:	f3c8 4307 	ubfx	r3, r8, #16, #8
 8003d36:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8003d3a:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8003d3e:	ea8c 0c03 	eor.w	ip, ip, r3
 8003d42:	ea4f 6318 	mov.w	r3, r8, lsr #24
 8003d46:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d4a:	fa5f fb88 	uxtb.w	fp, r8
 8003d4e:	405c      	eors	r4, r3
 8003d50:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8003d54:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8003d58:	405c      	eors	r4, r3
 8003d5a:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8003d5e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8003d62:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8003d66:	405c      	eors	r4, r3
 8003d68:	f3c7 4307 	ubfx	r3, r7, #16, #8
 8003d6c:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8003d70:	405c      	eors	r4, r3
 8003d72:	0e3b      	lsrs	r3, r7, #24
 8003d74:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d78:	b2ff      	uxtb	r7, r7
 8003d7a:	ea8b 0b03 	eor.w	fp, fp, r3
 8003d7e:	f851 3c08 	ldr.w	r3, [r1, #-8]
 8003d82:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8003d86:	ea8b 0303 	eor.w	r3, fp, r3
 8003d8a:	f3ca 2b07 	ubfx	fp, sl, #8, #8
 8003d8e:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8003d92:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 8003d96:	ea83 030b 	eor.w	r3, r3, fp
 8003d9a:	f3c9 4b07 	ubfx	fp, r9, #16, #8
 8003d9e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8003da2:	f850 9029 	ldr.w	r9, [r0, r9, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003da6:	9e01      	ldr	r6, [sp, #4]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003da8:	ea87 0909 	eor.w	r9, r7, r9
 8003dac:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8003db0:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 8003db4:	ea89 0707 	eor.w	r7, r9, r7
 8003db8:	ea87 0708 	eor.w	r7, r7, r8
 8003dbc:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 8003dc0:	f85e 802a 	ldr.w	r8, [lr, sl, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003dc4:	3e01      	subs	r6, #1
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003dc6:	ea83 030b 	eor.w	r3, r3, fp
 8003dca:	ea87 0708 	eor.w	r7, r7, r8
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003dce:	9601      	str	r6, [sp, #4]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003dd0:	f8d1 9000 	ldr.w	r9, [r1]
 8003dd4:	e658      	b.n	8003a88 <mbedtls_internal_aes_decrypt+0x38>
 8003dd6:	bf00      	nop
 8003dd8:	200023c4 	.word	0x200023c4
 8003ddc:	200017c4 	.word	0x200017c4
 8003de0:	20001fc4 	.word	0x20001fc4
 8003de4:	200016c4 	.word	0x200016c4
 8003de8:	20001bc4 	.word	0x20001bc4

08003dec <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 8003dec:	b410      	push	{r4}
 8003dee:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 8003df0:	2901      	cmp	r1, #1
{
 8003df2:	461a      	mov	r2, r3
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8003df4:	4621      	mov	r1, r4
    if( mode == MBEDTLS_AES_ENCRYPT )
 8003df6:	d102      	bne.n	8003dfe <mbedtls_aes_crypt_ecb+0x12>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 8003df8:	bc10      	pop	{r4}
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8003dfa:	f7ff bc5b 	b.w	80036b4 <mbedtls_internal_aes_encrypt>
}
 8003dfe:	bc10      	pop	{r4}
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 8003e00:	f7ff be26 	b.w	8003a50 <mbedtls_internal_aes_decrypt>

08003e04 <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 8003e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e08:	4698      	mov	r8, r3
 8003e0a:	b085      	sub	sp, #20
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if( length % 16 )
 8003e0c:	0713      	lsls	r3, r2, #28
{
 8003e0e:	4681      	mov	r9, r0
 8003e10:	460f      	mov	r7, r1
 8003e12:	4616      	mov	r6, r2
 8003e14:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003e16:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    if( length % 16 )
 8003e18:	d15c      	bne.n	8003ed4 <mbedtls_aes_crypt_cbc+0xd0>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 8003e1a:	b949      	cbnz	r1, 8003e30 <mbedtls_aes_crypt_cbc+0x2c>
 8003e1c:	462a      	mov	r2, r5
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 8003e1e:	f10d 0b10 	add.w	fp, sp, #16
 8003e22:	1ab3      	subs	r3, r6, r2
        while( length > 0 )
 8003e24:	42dd      	cmn	r5, r3
 8003e26:	d127      	bne.n	8003e78 <mbedtls_aes_crypt_cbc+0x74>
            output += 16;
            length -= 16;
        }
    }

    return( 0 );
 8003e28:	2000      	movs	r0, #0
}
 8003e2a:	b005      	add	sp, #20
 8003e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e30:	1e6b      	subs	r3, r5, #1
        while( length > 0 )
 8003e32:	2e00      	cmp	r6, #0
 8003e34:	d0f8      	beq.n	8003e28 <mbedtls_aes_crypt_cbc+0x24>
 8003e36:	f108 30ff 	add.w	r0, r8, #4294967295
 8003e3a:	1e61      	subs	r1, r4, #1
 8003e3c:	f103 0510 	add.w	r5, r3, #16
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 8003e40:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8003e44:	f810 ef01 	ldrb.w	lr, [r0, #1]!
            for( i = 0; i < 16; i++ )
 8003e48:	42ab      	cmp	r3, r5
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 8003e4a:	ea82 020e 	eor.w	r2, r2, lr
 8003e4e:	f801 2f01 	strb.w	r2, [r1, #1]!
            for( i = 0; i < 16; i++ )
 8003e52:	d1f5      	bne.n	8003e40 <mbedtls_aes_crypt_cbc+0x3c>
            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 8003e54:	4623      	mov	r3, r4
 8003e56:	4622      	mov	r2, r4
 8003e58:	4639      	mov	r1, r7
 8003e5a:	4648      	mov	r0, r9
 8003e5c:	f7ff ffc6 	bl	8003dec <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 8003e60:	4643      	mov	r3, r8
 8003e62:	f104 0210 	add.w	r2, r4, #16
 8003e66:	f854 1b04 	ldr.w	r1, [r4], #4
 8003e6a:	4294      	cmp	r4, r2
 8003e6c:	f843 1b04 	str.w	r1, [r3], #4
 8003e70:	d1f9      	bne.n	8003e66 <mbedtls_aes_crypt_cbc+0x62>
            length -= 16;
 8003e72:	3e10      	subs	r6, #16
 8003e74:	462b      	mov	r3, r5
 8003e76:	e7dc      	b.n	8003e32 <mbedtls_aes_crypt_cbc+0x2e>
            memcpy( temp, input, 16 );
 8003e78:	4613      	mov	r3, r2
 8003e7a:	46ee      	mov	lr, sp
 8003e7c:	466f      	mov	r7, sp
 8003e7e:	f102 0a10 	add.w	sl, r2, #16
 8003e82:	46f4      	mov	ip, lr
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	6859      	ldr	r1, [r3, #4]
 8003e88:	3308      	adds	r3, #8
 8003e8a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8003e8e:	4553      	cmp	r3, sl
 8003e90:	46e6      	mov	lr, ip
 8003e92:	d1f6      	bne.n	8003e82 <mbedtls_aes_crypt_cbc+0x7e>
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 8003e94:	4623      	mov	r3, r4
 8003e96:	2100      	movs	r1, #0
 8003e98:	4648      	mov	r0, r9
 8003e9a:	f7ff ffa7 	bl	8003dec <mbedtls_aes_crypt_ecb>
 8003e9e:	1e63      	subs	r3, r4, #1
 8003ea0:	f108 31ff 	add.w	r1, r8, #4294967295
 8003ea4:	f104 000f 	add.w	r0, r4, #15
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 8003ea8:	785a      	ldrb	r2, [r3, #1]
 8003eaa:	f811 ef01 	ldrb.w	lr, [r1, #1]!
 8003eae:	ea82 020e 	eor.w	r2, r2, lr
 8003eb2:	f803 2f01 	strb.w	r2, [r3, #1]!
            for( i = 0; i < 16; i++ )
 8003eb6:	4283      	cmp	r3, r0
 8003eb8:	d1f6      	bne.n	8003ea8 <mbedtls_aes_crypt_cbc+0xa4>
            memcpy( iv, temp, 16 );
 8003eba:	4642      	mov	r2, r8
 8003ebc:	463b      	mov	r3, r7
 8003ebe:	cb03      	ldmia	r3!, {r0, r1}
 8003ec0:	455b      	cmp	r3, fp
 8003ec2:	6010      	str	r0, [r2, #0]
 8003ec4:	6051      	str	r1, [r2, #4]
 8003ec6:	461f      	mov	r7, r3
 8003ec8:	f102 0208 	add.w	r2, r2, #8
 8003ecc:	d1f6      	bne.n	8003ebc <mbedtls_aes_crypt_cbc+0xb8>
            input  += 16;
 8003ece:	4652      	mov	r2, sl
            output += 16;
 8003ed0:	3410      	adds	r4, #16
 8003ed2:	e7a6      	b.n	8003e22 <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 8003ed4:	f06f 0021 	mvn.w	r0, #33	; 0x21
 8003ed8:	e7a7      	b.n	8003e2a <mbedtls_aes_crypt_cbc+0x26>

08003eda <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
 8003eda:	6803      	ldr	r3, [r0, #0]
{
 8003edc:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
 8003ede:	1acd      	subs	r5, r1, r3
 8003ee0:	2d00      	cmp	r5, #0
 8003ee2:	dc02      	bgt.n	8003eea <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8003ee4:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8003ee8:	bd30      	pop	{r4, r5, pc}

    if( ( **p & 0x80 ) == 0 )
 8003eea:	781c      	ldrb	r4, [r3, #0]
 8003eec:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003ef0:	d10a      	bne.n	8003f08 <mbedtls_asn1_get_len+0x2e>
        *len = *(*p)++;
 8003ef2:	1c5c      	adds	r4, r3, #1
 8003ef4:	6004      	str	r4, [r0, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
 8003efa:	6803      	ldr	r3, [r0, #0]
 8003efc:	1ac9      	subs	r1, r1, r3
 8003efe:	6813      	ldr	r3, [r2, #0]
 8003f00:	428b      	cmp	r3, r1
 8003f02:	d8ef      	bhi.n	8003ee4 <mbedtls_asn1_get_len+0xa>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
 8003f04:	2000      	movs	r0, #0
 8003f06:	bd30      	pop	{r4, r5, pc}
        switch( **p & 0x7F )
 8003f08:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8003f0c:	3c01      	subs	r4, #1
 8003f0e:	2c03      	cmp	r4, #3
 8003f10:	d82f      	bhi.n	8003f72 <mbedtls_asn1_get_len+0x98>
 8003f12:	e8df f004 	tbb	[pc, r4]
 8003f16:	0902      	.short	0x0902
 8003f18:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
 8003f1a:	2d01      	cmp	r5, #1
 8003f1c:	d0e2      	beq.n	8003ee4 <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
 8003f1e:	785c      	ldrb	r4, [r3, #1]
            (*p) += 2;
 8003f20:	3302      	adds	r3, #2
            *len = (*p)[1];
 8003f22:	6014      	str	r4, [r2, #0]
            (*p) += 5;
 8003f24:	6003      	str	r3, [r0, #0]
            break;
 8003f26:	e7e8      	b.n	8003efa <mbedtls_asn1_get_len+0x20>
            if( ( end - *p ) < 3 )
 8003f28:	2d02      	cmp	r5, #2
 8003f2a:	dddb      	ble.n	8003ee4 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8003f2c:	785d      	ldrb	r5, [r3, #1]
 8003f2e:	789c      	ldrb	r4, [r3, #2]
            (*p) += 3;
 8003f30:	3303      	adds	r3, #3
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8003f32:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8003f36:	6014      	str	r4, [r2, #0]
 8003f38:	e7f4      	b.n	8003f24 <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 4 )
 8003f3a:	2d03      	cmp	r5, #3
 8003f3c:	ddd2      	ble.n	8003ee4 <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8003f3e:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
 8003f40:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8003f42:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 8003f44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8003f48:	78dd      	ldrb	r5, [r3, #3]
            (*p) += 4;
 8003f4a:	3304      	adds	r3, #4
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8003f4c:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
 8003f4e:	6014      	str	r4, [r2, #0]
 8003f50:	e7e8      	b.n	8003f24 <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 5 )
 8003f52:	2d04      	cmp	r5, #4
 8003f54:	ddc6      	ble.n	8003ee4 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8003f56:	789c      	ldrb	r4, [r3, #2]
 8003f58:	785d      	ldrb	r5, [r3, #1]
 8003f5a:	0424      	lsls	r4, r4, #16
 8003f5c:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 8003f60:	791d      	ldrb	r5, [r3, #4]
            (*p) += 5;
 8003f62:	3305      	adds	r3, #5
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 8003f64:	432c      	orrs	r4, r5
 8003f66:	f813 5c02 	ldrb.w	r5, [r3, #-2]
 8003f6a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8003f6e:	6014      	str	r4, [r2, #0]
 8003f70:	e7d8      	b.n	8003f24 <mbedtls_asn1_get_len+0x4a>
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8003f72:	f06f 0063 	mvn.w	r0, #99	; 0x63
}
 8003f76:	bd30      	pop	{r4, r5, pc}

08003f78 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 8003f78:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 8003f7a:	6804      	ldr	r4, [r0, #0]
 8003f7c:	1b0e      	subs	r6, r1, r4
 8003f7e:	2e00      	cmp	r6, #0
 8003f80:	dd07      	ble.n	8003f92 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 8003f82:	7826      	ldrb	r6, [r4, #0]
 8003f84:	429e      	cmp	r6, r3
 8003f86:	d108      	bne.n	8003f9a <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 8003f88:	3401      	adds	r4, #1
 8003f8a:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 8003f8c:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
 8003f8e:	f7ff bfa4 	b.w	8003eda <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8003f92:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
 8003f96:	bc70      	pop	{r4, r5, r6}
 8003f98:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8003f9a:	f06f 0061 	mvn.w	r0, #97	; 0x61
 8003f9e:	e7fa      	b.n	8003f96 <mbedtls_asn1_get_tag+0x1e>

08003fa0 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 8003fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 8003fa2:	2301      	movs	r3, #1
{
 8003fa4:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 8003fa6:	aa01      	add	r2, sp, #4
{
 8003fa8:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 8003faa:	f7ff ffe5 	bl	8003f78 <mbedtls_asn1_get_tag>
 8003fae:	b950      	cbnz	r0, 8003fc6 <mbedtls_asn1_get_bool+0x26>
        return( ret );

    if( len != 1 )
 8003fb0:	9b01      	ldr	r3, [sp, #4]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d109      	bne.n	8003fca <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fbc:	3200      	adds	r2, #0
 8003fbe:	bf18      	it	ne
 8003fc0:	2201      	movne	r2, #1
 8003fc2:	602a      	str	r2, [r5, #0]
    (*p)++;
 8003fc4:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 8003fc6:	b003      	add	sp, #12
 8003fc8:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8003fca:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8003fce:	e7fa      	b.n	8003fc6 <mbedtls_asn1_get_bool+0x26>

08003fd0 <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 8003fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8003fd2:	2302      	movs	r3, #2
{
 8003fd4:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8003fd6:	aa01      	add	r2, sp, #4
{
 8003fd8:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8003fda:	f7ff ffcd 	bl	8003f78 <mbedtls_asn1_get_tag>
 8003fde:	b968      	cbnz	r0, 8003ffc <mbedtls_asn1_get_int+0x2c>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 8003fe0:	9b01      	ldr	r3, [sp, #4]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d814      	bhi.n	8004012 <mbedtls_asn1_get_int+0x42>
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	f993 3000 	ldrsb.w	r3, [r3]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	db0f      	blt.n	8004012 <mbedtls_asn1_get_int+0x42>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 8003ff2:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 8003ff4:	9b01      	ldr	r3, [sp, #4]
 8003ff6:	1e5a      	subs	r2, r3, #1
 8003ff8:	9201      	str	r2, [sp, #4]
 8003ffa:	b90b      	cbnz	r3, 8004000 <mbedtls_asn1_get_int+0x30>
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 8003ffc:	b003      	add	sp, #12
 8003ffe:	bd30      	pop	{r4, r5, pc}
        *val = ( *val << 8 ) | **p;
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	6829      	ldr	r1, [r5, #0]
 8004004:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004008:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800400c:	602a      	str	r2, [r5, #0]
        (*p)++;
 800400e:	6023      	str	r3, [r4, #0]
 8004010:	e7f0      	b.n	8003ff4 <mbedtls_asn1_get_int+0x24>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8004012:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8004016:	e7f1      	b.n	8003ffc <mbedtls_asn1_get_int+0x2c>

08004018 <mbedtls_asn1_get_bitstring>:
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 8004018:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800401a:	2303      	movs	r3, #3
{
 800401c:	4604      	mov	r4, r0
 800401e:	460e      	mov	r6, r1
 8004020:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8004022:	f7ff ffa9 	bl	8003f78 <mbedtls_asn1_get_tag>
 8004026:	b9c8      	cbnz	r0, 800405c <mbedtls_asn1_get_bitstring+0x44>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 8004028:	6813      	ldr	r3, [r2, #0]
 800402a:	b193      	cbz	r3, 8004052 <mbedtls_asn1_get_bitstring+0x3a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 800402c:	3b01      	subs	r3, #1
 800402e:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 8004030:	6822      	ldr	r2, [r4, #0]
 8004032:	7812      	ldrb	r2, [r2, #0]
    if( bs->unused_bits > 7 )
 8004034:	2a07      	cmp	r2, #7
    bs->unused_bits = **p;
 8004036:	712a      	strb	r2, [r5, #4]
    if( bs->unused_bits > 7 )
 8004038:	d80e      	bhi.n	8004058 <mbedtls_asn1_get_bitstring+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 800403a:	6822      	ldr	r2, [r4, #0]
 800403c:	3201      	adds	r2, #1
 800403e:	6022      	str	r2, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
 8004040:	60aa      	str	r2, [r5, #8]
    *p += bs->len;
 8004042:	6822      	ldr	r2, [r4, #0]
 8004044:	4413      	add	r3, r2

    if( *p != end )
 8004046:	429e      	cmp	r6, r3
    *p += bs->len;
 8004048:	6023      	str	r3, [r4, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800404a:	bf18      	it	ne
 800404c:	f06f 0065 	mvnne.w	r0, #101	; 0x65
 8004050:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8004052:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8004056:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8004058:	f06f 0063 	mvn.w	r0, #99	; 0x63

    return( 0 );
}
 800405c:	bd70      	pop	{r4, r5, r6, pc}

0800405e <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 800405e:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8004060:	2303      	movs	r3, #3
{
 8004062:	4604      	mov	r4, r0
 8004064:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8004066:	f7ff ff87 	bl	8003f78 <mbedtls_asn1_get_tag>
 800406a:	b958      	cbnz	r0, 8004084 <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 800406c:	6813      	ldr	r3, [r2, #0]
 800406e:	1e5a      	subs	r2, r3, #1
 8004070:	2b01      	cmp	r3, #1
 8004072:	602a      	str	r2, [r5, #0]
 8004074:	d904      	bls.n	8004080 <mbedtls_asn1_get_bitstring_null+0x22>
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	6022      	str	r2, [r4, #0]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	b10b      	cbz	r3, 8004084 <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 8004080:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 8004084:	bd38      	pop	{r3, r4, r5, pc}

08004086 <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 8004086:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800408a:	4614      	mov	r4, r2
 800408c:	4698      	mov	r8, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800408e:	aa01      	add	r2, sp, #4
 8004090:	2330      	movs	r3, #48	; 0x30
{
 8004092:	4605      	mov	r5, r0
 8004094:	460f      	mov	r7, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8004096:	f7ff ff6f 	bl	8003f78 <mbedtls_asn1_get_tag>
 800409a:	4606      	mov	r6, r0
 800409c:	b930      	cbnz	r0, 80040ac <mbedtls_asn1_get_sequence_of+0x26>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 800409e:	682b      	ldr	r3, [r5, #0]
 80040a0:	9a01      	ldr	r2, [sp, #4]
 80040a2:	4413      	add	r3, r2
 80040a4:	429f      	cmp	r7, r3
 80040a6:	d01d      	beq.n	80040e4 <mbedtls_asn1_get_sequence_of+0x5e>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80040a8:	f06f 0665 	mvn.w	r6, #101	; 0x65

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 80040ac:	4630      	mov	r0, r6
 80040ae:	b003      	add	sp, #12
 80040b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        buf->tag = **p;
 80040b4:	781b      	ldrb	r3, [r3, #0]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80040b6:	464a      	mov	r2, r9
        buf->tag = **p;
 80040b8:	6023      	str	r3, [r4, #0]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80040ba:	4639      	mov	r1, r7
 80040bc:	4643      	mov	r3, r8
 80040be:	4628      	mov	r0, r5
 80040c0:	f7ff ff5a 	bl	8003f78 <mbedtls_asn1_get_tag>
 80040c4:	b9c0      	cbnz	r0, 80040f8 <mbedtls_asn1_get_sequence_of+0x72>
        buf->p = *p;
 80040c6:	682b      	ldr	r3, [r5, #0]
        *p += buf->len;
 80040c8:	6862      	ldr	r2, [r4, #4]
        buf->p = *p;
 80040ca:	60a3      	str	r3, [r4, #8]
        *p += buf->len;
 80040cc:	682b      	ldr	r3, [r5, #0]
 80040ce:	4413      	add	r3, r2
        if( *p < end )
 80040d0:	429f      	cmp	r7, r3
        *p += buf->len;
 80040d2:	602b      	str	r3, [r5, #0]
        if( *p < end )
 80040d4:	d908      	bls.n	80040e8 <mbedtls_asn1_get_sequence_of+0x62>
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 80040d6:	2110      	movs	r1, #16
 80040d8:	2001      	movs	r0, #1
 80040da:	f00d fe1f 	bl	8011d1c <calloc>
 80040de:	60e0      	str	r0, [r4, #12]
            if( cur->next == NULL )
 80040e0:	4604      	mov	r4, r0
 80040e2:	b158      	cbz	r0, 80040fc <mbedtls_asn1_get_sequence_of+0x76>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80040e4:	f104 0904 	add.w	r9, r4, #4
    while( *p < end )
 80040e8:	682b      	ldr	r3, [r5, #0]
 80040ea:	429f      	cmp	r7, r3
 80040ec:	d8e2      	bhi.n	80040b4 <mbedtls_asn1_get_sequence_of+0x2e>
    cur->next = NULL;
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	60e3      	str	r3, [r4, #12]
    if( *p != end )
 80040f4:	d0da      	beq.n	80040ac <mbedtls_asn1_get_sequence_of+0x26>
 80040f6:	e7d7      	b.n	80040a8 <mbedtls_asn1_get_sequence_of+0x22>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80040f8:	4606      	mov	r6, r0
 80040fa:	e7d7      	b.n	80040ac <mbedtls_asn1_get_sequence_of+0x26>
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 80040fc:	f06f 0669 	mvn.w	r6, #105	; 0x69
 8004100:	e7d4      	b.n	80040ac <mbedtls_asn1_get_sequence_of+0x26>

08004102 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 8004102:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004106:	4690      	mov	r8, r2
 8004108:	461f      	mov	r7, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800410a:	aa01      	add	r2, sp, #4
 800410c:	2330      	movs	r3, #48	; 0x30
{
 800410e:	4604      	mov	r4, r0
 8004110:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8004112:	f7ff ff31 	bl	8003f78 <mbedtls_asn1_get_tag>
 8004116:	4605      	mov	r5, r0
 8004118:	bb00      	cbnz	r0, 800415c <mbedtls_asn1_get_alg+0x5a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 800411a:	6826      	ldr	r6, [r4, #0]
 800411c:	eba9 0906 	sub.w	r9, r9, r6
 8004120:	f1b9 0f00 	cmp.w	r9, #0
 8004124:	dd37      	ble.n	8004196 <mbedtls_asn1_get_alg+0x94>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 8004126:	4642      	mov	r2, r8
 8004128:	7833      	ldrb	r3, [r6, #0]
    end = *p + len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 800412a:	4620      	mov	r0, r4
    alg->tag = **p;
 800412c:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 8004130:	9b01      	ldr	r3, [sp, #4]
 8004132:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8004134:	4631      	mov	r1, r6
 8004136:	2306      	movs	r3, #6
 8004138:	f7ff ff1e 	bl	8003f78 <mbedtls_asn1_get_tag>
 800413c:	4605      	mov	r5, r0
 800413e:	b968      	cbnz	r0, 800415c <mbedtls_asn1_get_alg+0x5a>
        return( ret );

    alg->p = *p;
 8004140:	6823      	ldr	r3, [r4, #0]
    *p += alg->len;
 8004142:	f8d8 2004 	ldr.w	r2, [r8, #4]
    alg->p = *p;
 8004146:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
 800414a:	6821      	ldr	r1, [r4, #0]
 800414c:	188b      	adds	r3, r1, r2

    if( *p == end )
 800414e:	429e      	cmp	r6, r3
    *p += alg->len;
 8004150:	6023      	str	r3, [r4, #0]
    if( *p == end )
 8004152:	d107      	bne.n	8004164 <mbedtls_asn1_get_alg+0x62>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
 8004154:	210c      	movs	r1, #12
 8004156:	4638      	mov	r0, r7
 8004158:	f004 f9e2 	bl	8008520 <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 800415c:	4628      	mov	r0, r5
 800415e:	b003      	add	sp, #12
 8004160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    params->tag = **p;
 8004164:	5c89      	ldrb	r1, [r1, r2]
 8004166:	463a      	mov	r2, r7
    (*p)++;
 8004168:	3301      	adds	r3, #1
    params->tag = **p;
 800416a:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 800416e:	4620      	mov	r0, r4
    (*p)++;
 8004170:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 8004172:	4631      	mov	r1, r6
 8004174:	f7ff feb1 	bl	8003eda <mbedtls_asn1_get_len>
 8004178:	4605      	mov	r5, r0
 800417a:	2800      	cmp	r0, #0
 800417c:	d1ee      	bne.n	800415c <mbedtls_asn1_get_alg+0x5a>
    params->p = *p;
 800417e:	6823      	ldr	r3, [r4, #0]
    *p += params->len;
 8004180:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
 8004182:	60bb      	str	r3, [r7, #8]
    *p += params->len;
 8004184:	6823      	ldr	r3, [r4, #0]
 8004186:	4413      	add	r3, r2
    if( *p != end )
 8004188:	429e      	cmp	r6, r3
    *p += params->len;
 800418a:	6023      	str	r3, [r4, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800418c:	bf0c      	ite	eq
 800418e:	4605      	moveq	r5, r0
 8004190:	f06f 0565 	mvnne.w	r5, #101	; 0x65
 8004194:	e7e2      	b.n	800415c <mbedtls_asn1_get_alg+0x5a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8004196:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 800419a:	e7df      	b.n	800415c <mbedtls_asn1_get_alg+0x5a>

0800419c <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 800419c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 80041a0:	2700      	movs	r7, #0
 80041a2:	463c      	mov	r4, r7
 80041a4:	463d      	mov	r5, r7
{
 80041a6:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 80041aa:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80042c0 <mbedtls_base64_decode+0x124>
    for( i = n = j = 0; i < slen; i++ )
 80041ae:	4575      	cmp	r5, lr
 80041b0:	d22d      	bcs.n	800420e <mbedtls_base64_decode+0x72>
 80041b2:	f04f 0c00 	mov.w	ip, #0
        while( i < slen && src[i] == ' ' )
 80041b6:	5d5e      	ldrb	r6, [r3, r5]
 80041b8:	2e20      	cmp	r6, #32
 80041ba:	d023      	beq.n	8004204 <mbedtls_base64_decode+0x68>
        if( ( slen - i ) >= 2 &&
 80041bc:	ebae 0905 	sub.w	r9, lr, r5
 80041c0:	f1b9 0f01 	cmp.w	r9, #1
 80041c4:	d905      	bls.n	80041d2 <mbedtls_base64_decode+0x36>
 80041c6:	2e0d      	cmp	r6, #13
 80041c8:	d103      	bne.n	80041d2 <mbedtls_base64_decode+0x36>
            src[i] == '\r' && src[i + 1] == '\n' )
 80041ca:	195e      	adds	r6, r3, r5
 80041cc:	7876      	ldrb	r6, [r6, #1]
 80041ce:	2e0a      	cmp	r6, #10
 80041d0:	d016      	beq.n	8004200 <mbedtls_base64_decode+0x64>
        if( src[i] == '\n' )
 80041d2:	5d5e      	ldrb	r6, [r3, r5]
 80041d4:	2e0a      	cmp	r6, #10
 80041d6:	d013      	beq.n	8004200 <mbedtls_base64_decode+0x64>
        if( x != 0 )
 80041d8:	f1bc 0f00 	cmp.w	ip, #0
 80041dc:	d16c      	bne.n	80042b8 <mbedtls_base64_decode+0x11c>
        if( src[i] == '=' && ++j > 2 )
 80041de:	2e3d      	cmp	r6, #61	; 0x3d
 80041e0:	d102      	bne.n	80041e8 <mbedtls_base64_decode+0x4c>
 80041e2:	3701      	adds	r7, #1
 80041e4:	2f02      	cmp	r7, #2
 80041e6:	d867      	bhi.n	80042b8 <mbedtls_base64_decode+0x11c>
        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 80041e8:	f016 0f80 	tst.w	r6, #128	; 0x80
 80041ec:	d164      	bne.n	80042b8 <mbedtls_base64_decode+0x11c>
 80041ee:	f818 6006 	ldrb.w	r6, [r8, r6]
 80041f2:	2e7f      	cmp	r6, #127	; 0x7f
 80041f4:	d060      	beq.n	80042b8 <mbedtls_base64_decode+0x11c>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 80041f6:	2e3f      	cmp	r6, #63	; 0x3f
 80041f8:	d801      	bhi.n	80041fe <mbedtls_base64_decode+0x62>
 80041fa:	2f00      	cmp	r7, #0
 80041fc:	d15c      	bne.n	80042b8 <mbedtls_base64_decode+0x11c>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
 80041fe:	3401      	adds	r4, #1
    for( i = n = j = 0; i < slen; i++ )
 8004200:	3501      	adds	r5, #1
 8004202:	e7d4      	b.n	80041ae <mbedtls_base64_decode+0x12>
            ++i;
 8004204:	3501      	adds	r5, #1
        while( i < slen && src[i] == ' ' )
 8004206:	45ae      	cmp	lr, r5
            ++x;
 8004208:	f10c 0c01 	add.w	ip, ip, #1
        while( i < slen && src[i] == ' ' )
 800420c:	d1d3      	bne.n	80041b6 <mbedtls_base64_decode+0x1a>
    }

    if( n == 0 )
 800420e:	b91c      	cbnz	r4, 8004218 <mbedtls_base64_decode+0x7c>
    {
        *olen = 0;
 8004210:	6014      	str	r4, [r2, #0]
        }
    }

    *olen = p - dst;

    return( 0 );
 8004212:	2000      	movs	r0, #0
 8004214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 8004218:	2606      	movs	r6, #6
 800421a:	f004 0e07 	and.w	lr, r4, #7
 800421e:	08e4      	lsrs	r4, r4, #3
 8004220:	fb06 fe0e 	mul.w	lr, r6, lr
 8004224:	4374      	muls	r4, r6
 8004226:	f10e 0e07 	add.w	lr, lr, #7
 800422a:	1be4      	subs	r4, r4, r7
    n -= j;
 800422c:	eb04 04de 	add.w	r4, r4, lr, lsr #3
    if( dst == NULL || dlen < n )
 8004230:	b178      	cbz	r0, 8004252 <mbedtls_base64_decode+0xb6>
 8004232:	428c      	cmp	r4, r1
 8004234:	d80d      	bhi.n	8004252 <mbedtls_base64_decode+0xb6>
 8004236:	2700      	movs	r7, #0
 8004238:	4601      	mov	r1, r0
 800423a:	2603      	movs	r6, #3
 800423c:	463c      	mov	r4, r7
        j -= ( base64_dec_map[*src] == 64 );
 800423e:	f8df c080 	ldr.w	ip, [pc, #128]	; 80042c0 <mbedtls_base64_decode+0x124>
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8004242:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80042c4 <mbedtls_base64_decode+0x128>
 8004246:	441d      	add	r5, r3
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8004248:	42ab      	cmp	r3, r5
 800424a:	d107      	bne.n	800425c <mbedtls_base64_decode+0xc0>
    *olen = p - dst;
 800424c:	1a09      	subs	r1, r1, r0
 800424e:	6011      	str	r1, [r2, #0]
 8004250:	e7df      	b.n	8004212 <mbedtls_base64_decode+0x76>
        *olen = n;
 8004252:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 8004254:	f06f 0029 	mvn.w	r0, #41	; 0x29
 8004258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 800425c:	f813 9b01 	ldrb.w	r9, [r3], #1
 8004260:	f1a9 0e0a 	sub.w	lr, r9, #10
 8004264:	fa5f fe8e 	uxtb.w	lr, lr
 8004268:	f1be 0f16 	cmp.w	lr, #22
 800426c:	d804      	bhi.n	8004278 <mbedtls_base64_decode+0xdc>
 800426e:	fa28 fe0e 	lsr.w	lr, r8, lr
 8004272:	f01e 0f01 	tst.w	lr, #1
 8004276:	d1e7      	bne.n	8004248 <mbedtls_base64_decode+0xac>
        j -= ( base64_dec_map[*src] == 64 );
 8004278:	f81c e009 	ldrb.w	lr, [ip, r9]
        if( ++n == 4 )
 800427c:	3401      	adds	r4, #1
        j -= ( base64_dec_map[*src] == 64 );
 800427e:	f1be 0f40 	cmp.w	lr, #64	; 0x40
 8004282:	bf08      	it	eq
 8004284:	3e01      	subeq	r6, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8004286:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
        if( ++n == 4 )
 800428a:	2c04      	cmp	r4, #4
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 800428c:	ea4e 1787 	orr.w	r7, lr, r7, lsl #6
        if( ++n == 4 )
 8004290:	d1da      	bne.n	8004248 <mbedtls_base64_decode+0xac>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8004292:	b17e      	cbz	r6, 80042b4 <mbedtls_base64_decode+0x118>
 8004294:	0c3c      	lsrs	r4, r7, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8004296:	2e01      	cmp	r6, #1
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8004298:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800429a:	d102      	bne.n	80042a2 <mbedtls_base64_decode+0x106>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 800429c:	3101      	adds	r1, #1
            n = 0;
 800429e:	2400      	movs	r4, #0
 80042a0:	e7d2      	b.n	8004248 <mbedtls_base64_decode+0xac>
            if( j > 2 ) *p++ = (unsigned char)( x       );
 80042a2:	2e02      	cmp	r6, #2
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80042a4:	ea4f 2417 	mov.w	r4, r7, lsr #8
 80042a8:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 80042aa:	bf16      	itet	ne
 80042ac:	708f      	strbne	r7, [r1, #2]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80042ae:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
 80042b0:	3103      	addne	r1, #3
 80042b2:	e7f4      	b.n	800429e <mbedtls_base64_decode+0x102>
            n = 0;
 80042b4:	4634      	mov	r4, r6
 80042b6:	e7c7      	b.n	8004248 <mbedtls_base64_decode+0xac>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 80042b8:	f06f 002b 	mvn.w	r0, #43	; 0x2b
}
 80042bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042c0:	08013a35 	.word	0x08013a35
 80042c4:	00400009 	.word	0x00400009

080042c8 <mpi_sub_hlp>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 80042c8:	2300      	movs	r3, #0
{
 80042ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    for( i = c = 0; i < n; i++, s++, d++ )
 80042cc:	4616      	mov	r6, r2
 80042ce:	461c      	mov	r4, r3
 80042d0:	4284      	cmp	r4, r0
 80042d2:	d103      	bne.n	80042dc <mpi_sub_hlp+0x14>
 80042d4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 80042d8:	b9bb      	cbnz	r3, 800430a <mpi_sub_hlp+0x42>
    {
        z = ( *d < c ); *d -= c;
        c = z; d++;
    }
}
 80042da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        z = ( *d <  c );     *d -=  c;
 80042dc:	f8d6 e000 	ldr.w	lr, [r6]
 80042e0:	ebae 0503 	sub.w	r5, lr, r3
 80042e4:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
 80042e6:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
    for( i = c = 0; i < n; i++, s++, d++ )
 80042ea:	3401      	adds	r4, #1
        c = ( *d < *s ) + z; *d -= *s;
 80042ec:	42bd      	cmp	r5, r7
 80042ee:	bf2c      	ite	cs
 80042f0:	f04f 0c00 	movcs.w	ip, #0
 80042f4:	f04f 0c01 	movcc.w	ip, #1
 80042f8:	1bed      	subs	r5, r5, r7
 80042fa:	4573      	cmp	r3, lr
 80042fc:	bf94      	ite	ls
 80042fe:	4663      	movls	r3, ip
 8004300:	f10c 0301 	addhi.w	r3, ip, #1
 8004304:	f846 5b04 	str.w	r5, [r6], #4
 8004308:	e7e2      	b.n	80042d0 <mpi_sub_hlp+0x8>
        z = ( *d < c ); *d -= c;
 800430a:	6811      	ldr	r1, [r2, #0]
 800430c:	1ac8      	subs	r0, r1, r3
        c = z; d++;
 800430e:	428b      	cmp	r3, r1
        z = ( *d < c ); *d -= c;
 8004310:	f842 0b04 	str.w	r0, [r2], #4
        c = z; d++;
 8004314:	bf94      	ite	ls
 8004316:	2300      	movls	r3, #0
 8004318:	2301      	movhi	r3, #1
 800431a:	e7dd      	b.n	80042d8 <mpi_sub_hlp+0x10>

0800431c <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 800431c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mbedtls_mpi_uint c = 0, t = 0;
 8004320:	f04f 0c00 	mov.w	ip, #0
 8004324:	460d      	mov	r5, r1
 8004326:	4614      	mov	r4, r2
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 8004328:	4686      	mov	lr, r0
 800432a:	f1be 0f0f 	cmp.w	lr, #15
 800432e:	f105 0540 	add.w	r5, r5, #64	; 0x40
 8004332:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8004336:	f200 8087 	bhi.w	8004448 <mpi_mul_hlp+0x12c>
 800433a:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 800433e:	eba0 100e 	sub.w	r0, r0, lr, lsl #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 8004342:	2807      	cmp	r0, #7
 8004344:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
 8004348:	eb01 050e 	add.w	r5, r1, lr
 800434c:	eb02 040e 	add.w	r4, r2, lr
 8004350:	d966      	bls.n	8004420 <mpi_mul_hlp+0x104>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 8004352:	f851 600e 	ldr.w	r6, [r1, lr]
 8004356:	fba3 7806 	umull	r7, r8, r3, r6
 800435a:	eb1c 0c07 	adds.w	ip, ip, r7
 800435e:	bf2c      	ite	cs
 8004360:	2101      	movcs	r1, #1
 8004362:	2100      	movcc	r1, #0
 8004364:	f852 600e 	ldr.w	r6, [r2, lr]
 8004368:	eb1c 0606 	adds.w	r6, ip, r6
 800436c:	f842 600e 	str.w	r6, [r2, lr]
 8004370:	686e      	ldr	r6, [r5, #4]
 8004372:	eb41 0108 	adc.w	r1, r1, r8
 8004376:	fba3 7806 	umull	r7, r8, r3, r6
 800437a:	19ca      	adds	r2, r1, r7
 800437c:	bf2c      	ite	cs
 800437e:	2101      	movcs	r1, #1
 8004380:	2100      	movcc	r1, #0
 8004382:	6866      	ldr	r6, [r4, #4]
 8004384:	1992      	adds	r2, r2, r6
 8004386:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
 8004388:	68ae      	ldr	r6, [r5, #8]
        MULADDC_CORE   MULADDC_CORE
 800438a:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 800438e:	fba3 7806 	umull	r7, r8, r3, r6
 8004392:	19c9      	adds	r1, r1, r7
 8004394:	bf2c      	ite	cs
 8004396:	2201      	movcs	r2, #1
 8004398:	2200      	movcc	r2, #0
 800439a:	68a6      	ldr	r6, [r4, #8]
 800439c:	1989      	adds	r1, r1, r6
 800439e:	60a1      	str	r1, [r4, #8]
 80043a0:	68ee      	ldr	r6, [r5, #12]
 80043a2:	eb42 0208 	adc.w	r2, r2, r8
 80043a6:	fba3 7806 	umull	r7, r8, r3, r6
 80043aa:	19d2      	adds	r2, r2, r7
 80043ac:	bf2c      	ite	cs
 80043ae:	2101      	movcs	r1, #1
 80043b0:	2100      	movcc	r1, #0
 80043b2:	68e6      	ldr	r6, [r4, #12]
 80043b4:	1992      	adds	r2, r2, r6
 80043b6:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
 80043b8:	692e      	ldr	r6, [r5, #16]
        MULADDC_CORE   MULADDC_CORE
 80043ba:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 80043be:	fba3 7806 	umull	r7, r8, r3, r6
 80043c2:	19c9      	adds	r1, r1, r7
 80043c4:	bf2c      	ite	cs
 80043c6:	2201      	movcs	r2, #1
 80043c8:	2200      	movcc	r2, #0
 80043ca:	6926      	ldr	r6, [r4, #16]
 80043cc:	1989      	adds	r1, r1, r6
 80043ce:	6121      	str	r1, [r4, #16]
 80043d0:	696e      	ldr	r6, [r5, #20]
 80043d2:	eb42 0208 	adc.w	r2, r2, r8
 80043d6:	fba3 7806 	umull	r7, r8, r3, r6
 80043da:	19d2      	adds	r2, r2, r7
 80043dc:	bf2c      	ite	cs
 80043de:	2101      	movcs	r1, #1
 80043e0:	2100      	movcc	r1, #0
 80043e2:	6966      	ldr	r6, [r4, #20]
 80043e4:	1992      	adds	r2, r2, r6
 80043e6:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
 80043e8:	69ae      	ldr	r6, [r5, #24]
        MULADDC_CORE   MULADDC_CORE
 80043ea:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 80043ee:	fba3 7806 	umull	r7, r8, r3, r6
 80043f2:	19c9      	adds	r1, r1, r7
 80043f4:	bf2c      	ite	cs
 80043f6:	2201      	movcs	r2, #1
 80043f8:	2200      	movcc	r2, #0
 80043fa:	69a6      	ldr	r6, [r4, #24]
 80043fc:	1989      	adds	r1, r1, r6
 80043fe:	61a1      	str	r1, [r4, #24]
 8004400:	69ee      	ldr	r6, [r5, #28]
 8004402:	eb42 0208 	adc.w	r2, r2, r8
 8004406:	fba3 6706 	umull	r6, r7, r3, r6
 800440a:	1992      	adds	r2, r2, r6
 800440c:	bf2c      	ite	cs
 800440e:	f04f 0c01 	movcs.w	ip, #1
 8004412:	f04f 0c00 	movcc.w	ip, #0
 8004416:	69e1      	ldr	r1, [r4, #28]
 8004418:	1852      	adds	r2, r2, r1
 800441a:	eb4c 0c07 	adc.w	ip, ip, r7
 800441e:	61e2      	str	r2, [r4, #28]
 8004420:	08c2      	lsrs	r2, r0, #3
 8004422:	0151      	lsls	r1, r2, #5
 8004424:	440c      	add	r4, r1
 8004426:	eba0 00c2 	sub.w	r0, r0, r2, lsl #3
 800442a:	440d      	add	r5, r1
 800442c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 8004430:	4284      	cmp	r4, r0
 8004432:	f040 812c 	bne.w	800468e <mpi_mul_hlp+0x372>
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 8004436:	6803      	ldr	r3, [r0, #0]
 8004438:	4463      	add	r3, ip
    }
    while( c != 0 );
 800443a:	459c      	cmp	ip, r3
        *d += c; c = ( *d < c ); d++;
 800443c:	f840 3b04 	str.w	r3, [r0], #4
    while( c != 0 );
 8004440:	f200 813a 	bhi.w	80046b8 <mpi_mul_hlp+0x39c>
}
 8004444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MULADDC_CORE   MULADDC_CORE
 8004448:	f855 6c40 	ldr.w	r6, [r5, #-64]
    for( ; i >= 16; i -= 16 )
 800444c:	f1ae 0e10 	sub.w	lr, lr, #16
        MULADDC_CORE   MULADDC_CORE
 8004450:	fba3 9a06 	umull	r9, sl, r3, r6
 8004454:	eb1c 0c09 	adds.w	ip, ip, r9
 8004458:	bf2c      	ite	cs
 800445a:	f04f 0801 	movcs.w	r8, #1
 800445e:	f04f 0800 	movcc.w	r8, #0
 8004462:	f854 6c40 	ldr.w	r6, [r4, #-64]
 8004466:	eb1c 0606 	adds.w	r6, ip, r6
 800446a:	f844 6c40 	str.w	r6, [r4, #-64]
 800446e:	f855 6c3c 	ldr.w	r6, [r5, #-60]
 8004472:	eb48 080a 	adc.w	r8, r8, sl
 8004476:	fba3 9a06 	umull	r9, sl, r3, r6
 800447a:	eb18 0809 	adds.w	r8, r8, r9
 800447e:	bf2c      	ite	cs
 8004480:	f04f 0c01 	movcs.w	ip, #1
 8004484:	f04f 0c00 	movcc.w	ip, #0
 8004488:	f854 6c3c 	ldr.w	r6, [r4, #-60]
 800448c:	eb18 0606 	adds.w	r6, r8, r6
 8004490:	f844 6c3c 	str.w	r6, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
 8004494:	f855 6c38 	ldr.w	r6, [r5, #-56]
        MULADDC_CORE   MULADDC_CORE
 8004498:	eb4c 070a 	adc.w	r7, ip, sl
        MULADDC_CORE   MULADDC_CORE
 800449c:	fba3 8906 	umull	r8, r9, r3, r6
 80044a0:	eb17 0708 	adds.w	r7, r7, r8
 80044a4:	bf2c      	ite	cs
 80044a6:	f04f 0c01 	movcs.w	ip, #1
 80044aa:	f04f 0c00 	movcc.w	ip, #0
 80044ae:	f854 6c38 	ldr.w	r6, [r4, #-56]
 80044b2:	19be      	adds	r6, r7, r6
 80044b4:	f844 6c38 	str.w	r6, [r4, #-56]
 80044b8:	f855 7c34 	ldr.w	r7, [r5, #-52]
 80044bc:	eb4c 0c09 	adc.w	ip, ip, r9
 80044c0:	fba3 8907 	umull	r8, r9, r3, r7
 80044c4:	eb1c 0c08 	adds.w	ip, ip, r8
 80044c8:	bf2c      	ite	cs
 80044ca:	2701      	movcs	r7, #1
 80044cc:	2700      	movcc	r7, #0
 80044ce:	f854 6c34 	ldr.w	r6, [r4, #-52]
 80044d2:	eb1c 0606 	adds.w	r6, ip, r6
 80044d6:	f844 6c34 	str.w	r6, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
 80044da:	f855 6c30 	ldr.w	r6, [r5, #-48]
        MULADDC_CORE   MULADDC_CORE
 80044de:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 80044e2:	fba3 8906 	umull	r8, r9, r3, r6
 80044e6:	eb17 0708 	adds.w	r7, r7, r8
 80044ea:	bf2c      	ite	cs
 80044ec:	f04f 0c01 	movcs.w	ip, #1
 80044f0:	f04f 0c00 	movcc.w	ip, #0
 80044f4:	f854 6c30 	ldr.w	r6, [r4, #-48]
 80044f8:	19be      	adds	r6, r7, r6
 80044fa:	f844 6c30 	str.w	r6, [r4, #-48]
 80044fe:	f855 7c2c 	ldr.w	r7, [r5, #-44]
 8004502:	eb4c 0c09 	adc.w	ip, ip, r9
 8004506:	fba3 8907 	umull	r8, r9, r3, r7
 800450a:	eb1c 0c08 	adds.w	ip, ip, r8
 800450e:	bf2c      	ite	cs
 8004510:	2701      	movcs	r7, #1
 8004512:	2700      	movcc	r7, #0
 8004514:	f854 6c2c 	ldr.w	r6, [r4, #-44]
 8004518:	eb1c 0606 	adds.w	r6, ip, r6
 800451c:	f844 6c2c 	str.w	r6, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
 8004520:	f855 6c28 	ldr.w	r6, [r5, #-40]
        MULADDC_CORE   MULADDC_CORE
 8004524:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 8004528:	fba3 8906 	umull	r8, r9, r3, r6
 800452c:	eb17 0708 	adds.w	r7, r7, r8
 8004530:	bf2c      	ite	cs
 8004532:	f04f 0c01 	movcs.w	ip, #1
 8004536:	f04f 0c00 	movcc.w	ip, #0
 800453a:	f854 6c28 	ldr.w	r6, [r4, #-40]
 800453e:	19be      	adds	r6, r7, r6
 8004540:	f844 6c28 	str.w	r6, [r4, #-40]
 8004544:	f855 7c24 	ldr.w	r7, [r5, #-36]
 8004548:	eb4c 0c09 	adc.w	ip, ip, r9
 800454c:	fba3 8907 	umull	r8, r9, r3, r7
 8004550:	eb1c 0c08 	adds.w	ip, ip, r8
 8004554:	bf2c      	ite	cs
 8004556:	2701      	movcs	r7, #1
 8004558:	2700      	movcc	r7, #0
 800455a:	f854 6c24 	ldr.w	r6, [r4, #-36]
 800455e:	eb1c 0606 	adds.w	r6, ip, r6
 8004562:	f844 6c24 	str.w	r6, [r4, #-36]
        MULADDC_CORE   MULADDC_CORE
 8004566:	f855 6c20 	ldr.w	r6, [r5, #-32]
        MULADDC_CORE   MULADDC_CORE
 800456a:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 800456e:	fba3 8906 	umull	r8, r9, r3, r6
 8004572:	eb17 0708 	adds.w	r7, r7, r8
 8004576:	bf2c      	ite	cs
 8004578:	f04f 0c01 	movcs.w	ip, #1
 800457c:	f04f 0c00 	movcc.w	ip, #0
 8004580:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8004584:	19be      	adds	r6, r7, r6
 8004586:	f844 6c20 	str.w	r6, [r4, #-32]
 800458a:	f855 7c1c 	ldr.w	r7, [r5, #-28]
 800458e:	eb4c 0c09 	adc.w	ip, ip, r9
 8004592:	fba3 8907 	umull	r8, r9, r3, r7
 8004596:	eb1c 0c08 	adds.w	ip, ip, r8
 800459a:	bf2c      	ite	cs
 800459c:	2701      	movcs	r7, #1
 800459e:	2700      	movcc	r7, #0
 80045a0:	f854 6c1c 	ldr.w	r6, [r4, #-28]
 80045a4:	eb1c 0606 	adds.w	r6, ip, r6
 80045a8:	f844 6c1c 	str.w	r6, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
 80045ac:	f855 6c18 	ldr.w	r6, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
 80045b0:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 80045b4:	fba3 8906 	umull	r8, r9, r3, r6
 80045b8:	eb17 0708 	adds.w	r7, r7, r8
 80045bc:	bf2c      	ite	cs
 80045be:	f04f 0c01 	movcs.w	ip, #1
 80045c2:	f04f 0c00 	movcc.w	ip, #0
 80045c6:	f854 6c18 	ldr.w	r6, [r4, #-24]
 80045ca:	19be      	adds	r6, r7, r6
 80045cc:	f844 6c18 	str.w	r6, [r4, #-24]
 80045d0:	f855 7c14 	ldr.w	r7, [r5, #-20]
 80045d4:	eb4c 0c09 	adc.w	ip, ip, r9
 80045d8:	fba3 8907 	umull	r8, r9, r3, r7
 80045dc:	eb1c 0c08 	adds.w	ip, ip, r8
 80045e0:	bf2c      	ite	cs
 80045e2:	2701      	movcs	r7, #1
 80045e4:	2700      	movcc	r7, #0
 80045e6:	f854 6c14 	ldr.w	r6, [r4, #-20]
 80045ea:	eb1c 0606 	adds.w	r6, ip, r6
 80045ee:	f844 6c14 	str.w	r6, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
 80045f2:	f855 6c10 	ldr.w	r6, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
 80045f6:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 80045fa:	fba3 8906 	umull	r8, r9, r3, r6
 80045fe:	eb17 0708 	adds.w	r7, r7, r8
 8004602:	bf2c      	ite	cs
 8004604:	f04f 0c01 	movcs.w	ip, #1
 8004608:	f04f 0c00 	movcc.w	ip, #0
 800460c:	f854 6c10 	ldr.w	r6, [r4, #-16]
 8004610:	19be      	adds	r6, r7, r6
 8004612:	f844 6c10 	str.w	r6, [r4, #-16]
 8004616:	f855 7c0c 	ldr.w	r7, [r5, #-12]
 800461a:	eb4c 0c09 	adc.w	ip, ip, r9
 800461e:	fba3 8907 	umull	r8, r9, r3, r7
 8004622:	eb1c 0c08 	adds.w	ip, ip, r8
 8004626:	bf2c      	ite	cs
 8004628:	2701      	movcs	r7, #1
 800462a:	2700      	movcc	r7, #0
 800462c:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 8004630:	eb1c 0606 	adds.w	r6, ip, r6
 8004634:	f844 6c0c 	str.w	r6, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
 8004638:	f855 6c08 	ldr.w	r6, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
 800463c:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 8004640:	fba3 8906 	umull	r8, r9, r3, r6
 8004644:	eb17 0708 	adds.w	r7, r7, r8
 8004648:	bf2c      	ite	cs
 800464a:	f04f 0c01 	movcs.w	ip, #1
 800464e:	f04f 0c00 	movcc.w	ip, #0
 8004652:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8004656:	19be      	adds	r6, r7, r6
 8004658:	f844 6c08 	str.w	r6, [r4, #-8]
 800465c:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8004660:	eb4c 0c09 	adc.w	ip, ip, r9
 8004664:	fba3 7806 	umull	r7, r8, r3, r6
 8004668:	eb1c 0c07 	adds.w	ip, ip, r7
 800466c:	bf2c      	ite	cs
 800466e:	2601      	movcs	r6, #1
 8004670:	2600      	movcc	r6, #0
 8004672:	eb08 0706 	add.w	r7, r8, r6
 8004676:	f854 8c04 	ldr.w	r8, [r4, #-4]
 800467a:	eb0c 0608 	add.w	r6, ip, r8
 800467e:	f844 6c04 	str.w	r6, [r4, #-4]
 8004682:	45b0      	cmp	r8, r6
 8004684:	bf94      	ite	ls
 8004686:	46bc      	movls	ip, r7
 8004688:	f107 0c01 	addhi.w	ip, r7, #1
 800468c:	e64d      	b.n	800432a <mpi_mul_hlp+0xe>
        MULADDC_CORE
 800468e:	f855 6b04 	ldr.w	r6, [r5], #4
 8004692:	fba3 6706 	umull	r6, r7, r3, r6
 8004696:	eb1c 0c06 	adds.w	ip, ip, r6
 800469a:	bf2c      	ite	cs
 800469c:	2101      	movcs	r1, #1
 800469e:	2100      	movcc	r1, #0
 80046a0:	6826      	ldr	r6, [r4, #0]
 80046a2:	4439      	add	r1, r7
 80046a4:	eb0c 0206 	add.w	r2, ip, r6
 80046a8:	f844 2b04 	str.w	r2, [r4], #4
 80046ac:	4296      	cmp	r6, r2
 80046ae:	bf94      	ite	ls
 80046b0:	468c      	movls	ip, r1
 80046b2:	f101 0c01 	addhi.w	ip, r1, #1
 80046b6:	e6bb      	b.n	8004430 <mpi_mul_hlp+0x114>
        *d += c; c = ( *d < c ); d++;
 80046b8:	f04f 0c01 	mov.w	ip, #1
 80046bc:	e6bb      	b.n	8004436 <mpi_mul_hlp+0x11a>

080046be <mbedtls_mpi_init>:
    X->s = 1;
 80046be:	2301      	movs	r3, #1
 80046c0:	6003      	str	r3, [r0, #0]
    X->n = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	6043      	str	r3, [r0, #4]
    X->p = NULL;
 80046c6:	6083      	str	r3, [r0, #8]
 80046c8:	4770      	bx	lr

080046ca <mbedtls_mpi_free>:
{
 80046ca:	b510      	push	{r4, lr}
    if( X == NULL )
 80046cc:	4604      	mov	r4, r0
 80046ce:	b168      	cbz	r0, 80046ec <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
 80046d0:	6880      	ldr	r0, [r0, #8]
 80046d2:	b130      	cbz	r0, 80046e2 <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
 80046d4:	6861      	ldr	r1, [r4, #4]
 80046d6:	0089      	lsls	r1, r1, #2
 80046d8:	f003 ff22 	bl	8008520 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 80046dc:	68a0      	ldr	r0, [r4, #8]
 80046de:	f00d fb57 	bl	8011d90 <free>
    X->s = 1;
 80046e2:	2301      	movs	r3, #1
 80046e4:	6023      	str	r3, [r4, #0]
    X->n = 0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	6063      	str	r3, [r4, #4]
    X->p = NULL;
 80046ea:	60a3      	str	r3, [r4, #8]
 80046ec:	bd10      	pop	{r4, pc}

080046ee <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80046ee:	f242 7310 	movw	r3, #10000	; 0x2710
 80046f2:	4299      	cmp	r1, r3
{
 80046f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f8:	4604      	mov	r4, r0
 80046fa:	460e      	mov	r6, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80046fc:	d903      	bls.n	8004706 <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80046fe:	f06f 000f 	mvn.w	r0, #15
 8004702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( X->n < nblimbs )
 8004706:	6845      	ldr	r5, [r0, #4]
 8004708:	42a9      	cmp	r1, r5
 800470a:	d917      	bls.n	800473c <mbedtls_mpi_grow+0x4e>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 800470c:	2104      	movs	r1, #4
 800470e:	4630      	mov	r0, r6
 8004710:	f00d fb04 	bl	8011d1c <calloc>
 8004714:	4680      	mov	r8, r0
 8004716:	2800      	cmp	r0, #0
 8004718:	d0f1      	beq.n	80046fe <mbedtls_mpi_grow+0x10>
        if( X->p != NULL )
 800471a:	68a7      	ldr	r7, [r4, #8]
 800471c:	b15f      	cbz	r7, 8004736 <mbedtls_mpi_grow+0x48>
            memcpy( p, X->p, X->n * ciL );
 800471e:	00ad      	lsls	r5, r5, #2
 8004720:	462a      	mov	r2, r5
 8004722:	4639      	mov	r1, r7
 8004724:	f00d fb4b 	bl	8011dbe <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 8004728:	4638      	mov	r0, r7
 800472a:	4629      	mov	r1, r5
 800472c:	f003 fef8 	bl	8008520 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8004730:	68a0      	ldr	r0, [r4, #8]
 8004732:	f00d fb2d 	bl	8011d90 <free>
        X->n = nblimbs;
 8004736:	6066      	str	r6, [r4, #4]
        X->p = p;
 8004738:	f8c4 8008 	str.w	r8, [r4, #8]
    return( 0 );
 800473c:	2000      	movs	r0, #0
}
 800473e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004742 <mbedtls_mpi_copy>:
    if( X == Y )
 8004742:	4288      	cmp	r0, r1
{
 8004744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004746:	4606      	mov	r6, r0
 8004748:	460f      	mov	r7, r1
    if( X == Y )
 800474a:	d003      	beq.n	8004754 <mbedtls_mpi_copy+0x12>
    if( Y->p == NULL )
 800474c:	688d      	ldr	r5, [r1, #8]
 800474e:	b91d      	cbnz	r5, 8004758 <mbedtls_mpi_copy+0x16>
        mbedtls_mpi_free( X );
 8004750:	f7ff ffbb 	bl	80046ca <mbedtls_mpi_free>
        return( 0 );
 8004754:	2000      	movs	r0, #0
}
 8004756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for( i = Y->n - 1; i > 0; i-- )
 8004758:	684c      	ldr	r4, [r1, #4]
 800475a:	3c01      	subs	r4, #1
 800475c:	b11c      	cbz	r4, 8004766 <mbedtls_mpi_copy+0x24>
        if( Y->p[i] != 0 )
 800475e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f9      	beq.n	800475a <mbedtls_mpi_copy+0x18>
    if( X->n < i )
 8004766:	6872      	ldr	r2, [r6, #4]
    i++;
 8004768:	3401      	adds	r4, #1
    X->s = Y->s;
 800476a:	683b      	ldr	r3, [r7, #0]
    if( X->n < i )
 800476c:	4294      	cmp	r4, r2
    X->s = Y->s;
 800476e:	6033      	str	r3, [r6, #0]
    if( X->n < i )
 8004770:	d905      	bls.n	800477e <mbedtls_mpi_copy+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 8004772:	4621      	mov	r1, r4
 8004774:	4630      	mov	r0, r6
 8004776:	f7ff ffba 	bl	80046ee <mbedtls_mpi_grow>
 800477a:	b140      	cbz	r0, 800478e <mbedtls_mpi_copy+0x4c>
 800477c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memset( X->p + i, 0, ( X->n - i ) * ciL );
 800477e:	68b0      	ldr	r0, [r6, #8]
 8004780:	1b12      	subs	r2, r2, r4
 8004782:	0092      	lsls	r2, r2, #2
 8004784:	2100      	movs	r1, #0
 8004786:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800478a:	f00d fb3d 	bl	8011e08 <memset>
    memcpy( X->p, Y->p, i * ciL );
 800478e:	00a2      	lsls	r2, r4, #2
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	68b0      	ldr	r0, [r6, #8]
 8004794:	f00d fb13 	bl	8011dbe <memcpy>
 8004798:	e7dc      	b.n	8004754 <mbedtls_mpi_copy+0x12>

0800479a <mbedtls_mpi_lset>:
{
 800479a:	b570      	push	{r4, r5, r6, lr}
 800479c:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 800479e:	2101      	movs	r1, #1
{
 80047a0:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 80047a2:	f7ff ffa4 	bl	80046ee <mbedtls_mpi_grow>
 80047a6:	4605      	mov	r5, r0
 80047a8:	b988      	cbnz	r0, 80047ce <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 80047aa:	6862      	ldr	r2, [r4, #4]
 80047ac:	4601      	mov	r1, r0
 80047ae:	0092      	lsls	r2, r2, #2
 80047b0:	68a0      	ldr	r0, [r4, #8]
 80047b2:	f00d fb29 	bl	8011e08 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 80047b6:	68a3      	ldr	r3, [r4, #8]
 80047b8:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 80047bc:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
 80047be:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 80047c2:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 80047c4:	bfb4      	ite	lt
 80047c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80047ca:	2301      	movge	r3, #1
 80047cc:	6023      	str	r3, [r4, #0]
}
 80047ce:	4628      	mov	r0, r5
 80047d0:	bd70      	pop	{r4, r5, r6, pc}

080047d2 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
 80047d2:	6843      	ldr	r3, [r0, #4]
 80047d4:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 80047d8:	bf3f      	itttt	cc
 80047da:	6883      	ldrcc	r3, [r0, #8]
 80047dc:	094a      	lsrcc	r2, r1, #5
 80047de:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
 80047e2:	f001 011f 	andcc.w	r1, r1, #31
 80047e6:	bf3a      	itte	cc
 80047e8:	40c8      	lsrcc	r0, r1
 80047ea:	f000 0001 	andcc.w	r0, r0, #1
        return( 0 );
 80047ee:	2000      	movcs	r0, #0
}
 80047f0:	4770      	bx	lr

080047f2 <mbedtls_mpi_lsb>:
    size_t i, j, count = 0;
 80047f2:	2300      	movs	r3, #0
    for( i = 0; i < X->n; i++ )
 80047f4:	4619      	mov	r1, r3
{
 80047f6:	b570      	push	{r4, r5, r6, lr}
    for( i = 0; i < X->n; i++ )
 80047f8:	6845      	ldr	r5, [r0, #4]
 80047fa:	42a9      	cmp	r1, r5
 80047fc:	d00e      	beq.n	800481c <mbedtls_mpi_lsb+0x2a>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 80047fe:	6882      	ldr	r2, [r0, #8]
 8004800:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 8004804:	2200      	movs	r2, #0
 8004806:	fa24 f602 	lsr.w	r6, r4, r2
 800480a:	07f6      	lsls	r6, r6, #31
 800480c:	d407      	bmi.n	800481e <mbedtls_mpi_lsb+0x2c>
        for( j = 0; j < biL; j++, count++ )
 800480e:	3201      	adds	r2, #1
 8004810:	2a20      	cmp	r2, #32
 8004812:	f103 0301 	add.w	r3, r3, #1
 8004816:	d1f6      	bne.n	8004806 <mbedtls_mpi_lsb+0x14>
    for( i = 0; i < X->n; i++ )
 8004818:	3101      	adds	r1, #1
 800481a:	e7ee      	b.n	80047fa <mbedtls_mpi_lsb+0x8>
    return( 0 );
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	bd70      	pop	{r4, r5, r6, pc}

08004822 <mbedtls_mpi_bitlen>:
    if( X->n == 0 )
 8004822:	6843      	ldr	r3, [r0, #4]
{
 8004824:	b510      	push	{r4, lr}
    if( X->n == 0 )
 8004826:	b1e3      	cbz	r3, 8004862 <mbedtls_mpi_bitlen+0x40>
    for( i = X->n - 1; i > 0; i-- )
 8004828:	1e5a      	subs	r2, r3, #1
 800482a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800482e:	3b01      	subs	r3, #1
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	6881      	ldr	r1, [r0, #8]
 8004834:	b97a      	cbnz	r2, 8004856 <mbedtls_mpi_bitlen+0x34>
    for( j = 0; j < biL; j++ )
 8004836:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 8004838:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    j = biL - mbedtls_clz( X->p[i] );
 800483c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
        if( x & mask ) break;
 8004840:	4219      	tst	r1, r3
 8004842:	d104      	bne.n	800484e <mbedtls_mpi_bitlen+0x2c>
    for( j = 0; j < biL; j++ )
 8004844:	3001      	adds	r0, #1
 8004846:	2820      	cmp	r0, #32
        mask >>= 1;
 8004848:	ea4f 0353 	mov.w	r3, r3, lsr #1
    for( j = 0; j < biL; j++ )
 800484c:	d1f8      	bne.n	8004840 <mbedtls_mpi_bitlen+0x1e>
    return( ( i * biL ) + j );
 800484e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004852:	3020      	adds	r0, #32
 8004854:	bd10      	pop	{r4, pc}
        if( X->p[i] != 0 )
 8004856:	58cc      	ldr	r4, [r1, r3]
 8004858:	3b04      	subs	r3, #4
 800485a:	2c00      	cmp	r4, #0
 800485c:	d1eb      	bne.n	8004836 <mbedtls_mpi_bitlen+0x14>
    for( i = X->n - 1; i > 0; i-- )
 800485e:	3a01      	subs	r2, #1
 8004860:	e7e7      	b.n	8004832 <mbedtls_mpi_bitlen+0x10>
        return( 0 );
 8004862:	4618      	mov	r0, r3
}
 8004864:	bd10      	pop	{r4, pc}

08004866 <mbedtls_mpi_size>:
{
 8004866:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 8004868:	f7ff ffdb 	bl	8004822 <mbedtls_mpi_bitlen>
 800486c:	3007      	adds	r0, #7
}
 800486e:	08c0      	lsrs	r0, r0, #3
 8004870:	bd08      	pop	{r3, pc}

08004872 <mbedtls_mpi_read_binary>:
{
 8004872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004874:	460f      	mov	r7, r1
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 8004876:	f012 0103 	ands.w	r1, r2, #3
 800487a:	bf18      	it	ne
 800487c:	2101      	movne	r1, #1
    if( X->n != limbs )
 800487e:	6843      	ldr	r3, [r0, #4]
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 8004880:	eb01 0592 	add.w	r5, r1, r2, lsr #2
    if( X->n != limbs )
 8004884:	429d      	cmp	r5, r3
{
 8004886:	4604      	mov	r4, r0
 8004888:	4616      	mov	r6, r2
    if( X->n != limbs )
 800488a:	d105      	bne.n	8004898 <mbedtls_mpi_read_binary+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800488c:	2100      	movs	r1, #0
 800488e:	4620      	mov	r0, r4
 8004890:	f7ff ff83 	bl	800479a <mbedtls_mpi_lset>
 8004894:	b170      	cbz	r0, 80048b4 <mbedtls_mpi_read_binary+0x42>
 8004896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mbedtls_mpi_free( X );
 8004898:	f7ff ff17 	bl	80046ca <mbedtls_mpi_free>
    X->s = 1;
 800489c:	2301      	movs	r3, #1
 800489e:	6023      	str	r3, [r4, #0]
    X->n = 0;
 80048a0:	2300      	movs	r3, #0
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 80048a2:	4629      	mov	r1, r5
    X->n = 0;
 80048a4:	6063      	str	r3, [r4, #4]
    X->p = NULL;
 80048a6:	60a3      	str	r3, [r4, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 80048a8:	4620      	mov	r0, r4
 80048aa:	f7ff ff20 	bl	80046ee <mbedtls_mpi_grow>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d0ec      	beq.n	800488c <mbedtls_mpi_read_binary+0x1a>
 80048b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80048b4:	4603      	mov	r3, r0
 80048b6:	19b9      	adds	r1, r7, r6
    for( i = buflen, j = 0; i > 0; i--, j++ )
 80048b8:	42b3      	cmp	r3, r6
 80048ba:	d100      	bne.n	80048be <mbedtls_mpi_read_binary+0x4c>
}
 80048bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 80048be:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
 80048c2:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80048c6:	00dd      	lsls	r5, r3, #3
 80048c8:	f023 0703 	bic.w	r7, r3, #3
 80048cc:	f005 0518 	and.w	r5, r5, #24
 80048d0:	fa02 f505 	lsl.w	r5, r2, r5
 80048d4:	f85e 2007 	ldr.w	r2, [lr, r7]
    for( i = buflen, j = 0; i > 0; i--, j++ )
 80048d8:	3301      	adds	r3, #1
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 80048da:	432a      	orrs	r2, r5
 80048dc:	f84e 2007 	str.w	r2, [lr, r7]
 80048e0:	e7ea      	b.n	80048b8 <mbedtls_mpi_read_binary+0x46>

080048e2 <mbedtls_mpi_write_binary>:
{
 80048e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e4:	4605      	mov	r5, r0
    stored_bytes = X->n * ciL;
 80048e6:	686c      	ldr	r4, [r5, #4]
{
 80048e8:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
 80048ea:	00a4      	lsls	r4, r4, #2
    if( stored_bytes < buflen )
 80048ec:	4294      	cmp	r4, r2
 80048ee:	d310      	bcc.n	8004912 <mbedtls_mpi_write_binary+0x30>
 80048f0:	4613      	mov	r3, r2
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 80048f2:	42a3      	cmp	r3, r4
 80048f4:	d014      	beq.n	8004920 <mbedtls_mpi_write_binary+0x3e>
            if( GET_BYTE( X, i ) != 0 )
 80048f6:	68af      	ldr	r7, [r5, #8]
 80048f8:	f003 0103 	and.w	r1, r3, #3
 80048fc:	f023 0e03 	bic.w	lr, r3, #3
 8004900:	00ce      	lsls	r6, r1, #3
 8004902:	f857 100e 	ldr.w	r1, [r7, lr]
 8004906:	40f1      	lsrs	r1, r6
 8004908:	f011 0fff 	tst.w	r1, #255	; 0xff
 800490c:	d11a      	bne.n	8004944 <mbedtls_mpi_write_binary+0x62>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 800490e:	3301      	adds	r3, #1
 8004910:	e7ef      	b.n	80048f2 <mbedtls_mpi_write_binary+0x10>
        p = buf + buflen - stored_bytes;
 8004912:	1b12      	subs	r2, r2, r4
 8004914:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
 8004916:	2100      	movs	r1, #0
 8004918:	f00d fa76 	bl	8011e08 <memset>
        p = buf + buflen - stored_bytes;
 800491c:	4630      	mov	r0, r6
 800491e:	4622      	mov	r2, r4
    for( i = 0; i < bytes_to_copy; i++ )
 8004920:	2300      	movs	r3, #0
 8004922:	4410      	add	r0, r2
 8004924:	429a      	cmp	r2, r3
 8004926:	d101      	bne.n	800492c <mbedtls_mpi_write_binary+0x4a>
    return( 0 );
 8004928:	2000      	movs	r0, #0
 800492a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
 800492c:	68af      	ldr	r7, [r5, #8]
 800492e:	f003 0103 	and.w	r1, r3, #3
 8004932:	f023 0603 	bic.w	r6, r3, #3
 8004936:	00cc      	lsls	r4, r1, #3
 8004938:	59b9      	ldr	r1, [r7, r6]
    for( i = 0; i < bytes_to_copy; i++ )
 800493a:	3301      	adds	r3, #1
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
 800493c:	40e1      	lsrs	r1, r4
 800493e:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8004942:	e7ef      	b.n	8004924 <mbedtls_mpi_write_binary+0x42>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 8004944:	f06f 0007 	mvn.w	r0, #7
}
 8004948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800494a <mbedtls_mpi_shift_l>:
{
 800494a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494c:	4606      	mov	r6, r0
 800494e:	460c      	mov	r4, r1
    v0 = count / (biL    );
 8004950:	094d      	lsrs	r5, r1, #5
    t1 = count & (biL - 1);
 8004952:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
 8004956:	f7ff ff64 	bl	8004822 <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
 800495a:	6873      	ldr	r3, [r6, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
 800495c:	4420      	add	r0, r4
    if( X->n * biL < i )
 800495e:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 8004962:	d803      	bhi.n	800496c <mbedtls_mpi_shift_l+0x22>
    if( v0 > 0 )
 8004964:	b975      	cbnz	r5, 8004984 <mbedtls_mpi_shift_l+0x3a>
    if( t1 > 0 )
 8004966:	bb4f      	cbnz	r7, 80049bc <mbedtls_mpi_shift_l+0x72>
    ret = 0;
 8004968:	2000      	movs	r0, #0
 800496a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 800496c:	f010 011f 	ands.w	r1, r0, #31
 8004970:	bf18      	it	ne
 8004972:	2101      	movne	r1, #1
 8004974:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 8004978:	4630      	mov	r0, r6
 800497a:	f7ff feb8 	bl	80046ee <mbedtls_mpi_grow>
 800497e:	2800      	cmp	r0, #0
 8004980:	d0f0      	beq.n	8004964 <mbedtls_mpi_shift_l+0x1a>
 8004982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004984:	f06f 0103 	mvn.w	r1, #3
        for( i = X->n; i > v0; i-- )
 8004988:	6873      	ldr	r3, [r6, #4]
 800498a:	4369      	muls	r1, r5
 800498c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8004990:	3a01      	subs	r2, #1
 8004992:	0092      	lsls	r2, r2, #2
 8004994:	42ab      	cmp	r3, r5
 8004996:	d80a      	bhi.n	80049ae <mbedtls_mpi_shift_l+0x64>
            X->p[i - 1] = 0;
 8004998:	2200      	movs	r2, #0
 800499a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800499e:	3b01      	subs	r3, #1
 80049a0:	009b      	lsls	r3, r3, #2
        for( ; i > 0; i-- )
 80049a2:	1d19      	adds	r1, r3, #4
 80049a4:	d0df      	beq.n	8004966 <mbedtls_mpi_shift_l+0x1c>
            X->p[i - 1] = 0;
 80049a6:	68b1      	ldr	r1, [r6, #8]
 80049a8:	50ca      	str	r2, [r1, r3]
 80049aa:	3b04      	subs	r3, #4
 80049ac:	e7f9      	b.n	80049a2 <mbedtls_mpi_shift_l+0x58>
            X->p[i - 1] = X->p[i - v0 - 1];
 80049ae:	68b0      	ldr	r0, [r6, #8]
        for( i = X->n; i > v0; i-- )
 80049b0:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 80049b2:	1884      	adds	r4, r0, r2
 80049b4:	5864      	ldr	r4, [r4, r1]
 80049b6:	5084      	str	r4, [r0, r2]
 80049b8:	3a04      	subs	r2, #4
 80049ba:	e7eb      	b.n	8004994 <mbedtls_mpi_shift_l+0x4a>
        for( i = v0; i < X->n; i++ )
 80049bc:	2100      	movs	r1, #0
 80049be:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80049c2:	00ab      	lsls	r3, r5, #2
            r1 = X->p[i] >> (biL - t1);
 80049c4:	f1c7 0c20 	rsb	ip, r7, #32
        for( i = v0; i < X->n; i++ )
 80049c8:	4575      	cmp	r5, lr
 80049ca:	d2cd      	bcs.n	8004968 <mbedtls_mpi_shift_l+0x1e>
            r1 = X->p[i] >> (biL - t1);
 80049cc:	68b4      	ldr	r4, [r6, #8]
        for( i = v0; i < X->n; i++ )
 80049ce:	3501      	adds	r5, #1
            r1 = X->p[i] >> (biL - t1);
 80049d0:	58e0      	ldr	r0, [r4, r3]
            X->p[i] <<= t1;
 80049d2:	fa00 f207 	lsl.w	r2, r0, r7
            X->p[i] |= r0;
 80049d6:	430a      	orrs	r2, r1
 80049d8:	50e2      	str	r2, [r4, r3]
            r1 = X->p[i] >> (biL - t1);
 80049da:	fa20 f10c 	lsr.w	r1, r0, ip
 80049de:	3304      	adds	r3, #4
 80049e0:	e7f2      	b.n	80049c8 <mbedtls_mpi_shift_l+0x7e>

080049e2 <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80049e2:	6842      	ldr	r2, [r0, #4]
{
 80049e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    v0 = count /  biL;
 80049e6:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80049e8:	4294      	cmp	r4, r2
    v1 = count & (biL - 1);
 80049ea:	f001 011f 	and.w	r1, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80049ee:	d801      	bhi.n	80049f4 <mbedtls_mpi_shift_r+0x12>
 80049f0:	d105      	bne.n	80049fe <mbedtls_mpi_shift_r+0x1c>
 80049f2:	b371      	cbz	r1, 8004a52 <mbedtls_mpi_shift_r+0x70>
}
 80049f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return mbedtls_mpi_lset( X, 0 );
 80049f8:	2100      	movs	r1, #0
 80049fa:	f7ff bece 	b.w	800479a <mbedtls_mpi_lset>
    if( v0 > 0 )
 80049fe:	bb54      	cbnz	r4, 8004a56 <mbedtls_mpi_shift_r+0x74>
    if( v1 > 0 )
 8004a00:	b139      	cbz	r1, 8004a12 <mbedtls_mpi_shift_r+0x30>
 8004a02:	2500      	movs	r5, #0
 8004a04:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	009b      	lsls	r3, r3, #2
            r1 = X->p[i - 1] << (biL - v1);
 8004a0c:	f1c1 0e20 	rsb	lr, r1, #32
        for( i = X->n; i > 0; i-- )
 8004a10:	b9a2      	cbnz	r2, 8004a3c <mbedtls_mpi_shift_r+0x5a>
}
 8004a12:	2000      	movs	r0, #0
 8004a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
            X->p[i] = X->p[i + v0];
 8004a16:	6885      	ldr	r5, [r0, #8]
 8004a18:	191e      	adds	r6, r3, r4
 8004a1a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8004a1e:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
 8004a22:	3301      	adds	r3, #1
 8004a24:	1b15      	subs	r5, r2, r4
 8004a26:	42ab      	cmp	r3, r5
 8004a28:	d3f5      	bcc.n	8004a16 <mbedtls_mpi_shift_r+0x34>
            X->p[i] = 0;
 8004a2a:	2400      	movs	r4, #0
 8004a2c:	00ab      	lsls	r3, r5, #2
        for( ; i < X->n; i++ )
 8004a2e:	4295      	cmp	r5, r2
 8004a30:	d2e6      	bcs.n	8004a00 <mbedtls_mpi_shift_r+0x1e>
            X->p[i] = 0;
 8004a32:	6886      	ldr	r6, [r0, #8]
        for( ; i < X->n; i++ )
 8004a34:	3501      	adds	r5, #1
            X->p[i] = 0;
 8004a36:	50f4      	str	r4, [r6, r3]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	e7f8      	b.n	8004a2e <mbedtls_mpi_shift_r+0x4c>
            r1 = X->p[i - 1] << (biL - v1);
 8004a3c:	6887      	ldr	r7, [r0, #8]
        for( i = X->n; i > 0; i-- )
 8004a3e:	3a01      	subs	r2, #1
            r1 = X->p[i - 1] << (biL - v1);
 8004a40:	58fe      	ldr	r6, [r7, r3]
            X->p[i - 1] >>= v1;
 8004a42:	fa26 f401 	lsr.w	r4, r6, r1
            X->p[i - 1] |= r0;
 8004a46:	432c      	orrs	r4, r5
 8004a48:	50fc      	str	r4, [r7, r3]
            r1 = X->p[i - 1] << (biL - v1);
 8004a4a:	fa06 f50e 	lsl.w	r5, r6, lr
 8004a4e:	3b04      	subs	r3, #4
 8004a50:	e7de      	b.n	8004a10 <mbedtls_mpi_shift_r+0x2e>
    if( v0 > 0 )
 8004a52:	2c00      	cmp	r4, #0
 8004a54:	d0dd      	beq.n	8004a12 <mbedtls_mpi_shift_r+0x30>
 8004a56:	2300      	movs	r3, #0
 8004a58:	e7e4      	b.n	8004a24 <mbedtls_mpi_shift_r+0x42>

08004a5a <mbedtls_mpi_cmp_abs>:
    for( i = X->n; i > 0; i-- )
 8004a5a:	6843      	ldr	r3, [r0, #4]
{
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8004a62:	3a01      	subs	r2, #1
 8004a64:	0092      	lsls	r2, r2, #2
    for( i = X->n; i > 0; i-- )
 8004a66:	b94b      	cbnz	r3, 8004a7c <mbedtls_mpi_cmp_abs+0x22>
    for( j = Y->n; j > 0; j-- )
 8004a68:	684c      	ldr	r4, [r1, #4]
 8004a6a:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 8004a6e:	3a01      	subs	r2, #1
 8004a70:	0092      	lsls	r2, r2, #2
 8004a72:	b954      	cbnz	r4, 8004a8a <mbedtls_mpi_cmp_abs+0x30>
    if( i == 0 && j == 0 )
 8004a74:	1c18      	adds	r0, r3, #0
 8004a76:	bf18      	it	ne
 8004a78:	2001      	movne	r0, #1
}
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}
        if( X->p[i - 1] != 0 )
 8004a7c:	6884      	ldr	r4, [r0, #8]
 8004a7e:	58a4      	ldr	r4, [r4, r2]
 8004a80:	3a04      	subs	r2, #4
 8004a82:	2c00      	cmp	r4, #0
 8004a84:	d1f0      	bne.n	8004a68 <mbedtls_mpi_cmp_abs+0xe>
    for( i = X->n; i > 0; i-- )
 8004a86:	3b01      	subs	r3, #1
 8004a88:	e7ed      	b.n	8004a66 <mbedtls_mpi_cmp_abs+0xc>
        if( Y->p[j - 1] != 0 )
 8004a8a:	688d      	ldr	r5, [r1, #8]
 8004a8c:	58ae      	ldr	r6, [r5, r2]
 8004a8e:	3a04      	subs	r2, #4
 8004a90:	b90e      	cbnz	r6, 8004a96 <mbedtls_mpi_cmp_abs+0x3c>
    for( j = Y->n; j > 0; j-- )
 8004a92:	3c01      	subs	r4, #1
 8004a94:	e7ed      	b.n	8004a72 <mbedtls_mpi_cmp_abs+0x18>
    if( i > j ) return(  1 );
 8004a96:	429c      	cmp	r4, r3
 8004a98:	d311      	bcc.n	8004abe <mbedtls_mpi_cmp_abs+0x64>
    if( j > i ) return( -1 );
 8004a9a:	d812      	bhi.n	8004ac2 <mbedtls_mpi_cmp_abs+0x68>
 8004a9c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8004aa0:	3a01      	subs	r2, #1
 8004aa2:	0092      	lsls	r2, r2, #2
    for( ; i > 0; i-- )
 8004aa4:	b90b      	cbnz	r3, 8004aaa <mbedtls_mpi_cmp_abs+0x50>
    return( 0 );
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	bd70      	pop	{r4, r5, r6, pc}
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 8004aaa:	6881      	ldr	r1, [r0, #8]
 8004aac:	588c      	ldr	r4, [r1, r2]
 8004aae:	58a9      	ldr	r1, [r5, r2]
 8004ab0:	428c      	cmp	r4, r1
 8004ab2:	d804      	bhi.n	8004abe <mbedtls_mpi_cmp_abs+0x64>
 8004ab4:	f1a2 0204 	sub.w	r2, r2, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 8004ab8:	d303      	bcc.n	8004ac2 <mbedtls_mpi_cmp_abs+0x68>
    for( ; i > 0; i-- )
 8004aba:	3b01      	subs	r3, #1
 8004abc:	e7f2      	b.n	8004aa4 <mbedtls_mpi_cmp_abs+0x4a>
    if( i > j ) return(  1 );
 8004abe:	2001      	movs	r0, #1
 8004ac0:	bd70      	pop	{r4, r5, r6, pc}
    if( j > i ) return( -1 );
 8004ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac6:	bd70      	pop	{r4, r5, r6, pc}

08004ac8 <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 8004ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004acc:	4616      	mov	r6, r2
 8004ace:	b085      	sub	sp, #20
 8004ad0:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 8004ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
{
 8004ad4:	4681      	mov	r9, r0
    if( T->n < N->n + 1 || T->p == NULL )
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	6873      	ldr	r3, [r6, #4]
{
 8004ada:	468b      	mov	fp, r1
    if( T->n < N->n + 1 || T->p == NULL )
 8004adc:	3301      	adds	r3, #1
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d353      	bcc.n	8004b8a <mpi_montmul+0xc2>
 8004ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ae4:	6898      	ldr	r0, [r3, #8]
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d04f      	beq.n	8004b8a <mpi_montmul+0xc2>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 8004aea:	0092      	lsls	r2, r2, #2
 8004aec:	2100      	movs	r1, #0
 8004aee:	f00d f98b 	bl	8011e08 <memset>

    d = T->p;
 8004af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
 8004af4:	f8d6 a004 	ldr.w	sl, [r6, #4]
    d = T->p;
 8004af8:	689b      	ldr	r3, [r3, #8]
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 8004afa:	2400      	movs	r4, #0
    d = T->p;
 8004afc:	9300      	str	r3, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
 8004afe:	f8db 3004 	ldr.w	r3, [fp, #4]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 8004b02:	f10a 0701 	add.w	r7, sl, #1
    m = ( B->n < n ) ? B->n : n;
 8004b06:	4553      	cmp	r3, sl
 8004b08:	bf28      	it	cs
 8004b0a:	4653      	movcs	r3, sl
    d = T->p;
 8004b0c:	9d00      	ldr	r5, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
 8004b0e:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
 8004b10:	00bf      	lsls	r7, r7, #2
    for( i = 0; i < n; i++ )
 8004b12:	4554      	cmp	r4, sl
 8004b14:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8004b18:	d11b      	bne.n	8004b52 <mpi_montmul+0x8a>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 8004b1a:	9b00      	ldr	r3, [sp, #0]
 8004b1c:	1f39      	subs	r1, r7, #4
 8004b1e:	440b      	add	r3, r1
 8004b20:	463a      	mov	r2, r7
 8004b22:	4619      	mov	r1, r3
 8004b24:	f00d f94b 	bl	8011dbe <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 8004b28:	4631      	mov	r1, r6
 8004b2a:	4648      	mov	r0, r9
 8004b2c:	f7ff ff95 	bl	8004a5a <mbedtls_mpi_cmp_abs>
 8004b30:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 8004b32:	bfb8      	it	lt
 8004b34:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004b36:	4620      	mov	r0, r4
        mpi_sub_hlp( n, N->p, A->p );
 8004b38:	bfa7      	ittee	ge
 8004b3a:	f8d9 2008 	ldrge.w	r2, [r9, #8]
 8004b3e:	68b1      	ldrge	r1, [r6, #8]
        mpi_sub_hlp( n, A->p, T->p );
 8004b40:	689a      	ldrlt	r2, [r3, #8]
 8004b42:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
 8004b46:	f7ff fbbf 	bl	80042c8 <mpi_sub_hlp>

    return( 0 );
 8004b4a:	2000      	movs	r0, #0
}
 8004b4c:	b005      	add	sp, #20
 8004b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 8004b52:	f8db 1008 	ldr.w	r1, [fp, #8]
        u0 = A->p[i];
 8004b56:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 8004b5a:	682a      	ldr	r2, [r5, #0]
 8004b5c:	680b      	ldr	r3, [r1, #0]
        mpi_mul_hlp( m, B->p, d, u0 );
 8004b5e:	9801      	ldr	r0, [sp, #4]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 8004b60:	fb03 2308 	mla	r3, r3, r8, r2
 8004b64:	9a03      	ldr	r2, [sp, #12]
    for( i = 0; i < n; i++ )
 8004b66:	3401      	adds	r4, #1
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 8004b68:	4353      	muls	r3, r2
        mpi_mul_hlp( m, B->p, d, u0 );
 8004b6a:	462a      	mov	r2, r5
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 8004b6c:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
 8004b6e:	4643      	mov	r3, r8
 8004b70:	f7ff fbd4 	bl	800431c <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
 8004b74:	9b02      	ldr	r3, [sp, #8]
 8004b76:	462a      	mov	r2, r5
 8004b78:	68b1      	ldr	r1, [r6, #8]
 8004b7a:	4650      	mov	r0, sl
 8004b7c:	f7ff fbce 	bl	800431c <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	f845 8b04 	str.w	r8, [r5], #4
 8004b86:	51eb      	str	r3, [r5, r7]
 8004b88:	e7c3      	b.n	8004b12 <mpi_montmul+0x4a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8004b8a:	f06f 0003 	mvn.w	r0, #3
 8004b8e:	e7dd      	b.n	8004b4c <mpi_montmul+0x84>

08004b90 <mbedtls_mpi_cmp_mpi>:
    for( i = X->n; i > 0; i-- )
 8004b90:	6843      	ldr	r3, [r0, #4]
{
 8004b92:	b570      	push	{r4, r5, r6, lr}
 8004b94:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8004b98:	3a01      	subs	r2, #1
 8004b9a:	0092      	lsls	r2, r2, #2
    for( i = X->n; i > 0; i-- )
 8004b9c:	b93b      	cbnz	r3, 8004bae <mbedtls_mpi_cmp_mpi+0x1e>
    for( j = Y->n; j > 0; j-- )
 8004b9e:	684c      	ldr	r4, [r1, #4]
 8004ba0:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 8004ba4:	3a01      	subs	r2, #1
 8004ba6:	0092      	lsls	r2, r2, #2
 8004ba8:	b944      	cbnz	r4, 8004bbc <mbedtls_mpi_cmp_mpi+0x2c>
    if( i == 0 && j == 0 )
 8004baa:	b97b      	cbnz	r3, 8004bcc <mbedtls_mpi_cmp_mpi+0x3c>
 8004bac:	e023      	b.n	8004bf6 <mbedtls_mpi_cmp_mpi+0x66>
        if( X->p[i - 1] != 0 )
 8004bae:	6884      	ldr	r4, [r0, #8]
 8004bb0:	58a4      	ldr	r4, [r4, r2]
 8004bb2:	3a04      	subs	r2, #4
 8004bb4:	2c00      	cmp	r4, #0
 8004bb6:	d1f2      	bne.n	8004b9e <mbedtls_mpi_cmp_mpi+0xe>
    for( i = X->n; i > 0; i-- )
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	e7ef      	b.n	8004b9c <mbedtls_mpi_cmp_mpi+0xc>
        if( Y->p[j - 1] != 0 )
 8004bbc:	688d      	ldr	r5, [r1, #8]
 8004bbe:	58ae      	ldr	r6, [r5, r2]
 8004bc0:	3a04      	subs	r2, #4
 8004bc2:	b90e      	cbnz	r6, 8004bc8 <mbedtls_mpi_cmp_mpi+0x38>
    for( j = Y->n; j > 0; j-- )
 8004bc4:	3c01      	subs	r4, #1
 8004bc6:	e7ef      	b.n	8004ba8 <mbedtls_mpi_cmp_mpi+0x18>
    if( i > j ) return(  X->s );
 8004bc8:	429c      	cmp	r4, r3
 8004bca:	d202      	bcs.n	8004bd2 <mbedtls_mpi_cmp_mpi+0x42>
 8004bcc:	6802      	ldr	r2, [r0, #0]
}
 8004bce:	4610      	mov	r0, r2
 8004bd0:	bd70      	pop	{r4, r5, r6, pc}
 8004bd2:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
 8004bd4:	d901      	bls.n	8004bda <mbedtls_mpi_cmp_mpi+0x4a>
 8004bd6:	424a      	negs	r2, r1
 8004bd8:	e7f9      	b.n	8004bce <mbedtls_mpi_cmp_mpi+0x3e>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 8004bda:	6802      	ldr	r2, [r0, #0]
 8004bdc:	2a00      	cmp	r2, #0
 8004bde:	dd01      	ble.n	8004be4 <mbedtls_mpi_cmp_mpi+0x54>
 8004be0:	2900      	cmp	r1, #0
 8004be2:	db16      	blt.n	8004c12 <mbedtls_mpi_cmp_mpi+0x82>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 8004be4:	2900      	cmp	r1, #0
 8004be6:	dd01      	ble.n	8004bec <mbedtls_mpi_cmp_mpi+0x5c>
 8004be8:	2a00      	cmp	r2, #0
 8004bea:	db14      	blt.n	8004c16 <mbedtls_mpi_cmp_mpi+0x86>
 8004bec:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 8004bf0:	3901      	subs	r1, #1
 8004bf2:	0089      	lsls	r1, r1, #2
    for( ; i > 0; i-- )
 8004bf4:	b90b      	cbnz	r3, 8004bfa <mbedtls_mpi_cmp_mpi+0x6a>
    return( 0 );
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	e7e9      	b.n	8004bce <mbedtls_mpi_cmp_mpi+0x3e>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 8004bfa:	6884      	ldr	r4, [r0, #8]
 8004bfc:	5866      	ldr	r6, [r4, r1]
 8004bfe:	586c      	ldr	r4, [r5, r1]
 8004c00:	42a6      	cmp	r6, r4
 8004c02:	d8e4      	bhi.n	8004bce <mbedtls_mpi_cmp_mpi+0x3e>
 8004c04:	f1a1 0104 	sub.w	r1, r1, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 8004c08:	d201      	bcs.n	8004c0e <mbedtls_mpi_cmp_mpi+0x7e>
 8004c0a:	4252      	negs	r2, r2
 8004c0c:	e7df      	b.n	8004bce <mbedtls_mpi_cmp_mpi+0x3e>
    for( ; i > 0; i-- )
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	e7f0      	b.n	8004bf4 <mbedtls_mpi_cmp_mpi+0x64>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 8004c12:	2201      	movs	r2, #1
 8004c14:	e7db      	b.n	8004bce <mbedtls_mpi_cmp_mpi+0x3e>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 8004c16:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1a:	e7d8      	b.n	8004bce <mbedtls_mpi_cmp_mpi+0x3e>

08004c1c <mbedtls_mpi_cmp_int>:
{
 8004c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
 8004c1e:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 8004c22:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 8004c26:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
 8004c28:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 8004c2a:	bfb4      	ite	lt
 8004c2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c30:	2301      	movge	r3, #1
 8004c32:	9301      	str	r3, [sp, #4]
    Y.n = 1;
 8004c34:	2301      	movs	r3, #1
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 8004c36:	a901      	add	r1, sp, #4
    Y.n = 1;
 8004c38:	9302      	str	r3, [sp, #8]
    Y.p = p;
 8004c3a:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 8004c3e:	f7ff ffa7 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
}
 8004c42:	b005      	add	sp, #20
 8004c44:	f85d fb04 	ldr.w	pc, [sp], #4

08004c48 <mbedtls_mpi_add_abs>:
    if( X == B )
 8004c48:	4290      	cmp	r0, r2
{
 8004c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c4e:	4605      	mov	r5, r0
 8004c50:	460c      	mov	r4, r1
 8004c52:	4617      	mov	r7, r2
    if( X == B )
 8004c54:	d002      	beq.n	8004c5c <mbedtls_mpi_add_abs+0x14>
    if( X != A )
 8004c56:	4288      	cmp	r0, r1
 8004c58:	d130      	bne.n	8004cbc <mbedtls_mpi_add_abs+0x74>
{
 8004c5a:	463c      	mov	r4, r7
    X->s = 1;
 8004c5c:	2301      	movs	r3, #1
    for( j = B->n; j > 0; j-- )
 8004c5e:	6867      	ldr	r7, [r4, #4]
    X->s = 1;
 8004c60:	602b      	str	r3, [r5, #0]
 8004c62:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 8004c66:	3b01      	subs	r3, #1
 8004c68:	009b      	lsls	r3, r3, #2
    for( j = B->n; j > 0; j-- )
 8004c6a:	bb7f      	cbnz	r7, 8004ccc <mbedtls_mpi_add_abs+0x84>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 8004c6c:	4639      	mov	r1, r7
 8004c6e:	4628      	mov	r0, r5
 8004c70:	f7ff fd3d 	bl	80046ee <mbedtls_mpi_grow>
 8004c74:	4606      	mov	r6, r0
 8004c76:	bb30      	cbnz	r0, 8004cc6 <mbedtls_mpi_add_abs+0x7e>
    o = B->p; p = X->p; c = 0;
 8004c78:	68ab      	ldr	r3, [r5, #8]
 8004c7a:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	4604      	mov	r4, r0
    for( i = 0; i < j; i++, o++, p++ )
 8004c82:	4601      	mov	r1, r0
 8004c84:	42b9      	cmp	r1, r7
 8004c86:	d128      	bne.n	8004cda <mbedtls_mpi_add_abs+0x92>
 8004c88:	008f      	lsls	r7, r1, #2
 8004c8a:	443b      	add	r3, r7
    while( c != 0 )
 8004c8c:	b1dc      	cbz	r4, 8004cc6 <mbedtls_mpi_add_abs+0x7e>
        if( i >= X->n )
 8004c8e:	686a      	ldr	r2, [r5, #4]
 8004c90:	f101 0801 	add.w	r8, r1, #1
 8004c94:	4291      	cmp	r1, r2
 8004c96:	d306      	bcc.n	8004ca6 <mbedtls_mpi_add_abs+0x5e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 8004c98:	4641      	mov	r1, r8
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f7ff fd27 	bl	80046ee <mbedtls_mpi_grow>
 8004ca0:	bb58      	cbnz	r0, 8004cfa <mbedtls_mpi_add_abs+0xb2>
            p = X->p + i;
 8004ca2:	68ab      	ldr	r3, [r5, #8]
 8004ca4:	443b      	add	r3, r7
        *p += c; c = ( *p < c ); i++; p++;
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	4641      	mov	r1, r8
 8004caa:	4422      	add	r2, r4
 8004cac:	4294      	cmp	r4, r2
 8004cae:	f843 2b04 	str.w	r2, [r3], #4
 8004cb2:	bf94      	ite	ls
 8004cb4:	2400      	movls	r4, #0
 8004cb6:	2401      	movhi	r4, #1
 8004cb8:	3704      	adds	r7, #4
 8004cba:	e7e7      	b.n	8004c8c <mbedtls_mpi_add_abs+0x44>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8004cbc:	f7ff fd41 	bl	8004742 <mbedtls_mpi_copy>
 8004cc0:	4606      	mov	r6, r0
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d0c9      	beq.n	8004c5a <mbedtls_mpi_add_abs+0x12>
}
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
 8004ccc:	68a2      	ldr	r2, [r4, #8]
 8004cce:	58d2      	ldr	r2, [r2, r3]
 8004cd0:	3b04      	subs	r3, #4
 8004cd2:	2a00      	cmp	r2, #0
 8004cd4:	d1ca      	bne.n	8004c6c <mbedtls_mpi_add_abs+0x24>
    for( j = B->n; j > 0; j-- )
 8004cd6:	3f01      	subs	r7, #1
 8004cd8:	e7c7      	b.n	8004c6a <mbedtls_mpi_add_abs+0x22>
        *p +=  c; c  = ( *p <  c );
 8004cda:	6810      	ldr	r0, [r2, #0]
        tmp= *o;
 8004cdc:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
        *p +=  c; c  = ( *p <  c );
 8004ce0:	1824      	adds	r4, r4, r0
 8004ce2:	bf2c      	ite	cs
 8004ce4:	2001      	movcs	r0, #1
 8004ce6:	2000      	movcc	r0, #0
        *p += tmp; c += ( *p < tmp );
 8004ce8:	4474      	add	r4, lr
 8004cea:	f842 4b04 	str.w	r4, [r2], #4
    for( i = 0; i < j; i++, o++, p++ )
 8004cee:	3101      	adds	r1, #1
        *p += tmp; c += ( *p < tmp );
 8004cf0:	45a6      	cmp	lr, r4
 8004cf2:	bf94      	ite	ls
 8004cf4:	4604      	movls	r4, r0
 8004cf6:	1c44      	addhi	r4, r0, #1
 8004cf8:	e7c4      	b.n	8004c84 <mbedtls_mpi_add_abs+0x3c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 8004cfa:	4606      	mov	r6, r0
    return( ret );
 8004cfc:	e7e3      	b.n	8004cc6 <mbedtls_mpi_add_abs+0x7e>

08004cfe <mbedtls_mpi_sub_abs>:
{
 8004cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d00:	460f      	mov	r7, r1
 8004d02:	b085      	sub	sp, #20
 8004d04:	4606      	mov	r6, r0
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8004d06:	4611      	mov	r1, r2
 8004d08:	4638      	mov	r0, r7
{
 8004d0a:	4614      	mov	r4, r2
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8004d0c:	f7ff fea5 	bl	8004a5a <mbedtls_mpi_cmp_abs>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	db31      	blt.n	8004d78 <mbedtls_mpi_sub_abs+0x7a>
    X->s = 1;
 8004d14:	2301      	movs	r3, #1
 8004d16:	9301      	str	r3, [sp, #4]
    X->n = 0;
 8004d18:	2300      	movs	r3, #0
    if( X == B )
 8004d1a:	42b4      	cmp	r4, r6
    X->n = 0;
 8004d1c:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 8004d1e:	9303      	str	r3, [sp, #12]
    if( X == B )
 8004d20:	d106      	bne.n	8004d30 <mbedtls_mpi_sub_abs+0x32>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8004d22:	4621      	mov	r1, r4
 8004d24:	a801      	add	r0, sp, #4
 8004d26:	f7ff fd0c 	bl	8004742 <mbedtls_mpi_copy>
 8004d2a:	4605      	mov	r5, r0
 8004d2c:	b9b8      	cbnz	r0, 8004d5e <mbedtls_mpi_sub_abs+0x60>
        B = &TB;
 8004d2e:	ac01      	add	r4, sp, #4
    if( X != A )
 8004d30:	42b7      	cmp	r7, r6
 8004d32:	d10d      	bne.n	8004d50 <mbedtls_mpi_sub_abs+0x52>
    X->s = 1;
 8004d34:	2301      	movs	r3, #1
    for( n = B->n; n > 0; n-- )
 8004d36:	6860      	ldr	r0, [r4, #4]
    X->s = 1;
 8004d38:	6033      	str	r3, [r6, #0]
 8004d3a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	009b      	lsls	r3, r3, #2
    for( n = B->n; n > 0; n-- )
 8004d42:	b990      	cbnz	r0, 8004d6a <mbedtls_mpi_sub_abs+0x6c>
    mpi_sub_hlp( n, B->p, X->p );
 8004d44:	68b2      	ldr	r2, [r6, #8]
 8004d46:	68a1      	ldr	r1, [r4, #8]
 8004d48:	f7ff fabe 	bl	80042c8 <mpi_sub_hlp>
    ret = 0;
 8004d4c:	2500      	movs	r5, #0
 8004d4e:	e006      	b.n	8004d5e <mbedtls_mpi_sub_abs+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8004d50:	4639      	mov	r1, r7
 8004d52:	4630      	mov	r0, r6
 8004d54:	f7ff fcf5 	bl	8004742 <mbedtls_mpi_copy>
 8004d58:	4605      	mov	r5, r0
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	d0ea      	beq.n	8004d34 <mbedtls_mpi_sub_abs+0x36>
    mbedtls_mpi_free( &TB );
 8004d5e:	a801      	add	r0, sp, #4
 8004d60:	f7ff fcb3 	bl	80046ca <mbedtls_mpi_free>
}
 8004d64:	4628      	mov	r0, r5
 8004d66:	b005      	add	sp, #20
 8004d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( B->p[n - 1] != 0 )
 8004d6a:	68a2      	ldr	r2, [r4, #8]
 8004d6c:	58d2      	ldr	r2, [r2, r3]
 8004d6e:	3b04      	subs	r3, #4
 8004d70:	2a00      	cmp	r2, #0
 8004d72:	d1e7      	bne.n	8004d44 <mbedtls_mpi_sub_abs+0x46>
    for( n = B->n; n > 0; n-- )
 8004d74:	3801      	subs	r0, #1
 8004d76:	e7e4      	b.n	8004d42 <mbedtls_mpi_sub_abs+0x44>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 8004d78:	f06f 0509 	mvn.w	r5, #9
 8004d7c:	e7f2      	b.n	8004d64 <mbedtls_mpi_sub_abs+0x66>

08004d7e <mbedtls_mpi_add_mpi>:
{
 8004d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
 8004d80:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s < 0 )
 8004d82:	6813      	ldr	r3, [r2, #0]
{
 8004d84:	4605      	mov	r5, r0
    if( A->s * B->s < 0 )
 8004d86:	4363      	muls	r3, r4
{
 8004d88:	460f      	mov	r7, r1
 8004d8a:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
 8004d8c:	d516      	bpl.n	8004dbc <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8004d8e:	4611      	mov	r1, r2
 8004d90:	4638      	mov	r0, r7
 8004d92:	f7ff fe62 	bl	8004a5a <mbedtls_mpi_cmp_abs>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	db06      	blt.n	8004da8 <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8004d9a:	4632      	mov	r2, r6
 8004d9c:	4639      	mov	r1, r7
 8004d9e:	4628      	mov	r0, r5
 8004da0:	f7ff ffad 	bl	8004cfe <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8004da4:	b140      	cbz	r0, 8004db8 <mbedtls_mpi_add_mpi+0x3a>
}
 8004da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8004da8:	463a      	mov	r2, r7
 8004daa:	4631      	mov	r1, r6
 8004dac:	4628      	mov	r0, r5
 8004dae:	f7ff ffa6 	bl	8004cfe <mbedtls_mpi_sub_abs>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d1f7      	bne.n	8004da6 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
 8004db6:	4264      	negs	r4, r4
        X->s = s;
 8004db8:	602c      	str	r4, [r5, #0]
    return( ret );
 8004dba:	e7f4      	b.n	8004da6 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8004dbc:	f7ff ff44 	bl	8004c48 <mbedtls_mpi_add_abs>
 8004dc0:	e7f0      	b.n	8004da4 <mbedtls_mpi_add_mpi+0x26>

08004dc2 <mbedtls_mpi_sub_mpi>:
{
 8004dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
 8004dc4:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s > 0 )
 8004dc6:	6813      	ldr	r3, [r2, #0]
{
 8004dc8:	4605      	mov	r5, r0
    if( A->s * B->s > 0 )
 8004dca:	4363      	muls	r3, r4
 8004dcc:	2b00      	cmp	r3, #0
{
 8004dce:	460f      	mov	r7, r1
 8004dd0:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
 8004dd2:	dd16      	ble.n	8004e02 <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	f7ff fe3f 	bl	8004a5a <mbedtls_mpi_cmp_abs>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	db06      	blt.n	8004dee <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8004de0:	4632      	mov	r2, r6
 8004de2:	4639      	mov	r1, r7
 8004de4:	4628      	mov	r0, r5
 8004de6:	f7ff ff8a 	bl	8004cfe <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8004dea:	b140      	cbz	r0, 8004dfe <mbedtls_mpi_sub_mpi+0x3c>
}
 8004dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8004dee:	463a      	mov	r2, r7
 8004df0:	4631      	mov	r1, r6
 8004df2:	4628      	mov	r0, r5
 8004df4:	f7ff ff83 	bl	8004cfe <mbedtls_mpi_sub_abs>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d1f7      	bne.n	8004dec <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
 8004dfc:	4264      	negs	r4, r4
        X->s = s;
 8004dfe:	602c      	str	r4, [r5, #0]
    return( ret );
 8004e00:	e7f4      	b.n	8004dec <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8004e02:	f7ff ff21 	bl	8004c48 <mbedtls_mpi_add_abs>
 8004e06:	e7f0      	b.n	8004dea <mbedtls_mpi_sub_mpi+0x28>

08004e08 <mbedtls_mpi_add_int>:
{
 8004e08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
 8004e0a:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8004e0e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 8004e12:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
 8004e14:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 8004e16:	bfb4      	ite	lt
 8004e18:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e1c:	2301      	movge	r3, #1
 8004e1e:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 8004e20:	2301      	movs	r3, #1
    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 8004e22:	aa01      	add	r2, sp, #4
    _B.n = 1;
 8004e24:	9302      	str	r3, [sp, #8]
    _B.p = p;
 8004e26:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 8004e2a:	f7ff ffa8 	bl	8004d7e <mbedtls_mpi_add_mpi>
}
 8004e2e:	b005      	add	sp, #20
 8004e30:	f85d fb04 	ldr.w	pc, [sp], #4

08004e34 <mbedtls_mpi_sub_int>:
{
 8004e34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
 8004e36:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8004e3a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 8004e3e:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
 8004e40:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 8004e42:	bfb4      	ite	lt
 8004e44:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e48:	2301      	movge	r3, #1
 8004e4a:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 8004e4c:	2301      	movs	r3, #1
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 8004e4e:	aa01      	add	r2, sp, #4
    _B.n = 1;
 8004e50:	9302      	str	r3, [sp, #8]
    _B.p = p;
 8004e52:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 8004e56:	f7ff ffb4 	bl	8004dc2 <mbedtls_mpi_sub_mpi>
}
 8004e5a:	b005      	add	sp, #20
 8004e5c:	f85d fb04 	ldr.w	pc, [sp], #4

08004e60 <mbedtls_mpi_mul_mpi>:
{
 8004e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    X->n = 0;
 8004e64:	2300      	movs	r3, #0
{
 8004e66:	4615      	mov	r5, r2
    X->n = 0;
 8004e68:	2201      	movs	r2, #1
{
 8004e6a:	b086      	sub	sp, #24
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8004e6c:	4288      	cmp	r0, r1
{
 8004e6e:	4681      	mov	r9, r0
 8004e70:	460e      	mov	r6, r1
    X->n = 0;
 8004e72:	e88d 000c 	stmia.w	sp, {r2, r3}
    X->p = NULL;
 8004e76:	9302      	str	r3, [sp, #8]
    X->s = 1;
 8004e78:	9203      	str	r2, [sp, #12]
    X->n = 0;
 8004e7a:	9304      	str	r3, [sp, #16]
    X->p = NULL;
 8004e7c:	9305      	str	r3, [sp, #20]
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8004e7e:	d105      	bne.n	8004e8c <mbedtls_mpi_mul_mpi+0x2c>
 8004e80:	4668      	mov	r0, sp
 8004e82:	f7ff fc5e 	bl	8004742 <mbedtls_mpi_copy>
 8004e86:	4604      	mov	r4, r0
 8004e88:	bb88      	cbnz	r0, 8004eee <mbedtls_mpi_mul_mpi+0x8e>
 8004e8a:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8004e8c:	45a9      	cmp	r9, r5
 8004e8e:	d106      	bne.n	8004e9e <mbedtls_mpi_mul_mpi+0x3e>
 8004e90:	4649      	mov	r1, r9
 8004e92:	a803      	add	r0, sp, #12
 8004e94:	f7ff fc55 	bl	8004742 <mbedtls_mpi_copy>
 8004e98:	4604      	mov	r4, r0
 8004e9a:	bb40      	cbnz	r0, 8004eee <mbedtls_mpi_mul_mpi+0x8e>
 8004e9c:	ad03      	add	r5, sp, #12
    for( i = A->n; i > 0; i-- )
 8004e9e:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8004ea2:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	f1ba 0f00 	cmp.w	sl, #0
 8004eae:	d128      	bne.n	8004f02 <mbedtls_mpi_mul_mpi+0xa2>
    for( j = B->n; j > 0; j-- )
 8004eb0:	686f      	ldr	r7, [r5, #4]
 8004eb2:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	bb57      	cbnz	r7, 8004f12 <mbedtls_mpi_mul_mpi+0xb2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 8004ebc:	eb0a 0107 	add.w	r1, sl, r7
 8004ec0:	4648      	mov	r0, r9
 8004ec2:	f7ff fc14 	bl	80046ee <mbedtls_mpi_grow>
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	b988      	cbnz	r0, 8004eee <mbedtls_mpi_mul_mpi+0x8e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8004eca:	4601      	mov	r1, r0
 8004ecc:	4648      	mov	r0, r9
 8004ece:	f7ff fc64 	bl	800479a <mbedtls_mpi_lset>
 8004ed2:	4604      	mov	r4, r0
 8004ed4:	b958      	cbnz	r0, 8004eee <mbedtls_mpi_mul_mpi+0x8e>
 8004ed6:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 8004eda:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ede:	ea4f 0888 	mov.w	r8, r8, lsl #2
    for( ; j > 0; j-- )
 8004ee2:	b9ef      	cbnz	r7, 8004f20 <mbedtls_mpi_mul_mpi+0xc0>
    X->s = A->s * B->s;
 8004ee4:	6832      	ldr	r2, [r6, #0]
 8004ee6:	682b      	ldr	r3, [r5, #0]
 8004ee8:	4353      	muls	r3, r2
 8004eea:	f8c9 3000 	str.w	r3, [r9]
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 8004eee:	a803      	add	r0, sp, #12
 8004ef0:	f7ff fbeb 	bl	80046ca <mbedtls_mpi_free>
 8004ef4:	4668      	mov	r0, sp
 8004ef6:	f7ff fbe8 	bl	80046ca <mbedtls_mpi_free>
}
 8004efa:	4620      	mov	r0, r4
 8004efc:	b006      	add	sp, #24
 8004efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( A->p[i - 1] != 0 )
 8004f02:	68b2      	ldr	r2, [r6, #8]
 8004f04:	58d2      	ldr	r2, [r2, r3]
 8004f06:	3b04      	subs	r3, #4
 8004f08:	2a00      	cmp	r2, #0
 8004f0a:	d1d1      	bne.n	8004eb0 <mbedtls_mpi_mul_mpi+0x50>
    for( i = A->n; i > 0; i-- )
 8004f0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f10:	e7cb      	b.n	8004eaa <mbedtls_mpi_mul_mpi+0x4a>
        if( B->p[j - 1] != 0 )
 8004f12:	68aa      	ldr	r2, [r5, #8]
 8004f14:	58d2      	ldr	r2, [r2, r3]
 8004f16:	3b04      	subs	r3, #4
 8004f18:	2a00      	cmp	r2, #0
 8004f1a:	d1cf      	bne.n	8004ebc <mbedtls_mpi_mul_mpi+0x5c>
    for( j = B->n; j > 0; j-- )
 8004f1c:	3f01      	subs	r7, #1
 8004f1e:	e7cc      	b.n	8004eba <mbedtls_mpi_mul_mpi+0x5a>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
 8004f20:	68ab      	ldr	r3, [r5, #8]
 8004f22:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8004f26:	f853 3008 	ldr.w	r3, [r3, r8]
 8004f2a:	4442      	add	r2, r8
 8004f2c:	68b1      	ldr	r1, [r6, #8]
 8004f2e:	4650      	mov	r0, sl
 8004f30:	f7ff f9f4 	bl	800431c <mpi_mul_hlp>
    for( ; j > 0; j-- )
 8004f34:	3f01      	subs	r7, #1
 8004f36:	f1a8 0804 	sub.w	r8, r8, #4
 8004f3a:	e7d2      	b.n	8004ee2 <mbedtls_mpi_mul_mpi+0x82>

08004f3c <mbedtls_mpi_mul_int>:
{
 8004f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _B.s = 1;
 8004f3e:	2301      	movs	r3, #1
    p[0] = b;
 8004f40:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 8004f42:	aa01      	add	r2, sp, #4
    _B.s = 1;
 8004f44:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 8004f46:	9302      	str	r3, [sp, #8]
    _B.p = p;
 8004f48:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 8004f4c:	f7ff ff88 	bl	8004e60 <mbedtls_mpi_mul_mpi>
}
 8004f50:	b005      	add	sp, #20
 8004f52:	f85d fb04 	ldr.w	pc, [sp], #4

08004f56 <mbedtls_mpi_div_mpi>:
{
 8004f56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5a:	b09b      	sub	sp, #108	; 0x6c
 8004f5c:	9001      	str	r0, [sp, #4]
 8004f5e:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 8004f60:	4618      	mov	r0, r3
 8004f62:	2100      	movs	r1, #0
{
 8004f64:	4690      	mov	r8, r2
 8004f66:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 8004f68:	f7ff fe58 	bl	8004c1c <mbedtls_mpi_cmp_int>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	f000 81a4 	beq.w	80052ba <mbedtls_mpi_div_mpi+0x364>
    X->n = 0;
 8004f72:	2400      	movs	r4, #0
    X->s = 1;
 8004f74:	2601      	movs	r6, #1
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8004f76:	9903      	ldr	r1, [sp, #12]
 8004f78:	4640      	mov	r0, r8
    X->s = 1;
 8004f7a:	960b      	str	r6, [sp, #44]	; 0x2c
    X->n = 0;
 8004f7c:	940c      	str	r4, [sp, #48]	; 0x30
    X->p = NULL;
 8004f7e:	940d      	str	r4, [sp, #52]	; 0x34
    X->s = 1;
 8004f80:	960e      	str	r6, [sp, #56]	; 0x38
    X->n = 0;
 8004f82:	940f      	str	r4, [sp, #60]	; 0x3c
    X->p = NULL;
 8004f84:	9410      	str	r4, [sp, #64]	; 0x40
    X->s = 1;
 8004f86:	9611      	str	r6, [sp, #68]	; 0x44
    X->n = 0;
 8004f88:	9412      	str	r4, [sp, #72]	; 0x48
    X->p = NULL;
 8004f8a:	9413      	str	r4, [sp, #76]	; 0x4c
    X->s = 1;
 8004f8c:	9614      	str	r6, [sp, #80]	; 0x50
    X->n = 0;
 8004f8e:	9415      	str	r4, [sp, #84]	; 0x54
    X->p = NULL;
 8004f90:	9416      	str	r4, [sp, #88]	; 0x58
    X->s = 1;
 8004f92:	9617      	str	r6, [sp, #92]	; 0x5c
    X->n = 0;
 8004f94:	9418      	str	r4, [sp, #96]	; 0x60
    X->p = NULL;
 8004f96:	9419      	str	r4, [sp, #100]	; 0x64
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8004f98:	f7ff fd5f 	bl	8004a5a <mbedtls_mpi_cmp_abs>
 8004f9c:	42a0      	cmp	r0, r4
 8004f9e:	da26      	bge.n	8004fee <mbedtls_mpi_div_mpi+0x98>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 8004fa0:	9b01      	ldr	r3, [sp, #4]
 8004fa2:	b92b      	cbnz	r3, 8004fb0 <mbedtls_mpi_div_mpi+0x5a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 8004fa4:	b9df      	cbnz	r7, 8004fde <mbedtls_mpi_div_mpi+0x88>
        return( 0 );
 8004fa6:	2400      	movs	r4, #0
}
 8004fa8:	4620      	mov	r0, r4
 8004faa:	b01b      	add	sp, #108	; 0x6c
 8004fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	9801      	ldr	r0, [sp, #4]
 8004fb4:	f7ff fbf1 	bl	800479a <mbedtls_mpi_lset>
 8004fb8:	4604      	mov	r4, r0
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d0f2      	beq.n	8004fa4 <mbedtls_mpi_div_mpi+0x4e>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 8004fbe:	a80b      	add	r0, sp, #44	; 0x2c
 8004fc0:	f7ff fb83 	bl	80046ca <mbedtls_mpi_free>
 8004fc4:	a80e      	add	r0, sp, #56	; 0x38
 8004fc6:	f7ff fb80 	bl	80046ca <mbedtls_mpi_free>
 8004fca:	a811      	add	r0, sp, #68	; 0x44
 8004fcc:	f7ff fb7d 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 8004fd0:	a814      	add	r0, sp, #80	; 0x50
 8004fd2:	f7ff fb7a 	bl	80046ca <mbedtls_mpi_free>
 8004fd6:	a817      	add	r0, sp, #92	; 0x5c
 8004fd8:	f7ff fb77 	bl	80046ca <mbedtls_mpi_free>
    return( ret );
 8004fdc:	e7e4      	b.n	8004fa8 <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 8004fde:	4641      	mov	r1, r8
 8004fe0:	4638      	mov	r0, r7
 8004fe2:	f7ff fbae 	bl	8004742 <mbedtls_mpi_copy>
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	d1e8      	bne.n	8004fbe <mbedtls_mpi_div_mpi+0x68>
 8004fec:	e7db      	b.n	8004fa6 <mbedtls_mpi_div_mpi+0x50>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 8004fee:	4641      	mov	r1, r8
 8004ff0:	a80b      	add	r0, sp, #44	; 0x2c
 8004ff2:	f7ff fba6 	bl	8004742 <mbedtls_mpi_copy>
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	d1e0      	bne.n	8004fbe <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 8004ffc:	ad0e      	add	r5, sp, #56	; 0x38
 8004ffe:	9903      	ldr	r1, [sp, #12]
 8005000:	4628      	mov	r0, r5
 8005002:	f7ff fb9e 	bl	8004742 <mbedtls_mpi_copy>
 8005006:	4604      	mov	r4, r0
 8005008:	2800      	cmp	r0, #0
 800500a:	d1d8      	bne.n	8004fbe <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800500c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005010:	a811      	add	r0, sp, #68	; 0x44
 8005012:	3102      	adds	r1, #2
    X.s = Y.s = 1;
 8005014:	960e      	str	r6, [sp, #56]	; 0x38
 8005016:	960b      	str	r6, [sp, #44]	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 8005018:	f7ff fb69 	bl	80046ee <mbedtls_mpi_grow>
 800501c:	4604      	mov	r4, r0
 800501e:	2800      	cmp	r0, #0
 8005020:	d1cd      	bne.n	8004fbe <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 8005022:	4601      	mov	r1, r0
 8005024:	a811      	add	r0, sp, #68	; 0x44
 8005026:	f7ff fbb8 	bl	800479a <mbedtls_mpi_lset>
 800502a:	4604      	mov	r4, r0
 800502c:	2800      	cmp	r0, #0
 800502e:	d1c6      	bne.n	8004fbe <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 8005030:	2102      	movs	r1, #2
 8005032:	a814      	add	r0, sp, #80	; 0x50
 8005034:	f7ff fb5b 	bl	80046ee <mbedtls_mpi_grow>
 8005038:	4604      	mov	r4, r0
 800503a:	2800      	cmp	r0, #0
 800503c:	d1bf      	bne.n	8004fbe <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 800503e:	2103      	movs	r1, #3
 8005040:	a817      	add	r0, sp, #92	; 0x5c
 8005042:	f7ff fb54 	bl	80046ee <mbedtls_mpi_grow>
 8005046:	4604      	mov	r4, r0
 8005048:	2800      	cmp	r0, #0
 800504a:	d1b8      	bne.n	8004fbe <mbedtls_mpi_div_mpi+0x68>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
 800504c:	4628      	mov	r0, r5
 800504e:	f7ff fbe8 	bl	8004822 <mbedtls_mpi_bitlen>
 8005052:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 8005056:	281f      	cmp	r0, #31
 8005058:	d078      	beq.n	800514c <mbedtls_mpi_div_mpi+0x1f6>
        k = biL - 1 - k;
 800505a:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 800505e:	4619      	mov	r1, r3
 8005060:	a80b      	add	r0, sp, #44	; 0x2c
        k = biL - 1 - k;
 8005062:	9302      	str	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 8005064:	f7ff fc71 	bl	800494a <mbedtls_mpi_shift_l>
 8005068:	4604      	mov	r4, r0
 800506a:	2800      	cmp	r0, #0
 800506c:	d1a7      	bne.n	8004fbe <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 800506e:	9902      	ldr	r1, [sp, #8]
 8005070:	4628      	mov	r0, r5
 8005072:	f7ff fc6a 	bl	800494a <mbedtls_mpi_shift_l>
 8005076:	4604      	mov	r4, r0
 8005078:	2800      	cmp	r0, #0
 800507a:	d1a0      	bne.n	8004fbe <mbedtls_mpi_div_mpi+0x68>
    n = X.n - 1;
 800507c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    t = Y.n - 1;
 800507e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    n = X.n - 1;
 8005082:	f106 39ff 	add.w	r9, r6, #4294967295
    t = Y.n - 1;
 8005086:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 800508a:	eba9 0b03 	sub.w	fp, r9, r3
    t = Y.n - 1;
 800508e:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 8005090:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8005094:	4619      	mov	r1, r3
 8005096:	4628      	mov	r0, r5
 8005098:	9306      	str	r3, [sp, #24]
 800509a:	f7ff fc56 	bl	800494a <mbedtls_mpi_shift_l>
 800509e:	4604      	mov	r4, r0
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d18c      	bne.n	8004fbe <mbedtls_mpi_div_mpi+0x68>
        Z.p[n - t]++;
 80050a4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 80050a8:	4629      	mov	r1, r5
 80050aa:	a80b      	add	r0, sp, #44	; 0x2c
 80050ac:	f7ff fd70 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	da4d      	bge.n	8005150 <mbedtls_mpi_div_mpi+0x1fa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 80050b4:	9906      	ldr	r1, [sp, #24]
 80050b6:	4628      	mov	r0, r5
 80050b8:	f7ff fc93 	bl	80049e2 <mbedtls_mpi_shift_r>
 80050bc:	4604      	mov	r4, r0
 80050be:	2800      	cmp	r0, #0
 80050c0:	f47f af7d 	bne.w	8004fbe <mbedtls_mpi_div_mpi+0x68>
        if( X.p[i] >= Y.p[t] )
 80050c4:	9b00      	ldr	r3, [sp, #0]
 80050c6:	f106 4580 	add.w	r5, r6, #1073741824	; 0x40000000
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	9306      	str	r3, [sp, #24]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 80050ce:	3b04      	subs	r3, #4
 80050d0:	9308      	str	r3, [sp, #32]
 80050d2:	f106 6300 	add.w	r3, r6, #134217728	; 0x8000000
 80050d6:	3d01      	subs	r5, #1
 80050d8:	3b01      	subs	r3, #1
 80050da:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80050de:	eba5 050a 	sub.w	r5, r5, sl
 80050e2:	3e02      	subs	r6, #2
 80050e4:	eba3 0a0a 	sub.w	sl, r3, sl
 80050e8:	00ad      	lsls	r5, r5, #2
 80050ea:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 80050ee:	00b6      	lsls	r6, r6, #2
    for( i = n; i > t ; i-- )
 80050f0:	9b00      	ldr	r3, [sp, #0]
 80050f2:	4599      	cmp	r9, r3
 80050f4:	d83b      	bhi.n	800516e <mbedtls_mpi_div_mpi+0x218>
    if( Q != NULL )
 80050f6:	9b01      	ldr	r3, [sp, #4]
 80050f8:	b15b      	cbz	r3, 8005112 <mbedtls_mpi_div_mpi+0x1bc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 80050fa:	a911      	add	r1, sp, #68	; 0x44
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff fb20 	bl	8004742 <mbedtls_mpi_copy>
 8005102:	bb08      	cbnz	r0, 8005148 <mbedtls_mpi_div_mpi+0x1f2>
        Q->s = A->s * B->s;
 8005104:	9b03      	ldr	r3, [sp, #12]
 8005106:	f8d8 2000 	ldr.w	r2, [r8]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4353      	muls	r3, r2
 800510e:	9a01      	ldr	r2, [sp, #4]
 8005110:	6013      	str	r3, [r2, #0]
    if( R != NULL )
 8005112:	2f00      	cmp	r7, #0
 8005114:	f43f af53 	beq.w	8004fbe <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 8005118:	9902      	ldr	r1, [sp, #8]
 800511a:	a80b      	add	r0, sp, #44	; 0x2c
 800511c:	f7ff fc61 	bl	80049e2 <mbedtls_mpi_shift_r>
 8005120:	b990      	cbnz	r0, 8005148 <mbedtls_mpi_div_mpi+0x1f2>
        X.s = A->s;
 8005122:	f8d8 3000 	ldr.w	r3, [r8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 8005126:	a90b      	add	r1, sp, #44	; 0x2c
 8005128:	4638      	mov	r0, r7
        X.s = A->s;
 800512a:	930b      	str	r3, [sp, #44]	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 800512c:	f7ff fb09 	bl	8004742 <mbedtls_mpi_copy>
 8005130:	4601      	mov	r1, r0
 8005132:	2800      	cmp	r0, #0
 8005134:	f040 80bf 	bne.w	80052b6 <mbedtls_mpi_div_mpi+0x360>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 8005138:	4638      	mov	r0, r7
 800513a:	f7ff fd6f 	bl	8004c1c <mbedtls_mpi_cmp_int>
 800513e:	2800      	cmp	r0, #0
 8005140:	f47f af3d 	bne.w	8004fbe <mbedtls_mpi_div_mpi+0x68>
            R->s = 1;
 8005144:	2301      	movs	r3, #1
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	4604      	mov	r4, r0
 800514a:	e738      	b.n	8004fbe <mbedtls_mpi_div_mpi+0x68>
    else k = 0;
 800514c:	9402      	str	r4, [sp, #8]
 800514e:	e795      	b.n	800507c <mbedtls_mpi_div_mpi+0x126>
        Z.p[n - t]++;
 8005150:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005152:	f851 200b 	ldr.w	r2, [r1, fp]
 8005156:	3201      	adds	r2, #1
 8005158:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 800515c:	a90b      	add	r1, sp, #44	; 0x2c
 800515e:	462a      	mov	r2, r5
 8005160:	4608      	mov	r0, r1
 8005162:	f7ff fe2e 	bl	8004dc2 <mbedtls_mpi_sub_mpi>
 8005166:	4604      	mov	r4, r0
 8005168:	2800      	cmp	r0, #0
 800516a:	d09d      	beq.n	80050a8 <mbedtls_mpi_div_mpi+0x152>
 800516c:	e727      	b.n	8004fbe <mbedtls_mpi_div_mpi+0x68>
        if( X.p[i] >= Y.p[t] )
 800516e:	9806      	ldr	r0, [sp, #24]
 8005170:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005172:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005174:	1d33      	adds	r3, r6, #4
 8005176:	5812      	ldr	r2, [r2, r0]
 8005178:	9309      	str	r3, [sp, #36]	; 0x24
 800517a:	58cb      	ldr	r3, [r1, r3]
 800517c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800517e:	4293      	cmp	r3, r2
 8005180:	d37a      	bcc.n	8005278 <mbedtls_mpi_div_mpi+0x322>
            Z.p[i - t - 1] = ~0;
 8005182:	f04f 33ff 	mov.w	r3, #4294967295
 8005186:	5143      	str	r3, [r0, r5]
        Z.p[i - t - 1]++;
 8005188:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800518a:	5953      	ldr	r3, [r2, r5]
 800518c:	3301      	adds	r3, #1
 800518e:	5153      	str	r3, [r2, r5]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 8005190:	1f33      	subs	r3, r6, #4
 8005192:	469b      	mov	fp, r3
            Z.p[i - t - 1]--;
 8005194:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 8005196:	2100      	movs	r1, #0
            Z.p[i - t - 1]--;
 8005198:	5953      	ldr	r3, [r2, r5]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 800519a:	a814      	add	r0, sp, #80	; 0x50
            Z.p[i - t - 1]--;
 800519c:	3b01      	subs	r3, #1
 800519e:	5153      	str	r3, [r2, r5]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 80051a0:	f7ff fafb 	bl	800479a <mbedtls_mpi_lset>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	d1cf      	bne.n	8005148 <mbedtls_mpi_div_mpi+0x1f2>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 80051a8:	9900      	ldr	r1, [sp, #0]
 80051aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80051ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051ae:	2900      	cmp	r1, #0
 80051b0:	d07f      	beq.n	80052b2 <mbedtls_mpi_div_mpi+0x35c>
 80051b2:	9908      	ldr	r1, [sp, #32]
 80051b4:	5851      	ldr	r1, [r2, r1]
 80051b6:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
 80051b8:	9906      	ldr	r1, [sp, #24]
 80051ba:	5852      	ldr	r2, [r2, r1]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 80051bc:	a914      	add	r1, sp, #80	; 0x50
            T1.p[1] = Y.p[t];
 80051be:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 80051c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80051c2:	4608      	mov	r0, r1
 80051c4:	595a      	ldr	r2, [r3, r5]
 80051c6:	f7ff feb9 	bl	8004f3c <mbedtls_mpi_mul_int>
 80051ca:	4601      	mov	r1, r0
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d172      	bne.n	80052b6 <mbedtls_mpi_div_mpi+0x360>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 80051d0:	a817      	add	r0, sp, #92	; 0x5c
 80051d2:	f7ff fae2 	bl	800479a <mbedtls_mpi_lset>
 80051d6:	2800      	cmp	r0, #0
 80051d8:	d1b6      	bne.n	8005148 <mbedtls_mpi_div_mpi+0x1f2>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 80051da:	f1b9 0f01 	cmp.w	r9, #1
 80051de:	bf18      	it	ne
 80051e0:	4659      	movne	r1, fp
 80051e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80051e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051e6:	bf18      	it	ne
 80051e8:	5850      	ldrne	r0, [r2, r1]
 80051ea:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 80051ec:	5991      	ldr	r1, [r2, r6]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 80051ee:	a814      	add	r0, sp, #80	; 0x50
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 80051f0:	6059      	str	r1, [r3, #4]
            T2.p[2] = X.p[i];
 80051f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051f4:	5852      	ldr	r2, [r2, r1]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 80051f6:	a917      	add	r1, sp, #92	; 0x5c
            T2.p[2] = X.p[i];
 80051f8:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 80051fa:	f7ff fcc9 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
 80051fe:	2800      	cmp	r0, #0
 8005200:	dcc8      	bgt.n	8005194 <mbedtls_mpi_div_mpi+0x23e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 8005202:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005204:	a90e      	add	r1, sp, #56	; 0x38
 8005206:	595a      	ldr	r2, [r3, r5]
 8005208:	a814      	add	r0, sp, #80	; 0x50
 800520a:	f7ff fe97 	bl	8004f3c <mbedtls_mpi_mul_int>
 800520e:	2800      	cmp	r0, #0
 8005210:	d19a      	bne.n	8005148 <mbedtls_mpi_div_mpi+0x1f2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 8005212:	4651      	mov	r1, sl
 8005214:	a814      	add	r0, sp, #80	; 0x50
 8005216:	f7ff fb98 	bl	800494a <mbedtls_mpi_shift_l>
 800521a:	2800      	cmp	r0, #0
 800521c:	d194      	bne.n	8005148 <mbedtls_mpi_div_mpi+0x1f2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 800521e:	a90b      	add	r1, sp, #44	; 0x2c
 8005220:	4608      	mov	r0, r1
 8005222:	aa14      	add	r2, sp, #80	; 0x50
 8005224:	f7ff fdcd 	bl	8004dc2 <mbedtls_mpi_sub_mpi>
 8005228:	4601      	mov	r1, r0
 800522a:	2800      	cmp	r0, #0
 800522c:	d143      	bne.n	80052b6 <mbedtls_mpi_div_mpi+0x360>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 800522e:	a80b      	add	r0, sp, #44	; 0x2c
 8005230:	f7ff fcf4 	bl	8004c1c <mbedtls_mpi_cmp_int>
 8005234:	2800      	cmp	r0, #0
 8005236:	da18      	bge.n	800526a <mbedtls_mpi_div_mpi+0x314>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 8005238:	a90e      	add	r1, sp, #56	; 0x38
 800523a:	a814      	add	r0, sp, #80	; 0x50
 800523c:	f7ff fa81 	bl	8004742 <mbedtls_mpi_copy>
 8005240:	2800      	cmp	r0, #0
 8005242:	d181      	bne.n	8005148 <mbedtls_mpi_div_mpi+0x1f2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 8005244:	4651      	mov	r1, sl
 8005246:	a814      	add	r0, sp, #80	; 0x50
 8005248:	f7ff fb7f 	bl	800494a <mbedtls_mpi_shift_l>
 800524c:	2800      	cmp	r0, #0
 800524e:	f47f af7b 	bne.w	8005148 <mbedtls_mpi_div_mpi+0x1f2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 8005252:	a90b      	add	r1, sp, #44	; 0x2c
 8005254:	aa14      	add	r2, sp, #80	; 0x50
 8005256:	4608      	mov	r0, r1
 8005258:	f7ff fd91 	bl	8004d7e <mbedtls_mpi_add_mpi>
 800525c:	2800      	cmp	r0, #0
 800525e:	f47f af73 	bne.w	8005148 <mbedtls_mpi_div_mpi+0x1f2>
            Z.p[i - t - 1]--;
 8005262:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005264:	5953      	ldr	r3, [r2, r5]
 8005266:	3b01      	subs	r3, #1
 8005268:	5153      	str	r3, [r2, r5]
    for( i = n; i > t ; i-- )
 800526a:	f109 39ff 	add.w	r9, r9, #4294967295
 800526e:	3d04      	subs	r5, #4
 8005270:	f1aa 0a20 	sub.w	sl, sl, #32
 8005274:	3e04      	subs	r6, #4
 8005276:	e73b      	b.n	80050f0 <mbedtls_mpi_div_mpi+0x19a>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 8005278:	4428      	add	r0, r5
 800527a:	9007      	str	r0, [sp, #28]
 800527c:	5988      	ldr	r0, [r1, r6]
    if( 0 == d || u1 >= d )
 800527e:	b1aa      	cbz	r2, 80052ac <mbedtls_mpi_div_mpi+0x356>
    dividend  = (mbedtls_t_udbl) u1 << biL;
 8005280:	9305      	str	r3, [sp, #20]
 8005282:	2300      	movs	r3, #0
 8005284:	9304      	str	r3, [sp, #16]
    quotient = dividend / d;
 8005286:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800528a:	ea4b 0b00 	orr.w	fp, fp, r0
 800528e:	4658      	mov	r0, fp
 8005290:	4661      	mov	r1, ip
 8005292:	f7fa ffd1 	bl	8000238 <__aeabi_uldivmod>
 8005296:	2300      	movs	r3, #0
 8005298:	f04f 32ff 	mov.w	r2, #4294967295
 800529c:	428b      	cmp	r3, r1
 800529e:	bf08      	it	eq
 80052a0:	4282      	cmpeq	r2, r0
 80052a2:	d200      	bcs.n	80052a6 <mbedtls_mpi_div_mpi+0x350>
 80052a4:	4610      	mov	r0, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 80052a6:	9b07      	ldr	r3, [sp, #28]
 80052a8:	6018      	str	r0, [r3, #0]
 80052aa:	e76d      	b.n	8005188 <mbedtls_mpi_div_mpi+0x232>
    if( 0 == d || u1 >= d )
 80052ac:	f04f 30ff 	mov.w	r0, #4294967295
 80052b0:	e7f9      	b.n	80052a6 <mbedtls_mpi_div_mpi+0x350>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 80052b2:	9900      	ldr	r1, [sp, #0]
 80052b4:	e77f      	b.n	80051b6 <mbedtls_mpi_div_mpi+0x260>
 80052b6:	460c      	mov	r4, r1
 80052b8:	e681      	b.n	8004fbe <mbedtls_mpi_div_mpi+0x68>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 80052ba:	f06f 040b 	mvn.w	r4, #11
 80052be:	e673      	b.n	8004fa8 <mbedtls_mpi_div_mpi+0x52>

080052c0 <mbedtls_mpi_mod_mpi>:
{
 80052c0:	b570      	push	{r4, r5, r6, lr}
 80052c2:	4604      	mov	r4, r0
 80052c4:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 80052c6:	4610      	mov	r0, r2
 80052c8:	2100      	movs	r1, #0
{
 80052ca:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 80052cc:	f7ff fca6 	bl	8004c1c <mbedtls_mpi_cmp_int>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	db24      	blt.n	800531e <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 80052d4:	462a      	mov	r2, r5
 80052d6:	4633      	mov	r3, r6
 80052d8:	4621      	mov	r1, r4
 80052da:	2000      	movs	r0, #0
 80052dc:	f7ff fe3b 	bl	8004f56 <mbedtls_mpi_div_mpi>
 80052e0:	4605      	mov	r5, r0
 80052e2:	b138      	cbz	r0, 80052f4 <mbedtls_mpi_mod_mpi+0x34>
}
 80052e4:	4628      	mov	r0, r5
 80052e6:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 80052e8:	4632      	mov	r2, r6
 80052ea:	4621      	mov	r1, r4
 80052ec:	4620      	mov	r0, r4
 80052ee:	f7ff fd46 	bl	8004d7e <mbedtls_mpi_add_mpi>
 80052f2:	b990      	cbnz	r0, 800531a <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 80052f4:	2100      	movs	r1, #0
 80052f6:	4620      	mov	r0, r4
 80052f8:	f7ff fc90 	bl	8004c1c <mbedtls_mpi_cmp_int>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	dbf3      	blt.n	80052e8 <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 8005300:	4631      	mov	r1, r6
 8005302:	4620      	mov	r0, r4
 8005304:	f7ff fc44 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
 8005308:	2800      	cmp	r0, #0
 800530a:	dbeb      	blt.n	80052e4 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 800530c:	4632      	mov	r2, r6
 800530e:	4621      	mov	r1, r4
 8005310:	4620      	mov	r0, r4
 8005312:	f7ff fd56 	bl	8004dc2 <mbedtls_mpi_sub_mpi>
 8005316:	2800      	cmp	r0, #0
 8005318:	d0f2      	beq.n	8005300 <mbedtls_mpi_mod_mpi+0x40>
 800531a:	4605      	mov	r5, r0
 800531c:	e7e2      	b.n	80052e4 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800531e:	f06f 0509 	mvn.w	r5, #9
 8005322:	e7df      	b.n	80052e4 <mbedtls_mpi_mod_mpi+0x24>

08005324 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
 8005324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005328:	4606      	mov	r6, r0
 800532a:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 800532e:	460f      	mov	r7, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 8005330:	4618      	mov	r0, r3
 8005332:	2100      	movs	r1, #0
{
 8005334:	9203      	str	r2, [sp, #12]
 8005336:	461d      	mov	r5, r3
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 8005338:	f7ff fc70 	bl	8004c1c <mbedtls_mpi_cmp_int>
 800533c:	2800      	cmp	r0, #0
 800533e:	f340 8225 	ble.w	800578c <mbedtls_mpi_exp_mod+0x468>
 8005342:	68ab      	ldr	r3, [r5, #8]
 8005344:	f8d3 8000 	ldr.w	r8, [r3]
 8005348:	f018 0f01 	tst.w	r8, #1
 800534c:	f000 821e 	beq.w	800578c <mbedtls_mpi_exp_mod+0x468>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 8005350:	2100      	movs	r1, #0
 8005352:	9803      	ldr	r0, [sp, #12]
 8005354:	f7ff fc62 	bl	8004c1c <mbedtls_mpi_cmp_int>
 8005358:	2800      	cmp	r0, #0
 800535a:	f2c0 8217 	blt.w	800578c <mbedtls_mpi_exp_mod+0x468>
    x += ( ( m0 + 2 ) & 4 ) << 1;
 800535e:	2103      	movs	r1, #3
 8005360:	f108 0402 	add.w	r4, r8, #2
 8005364:	0064      	lsls	r4, r4, #1
 8005366:	f004 0408 	and.w	r4, r4, #8
 800536a:	4444      	add	r4, r8
        x *= ( 2 - ( m0 * x ) );
 800536c:	fb04 f308 	mul.w	r3, r4, r8
    for( i = biL; i >= 8; i /= 2 )
 8005370:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 8005372:	f1c3 0302 	rsb	r3, r3, #2
 8005376:	fb03 f404 	mul.w	r4, r3, r4
    for( i = biL; i >= 8; i /= 2 )
 800537a:	d1f7      	bne.n	800536c <mbedtls_mpi_exp_mod+0x48>
    X->s = 1;
 800537c:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 800537e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005382:	a814      	add	r0, sp, #80	; 0x50
    X->s = 1;
 8005384:	9308      	str	r3, [sp, #32]
    X->n = 0;
 8005386:	9109      	str	r1, [sp, #36]	; 0x24
    X->p = NULL;
 8005388:	910a      	str	r1, [sp, #40]	; 0x28
    X->s = 1;
 800538a:	930b      	str	r3, [sp, #44]	; 0x2c
    X->n = 0;
 800538c:	910c      	str	r1, [sp, #48]	; 0x30
    X->p = NULL;
 800538e:	910d      	str	r1, [sp, #52]	; 0x34
    X->s = 1;
 8005390:	930e      	str	r3, [sp, #56]	; 0x38
    X->n = 0;
 8005392:	910f      	str	r1, [sp, #60]	; 0x3c
    X->p = NULL;
 8005394:	9110      	str	r1, [sp, #64]	; 0x40
    memset( W, 0, sizeof( W ) );
 8005396:	f00c fd37 	bl	8011e08 <memset>

    i = mbedtls_mpi_bitlen( E );
 800539a:	9803      	ldr	r0, [sp, #12]
 800539c:	f7ff fa41 	bl	8004822 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 80053a0:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 80053a4:	f080 80e2 	bcs.w	800556c <mbedtls_mpi_exp_mod+0x248>
 80053a8:	28ef      	cmp	r0, #239	; 0xef
 80053aa:	f200 80e2 	bhi.w	8005572 <mbedtls_mpi_exp_mod+0x24e>
 80053ae:	284f      	cmp	r0, #79	; 0x4f
 80053b0:	f200 80e2 	bhi.w	8005578 <mbedtls_mpi_exp_mod+0x254>
 80053b4:	2817      	cmp	r0, #23
 80053b6:	bf8c      	ite	hi
 80053b8:	f04f 0b03 	movhi.w	fp, #3
 80053bc:	f04f 0b01 	movls.w	fp, #1
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 80053c0:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80053c2:	4630      	mov	r0, r6
    j = N->n + 1;
 80053c4:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80053c8:	4641      	mov	r1, r8
 80053ca:	f7ff f990 	bl	80046ee <mbedtls_mpi_grow>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2800      	cmp	r0, #0
 80053d2:	f040 8163 	bne.w	800569c <mbedtls_mpi_exp_mod+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 80053d6:	4641      	mov	r1, r8
 80053d8:	a817      	add	r0, sp, #92	; 0x5c
 80053da:	f7ff f988 	bl	80046ee <mbedtls_mpi_grow>
 80053de:	4603      	mov	r3, r0
 80053e0:	2800      	cmp	r0, #0
 80053e2:	f040 815b 	bne.w	800569c <mbedtls_mpi_exp_mod+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 80053e6:	ea4f 0148 	mov.w	r1, r8, lsl #1
 80053ea:	a80b      	add	r0, sp, #44	; 0x2c
 80053ec:	f7ff f97f 	bl	80046ee <mbedtls_mpi_grow>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2800      	cmp	r0, #0
 80053f4:	f040 8152 	bne.w	800569c <mbedtls_mpi_exp_mod+0x378>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	9304      	str	r3, [sp, #16]
    if( neg )
 80053fc:	3301      	adds	r3, #1
 80053fe:	d10a      	bne.n	8005416 <mbedtls_mpi_exp_mod+0xf2>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 8005400:	4639      	mov	r1, r7
 8005402:	a80e      	add	r0, sp, #56	; 0x38
 8005404:	f7ff f99d 	bl	8004742 <mbedtls_mpi_copy>
 8005408:	4603      	mov	r3, r0
 800540a:	2800      	cmp	r0, #0
 800540c:	f040 8146 	bne.w	800569c <mbedtls_mpi_exp_mod+0x378>
        Apos.s = 1;
 8005410:	2301      	movs	r3, #1
        A = &Apos;
 8005412:	af0e      	add	r7, sp, #56	; 0x38
        Apos.s = 1;
 8005414:	930e      	str	r3, [sp, #56]	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 8005416:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 800541a:	b11b      	cbz	r3, 8005424 <mbedtls_mpi_exp_mod+0x100>
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	f040 80ad 	bne.w	800557e <mbedtls_mpi_exp_mod+0x25a>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 8005424:	2101      	movs	r1, #1
 8005426:	a808      	add	r0, sp, #32
 8005428:	f7ff f9b7 	bl	800479a <mbedtls_mpi_lset>
 800542c:	4603      	mov	r3, r0
 800542e:	2800      	cmp	r0, #0
 8005430:	f040 8134 	bne.w	800569c <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 8005434:	6869      	ldr	r1, [r5, #4]
 8005436:	a808      	add	r0, sp, #32
 8005438:	0189      	lsls	r1, r1, #6
 800543a:	f7ff fa86 	bl	800494a <mbedtls_mpi_shift_l>
 800543e:	4603      	mov	r3, r0
 8005440:	2800      	cmp	r0, #0
 8005442:	f040 812b 	bne.w	800569c <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 8005446:	a908      	add	r1, sp, #32
 8005448:	462a      	mov	r2, r5
 800544a:	4608      	mov	r0, r1
 800544c:	f7ff ff38 	bl	80052c0 <mbedtls_mpi_mod_mpi>
 8005450:	4603      	mov	r3, r0
 8005452:	2800      	cmp	r0, #0
 8005454:	f040 8122 	bne.w	800569c <mbedtls_mpi_exp_mod+0x378>

        if( _RR != NULL )
 8005458:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 800545c:	b13b      	cbz	r3, 800546e <mbedtls_mpi_exp_mod+0x14a>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 800545e:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 8005462:	ab08      	add	r3, sp, #32
 8005464:	cb03      	ldmia	r3!, {r0, r1}
 8005466:	6010      	str	r0, [r2, #0]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	6051      	str	r1, [r2, #4]
 800546c:	6090      	str	r0, [r2, #8]
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 800546e:	4629      	mov	r1, r5
 8005470:	4638      	mov	r0, r7
 8005472:	f7ff fb8d 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
 8005476:	2800      	cmp	r0, #0
 8005478:	f2c0 808a 	blt.w	8005590 <mbedtls_mpi_exp_mod+0x26c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 800547c:	462a      	mov	r2, r5
 800547e:	4639      	mov	r1, r7
 8005480:	a817      	add	r0, sp, #92	; 0x5c
 8005482:	f7ff ff1d 	bl	80052c0 <mbedtls_mpi_mod_mpi>
 8005486:	4603      	mov	r3, r0
 8005488:	2800      	cmp	r0, #0
 800548a:	f040 8107 	bne.w	800569c <mbedtls_mpi_exp_mod+0x378>
    *mm = ~x + 1;
 800548e:	4264      	negs	r4, r4
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 8005490:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 8005494:	4623      	mov	r3, r4
 8005496:	f8cd 9000 	str.w	r9, [sp]
 800549a:	462a      	mov	r2, r5
 800549c:	a908      	add	r1, sp, #32
 800549e:	a817      	add	r0, sp, #92	; 0x5c
 80054a0:	f7ff fb12 	bl	8004ac8 <mpi_montmul>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2800      	cmp	r0, #0
 80054a8:	f040 80f8 	bne.w	800569c <mbedtls_mpi_exp_mod+0x378>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 80054ac:	a908      	add	r1, sp, #32
 80054ae:	4630      	mov	r0, r6
 80054b0:	f7ff f947 	bl	8004742 <mbedtls_mpi_copy>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2800      	cmp	r0, #0
 80054b8:	f040 80f0 	bne.w	800569c <mbedtls_mpi_exp_mod+0x378>
    mbedtls_mpi_uint z = 1;
 80054bc:	2701      	movs	r7, #1
 80054be:	ab07      	add	r3, sp, #28
    U.p = &z;
 80054c0:	9313      	str	r3, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 80054c2:	f8cd 9000 	str.w	r9, [sp]
 80054c6:	4623      	mov	r3, r4
 80054c8:	462a      	mov	r2, r5
 80054ca:	a911      	add	r1, sp, #68	; 0x44
 80054cc:	4630      	mov	r0, r6
    mbedtls_mpi_uint z = 1;
 80054ce:	9707      	str	r7, [sp, #28]
    U.n = U.s = (int) z;
 80054d0:	9711      	str	r7, [sp, #68]	; 0x44
 80054d2:	9712      	str	r7, [sp, #72]	; 0x48
    return( mpi_montmul( A, &U, N, mm, T ) );
 80054d4:	f7ff faf8 	bl	8004ac8 <mpi_montmul>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 80054d8:	4603      	mov	r3, r0
 80054da:	2800      	cmp	r0, #0
 80054dc:	f040 80de 	bne.w	800569c <mbedtls_mpi_exp_mod+0x378>

    if( wsize > 1 )
 80054e0:	45bb      	cmp	fp, r7
 80054e2:	d15a      	bne.n	800559a <mbedtls_mpi_exp_mod+0x276>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
 80054e4:	f04f 0900 	mov.w	r9, #0
    nbits   = 0;
 80054e8:	46c8      	mov	r8, r9
    bufsize = 0;
 80054ea:	46ca      	mov	sl, r9
    wbits   = 0;
 80054ec:	464f      	mov	r7, r9
    nblimbs = E->n;
 80054ee:	9b03      	ldr	r3, [sp, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	9302      	str	r3, [sp, #8]

    while( 1 )
    {
        if( bufsize == 0 )
 80054f4:	f1ba 0f00 	cmp.w	sl, #0
 80054f8:	f040 80b1 	bne.w	800565e <mbedtls_mpi_exp_mod+0x33a>
        {
            if( nblimbs == 0 )
 80054fc:	9b02      	ldr	r3, [sp, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f040 80a8 	bne.w	8005654 <mbedtls_mpi_exp_mod+0x330>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 8005504:	f04f 0a01 	mov.w	sl, #1
 8005508:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 800550c:	fa0a fa0b 	lsl.w	sl, sl, fp
    for( i = 0; i < nbits; i++ )
 8005510:	9b02      	ldr	r3, [sp, #8]
 8005512:	4543      	cmp	r3, r8
 8005514:	f040 8113 	bne.w	800573e <mbedtls_mpi_exp_mod+0x41a>
    mbedtls_mpi_uint z = 1;
 8005518:	2301      	movs	r3, #1
 800551a:	aa07      	add	r2, sp, #28
 800551c:	9307      	str	r3, [sp, #28]
    U.n = U.s = (int) z;
 800551e:	9311      	str	r3, [sp, #68]	; 0x44
 8005520:	9312      	str	r3, [sp, #72]	; 0x48
    U.p = &z;
 8005522:	9213      	str	r2, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 8005524:	4623      	mov	r3, r4
 8005526:	f8cd 9000 	str.w	r9, [sp]
 800552a:	462a      	mov	r2, r5
 800552c:	a911      	add	r1, sp, #68	; 0x44
 800552e:	4630      	mov	r0, r6
 8005530:	f7ff faca 	bl	8004ac8 <mpi_montmul>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 8005534:	4603      	mov	r3, r0
 8005536:	2800      	cmp	r0, #0
 8005538:	f040 80b0 	bne.w	800569c <mbedtls_mpi_exp_mod+0x378>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 800553c:	9a04      	ldr	r2, [sp, #16]
 800553e:	3201      	adds	r2, #1
 8005540:	f040 80ac 	bne.w	800569c <mbedtls_mpi_exp_mod+0x378>
 8005544:	9a03      	ldr	r2, [sp, #12]
 8005546:	6852      	ldr	r2, [r2, #4]
 8005548:	2a00      	cmp	r2, #0
 800554a:	f000 80a7 	beq.w	800569c <mbedtls_mpi_exp_mod+0x378>
 800554e:	9a03      	ldr	r2, [sp, #12]
 8005550:	6892      	ldr	r2, [r2, #8]
 8005552:	6812      	ldr	r2, [r2, #0]
 8005554:	07d2      	lsls	r2, r2, #31
 8005556:	f140 80a1 	bpl.w	800569c <mbedtls_mpi_exp_mod+0x378>
    {
        X->s = -1;
 800555a:	9b04      	ldr	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 800555c:	4632      	mov	r2, r6
        X->s = -1;
 800555e:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 8005560:	4629      	mov	r1, r5
 8005562:	4630      	mov	r0, r6
 8005564:	f7ff fc0b 	bl	8004d7e <mbedtls_mpi_add_mpi>
 8005568:	4603      	mov	r3, r0
 800556a:	e097      	b.n	800569c <mbedtls_mpi_exp_mod+0x378>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 800556c:	f04f 0b06 	mov.w	fp, #6
 8005570:	e726      	b.n	80053c0 <mbedtls_mpi_exp_mod+0x9c>
 8005572:	f04f 0b05 	mov.w	fp, #5
 8005576:	e723      	b.n	80053c0 <mbedtls_mpi_exp_mod+0x9c>
 8005578:	f04f 0b04 	mov.w	fp, #4
 800557c:	e720      	b.n	80053c0 <mbedtls_mpi_exp_mod+0x9c>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 800557e:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 8005582:	ab08      	add	r3, sp, #32
 8005584:	6810      	ldr	r0, [r2, #0]
 8005586:	6851      	ldr	r1, [r2, #4]
 8005588:	c303      	stmia	r3!, {r0, r1}
 800558a:	6890      	ldr	r0, [r2, #8]
 800558c:	6018      	str	r0, [r3, #0]
 800558e:	e76e      	b.n	800546e <mbedtls_mpi_exp_mod+0x14a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 8005590:	4639      	mov	r1, r7
 8005592:	a817      	add	r0, sp, #92	; 0x5c
 8005594:	f7ff f8d5 	bl	8004742 <mbedtls_mpi_copy>
 8005598:	e775      	b.n	8005486 <mbedtls_mpi_exp_mod+0x162>
        j =  one << ( wsize - 1 );
 800559a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800559e:	9302      	str	r3, [sp, #8]
 80055a0:	fa07 f303 	lsl.w	r3, r7, r3
 80055a4:	270c      	movs	r7, #12
 80055a6:	9305      	str	r3, [sp, #20]
 80055a8:	9b02      	ldr	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 80055aa:	6869      	ldr	r1, [r5, #4]
 80055ac:	409f      	lsls	r7, r3
 80055ae:	ab14      	add	r3, sp, #80	; 0x50
 80055b0:	eb03 0807 	add.w	r8, r3, r7
 80055b4:	3101      	adds	r1, #1
 80055b6:	4640      	mov	r0, r8
 80055b8:	f7ff f899 	bl	80046ee <mbedtls_mpi_grow>
 80055bc:	4603      	mov	r3, r0
 80055be:	2800      	cmp	r0, #0
 80055c0:	d16c      	bne.n	800569c <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 80055c2:	a917      	add	r1, sp, #92	; 0x5c
 80055c4:	4640      	mov	r0, r8
 80055c6:	f7ff f8bc 	bl	8004742 <mbedtls_mpi_copy>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d165      	bne.n	800569c <mbedtls_mpi_exp_mod+0x378>
 80055d0:	4682      	mov	sl, r0
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 80055d2:	4623      	mov	r3, r4
 80055d4:	f8cd 9000 	str.w	r9, [sp]
 80055d8:	462a      	mov	r2, r5
 80055da:	4641      	mov	r1, r8
 80055dc:	4640      	mov	r0, r8
 80055de:	f7ff fa73 	bl	8004ac8 <mpi_montmul>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d159      	bne.n	800569c <mbedtls_mpi_exp_mod+0x378>
        for( i = 0; i < wsize - 1; i++ )
 80055e8:	9b02      	ldr	r3, [sp, #8]
 80055ea:	f10a 0a01 	add.w	sl, sl, #1
 80055ee:	4553      	cmp	r3, sl
 80055f0:	d8ef      	bhi.n	80055d2 <mbedtls_mpi_exp_mod+0x2ae>
        for( i = j + 1; i < ( one << wsize ); i++ )
 80055f2:	f04f 0801 	mov.w	r8, #1
 80055f6:	9b05      	ldr	r3, [sp, #20]
 80055f8:	fa08 f80b 	lsl.w	r8, r8, fp
 80055fc:	f103 0901 	add.w	r9, r3, #1
 8005600:	f50d 63ca 	add.w	r3, sp, #1616	; 0x650
 8005604:	441f      	add	r7, r3
 8005606:	f2a7 57f4 	subw	r7, r7, #1524	; 0x5f4
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 800560a:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
        for( i = j + 1; i < ( one << wsize ); i++ )
 800560e:	45c1      	cmp	r9, r8
 8005610:	f4bf af68 	bcs.w	80054e4 <mbedtls_mpi_exp_mod+0x1c0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 8005614:	6869      	ldr	r1, [r5, #4]
 8005616:	4638      	mov	r0, r7
 8005618:	3101      	adds	r1, #1
 800561a:	f7ff f868 	bl	80046ee <mbedtls_mpi_grow>
 800561e:	4603      	mov	r3, r0
 8005620:	2800      	cmp	r0, #0
 8005622:	d13b      	bne.n	800569c <mbedtls_mpi_exp_mod+0x378>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 8005624:	f1a7 010c 	sub.w	r1, r7, #12
 8005628:	4638      	mov	r0, r7
 800562a:	f7ff f88a 	bl	8004742 <mbedtls_mpi_copy>
 800562e:	4603      	mov	r3, r0
 8005630:	bba0      	cbnz	r0, 800569c <mbedtls_mpi_exp_mod+0x378>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 8005632:	4623      	mov	r3, r4
 8005634:	4638      	mov	r0, r7
 8005636:	f8cd a000 	str.w	sl, [sp]
 800563a:	462a      	mov	r2, r5
 800563c:	a917      	add	r1, sp, #92	; 0x5c
 800563e:	f7ff fa43 	bl	8004ac8 <mpi_montmul>
 8005642:	370c      	adds	r7, #12
 8005644:	4603      	mov	r3, r0
 8005646:	bb48      	cbnz	r0, 800569c <mbedtls_mpi_exp_mod+0x378>
        for( i = j + 1; i < ( one << wsize ); i++ )
 8005648:	f109 0901 	add.w	r9, r9, #1
 800564c:	e7df      	b.n	800560e <mbedtls_mpi_exp_mod+0x2ea>
        state = 2;
 800564e:	f04f 0902 	mov.w	r9, #2
 8005652:	e74f      	b.n	80054f4 <mbedtls_mpi_exp_mod+0x1d0>
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 8005654:	f04f 0a20 	mov.w	sl, #32
            nblimbs--;
 8005658:	9b02      	ldr	r3, [sp, #8]
 800565a:	3b01      	subs	r3, #1
 800565c:	9302      	str	r3, [sp, #8]
        ei = (E->p[nblimbs] >> bufsize) & 1;
 800565e:	9b03      	ldr	r3, [sp, #12]
 8005660:	9a02      	ldr	r2, [sp, #8]
 8005662:	689b      	ldr	r3, [r3, #8]
        bufsize--;
 8005664:	f10a 3aff 	add.w	sl, sl, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
 8005668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800566c:	fa23 f30a 	lsr.w	r3, r3, sl
        if( ei == 0 && state == 0 )
 8005670:	f013 0301 	ands.w	r3, r3, #1
 8005674:	d136      	bne.n	80056e4 <mbedtls_mpi_exp_mod+0x3c0>
 8005676:	f1b9 0f00 	cmp.w	r9, #0
 800567a:	f43f af3b 	beq.w	80054f4 <mbedtls_mpi_exp_mod+0x1d0>
        if( ei == 0 && state == 1 )
 800567e:	f1b9 0f01 	cmp.w	r9, #1
 8005682:	d12f      	bne.n	80056e4 <mbedtls_mpi_exp_mod+0x3c0>
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 8005684:	ab0b      	add	r3, sp, #44	; 0x2c
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	462a      	mov	r2, r5
 800568a:	4623      	mov	r3, r4
 800568c:	4631      	mov	r1, r6
 800568e:	4630      	mov	r0, r6
 8005690:	f7ff fa1a 	bl	8004ac8 <mpi_montmul>
 8005694:	4603      	mov	r3, r0
 8005696:	2800      	cmp	r0, #0
 8005698:	f43f af2c 	beq.w	80054f4 <mbedtls_mpi_exp_mod+0x1d0>
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800569c:	2201      	movs	r2, #1
        mbedtls_mpi_free( &W[i] );
 800569e:	260c      	movs	r6, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 80056a0:	f10b 34ff 	add.w	r4, fp, #4294967295
 80056a4:	fa02 f404 	lsl.w	r4, r2, r4
 80056a8:	fa02 f50b 	lsl.w	r5, r2, fp
 80056ac:	42ac      	cmp	r4, r5
 80056ae:	9302      	str	r3, [sp, #8]
 80056b0:	d364      	bcc.n	800577c <mbedtls_mpi_exp_mod+0x458>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 80056b2:	a817      	add	r0, sp, #92	; 0x5c
 80056b4:	f7ff f809 	bl	80046ca <mbedtls_mpi_free>
 80056b8:	a80b      	add	r0, sp, #44	; 0x2c
 80056ba:	f7ff f806 	bl	80046ca <mbedtls_mpi_free>
 80056be:	a80e      	add	r0, sp, #56	; 0x38
 80056c0:	f7ff f803 	bl	80046ca <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 80056c4:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 80056c8:	9b02      	ldr	r3, [sp, #8]
 80056ca:	b10a      	cbz	r2, 80056d0 <mbedtls_mpi_exp_mod+0x3ac>
 80056cc:	6892      	ldr	r2, [r2, #8]
 80056ce:	b922      	cbnz	r2, 80056da <mbedtls_mpi_exp_mod+0x3b6>
        mbedtls_mpi_free( &RR );
 80056d0:	a808      	add	r0, sp, #32
 80056d2:	9302      	str	r3, [sp, #8]
 80056d4:	f7fe fff9 	bl	80046ca <mbedtls_mpi_free>
 80056d8:	9b02      	ldr	r3, [sp, #8]

    return( ret );
}
 80056da:	4618      	mov	r0, r3
 80056dc:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 80056e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nbits++;
 80056e4:	f108 0801 	add.w	r8, r8, #1
        wbits |= ( ei << ( wsize - nbits ) );
 80056e8:	ebab 0208 	sub.w	r2, fp, r8
 80056ec:	4093      	lsls	r3, r2
        if( nbits == wsize )
 80056ee:	45c3      	cmp	fp, r8
        wbits |= ( ei << ( wsize - nbits ) );
 80056f0:	ea47 0703 	orr.w	r7, r7, r3
        if( nbits == wsize )
 80056f4:	d1ab      	bne.n	800564e <mbedtls_mpi_exp_mod+0x32a>
 80056f6:	f04f 0800 	mov.w	r8, #0
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 80056fa:	ab0b      	add	r3, sp, #44	; 0x2c
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	462a      	mov	r2, r5
 8005700:	4623      	mov	r3, r4
 8005702:	4631      	mov	r1, r6
 8005704:	4630      	mov	r0, r6
 8005706:	f7ff f9df 	bl	8004ac8 <mpi_montmul>
 800570a:	4603      	mov	r3, r0
 800570c:	2800      	cmp	r0, #0
 800570e:	d1c5      	bne.n	800569c <mbedtls_mpi_exp_mod+0x378>
            for( i = 0; i < wsize; i++ )
 8005710:	f108 0801 	add.w	r8, r8, #1
 8005714:	45c3      	cmp	fp, r8
 8005716:	d8f0      	bhi.n	80056fa <mbedtls_mpi_exp_mod+0x3d6>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 8005718:	210c      	movs	r1, #12
 800571a:	ab0b      	add	r3, sp, #44	; 0x2c
 800571c:	a814      	add	r0, sp, #80	; 0x50
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	fb01 0107 	mla	r1, r1, r7, r0
 8005724:	4623      	mov	r3, r4
 8005726:	462a      	mov	r2, r5
 8005728:	4630      	mov	r0, r6
 800572a:	f7ff f9cd 	bl	8004ac8 <mpi_montmul>
 800572e:	4603      	mov	r3, r0
 8005730:	2800      	cmp	r0, #0
 8005732:	d1b3      	bne.n	800569c <mbedtls_mpi_exp_mod+0x378>
            state--;
 8005734:	f04f 0901 	mov.w	r9, #1
            nbits = 0;
 8005738:	4607      	mov	r7, r0
            wbits = 0;
 800573a:	4680      	mov	r8, r0
 800573c:	e6da      	b.n	80054f4 <mbedtls_mpi_exp_mod+0x1d0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800573e:	4623      	mov	r3, r4
 8005740:	f8cd 9000 	str.w	r9, [sp]
 8005744:	462a      	mov	r2, r5
 8005746:	4631      	mov	r1, r6
 8005748:	4630      	mov	r0, r6
 800574a:	f7ff f9bd 	bl	8004ac8 <mpi_montmul>
 800574e:	4603      	mov	r3, r0
 8005750:	2800      	cmp	r0, #0
 8005752:	d1a3      	bne.n	800569c <mbedtls_mpi_exp_mod+0x378>
        wbits <<= 1;
 8005754:	007f      	lsls	r7, r7, #1
        if( ( wbits & ( one << wsize ) ) != 0 )
 8005756:	ea17 0f0a 	tst.w	r7, sl
 800575a:	d103      	bne.n	8005764 <mbedtls_mpi_exp_mod+0x440>
    for( i = 0; i < nbits; i++ )
 800575c:	9b02      	ldr	r3, [sp, #8]
 800575e:	3301      	adds	r3, #1
 8005760:	9302      	str	r3, [sp, #8]
 8005762:	e6d5      	b.n	8005510 <mbedtls_mpi_exp_mod+0x1ec>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 8005764:	4623      	mov	r3, r4
 8005766:	f8cd 9000 	str.w	r9, [sp]
 800576a:	462a      	mov	r2, r5
 800576c:	a917      	add	r1, sp, #92	; 0x5c
 800576e:	4630      	mov	r0, r6
 8005770:	f7ff f9aa 	bl	8004ac8 <mpi_montmul>
 8005774:	4603      	mov	r3, r0
 8005776:	2800      	cmp	r0, #0
 8005778:	d0f0      	beq.n	800575c <mbedtls_mpi_exp_mod+0x438>
 800577a:	e78f      	b.n	800569c <mbedtls_mpi_exp_mod+0x378>
        mbedtls_mpi_free( &W[i] );
 800577c:	ab14      	add	r3, sp, #80	; 0x50
 800577e:	fb06 3004 	mla	r0, r6, r4, r3
 8005782:	f7fe ffa2 	bl	80046ca <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 8005786:	3401      	adds	r4, #1
 8005788:	9b02      	ldr	r3, [sp, #8]
 800578a:	e78f      	b.n	80056ac <mbedtls_mpi_exp_mod+0x388>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800578c:	f06f 0303 	mvn.w	r3, #3
 8005790:	e7a3      	b.n	80056da <mbedtls_mpi_exp_mod+0x3b6>

08005792 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8005792:	b5f0      	push	{r4, r5, r6, r7, lr}
    X->n = 0;
 8005794:	2300      	movs	r3, #0
    X->s = 1;
 8005796:	2601      	movs	r6, #1
{
 8005798:	b08b      	sub	sp, #44	; 0x2c
 800579a:	4607      	mov	r7, r0
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800579c:	a804      	add	r0, sp, #16
{
 800579e:	4615      	mov	r5, r2
    X->s = 1;
 80057a0:	9601      	str	r6, [sp, #4]
    X->n = 0;
 80057a2:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 80057a4:	9303      	str	r3, [sp, #12]
    X->s = 1;
 80057a6:	9604      	str	r6, [sp, #16]
    X->n = 0;
 80057a8:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 80057aa:	9306      	str	r3, [sp, #24]
    X->s = 1;
 80057ac:	9607      	str	r6, [sp, #28]
    X->n = 0;
 80057ae:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 80057b0:	9309      	str	r3, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 80057b2:	f7fe ffc6 	bl	8004742 <mbedtls_mpi_copy>
 80057b6:	4604      	mov	r4, r0
 80057b8:	2800      	cmp	r0, #0
 80057ba:	d157      	bne.n	800586c <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 80057bc:	4629      	mov	r1, r5
 80057be:	a807      	add	r0, sp, #28
 80057c0:	f7fe ffbf 	bl	8004742 <mbedtls_mpi_copy>
 80057c4:	4604      	mov	r4, r0
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d150      	bne.n	800586c <mbedtls_mpi_gcd+0xda>

    lz = mbedtls_mpi_lsb( &TA );
 80057ca:	a804      	add	r0, sp, #16
 80057cc:	f7ff f811 	bl	80047f2 <mbedtls_mpi_lsb>
 80057d0:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 80057d2:	a807      	add	r0, sp, #28
 80057d4:	f7ff f80d 	bl	80047f2 <mbedtls_mpi_lsb>
 80057d8:	4285      	cmp	r5, r0
 80057da:	bf28      	it	cs
 80057dc:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 80057de:	a804      	add	r0, sp, #16
 80057e0:	4629      	mov	r1, r5
 80057e2:	f7ff f8fe 	bl	80049e2 <mbedtls_mpi_shift_r>
 80057e6:	4604      	mov	r4, r0
 80057e8:	2800      	cmp	r0, #0
 80057ea:	d13f      	bne.n	800586c <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 80057ec:	4629      	mov	r1, r5
 80057ee:	a807      	add	r0, sp, #28
 80057f0:	f7ff f8f7 	bl	80049e2 <mbedtls_mpi_shift_r>
 80057f4:	4604      	mov	r4, r0
 80057f6:	2800      	cmp	r0, #0
 80057f8:	d138      	bne.n	800586c <mbedtls_mpi_gcd+0xda>

    TA.s = TB.s = 1;
 80057fa:	9607      	str	r6, [sp, #28]
 80057fc:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 80057fe:	2100      	movs	r1, #0
 8005800:	a804      	add	r0, sp, #16
 8005802:	f7ff fa0b 	bl	8004c1c <mbedtls_mpi_cmp_int>
 8005806:	b958      	cbnz	r0, 8005820 <mbedtls_mpi_gcd+0x8e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 8005808:	4629      	mov	r1, r5
 800580a:	a807      	add	r0, sp, #28
 800580c:	f7ff f89d 	bl	800494a <mbedtls_mpi_shift_l>
 8005810:	4604      	mov	r4, r0
 8005812:	bb58      	cbnz	r0, 800586c <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 8005814:	a907      	add	r1, sp, #28
 8005816:	4638      	mov	r0, r7
 8005818:	f7fe ff93 	bl	8004742 <mbedtls_mpi_copy>
 800581c:	4604      	mov	r4, r0
 800581e:	e025      	b.n	800586c <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 8005820:	a804      	add	r0, sp, #16
 8005822:	f7fe ffe6 	bl	80047f2 <mbedtls_mpi_lsb>
 8005826:	4601      	mov	r1, r0
 8005828:	a804      	add	r0, sp, #16
 800582a:	f7ff f8da 	bl	80049e2 <mbedtls_mpi_shift_r>
 800582e:	4604      	mov	r4, r0
 8005830:	b9e0      	cbnz	r0, 800586c <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 8005832:	a807      	add	r0, sp, #28
 8005834:	f7fe ffdd 	bl	80047f2 <mbedtls_mpi_lsb>
 8005838:	4601      	mov	r1, r0
 800583a:	a807      	add	r0, sp, #28
 800583c:	f7ff f8d1 	bl	80049e2 <mbedtls_mpi_shift_r>
 8005840:	4604      	mov	r4, r0
 8005842:	b998      	cbnz	r0, 800586c <mbedtls_mpi_gcd+0xda>
        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 8005844:	a907      	add	r1, sp, #28
 8005846:	a804      	add	r0, sp, #16
 8005848:	f7ff f9a2 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
 800584c:	2800      	cmp	r0, #0
 800584e:	db19      	blt.n	8005884 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 8005850:	a904      	add	r1, sp, #16
 8005852:	aa07      	add	r2, sp, #28
 8005854:	4608      	mov	r0, r1
 8005856:	f7ff fa52 	bl	8004cfe <mbedtls_mpi_sub_abs>
 800585a:	4604      	mov	r4, r0
 800585c:	b930      	cbnz	r0, 800586c <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 800585e:	2101      	movs	r1, #1
 8005860:	a804      	add	r0, sp, #16
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 8005862:	f7ff f8be 	bl	80049e2 <mbedtls_mpi_shift_r>
 8005866:	4604      	mov	r4, r0
 8005868:	2800      	cmp	r0, #0
 800586a:	d0c8      	beq.n	80057fe <mbedtls_mpi_gcd+0x6c>

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 800586c:	a801      	add	r0, sp, #4
 800586e:	f7fe ff2c 	bl	80046ca <mbedtls_mpi_free>
 8005872:	a804      	add	r0, sp, #16
 8005874:	f7fe ff29 	bl	80046ca <mbedtls_mpi_free>
 8005878:	a807      	add	r0, sp, #28
 800587a:	f7fe ff26 	bl	80046ca <mbedtls_mpi_free>

    return( ret );
}
 800587e:	4620      	mov	r0, r4
 8005880:	b00b      	add	sp, #44	; 0x2c
 8005882:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 8005884:	a907      	add	r1, sp, #28
 8005886:	aa04      	add	r2, sp, #16
 8005888:	4608      	mov	r0, r1
 800588a:	f7ff fa38 	bl	8004cfe <mbedtls_mpi_sub_abs>
 800588e:	4604      	mov	r4, r0
 8005890:	2800      	cmp	r0, #0
 8005892:	d1eb      	bne.n	800586c <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 8005894:	2101      	movs	r1, #1
 8005896:	a807      	add	r0, sp, #28
 8005898:	e7e3      	b.n	8005862 <mbedtls_mpi_gcd+0xd0>

0800589a <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800589a:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];
    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    if( size > MBEDTLS_MPI_MAX_SIZE )
 800589c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 80058a0:	b0c0      	sub	sp, #256	; 0x100
 80058a2:	4606      	mov	r6, r0
 80058a4:	460d      	mov	r5, r1
 80058a6:	4614      	mov	r4, r2
    if( size > MBEDTLS_MPI_MAX_SIZE )
 80058a8:	d813      	bhi.n	80058d2 <mbedtls_mpi_fill_random+0x38>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 80058aa:	460a      	mov	r2, r1
 80058ac:	4618      	mov	r0, r3
 80058ae:	4669      	mov	r1, sp
 80058b0:	47a0      	blx	r4
 80058b2:	4604      	mov	r4, r0
 80058b4:	b928      	cbnz	r0, 80058c2 <mbedtls_mpi_fill_random+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 80058b6:	462a      	mov	r2, r5
 80058b8:	4669      	mov	r1, sp
 80058ba:	4630      	mov	r0, r6
 80058bc:	f7fe ffd9 	bl	8004872 <mbedtls_mpi_read_binary>
 80058c0:	4604      	mov	r4, r0

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 80058c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058c6:	4668      	mov	r0, sp
 80058c8:	f002 fe2a 	bl	8008520 <mbedtls_platform_zeroize>
    return( ret );
}
 80058cc:	4620      	mov	r0, r4
 80058ce:	b040      	add	sp, #256	; 0x100
 80058d0:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80058d2:	f06f 0403 	mvn.w	r4, #3
 80058d6:	e7f9      	b.n	80058cc <mbedtls_mpi_fill_random+0x32>

080058d8 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 80058d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058dc:	4680      	mov	r8, r0
 80058de:	b09c      	sub	sp, #112	; 0x70
 80058e0:	460f      	mov	r7, r1
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 80058e2:	4610      	mov	r0, r2
 80058e4:	2101      	movs	r1, #1
{
 80058e6:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 80058e8:	f7ff f998 	bl	8004c1c <mbedtls_mpi_cmp_int>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	f340 8143 	ble.w	8005b78 <mbedtls_mpi_inv_mod+0x2a0>
    X->n = 0;
 80058f2:	2300      	movs	r3, #0
    X->s = 1;
 80058f4:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 80058f6:	4632      	mov	r2, r6
 80058f8:	4639      	mov	r1, r7
 80058fa:	a801      	add	r0, sp, #4
    X->s = 1;
 80058fc:	9504      	str	r5, [sp, #16]
    X->n = 0;
 80058fe:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 8005900:	9306      	str	r3, [sp, #24]
    X->s = 1;
 8005902:	9507      	str	r5, [sp, #28]
    X->n = 0;
 8005904:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 8005906:	9309      	str	r3, [sp, #36]	; 0x24
    X->s = 1;
 8005908:	950a      	str	r5, [sp, #40]	; 0x28
    X->n = 0;
 800590a:	930b      	str	r3, [sp, #44]	; 0x2c
    X->p = NULL;
 800590c:	930c      	str	r3, [sp, #48]	; 0x30
    X->s = 1;
 800590e:	950d      	str	r5, [sp, #52]	; 0x34
    X->n = 0;
 8005910:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
 8005912:	930f      	str	r3, [sp, #60]	; 0x3c
    X->s = 1;
 8005914:	9501      	str	r5, [sp, #4]
    X->n = 0;
 8005916:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 8005918:	9303      	str	r3, [sp, #12]
    X->s = 1;
 800591a:	9510      	str	r5, [sp, #64]	; 0x40
    X->n = 0;
 800591c:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
 800591e:	9312      	str	r3, [sp, #72]	; 0x48
    X->s = 1;
 8005920:	9513      	str	r5, [sp, #76]	; 0x4c
    X->n = 0;
 8005922:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
 8005924:	9315      	str	r3, [sp, #84]	; 0x54
    X->s = 1;
 8005926:	9516      	str	r5, [sp, #88]	; 0x58
    X->n = 0;
 8005928:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
 800592a:	9318      	str	r3, [sp, #96]	; 0x60
    X->s = 1;
 800592c:	9519      	str	r5, [sp, #100]	; 0x64
    X->n = 0;
 800592e:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
 8005930:	931b      	str	r3, [sp, #108]	; 0x6c
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 8005932:	f7ff ff2e 	bl	8005792 <mbedtls_mpi_gcd>
 8005936:	4604      	mov	r4, r0
 8005938:	2800      	cmp	r0, #0
 800593a:	d154      	bne.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 800593c:	4629      	mov	r1, r5
 800593e:	a801      	add	r0, sp, #4
 8005940:	f7ff f96c 	bl	8004c1c <mbedtls_mpi_cmp_int>
 8005944:	2800      	cmp	r0, #0
 8005946:	f040 8114 	bne.w	8005b72 <mbedtls_mpi_inv_mod+0x29a>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800594a:	4632      	mov	r2, r6
 800594c:	4639      	mov	r1, r7
 800594e:	a804      	add	r0, sp, #16
 8005950:	f7ff fcb6 	bl	80052c0 <mbedtls_mpi_mod_mpi>
 8005954:	4604      	mov	r4, r0
 8005956:	2800      	cmp	r0, #0
 8005958:	d145      	bne.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 800595a:	a904      	add	r1, sp, #16
 800595c:	a807      	add	r0, sp, #28
 800595e:	f7fe fef0 	bl	8004742 <mbedtls_mpi_copy>
 8005962:	4604      	mov	r4, r0
 8005964:	2800      	cmp	r0, #0
 8005966:	d13e      	bne.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 8005968:	4631      	mov	r1, r6
 800596a:	a810      	add	r0, sp, #64	; 0x40
 800596c:	f7fe fee9 	bl	8004742 <mbedtls_mpi_copy>
 8005970:	4604      	mov	r4, r0
 8005972:	2800      	cmp	r0, #0
 8005974:	d137      	bne.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 8005976:	4631      	mov	r1, r6
 8005978:	a813      	add	r0, sp, #76	; 0x4c
 800597a:	f7fe fee2 	bl	8004742 <mbedtls_mpi_copy>
 800597e:	4604      	mov	r4, r0
 8005980:	2800      	cmp	r0, #0
 8005982:	d130      	bne.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 8005984:	4629      	mov	r1, r5
 8005986:	a80a      	add	r0, sp, #40	; 0x28
 8005988:	f7fe ff07 	bl	800479a <mbedtls_mpi_lset>
 800598c:	4604      	mov	r4, r0
 800598e:	bb50      	cbnz	r0, 80059e6 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 8005990:	4601      	mov	r1, r0
 8005992:	a80d      	add	r0, sp, #52	; 0x34
 8005994:	f7fe ff01 	bl	800479a <mbedtls_mpi_lset>
 8005998:	4604      	mov	r4, r0
 800599a:	bb20      	cbnz	r0, 80059e6 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 800599c:	4601      	mov	r1, r0
 800599e:	a816      	add	r0, sp, #88	; 0x58
 80059a0:	f7fe fefb 	bl	800479a <mbedtls_mpi_lset>
 80059a4:	4604      	mov	r4, r0
 80059a6:	b9f0      	cbnz	r0, 80059e6 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 80059a8:	4629      	mov	r1, r5
 80059aa:	a819      	add	r0, sp, #100	; 0x64
 80059ac:	f7fe fef5 	bl	800479a <mbedtls_mpi_lset>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 80059b0:	4604      	mov	r4, r0
 80059b2:	b9c0      	cbnz	r0, 80059e6 <mbedtls_mpi_inv_mod+0x10e>
        while( ( TU.p[0] & 1 ) == 0 )
 80059b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	07d8      	lsls	r0, r3, #31
 80059ba:	d466      	bmi.n	8005a8a <mbedtls_mpi_inv_mod+0x1b2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 80059bc:	2101      	movs	r1, #1
 80059be:	a807      	add	r0, sp, #28
 80059c0:	f7ff f80f 	bl	80049e2 <mbedtls_mpi_shift_r>
 80059c4:	4604      	mov	r4, r0
 80059c6:	b970      	cbnz	r0, 80059e6 <mbedtls_mpi_inv_mod+0x10e>
            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 80059c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	07dd      	lsls	r5, r3, #31
 80059ce:	d429      	bmi.n	8005a24 <mbedtls_mpi_inv_mod+0x14c>
 80059d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	07dc      	lsls	r4, r3, #31
 80059d6:	d425      	bmi.n	8005a24 <mbedtls_mpi_inv_mod+0x14c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 80059d8:	2101      	movs	r1, #1
 80059da:	a80a      	add	r0, sp, #40	; 0x28
 80059dc:	f7ff f801 	bl	80049e2 <mbedtls_mpi_shift_r>
 80059e0:	4604      	mov	r4, r0
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d02f      	beq.n	8005a46 <mbedtls_mpi_inv_mod+0x16e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 80059e6:	a804      	add	r0, sp, #16
 80059e8:	f7fe fe6f 	bl	80046ca <mbedtls_mpi_free>
 80059ec:	a807      	add	r0, sp, #28
 80059ee:	f7fe fe6c 	bl	80046ca <mbedtls_mpi_free>
 80059f2:	a80a      	add	r0, sp, #40	; 0x28
 80059f4:	f7fe fe69 	bl	80046ca <mbedtls_mpi_free>
 80059f8:	a80d      	add	r0, sp, #52	; 0x34
 80059fa:	f7fe fe66 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 80059fe:	a801      	add	r0, sp, #4
 8005a00:	f7fe fe63 	bl	80046ca <mbedtls_mpi_free>
 8005a04:	a810      	add	r0, sp, #64	; 0x40
 8005a06:	f7fe fe60 	bl	80046ca <mbedtls_mpi_free>
 8005a0a:	a813      	add	r0, sp, #76	; 0x4c
 8005a0c:	f7fe fe5d 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 8005a10:	a816      	add	r0, sp, #88	; 0x58
 8005a12:	f7fe fe5a 	bl	80046ca <mbedtls_mpi_free>
 8005a16:	a819      	add	r0, sp, #100	; 0x64
 8005a18:	f7fe fe57 	bl	80046ca <mbedtls_mpi_free>

    return( ret );
}
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	b01c      	add	sp, #112	; 0x70
 8005a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 8005a24:	a90a      	add	r1, sp, #40	; 0x28
 8005a26:	aa10      	add	r2, sp, #64	; 0x40
 8005a28:	4608      	mov	r0, r1
 8005a2a:	f7ff f9a8 	bl	8004d7e <mbedtls_mpi_add_mpi>
 8005a2e:	4604      	mov	r4, r0
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d1d8      	bne.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 8005a34:	a90d      	add	r1, sp, #52	; 0x34
 8005a36:	aa04      	add	r2, sp, #16
 8005a38:	4608      	mov	r0, r1
 8005a3a:	f7ff f9c2 	bl	8004dc2 <mbedtls_mpi_sub_mpi>
 8005a3e:	4604      	mov	r4, r0
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d0c9      	beq.n	80059d8 <mbedtls_mpi_inv_mod+0x100>
 8005a44:	e7cf      	b.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 8005a46:	2101      	movs	r1, #1
 8005a48:	a80d      	add	r0, sp, #52	; 0x34
 8005a4a:	f7fe ffca 	bl	80049e2 <mbedtls_mpi_shift_r>
 8005a4e:	e7af      	b.n	80059b0 <mbedtls_mpi_inv_mod+0xd8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 8005a50:	2101      	movs	r1, #1
 8005a52:	a813      	add	r0, sp, #76	; 0x4c
 8005a54:	f7fe ffc5 	bl	80049e2 <mbedtls_mpi_shift_r>
 8005a58:	4604      	mov	r4, r0
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d1c3      	bne.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>
            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 8005a5e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	07d9      	lsls	r1, r3, #31
 8005a64:	d44c      	bmi.n	8005b00 <mbedtls_mpi_inv_mod+0x228>
 8005a66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	07da      	lsls	r2, r3, #31
 8005a6c:	d448      	bmi.n	8005b00 <mbedtls_mpi_inv_mod+0x228>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 8005a6e:	2101      	movs	r1, #1
 8005a70:	a816      	add	r0, sp, #88	; 0x58
 8005a72:	f7fe ffb6 	bl	80049e2 <mbedtls_mpi_shift_r>
 8005a76:	4604      	mov	r4, r0
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d1b4      	bne.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	a819      	add	r0, sp, #100	; 0x64
 8005a80:	f7fe ffaf 	bl	80049e2 <mbedtls_mpi_shift_r>
 8005a84:	4604      	mov	r4, r0
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d1ad      	bne.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>
        while( ( TV.p[0] & 1 ) == 0 )
 8005a8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	07db      	lsls	r3, r3, #31
 8005a90:	d5de      	bpl.n	8005a50 <mbedtls_mpi_inv_mod+0x178>
        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 8005a92:	a913      	add	r1, sp, #76	; 0x4c
 8005a94:	a807      	add	r0, sp, #28
 8005a96:	f7ff f87b 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	db42      	blt.n	8005b24 <mbedtls_mpi_inv_mod+0x24c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 8005a9e:	a907      	add	r1, sp, #28
 8005aa0:	aa13      	add	r2, sp, #76	; 0x4c
 8005aa2:	4608      	mov	r0, r1
 8005aa4:	f7ff f98d 	bl	8004dc2 <mbedtls_mpi_sub_mpi>
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	d19b      	bne.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 8005aae:	a90a      	add	r1, sp, #40	; 0x28
 8005ab0:	aa16      	add	r2, sp, #88	; 0x58
 8005ab2:	4608      	mov	r0, r1
 8005ab4:	f7ff f985 	bl	8004dc2 <mbedtls_mpi_sub_mpi>
 8005ab8:	4604      	mov	r4, r0
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d193      	bne.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 8005abe:	aa19      	add	r2, sp, #100	; 0x64
 8005ac0:	a90d      	add	r1, sp, #52	; 0x34
 8005ac2:	4608      	mov	r0, r1
 8005ac4:	f7ff f97d 	bl	8004dc2 <mbedtls_mpi_sub_mpi>
 8005ac8:	4604      	mov	r4, r0
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d18b      	bne.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 8005ace:	2100      	movs	r1, #0
 8005ad0:	a807      	add	r0, sp, #28
 8005ad2:	f7ff f8a3 	bl	8004c1c <mbedtls_mpi_cmp_int>
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	f47f af6c 	bne.w	80059b4 <mbedtls_mpi_inv_mod+0xdc>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 8005adc:	2100      	movs	r1, #0
 8005ade:	a816      	add	r0, sp, #88	; 0x58
 8005ae0:	f7ff f89c 	bl	8004c1c <mbedtls_mpi_cmp_int>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	db32      	blt.n	8005b4e <mbedtls_mpi_inv_mod+0x276>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 8005ae8:	4631      	mov	r1, r6
 8005aea:	a816      	add	r0, sp, #88	; 0x58
 8005aec:	f7ff f850 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	da35      	bge.n	8005b60 <mbedtls_mpi_inv_mod+0x288>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 8005af4:	a916      	add	r1, sp, #88	; 0x58
 8005af6:	4640      	mov	r0, r8
 8005af8:	f7fe fe23 	bl	8004742 <mbedtls_mpi_copy>
 8005afc:	4604      	mov	r4, r0
 8005afe:	e772      	b.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 8005b00:	a916      	add	r1, sp, #88	; 0x58
 8005b02:	aa10      	add	r2, sp, #64	; 0x40
 8005b04:	4608      	mov	r0, r1
 8005b06:	f7ff f93a 	bl	8004d7e <mbedtls_mpi_add_mpi>
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	f47f af6a 	bne.w	80059e6 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 8005b12:	a919      	add	r1, sp, #100	; 0x64
 8005b14:	aa04      	add	r2, sp, #16
 8005b16:	4608      	mov	r0, r1
 8005b18:	f7ff f953 	bl	8004dc2 <mbedtls_mpi_sub_mpi>
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d0a5      	beq.n	8005a6e <mbedtls_mpi_inv_mod+0x196>
 8005b22:	e760      	b.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 8005b24:	a913      	add	r1, sp, #76	; 0x4c
 8005b26:	aa07      	add	r2, sp, #28
 8005b28:	4608      	mov	r0, r1
 8005b2a:	f7ff f94a 	bl	8004dc2 <mbedtls_mpi_sub_mpi>
 8005b2e:	4604      	mov	r4, r0
 8005b30:	2800      	cmp	r0, #0
 8005b32:	f47f af58 	bne.w	80059e6 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 8005b36:	a916      	add	r1, sp, #88	; 0x58
 8005b38:	aa0a      	add	r2, sp, #40	; 0x28
 8005b3a:	4608      	mov	r0, r1
 8005b3c:	f7ff f941 	bl	8004dc2 <mbedtls_mpi_sub_mpi>
 8005b40:	4604      	mov	r4, r0
 8005b42:	2800      	cmp	r0, #0
 8005b44:	f47f af4f 	bne.w	80059e6 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 8005b48:	aa0d      	add	r2, sp, #52	; 0x34
 8005b4a:	a919      	add	r1, sp, #100	; 0x64
 8005b4c:	e7b9      	b.n	8005ac2 <mbedtls_mpi_inv_mod+0x1ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 8005b4e:	a916      	add	r1, sp, #88	; 0x58
 8005b50:	4632      	mov	r2, r6
 8005b52:	4608      	mov	r0, r1
 8005b54:	f7ff f913 	bl	8004d7e <mbedtls_mpi_add_mpi>
 8005b58:	4604      	mov	r4, r0
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d0be      	beq.n	8005adc <mbedtls_mpi_inv_mod+0x204>
 8005b5e:	e742      	b.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 8005b60:	a916      	add	r1, sp, #88	; 0x58
 8005b62:	4632      	mov	r2, r6
 8005b64:	4608      	mov	r0, r1
 8005b66:	f7ff f92c 	bl	8004dc2 <mbedtls_mpi_sub_mpi>
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d0bb      	beq.n	8005ae8 <mbedtls_mpi_inv_mod+0x210>
 8005b70:	e739      	b.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 8005b72:	f06f 040d 	mvn.w	r4, #13
 8005b76:	e736      	b.n	80059e6 <mbedtls_mpi_inv_mod+0x10e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8005b78:	f06f 0403 	mvn.w	r4, #3
 8005b7c:	e74e      	b.n	8005a1c <mbedtls_mpi_inv_mod+0x144>
	...

08005b80 <get_no_padding>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 8005b80:	b118      	cbz	r0, 8005b8a <get_no_padding+0xa>
 8005b82:	b112      	cbz	r2, 8005b8a <get_no_padding+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;
 8005b84:	6011      	str	r1, [r2, #0]

    return( 0 );
 8005b86:	2000      	movs	r0, #0
 8005b88:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8005b8a:	4801      	ldr	r0, [pc, #4]	; (8005b90 <get_no_padding+0x10>)
}
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	ffff9f00 	.word	0xffff9f00

08005b94 <mbedtls_cipher_info_from_type>:
{
 8005b94:	4b05      	ldr	r3, [pc, #20]	; (8005bac <mbedtls_cipher_info_from_type+0x18>)
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8005b96:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8005b9a:	b122      	cbz	r2, 8005ba6 <mbedtls_cipher_info_from_type+0x12>
 8005b9c:	3308      	adds	r3, #8
        if( def->type == cipher_type )
 8005b9e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8005ba2:	4281      	cmp	r1, r0
 8005ba4:	d1f7      	bne.n	8005b96 <mbedtls_cipher_info_from_type+0x2>
}
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	08013bf4 	.word	0x08013bf4

08005bb0 <mbedtls_cipher_info_from_values>:
{
 8005bb0:	b530      	push	{r4, r5, lr}
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8005bb2:	4c08      	ldr	r4, [pc, #32]	; (8005bd4 <mbedtls_cipher_info_from_values+0x24>)
 8005bb4:	6863      	ldr	r3, [r4, #4]
 8005bb6:	b90b      	cbnz	r3, 8005bbc <mbedtls_cipher_info_from_values+0xc>
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	bd30      	pop	{r4, r5, pc}
        if( def->info->base->cipher == cipher_id &&
 8005bbc:	699d      	ldr	r5, [r3, #24]
 8005bbe:	782d      	ldrb	r5, [r5, #0]
 8005bc0:	4285      	cmp	r5, r0
 8005bc2:	d105      	bne.n	8005bd0 <mbedtls_cipher_info_from_values+0x20>
 8005bc4:	685d      	ldr	r5, [r3, #4]
 8005bc6:	428d      	cmp	r5, r1
 8005bc8:	d102      	bne.n	8005bd0 <mbedtls_cipher_info_from_values+0x20>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 8005bca:	785d      	ldrb	r5, [r3, #1]
 8005bcc:	4295      	cmp	r5, r2
 8005bce:	d0f3      	beq.n	8005bb8 <mbedtls_cipher_info_from_values+0x8>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8005bd0:	3408      	adds	r4, #8
 8005bd2:	e7ef      	b.n	8005bb4 <mbedtls_cipher_info_from_values+0x4>
 8005bd4:	08013bec 	.word	0x08013bec

08005bd8 <mbedtls_cipher_init>:
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8005bd8:	2240      	movs	r2, #64	; 0x40
 8005bda:	2100      	movs	r1, #0
 8005bdc:	f00c b914 	b.w	8011e08 <memset>

08005be0 <mbedtls_cipher_free>:
{
 8005be0:	b510      	push	{r4, lr}
    if( ctx == NULL )
 8005be2:	4604      	mov	r4, r0
 8005be4:	b158      	cbz	r0, 8005bfe <mbedtls_cipher_free+0x1e>
    if( ctx->cipher_ctx )
 8005be6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8005be8:	b118      	cbz	r0, 8005bf2 <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	4798      	blx	r3
    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 8005bf2:	4620      	mov	r0, r4
}
 8005bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 8005bf8:	2140      	movs	r1, #64	; 0x40
 8005bfa:	f002 bc91 	b.w	8008520 <mbedtls_platform_zeroize>
 8005bfe:	bd10      	pop	{r4, pc}

08005c00 <mbedtls_cipher_setkey>:
{
 8005c00:	b430      	push	{r4, r5}
    if( ctx->cipher_info == NULL )
 8005c02:	6804      	ldr	r4, [r0, #0]
 8005c04:	b1b4      	cbz	r4, 8005c34 <mbedtls_cipher_setkey+0x34>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 8005c06:	6925      	ldr	r5, [r4, #16]
 8005c08:	07ad      	lsls	r5, r5, #30
 8005c0a:	d402      	bmi.n	8005c12 <mbedtls_cipher_setkey+0x12>
 8005c0c:	6865      	ldr	r5, [r4, #4]
 8005c0e:	4295      	cmp	r5, r2
 8005c10:	d110      	bne.n	8005c34 <mbedtls_cipher_setkey+0x34>
    if( MBEDTLS_ENCRYPT == operation ||
 8005c12:	2b01      	cmp	r3, #1
    ctx->key_bitlen = key_bitlen;
 8005c14:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 8005c16:	7203      	strb	r3, [r0, #8]
    if( MBEDTLS_ENCRYPT == operation ||
 8005c18:	d003      	beq.n	8005c22 <mbedtls_cipher_setkey+0x22>
 8005c1a:	7865      	ldrb	r5, [r4, #1]
 8005c1c:	3d03      	subs	r5, #3
 8005c1e:	2d02      	cmp	r5, #2
 8005c20:	d804      	bhi.n	8005c2c <mbedtls_cipher_setkey+0x2c>
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8005c22:	69a3      	ldr	r3, [r4, #24]
 8005c24:	68db      	ldr	r3, [r3, #12]
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8005c26:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8005c28:	bc30      	pop	{r4, r5}
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8005c2a:	4718      	bx	r3
    if( MBEDTLS_DECRYPT == operation )
 8005c2c:	b913      	cbnz	r3, 8005c34 <mbedtls_cipher_setkey+0x34>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8005c2e:	69a3      	ldr	r3, [r4, #24]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	e7f8      	b.n	8005c26 <mbedtls_cipher_setkey+0x26>
}
 8005c34:	4801      	ldr	r0, [pc, #4]	; (8005c3c <mbedtls_cipher_setkey+0x3c>)
 8005c36:	bc30      	pop	{r4, r5}
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	ffff9f00 	.word	0xffff9f00

08005c40 <mbedtls_cipher_set_iv>:
{
 8005c40:	b538      	push	{r3, r4, r5, lr}
    if( ctx->cipher_info == NULL )
 8005c42:	6803      	ldr	r3, [r0, #0]
{
 8005c44:	4605      	mov	r5, r0
 8005c46:	4614      	mov	r4, r2
    if( ctx->cipher_info == NULL )
 8005c48:	b19b      	cbz	r3, 8005c72 <mbedtls_cipher_set_iv+0x32>
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 8005c4a:	2a10      	cmp	r2, #16
 8005c4c:	d80f      	bhi.n	8005c6e <mbedtls_cipher_set_iv+0x2e>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	07d2      	lsls	r2, r2, #31
 8005c52:	d403      	bmi.n	8005c5c <mbedtls_cipher_set_iv+0x1c>
        actual_iv_size = ctx->cipher_info->iv_size;
 8005c54:	68db      	ldr	r3, [r3, #12]
        if( actual_iv_size > iv_len )
 8005c56:	429c      	cmp	r4, r3
 8005c58:	d30b      	bcc.n	8005c72 <mbedtls_cipher_set_iv+0x32>
 8005c5a:	461c      	mov	r4, r3
    if ( actual_iv_size != 0 )
 8005c5c:	b12c      	cbz	r4, 8005c6a <mbedtls_cipher_set_iv+0x2a>
        memcpy( ctx->iv, iv, actual_iv_size );
 8005c5e:	4622      	mov	r2, r4
 8005c60:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005c64:	f00c f8ab 	bl	8011dbe <memcpy>
        ctx->iv_size = actual_iv_size;
 8005c68:	63ac      	str	r4, [r5, #56]	; 0x38
    return( 0 );
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8005c6e:	4802      	ldr	r0, [pc, #8]	; (8005c78 <mbedtls_cipher_set_iv+0x38>)
 8005c70:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8005c72:	4802      	ldr	r0, [pc, #8]	; (8005c7c <mbedtls_cipher_set_iv+0x3c>)
 8005c74:	bd38      	pop	{r3, r4, r5, pc}
 8005c76:	bf00      	nop
 8005c78:	ffff9f80 	.word	0xffff9f80
 8005c7c:	ffff9f00 	.word	0xffff9f00

08005c80 <mbedtls_cipher_update>:
{
 8005c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c84:	4615      	mov	r5, r2
    if( ctx->cipher_info == NULL )
 8005c86:	6802      	ldr	r2, [r0, #0]
{
 8005c88:	4604      	mov	r4, r0
 8005c8a:	460f      	mov	r7, r1
 8005c8c:	4699      	mov	r9, r3
 8005c8e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    if( ctx->cipher_info == NULL )
 8005c92:	b91a      	cbnz	r2, 8005c9c <mbedtls_cipher_update+0x1c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8005c94:	4855      	ldr	r0, [pc, #340]	; (8005dec <mbedtls_cipher_update+0x16c>)
}
 8005c96:	b003      	add	sp, #12
 8005c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *olen = 0;
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	f8c8 1000 	str.w	r1, [r8]
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8005ca2:	7851      	ldrb	r1, [r2, #1]
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;

    return ctx->cipher_info->block_size;
 8005ca4:	6956      	ldr	r6, [r2, #20]
 8005ca6:	2901      	cmp	r1, #1
 8005ca8:	d10f      	bne.n	8005cca <mbedtls_cipher_update+0x4a>
        if( ilen != block_size )
 8005caa:	42b5      	cmp	r5, r6
 8005cac:	f040 8097 	bne.w	8005dde <mbedtls_cipher_update+0x15e>
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8005cb0:	6992      	ldr	r2, [r2, #24]
        *olen = ilen;
 8005cb2:	f8c8 5000 	str.w	r5, [r8]
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8005cb6:	6855      	ldr	r5, [r2, #4]
 8005cb8:	463a      	mov	r2, r7
 8005cba:	46ac      	mov	ip, r5
 8005cbc:	f990 1008 	ldrsb.w	r1, [r0, #8]
 8005cc0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8005cc2:	b003      	add	sp, #12
 8005cc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8005cc8:	4760      	bx	ip
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 8005cca:	2906      	cmp	r1, #6
 8005ccc:	d109      	bne.n	8005ce2 <mbedtls_cipher_update+0x62>
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 8005cce:	463a      	mov	r2, r7
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
        *olen = ilen;
 8005cd4:	f8c8 5000 	str.w	r5, [r8]
}
 8005cd8:	b003      	add	sp, #12
 8005cda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 8005cde:	f001 bd37 	b.w	8007750 <mbedtls_gcm_update>
    if ( 0 == block_size )
 8005ce2:	2e00      	cmp	r6, #0
 8005ce4:	d07d      	beq.n	8005de2 <mbedtls_cipher_update+0x162>
    if( input == output &&
 8005ce6:	429f      	cmp	r7, r3
 8005ce8:	d108      	bne.n	8005cfc <mbedtls_cipher_update+0x7c>
 8005cea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1d1      	bne.n	8005c94 <mbedtls_cipher_update+0x14>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 8005cf0:	fbb5 f3f6 	udiv	r3, r5, r6
 8005cf4:	fb06 5313 	mls	r3, r6, r3, r5
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1cb      	bne.n	8005c94 <mbedtls_cipher_update+0x14>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 8005cfc:	2902      	cmp	r1, #2
 8005cfe:	d172      	bne.n	8005de6 <mbedtls_cipher_update+0x166>
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8005d00:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8005d04:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d06:	b97b      	cbnz	r3, 8005d28 <mbedtls_cipher_update+0xa8>
 8005d08:	68e3      	ldr	r3, [r4, #12]
 8005d0a:	b17b      	cbz	r3, 8005d2c <mbedtls_cipher_update+0xac>
                ilen <= block_size - ctx->unprocessed_len ) ||
 8005d0c:	1a33      	subs	r3, r6, r0
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8005d0e:	429d      	cmp	r5, r3
 8005d10:	d80f      	bhi.n	8005d32 <mbedtls_cipher_update+0xb2>
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 8005d12:	3014      	adds	r0, #20
 8005d14:	462a      	mov	r2, r5
 8005d16:	4639      	mov	r1, r7
 8005d18:	4420      	add	r0, r4
 8005d1a:	f00c f850 	bl	8011dbe <memcpy>
            ctx->unprocessed_len += ilen;
 8005d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d20:	441d      	add	r5, r3
 8005d22:	6265      	str	r5, [r4, #36]	; 0x24
        return( 0 );
 8005d24:	2000      	movs	r0, #0
 8005d26:	e7b6      	b.n	8005c96 <mbedtls_cipher_update+0x16>
                ilen < block_size - ctx->unprocessed_len ) ||
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d102      	bne.n	8005d32 <mbedtls_cipher_update+0xb2>
                ilen < block_size - ctx->unprocessed_len ) )
 8005d2c:	1a33      	subs	r3, r6, r0
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 8005d2e:	429d      	cmp	r5, r3
 8005d30:	d3ef      	bcc.n	8005d12 <mbedtls_cipher_update+0x92>
        if( 0 != ctx->unprocessed_len )
 8005d32:	b310      	cbz	r0, 8005d7a <mbedtls_cipher_update+0xfa>
            copy_len = block_size - ctx->unprocessed_len;
 8005d34:	eba6 0a00 	sub.w	sl, r6, r0
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 8005d38:	3014      	adds	r0, #20
 8005d3a:	4652      	mov	r2, sl
 8005d3c:	4639      	mov	r1, r7
 8005d3e:	4420      	add	r0, r4
 8005d40:	f00c f83d 	bl	8011dbe <memcpy>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8005d44:	4623      	mov	r3, r4
 8005d46:	f853 2b14 	ldr.w	r2, [r3], #20
 8005d4a:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8005d4e:	6992      	ldr	r2, [r2, #24]
 8005d50:	e88d 0208 	stmia.w	sp, {r3, r9}
 8005d54:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005d56:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8005d5a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8005d5e:	4632      	mov	r2, r6
 8005d60:	47d8      	blx	fp
 8005d62:	2800      	cmp	r0, #0
 8005d64:	d197      	bne.n	8005c96 <mbedtls_cipher_update+0x16>
            *olen += block_size;
 8005d66:	f8d8 3000 	ldr.w	r3, [r8]
            output += block_size;
 8005d6a:	44b1      	add	r9, r6
            *olen += block_size;
 8005d6c:	4433      	add	r3, r6
 8005d6e:	f8c8 3000 	str.w	r3, [r8]
            input += copy_len;
 8005d72:	4457      	add	r7, sl
            ctx->unprocessed_len = 0;
 8005d74:	6260      	str	r0, [r4, #36]	; 0x24
            ilen -= copy_len;
 8005d76:	eba5 050a 	sub.w	r5, r5, sl
        if( 0 != ilen )
 8005d7a:	2d00      	cmp	r5, #0
 8005d7c:	d0d2      	beq.n	8005d24 <mbedtls_cipher_update+0xa4>
            copy_len = ilen % block_size;
 8005d7e:	fbb5 faf6 	udiv	sl, r5, r6
 8005d82:	fb06 5a1a 	mls	sl, r6, sl, r5
            if( copy_len == 0 &&
 8005d86:	f1ba 0f00 	cmp.w	sl, #0
 8005d8a:	d106      	bne.n	8005d9a <mbedtls_cipher_update+0x11a>
 8005d8c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8005d90:	b91b      	cbnz	r3, 8005d9a <mbedtls_cipher_update+0x11a>
                ctx->operation == MBEDTLS_DECRYPT &&
 8005d92:	68e3      	ldr	r3, [r4, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	bf18      	it	ne
 8005d98:	46b2      	movne	sl, r6
            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 8005d9a:	eba5 050a 	sub.w	r5, r5, sl
 8005d9e:	4652      	mov	r2, sl
 8005da0:	1979      	adds	r1, r7, r5
 8005da2:	f104 0014 	add.w	r0, r4, #20
 8005da6:	f00c f80a 	bl	8011dbe <memcpy>
            ctx->unprocessed_len += copy_len;
 8005daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dac:	4453      	add	r3, sl
 8005dae:	6263      	str	r3, [r4, #36]	; 0x24
        if( ilen )
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	d0b7      	beq.n	8005d24 <mbedtls_cipher_update+0xa4>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	e88d 0280 	stmia.w	sp, {r7, r9}
 8005dc0:	462a      	mov	r2, r5
 8005dc2:	689e      	ldr	r6, [r3, #8]
 8005dc4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005dc6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8005dca:	47b0      	blx	r6
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	f47f af62 	bne.w	8005c96 <mbedtls_cipher_update+0x16>
            *olen += ilen;
 8005dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8005dd6:	441d      	add	r5, r3
 8005dd8:	f8c8 5000 	str.w	r5, [r8]
 8005ddc:	e75b      	b.n	8005c96 <mbedtls_cipher_update+0x16>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8005dde:	4804      	ldr	r0, [pc, #16]	; (8005df0 <mbedtls_cipher_update+0x170>)
 8005de0:	e759      	b.n	8005c96 <mbedtls_cipher_update+0x16>
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 8005de2:	4804      	ldr	r0, [pc, #16]	; (8005df4 <mbedtls_cipher_update+0x174>)
 8005de4:	e757      	b.n	8005c96 <mbedtls_cipher_update+0x16>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8005de6:	4804      	ldr	r0, [pc, #16]	; (8005df8 <mbedtls_cipher_update+0x178>)
 8005de8:	e755      	b.n	8005c96 <mbedtls_cipher_update+0x16>
 8005dea:	bf00      	nop
 8005dec:	ffff9f00 	.word	0xffff9f00
 8005df0:	ffff9d80 	.word	0xffff9d80
 8005df4:	ffff9c80 	.word	0xffff9c80
 8005df8:	ffff9f80 	.word	0xffff9f80

08005dfc <mbedtls_cipher_finish>:
                   unsigned char *output, size_t *olen )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 8005dfc:	6803      	ldr	r3, [r0, #0]
{
 8005dfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e00:	4604      	mov	r4, r0
 8005e02:	460e      	mov	r6, r1
 8005e04:	4615      	mov	r5, r2
    if( ctx->cipher_info == NULL )
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d052      	beq.n	8005eb0 <mbedtls_cipher_finish+0xb4>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	6010      	str	r0, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8005e0e:	785a      	ldrb	r2, [r3, #1]
 8005e10:	1ed1      	subs	r1, r2, #3
 8005e12:	2904      	cmp	r1, #4
 8005e14:	d90c      	bls.n	8005e30 <mbedtls_cipher_finish+0x34>
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||
        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||
 8005e16:	2a09      	cmp	r2, #9
 8005e18:	d00a      	beq.n	8005e30 <mbedtls_cipher_finish+0x34>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if ( ( MBEDTLS_CIPHER_CHACHA20          == ctx->cipher_info->type ) ||
 8005e1a:	7819      	ldrb	r1, [r3, #0]
 8005e1c:	3948      	subs	r1, #72	; 0x48
 8005e1e:	2901      	cmp	r1, #1
 8005e20:	d906      	bls.n	8005e30 <mbedtls_cipher_finish+0x34>
         ( MBEDTLS_CIPHER_CHACHA20_POLY1305 == ctx->cipher_info->type ) )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 8005e22:	2a01      	cmp	r2, #1
 8005e24:	d106      	bne.n	8005e34 <mbedtls_cipher_finish+0x38>
    {
        if( ctx->unprocessed_len != 0 )
 8005e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
                return( 0 );

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8005e28:	4824      	ldr	r0, [pc, #144]	; (8005ebc <mbedtls_cipher_finish+0xc0>)
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	bf08      	it	eq
 8005e2e:	2000      	moveq	r0, #0
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8005e30:	b003      	add	sp, #12
 8005e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 8005e34:	2a02      	cmp	r2, #2
 8005e36:	d13d      	bne.n	8005eb4 <mbedtls_cipher_finish+0xb8>
        if( MBEDTLS_ENCRYPT == ctx->operation )
 8005e38:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8005e3c:	2a01      	cmp	r2, #1
 8005e3e:	d126      	bne.n	8005e8e <mbedtls_cipher_finish+0x92>
            if( NULL == ctx->add_padding )
 8005e40:	68e7      	ldr	r7, [r4, #12]
 8005e42:	2f00      	cmp	r7, #0
 8005e44:	d0ef      	beq.n	8005e26 <mbedtls_cipher_finish+0x2a>
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;

    if( ctx->iv_size != 0 )
 8005e46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 8005e48:	f104 0014 	add.w	r0, r4, #20
 8005e4c:	b901      	cbnz	r1, 8005e50 <mbedtls_cipher_finish+0x54>
        return (int) ctx->iv_size;

    return (int) ctx->cipher_info->iv_size;
 8005e4e:	68d9      	ldr	r1, [r3, #12]
 8005e50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005e52:	47b8      	blx	r7
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8005e54:	4623      	mov	r3, r4
 8005e56:	f853 2b28 	ldr.w	r2, [r3], #40
                ctx->unprocessed_data, output ) ) )
 8005e5a:	f104 0714 	add.w	r7, r4, #20
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8005e5e:	6990      	ldr	r0, [r2, #24]
 8005e60:	9601      	str	r6, [sp, #4]
 8005e62:	9700      	str	r7, [sp, #0]
 8005e64:	6887      	ldr	r7, [r0, #8]
 8005e66:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8005e6a:	6952      	ldr	r2, [r2, #20]
 8005e6c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005e6e:	47b8      	blx	r7
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d1dd      	bne.n	8005e30 <mbedtls_cipher_finish+0x34>
        if( MBEDTLS_DECRYPT == ctx->operation )
 8005e74:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8005e78:	6821      	ldr	r1, [r4, #0]
 8005e7a:	b99b      	cbnz	r3, 8005ea4 <mbedtls_cipher_finish+0xa8>
            return( ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8005e7c:	6923      	ldr	r3, [r4, #16]
    if( ctx->cipher_info == NULL )
 8005e7e:	b101      	cbz	r1, 8005e82 <mbedtls_cipher_finish+0x86>
    return ctx->cipher_info->block_size;
 8005e80:	6949      	ldr	r1, [r1, #20]
 8005e82:	462a      	mov	r2, r5
 8005e84:	4630      	mov	r0, r6
}
 8005e86:	b003      	add	sp, #12
 8005e88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return( ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8005e8c:	4718      	bx	r3
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 8005e8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d0de      	beq.n	8005e54 <mbedtls_cipher_finish+0x58>
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 8005e96:	68e3      	ldr	r3, [r4, #12]
 8005e98:	b973      	cbnz	r3, 8005eb8 <mbedtls_cipher_finish+0xbc>
        return( 0 );
 8005e9a:	2a00      	cmp	r2, #0
 8005e9c:	4807      	ldr	r0, [pc, #28]	; (8005ebc <mbedtls_cipher_finish+0xc0>)
 8005e9e:	bf08      	it	eq
 8005ea0:	2000      	moveq	r0, #0
 8005ea2:	e7c5      	b.n	8005e30 <mbedtls_cipher_finish+0x34>
    if( ctx->cipher_info == NULL )
 8005ea4:	b111      	cbz	r1, 8005eac <mbedtls_cipher_finish+0xb0>
    return ctx->cipher_info->block_size;
 8005ea6:	694b      	ldr	r3, [r1, #20]
        *olen = mbedtls_cipher_get_block_size( ctx );
 8005ea8:	602b      	str	r3, [r5, #0]
        return( 0 );
 8005eaa:	e7c1      	b.n	8005e30 <mbedtls_cipher_finish+0x34>
        return 0;
 8005eac:	4603      	mov	r3, r0
 8005eae:	e7fb      	b.n	8005ea8 <mbedtls_cipher_finish+0xac>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8005eb0:	4803      	ldr	r0, [pc, #12]	; (8005ec0 <mbedtls_cipher_finish+0xc4>)
 8005eb2:	e7bd      	b.n	8005e30 <mbedtls_cipher_finish+0x34>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8005eb4:	4803      	ldr	r0, [pc, #12]	; (8005ec4 <mbedtls_cipher_finish+0xc8>)
 8005eb6:	e7bb      	b.n	8005e30 <mbedtls_cipher_finish+0x34>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8005eb8:	4800      	ldr	r0, [pc, #0]	; (8005ebc <mbedtls_cipher_finish+0xc0>)
 8005eba:	e7b9      	b.n	8005e30 <mbedtls_cipher_finish+0x34>
 8005ebc:	ffff9d80 	.word	0xffff9d80
 8005ec0:	ffff9f00 	.word	0xffff9f00
 8005ec4:	ffff9f80 	.word	0xffff9f80

08005ec8 <mbedtls_cipher_set_padding_mode>:
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx,
                                     mbedtls_cipher_padding_t mode )
{
    CIPHER_VALIDATE_RET( ctx != NULL );

    if( NULL == ctx->cipher_info || MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 8005ec8:	6803      	ldr	r3, [r0, #0]
 8005eca:	b153      	cbz	r3, 8005ee2 <mbedtls_cipher_set_padding_mode+0x1a>
 8005ecc:	785b      	ldrb	r3, [r3, #1]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d107      	bne.n	8005ee2 <mbedtls_cipher_set_padding_mode+0x1a>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    switch( mode )
 8005ed2:	2904      	cmp	r1, #4
 8005ed4:	d107      	bne.n	8005ee6 <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = add_zeros_padding;
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 8005ed6:	2300      	movs	r3, #0
        ctx->get_padding = get_no_padding;
 8005ed8:	4a04      	ldr	r2, [pc, #16]	; (8005eec <mbedtls_cipher_set_padding_mode+0x24>)
        ctx->add_padding = NULL;
 8005eda:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_no_padding;
 8005edc:	6102      	str	r2, [r0, #16]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 8005ede:	4618      	mov	r0, r3
 8005ee0:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8005ee2:	4803      	ldr	r0, [pc, #12]	; (8005ef0 <mbedtls_cipher_set_padding_mode+0x28>)
 8005ee4:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8005ee6:	4803      	ldr	r0, [pc, #12]	; (8005ef4 <mbedtls_cipher_set_padding_mode+0x2c>)
}
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	08005b81 	.word	0x08005b81
 8005ef0:	ffff9f00 	.word	0xffff9f00
 8005ef4:	ffff9f80 	.word	0xffff9f80

08005ef8 <mbedtls_cipher_setup>:
{
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4604      	mov	r4, r0
    if( cipher_info == NULL )
 8005efc:	460d      	mov	r5, r1
 8005efe:	b179      	cbz	r1, 8005f20 <mbedtls_cipher_setup+0x28>
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8005f00:	2240      	movs	r2, #64	; 0x40
 8005f02:	2100      	movs	r1, #0
 8005f04:	f00b ff80 	bl	8011e08 <memset>
    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 8005f08:	69ab      	ldr	r3, [r5, #24]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	4798      	blx	r3
 8005f0e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8005f10:	b140      	cbz	r0, 8005f24 <mbedtls_cipher_setup+0x2c>
    ctx->cipher_info = cipher_info;
 8005f12:	6025      	str	r5, [r4, #0]
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
 8005f14:	2104      	movs	r1, #4
 8005f16:	4620      	mov	r0, r4
 8005f18:	f7ff ffd6 	bl	8005ec8 <mbedtls_cipher_set_padding_mode>
    return( 0 );
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8005f20:	4801      	ldr	r0, [pc, #4]	; (8005f28 <mbedtls_cipher_setup+0x30>)
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 8005f24:	4801      	ldr	r0, [pc, #4]	; (8005f2c <mbedtls_cipher_setup+0x34>)
}
 8005f26:	bd38      	pop	{r3, r4, r5, pc}
 8005f28:	ffff9f00 	.word	0xffff9f00
 8005f2c:	ffff9e80 	.word	0xffff9e80

08005f30 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 8005f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f32:	b085      	sub	sp, #20
 8005f34:	4605      	mov	r5, r0
 8005f36:	461f      	mov	r7, r3
 8005f38:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005f3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 8005f3c:	f7ff fe80 	bl	8005c40 <mbedtls_cipher_set_iv>
 8005f40:	b9a8      	cbnz	r0, 8005f6e <mbedtls_cipher_crypt+0x3e>
    if( ctx->cipher_info == NULL )
 8005f42:	682b      	ldr	r3, [r5, #0]
 8005f44:	b1ab      	cbz	r3, 8005f72 <mbedtls_cipher_crypt+0x42>
    ctx->unprocessed_len = 0;
 8005f46:	6268      	str	r0, [r5, #36]	; 0x24
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 8005f48:	9400      	str	r4, [sp, #0]
 8005f4a:	4633      	mov	r3, r6
 8005f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f4e:	4639      	mov	r1, r7
 8005f50:	4628      	mov	r0, r5
 8005f52:	f7ff fe95 	bl	8005c80 <mbedtls_cipher_update>
 8005f56:	b950      	cbnz	r0, 8005f6e <mbedtls_cipher_crypt+0x3e>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 8005f58:	6821      	ldr	r1, [r4, #0]
 8005f5a:	aa03      	add	r2, sp, #12
 8005f5c:	4431      	add	r1, r6
 8005f5e:	4628      	mov	r0, r5
 8005f60:	f7ff ff4c 	bl	8005dfc <mbedtls_cipher_finish>
 8005f64:	b918      	cbnz	r0, 8005f6e <mbedtls_cipher_crypt+0x3e>
        return( ret );

    *olen += finish_olen;
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	9a03      	ldr	r2, [sp, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 8005f6e:	b005      	add	sp, #20
 8005f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8005f72:	4801      	ldr	r0, [pc, #4]	; (8005f78 <mbedtls_cipher_crypt+0x48>)
 8005f74:	e7fb      	b.n	8005f6e <mbedtls_cipher_crypt+0x3e>
 8005f76:	bf00      	nop
 8005f78:	ffff9f00 	.word	0xffff9f00

08005f7c <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8005f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8005f80:	6807      	ldr	r7, [r0, #0]
{
 8005f82:	4614      	mov	r4, r2
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8005f84:	787f      	ldrb	r7, [r7, #1]
{
 8005f86:	9d07      	ldr	r5, [sp, #28]
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8005f88:	2f06      	cmp	r7, #6
{
 8005f8a:	9e08      	ldr	r6, [sp, #32]
 8005f8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f8e:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8005f92:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8005f96:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8005f9a:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8005f9e:	d112      	bne.n	8005fc6 <mbedtls_cipher_auth_encrypt+0x4a>
    {
        *olen = ilen;
 8005fa0:	f8c9 2000 	str.w	r2, [r9]
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
 8005fa4:	9308      	str	r3, [sp, #32]
 8005fa6:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8005faa:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8005fae:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8005fb2:	960a      	str	r6, [sp, #40]	; 0x28
 8005fb4:	9509      	str	r5, [sp, #36]	; 0x24
 8005fb6:	9407      	str	r4, [sp, #28]
 8005fb8:	460b      	mov	r3, r1
                                ilen, iv, ad, ad_len, input, output, tag ) );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8005fba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8005fc2:	f001 bcb1 	b.w	8007928 <mbedtls_gcm_crypt_and_tag>
}
 8005fc6:	4801      	ldr	r0, [pc, #4]	; (8005fcc <mbedtls_cipher_auth_encrypt+0x50>)
 8005fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fcc:	ffff9f80 	.word	0xffff9f80

08005fd0 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 8005fd0:	b530      	push	{r4, r5, lr}
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8005fd2:	6805      	ldr	r5, [r0, #0]
{
 8005fd4:	b087      	sub	sp, #28
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8005fd6:	786d      	ldrb	r5, [r5, #1]
{
 8005fd8:	460c      	mov	r4, r1
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8005fda:	2d06      	cmp	r5, #6
{
 8005fdc:	990c      	ldr	r1, [sp, #48]	; 0x30
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8005fde:	d118      	bne.n	8006012 <mbedtls_cipher_auth_decrypt+0x42>
    {
        int ret;

        *olen = ilen;
 8005fe0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005fe2:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( ctx->cipher_ctx, ilen,
 8005fe4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005fe6:	9505      	str	r5, [sp, #20]
 8005fe8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005fea:	9504      	str	r5, [sp, #16]
 8005fec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005fee:	9503      	str	r5, [sp, #12]
 8005ff0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005ff2:	9502      	str	r5, [sp, #8]
 8005ff4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005ff6:	e88d 0028 	stmia.w	sp, {r3, r5}
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8005ffe:	4622      	mov	r2, r4
 8006000:	f001 fcb7 	bl	8007972 <mbedtls_gcm_auth_decrypt>
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 8006004:	4b04      	ldr	r3, [pc, #16]	; (8006018 <mbedtls_cipher_auth_decrypt+0x48>)
 8006006:	f110 0f12 	cmn.w	r0, #18
 800600a:	bf08      	it	eq
 800600c:	4618      	moveq	r0, r3
        return( ret );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 800600e:	b007      	add	sp, #28
 8006010:	bd30      	pop	{r4, r5, pc}
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8006012:	4802      	ldr	r0, [pc, #8]	; (800601c <mbedtls_cipher_auth_decrypt+0x4c>)
 8006014:	e7fb      	b.n	800600e <mbedtls_cipher_auth_decrypt+0x3e>
 8006016:	bf00      	nop
 8006018:	ffff9d00 	.word	0xffff9d00
 800601c:	ffff9f80 	.word	0xffff9f80

08006020 <gcm_ctx_free>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
 8006020:	b510      	push	{r4, lr}
 8006022:	4604      	mov	r4, r0
    mbedtls_gcm_free( ctx );
 8006024:	f001 fcce 	bl	80079c4 <mbedtls_gcm_free>
    mbedtls_free( ctx );
 8006028:	4620      	mov	r0, r4
}
 800602a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 800602e:	f00b beaf 	b.w	8011d90 <free>

08006032 <gcm_ctx_alloc>:
{
 8006032:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 8006034:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8006038:	2001      	movs	r0, #1
 800603a:	f00b fe6f 	bl	8011d1c <calloc>
    if( ctx != NULL )
 800603e:	4604      	mov	r4, r0
 8006040:	b108      	cbz	r0, 8006046 <gcm_ctx_alloc+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 8006042:	f001 fa27 	bl	8007494 <mbedtls_gcm_init>
}
 8006046:	4620      	mov	r0, r4
 8006048:	bd10      	pop	{r4, pc}

0800604a <gcm_aes_setkey_wrap>:

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 800604a:	4613      	mov	r3, r2
 800604c:	460a      	mov	r2, r1
 800604e:	2102      	movs	r1, #2
 8006050:	f001 ba25 	b.w	800749e <mbedtls_gcm_setkey>

08006054 <aes_ctx_free>:
{
 8006054:	b510      	push	{r4, lr}
 8006056:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 8006058:	f7fd f993 	bl	8003382 <mbedtls_aes_free>
    mbedtls_free( ctx );
 800605c:	4620      	mov	r0, r4
}
 800605e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8006062:	f00b be95 	b.w	8011d90 <free>

08006066 <aes_ctx_alloc>:
{
 8006066:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8006068:	f44f 718c 	mov.w	r1, #280	; 0x118
 800606c:	2001      	movs	r0, #1
 800606e:	f00b fe55 	bl	8011d1c <calloc>
    if( aes == NULL )
 8006072:	4604      	mov	r4, r0
 8006074:	b108      	cbz	r0, 800607a <aes_ctx_alloc+0x14>
    mbedtls_aes_init( aes );
 8006076:	f7fd f97f 	bl	8003378 <mbedtls_aes_init>
}
 800607a:	4620      	mov	r0, r4
 800607c:	bd10      	pop	{r4, pc}

0800607e <aes_setkey_dec_wrap>:
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800607e:	f7fd baa7 	b.w	80035d0 <mbedtls_aes_setkey_dec>

08006082 <aes_setkey_enc_wrap>:
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8006082:	f7fd b985 	b.w	8003390 <mbedtls_aes_setkey_enc>

08006086 <aes_crypt_cbc_wrap>:
{
 8006086:	b410      	push	{r4}
}
 8006088:	bc10      	pop	{r4}
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 800608a:	f7fd bebb 	b.w	8003e04 <mbedtls_aes_crypt_cbc>

0800608e <aes_crypt_ecb_wrap>:
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 800608e:	f7fd bead 	b.w	8003dec <mbedtls_aes_crypt_ecb>

08006092 <mbedtls_ctr_drbg_init>:
/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 8006092:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006096:	2100      	movs	r1, #0
 8006098:	f00b beb6 	b.w	8011e08 <memset>

0800609c <mbedtls_ctr_drbg_free>:
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
                                       MBEDTLS_CTR_DRBG_ENTROPY_LEN ) );
}

void mbedtls_ctr_drbg_free( mbedtls_ctr_drbg_context *ctx )
{
 800609c:	b510      	push	{r4, lr}
    if( ctx == NULL )
 800609e:	4604      	mov	r4, r0
 80060a0:	b148      	cbz	r0, 80060b6 <mbedtls_ctr_drbg_free+0x1a>
        return;

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
    mbedtls_aes_free( &ctx->aes_ctx );
 80060a2:	3020      	adds	r0, #32
 80060a4:	f7fd f96d 	bl	8003382 <mbedtls_aes_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 80060a8:	4620      	mov	r0, r4
}
 80060aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 80060ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80060b2:	f002 ba35 	b.w	8008520 <mbedtls_platform_zeroize>
 80060b6:	bd10      	pop	{r4, pc}

080060b8 <debug_send_line.isra.0>:
}

/*
 * All calls to f_dbg must be made via this function
 */
static inline void debug_send_line( const mbedtls_ssl_context *ssl, int level,
 80060b8:	b410      	push	{r4}
#if defined(MBEDTLS_THREADING_C)
    char idstr[20 + DEBUG_BUF_SIZE]; /* 0x + 16 nibbles + ': ' */
    mbedtls_snprintf( idstr, sizeof( idstr ), "%p: %s", (void*)ssl, str );
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, idstr );
#else
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 80060ba:	6904      	ldr	r4, [r0, #16]
 80060bc:	6940      	ldr	r0, [r0, #20]
 80060be:	46a4      	mov	ip, r4
#endif
}
 80060c0:	bc10      	pop	{r4}
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 80060c2:	4760      	bx	ip

080060c4 <mbedtls_debug_print_mpi.part.1>:
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->Y );
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_BIGNUM_C)
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 80060c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c8:	4683      	mov	fp, r0
 80060ca:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80060ce:	9e91      	ldr	r6, [sp, #580]	; 0x244
 80060d0:	469a      	mov	sl, r3
    size_t i, n, idx = 0;

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
        return;

    for( n = X->n - 1; n > 0; n-- )
 80060d2:	6873      	ldr	r3, [r6, #4]
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 80060d4:	9103      	str	r1, [sp, #12]
    for( n = X->n - 1; n > 0; n-- )
 80060d6:	1e5c      	subs	r4, r3, #1
 80060d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060dc:	3b01      	subs	r3, #1
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 80060de:	9204      	str	r2, [sp, #16]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	68b2      	ldr	r2, [r6, #8]
    for( n = X->n - 1; n > 0; n-- )
 80060e4:	b11c      	cbz	r4, 80060ee <mbedtls_debug_print_mpi.part.1+0x2a>
        if( X->p[n] != 0 )
 80060e6:	58d1      	ldr	r1, [r2, r3]
 80060e8:	3b04      	subs	r3, #4
 80060ea:	2900      	cmp	r1, #0
 80060ec:	d040      	beq.n	8006170 <mbedtls_debug_print_mpi.part.1+0xac>
            break;

    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
        if( ( ( X->p[n] >> j ) & 1 ) != 0 )
 80060ee:	231f      	movs	r3, #31
 80060f0:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80060f4:	00a5      	lsls	r5, r4, #2
 80060f6:	fa22 f103 	lsr.w	r1, r2, r3
 80060fa:	07c9      	lsls	r1, r1, #31
 80060fc:	d402      	bmi.n	8006104 <mbedtls_debug_print_mpi.part.1+0x40>
    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 80060fe:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006102:	d2f8      	bcs.n	80060f6 <mbedtls_debug_print_mpi.part.1+0x32>
            break;

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 8006104:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 8006108:	af06      	add	r7, sp, #24
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 800610a:	3301      	adds	r3, #1
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	4a39      	ldr	r2, [pc, #228]	; (80061f4 <mbedtls_debug_print_mpi.part.1+0x130>)
 8006110:	9b90      	ldr	r3, [sp, #576]	; 0x240
 8006112:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006116:	4638      	mov	r0, r7
 8006118:	f00c f824 	bl	8012164 <sniprintf>

    debug_send_line( ssl, level, file, line, str );
 800611c:	4653      	mov	r3, sl
 800611e:	9700      	str	r7, [sp, #0]
 8006120:	9a04      	ldr	r2, [sp, #16]
 8006122:	9903      	ldr	r1, [sp, #12]
 8006124:	f8db 0000 	ldr.w	r0, [fp]
 8006128:	f7ff ffc6 	bl	80060b8 <debug_send_line.isra.0>

    idx = 0;
    for( i = n + 1, j = 0; i > 0; i-- )
 800612c:	1c63      	adds	r3, r4, #1
    idx = 0;
 800612e:	2400      	movs	r4, #0
    for( i = n + 1, j = 0; i > 0; i-- )
 8006130:	9302      	str	r3, [sp, #8]
 8006132:	46a1      	mov	r9, r4
    int j, k, zeros = 1;
 8006134:	2301      	movs	r3, #1
    for( i = n + 1, j = 0; i > 0; i-- )
 8006136:	9a02      	ldr	r2, [sp, #8]
 8006138:	b9e2      	cbnz	r2, 8006174 <mbedtls_debug_print_mpi.part.1+0xb0>
 800613a:	ad06      	add	r5, sp, #24
            j++;
        }

    }

    if( zeros == 1 )
 800613c:	b133      	cbz	r3, 800614c <mbedtls_debug_print_mpi.part.1+0x88>
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " 00" );
 800613e:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8006142:	1928      	adds	r0, r5, r4
 8006144:	4a2c      	ldr	r2, [pc, #176]	; (80061f8 <mbedtls_debug_print_mpi.part.1+0x134>)
 8006146:	f00c f80d 	bl	8012164 <sniprintf>
 800614a:	4404      	add	r4, r0

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 800614c:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8006150:	4a2a      	ldr	r2, [pc, #168]	; (80061fc <mbedtls_debug_print_mpi.part.1+0x138>)
 8006152:	1928      	adds	r0, r5, r4
 8006154:	f00c f806 	bl	8012164 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 8006158:	9500      	str	r5, [sp, #0]
 800615a:	4653      	mov	r3, sl
 800615c:	9a04      	ldr	r2, [sp, #16]
 800615e:	9903      	ldr	r1, [sp, #12]
 8006160:	f8db 0000 	ldr.w	r0, [fp]
 8006164:	f7ff ffa8 	bl	80060b8 <debug_send_line.isra.0>
}
 8006168:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 800616c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for( n = X->n - 1; n > 0; n-- )
 8006170:	3c01      	subs	r4, #1
 8006172:	e7b6      	b.n	80060e2 <mbedtls_debug_print_mpi.part.1+0x1e>
        if( zeros && X->p[i - 1] == 0 )
 8006174:	b11b      	cbz	r3, 800617e <mbedtls_debug_print_mpi.part.1+0xba>
 8006176:	68b2      	ldr	r2, [r6, #8]
 8006178:	5952      	ldr	r2, [r2, r5]
 800617a:	2a00      	cmp	r2, #0
 800617c:	d034      	beq.n	80061e8 <mbedtls_debug_print_mpi.part.1+0x124>
    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 800617e:	f04f 0818 	mov.w	r8, #24
            if( zeros && ( ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF ) == 0 )
 8006182:	b133      	cbz	r3, 8006192 <mbedtls_debug_print_mpi.part.1+0xce>
 8006184:	68b2      	ldr	r2, [r6, #8]
 8006186:	5952      	ldr	r2, [r2, r5]
 8006188:	fa22 f208 	lsr.w	r2, r2, r8
 800618c:	f012 0fff 	tst.w	r2, #255	; 0xff
 8006190:	d025      	beq.n	80061de <mbedtls_debug_print_mpi.part.1+0x11a>
            if( j % 16 == 0 )
 8006192:	f019 030f 	ands.w	r3, r9, #15
 8006196:	9305      	str	r3, [sp, #20]
 8006198:	d111      	bne.n	80061be <mbedtls_debug_print_mpi.part.1+0xfa>
                if( j > 0 )
 800619a:	f1b9 0f00 	cmp.w	r9, #0
 800619e:	d00e      	beq.n	80061be <mbedtls_debug_print_mpi.part.1+0xfa>
                    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 80061a0:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80061a4:	4a15      	ldr	r2, [pc, #84]	; (80061fc <mbedtls_debug_print_mpi.part.1+0x138>)
 80061a6:	1938      	adds	r0, r7, r4
 80061a8:	f00b ffdc 	bl	8012164 <sniprintf>
                    debug_send_line( ssl, level, file, line, str );
 80061ac:	9700      	str	r7, [sp, #0]
 80061ae:	4653      	mov	r3, sl
 80061b0:	9a04      	ldr	r2, [sp, #16]
 80061b2:	9903      	ldr	r1, [sp, #12]
 80061b4:	f8db 0000 	ldr.w	r0, [fp]
 80061b8:	f7ff ff7e 	bl	80060b8 <debug_send_line.isra.0>
                    idx = 0;
 80061bc:	9c05      	ldr	r4, [sp, #20]
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 80061be:	68b3      	ldr	r3, [r6, #8]
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 80061c0:	a806      	add	r0, sp, #24
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 80061c2:	595b      	ldr	r3, [r3, r5]
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 80061c4:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 80061c8:	fa23 f308 	lsr.w	r3, r3, r8
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	4420      	add	r0, r4
 80061d0:	4a0b      	ldr	r2, [pc, #44]	; (8006200 <mbedtls_debug_print_mpi.part.1+0x13c>)
 80061d2:	f00b ffc7 	bl	8012164 <sniprintf>
                zeros = 0;
 80061d6:	2300      	movs	r3, #0
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 80061d8:	4404      	add	r4, r0
            j++;
 80061da:	f109 0901 	add.w	r9, r9, #1
 80061de:	f1a8 0808 	sub.w	r8, r8, #8
        for( k = sizeof( mbedtls_mpi_uint ) - 1; k >= 0; k-- )
 80061e2:	f118 0f08 	cmn.w	r8, #8
 80061e6:	d1cc      	bne.n	8006182 <mbedtls_debug_print_mpi.part.1+0xbe>
    for( i = n + 1, j = 0; i > 0; i-- )
 80061e8:	9a02      	ldr	r2, [sp, #8]
 80061ea:	3d04      	subs	r5, #4
 80061ec:	3a01      	subs	r2, #1
 80061ee:	9202      	str	r2, [sp, #8]
 80061f0:	e7a1      	b.n	8006136 <mbedtls_debug_print_mpi.part.1+0x72>
 80061f2:	bf00      	nop
 80061f4:	08013d0d 	.word	0x08013d0d
 80061f8:	08013d2a 	.word	0x08013d2a
 80061fc:	0801659c 	.word	0x0801659c
 8006200:	08017baa 	.word	0x08017baa

08006204 <mbedtls_debug_set_threshold>:
    debug_threshold = threshold;
 8006204:	4b01      	ldr	r3, [pc, #4]	; (800620c <mbedtls_debug_set_threshold+0x8>)
 8006206:	6018      	str	r0, [r3, #0]
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	200027c8 	.word	0x200027c8

08006210 <mbedtls_debug_print_msg>:
{
 8006210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006214:	460e      	mov	r6, r1
 8006216:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800621a:	4617      	mov	r7, r2
 800621c:	4698      	mov	r8, r3
    if( NULL == ssl || NULL == ssl->conf || NULL == ssl->conf->f_dbg || level > debug_threshold )
 800621e:	4605      	mov	r5, r0
 8006220:	b1f8      	cbz	r0, 8006262 <mbedtls_debug_print_msg+0x52>
 8006222:	6803      	ldr	r3, [r0, #0]
 8006224:	b1eb      	cbz	r3, 8006262 <mbedtls_debug_print_msg+0x52>
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	b1db      	cbz	r3, 8006262 <mbedtls_debug_print_msg+0x52>
 800622a:	4b10      	ldr	r3, [pc, #64]	; (800626c <mbedtls_debug_print_msg+0x5c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	428b      	cmp	r3, r1
 8006230:	db17      	blt.n	8006262 <mbedtls_debug_print_msg+0x52>
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 8006232:	ac04      	add	r4, sp, #16
    va_start( argp, format );
 8006234:	ab8b      	add	r3, sp, #556	; 0x22c
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 8006236:	9a8a      	ldr	r2, [sp, #552]	; 0x228
 8006238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800623c:	4620      	mov	r0, r4
    va_start( argp, format );
 800623e:	9303      	str	r3, [sp, #12]
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 8006240:	f00c f81e 	bl	8012280 <vsniprintf>
    if( ret >= 0 && ret < DEBUG_BUF_SIZE - 1 )
 8006244:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
 8006248:	d804      	bhi.n	8006254 <mbedtls_debug_print_msg+0x44>
        str[ret]     = '\n';
 800624a:	230a      	movs	r3, #10
 800624c:	5423      	strb	r3, [r4, r0]
        str[ret + 1] = '\0';
 800624e:	2300      	movs	r3, #0
 8006250:	4420      	add	r0, r4
 8006252:	7043      	strb	r3, [r0, #1]
    debug_send_line( ssl, level, file, line, str );
 8006254:	9400      	str	r4, [sp, #0]
 8006256:	4643      	mov	r3, r8
 8006258:	463a      	mov	r2, r7
 800625a:	4631      	mov	r1, r6
 800625c:	6828      	ldr	r0, [r5, #0]
 800625e:	f7ff ff2b 	bl	80060b8 <debug_send_line.isra.0>
}
 8006262:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
 8006266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800626a:	bf00      	nop
 800626c:	200027c8 	.word	0x200027c8

08006270 <mbedtls_debug_print_ret>:
{
 8006270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006274:	4617      	mov	r7, r2
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8006276:	6802      	ldr	r2, [r0, #0]
{
 8006278:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800627c:	4698      	mov	r8, r3
 800627e:	4604      	mov	r4, r0
 8006280:	460d      	mov	r5, r1
 8006282:	9b89      	ldr	r3, [sp, #548]	; 0x224
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8006284:	b1d2      	cbz	r2, 80062bc <mbedtls_debug_print_ret+0x4c>
 8006286:	6912      	ldr	r2, [r2, #16]
 8006288:	b1c2      	cbz	r2, 80062bc <mbedtls_debug_print_ret+0x4c>
 800628a:	4a0e      	ldr	r2, [pc, #56]	; (80062c4 <mbedtls_debug_print_ret+0x54>)
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	428a      	cmp	r2, r1
 8006290:	db14      	blt.n	80062bc <mbedtls_debug_print_ret+0x4c>
    if( ret == MBEDTLS_ERR_SSL_WANT_READ )
 8006292:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 8006296:	d011      	beq.n	80062bc <mbedtls_debug_print_ret+0x4c>
    mbedtls_snprintf( str, sizeof( str ), "%s() returned %d (-0x%04x)\n",
 8006298:	425a      	negs	r2, r3
 800629a:	ae02      	add	r6, sp, #8
 800629c:	9201      	str	r2, [sp, #4]
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	4a09      	ldr	r2, [pc, #36]	; (80062c8 <mbedtls_debug_print_ret+0x58>)
 80062a2:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80062a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062a8:	4630      	mov	r0, r6
 80062aa:	f00b ff5b 	bl	8012164 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 80062ae:	9600      	str	r6, [sp, #0]
 80062b0:	4643      	mov	r3, r8
 80062b2:	463a      	mov	r2, r7
 80062b4:	4629      	mov	r1, r5
 80062b6:	6820      	ldr	r0, [r4, #0]
 80062b8:	f7ff fefe 	bl	80060b8 <debug_send_line.isra.0>
}
 80062bc:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 80062c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c4:	200027c8 	.word	0x200027c8
 80062c8:	08013d2e 	.word	0x08013d2e

080062cc <mbedtls_debug_print_buf>:
{
 80062cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d0:	4699      	mov	r9, r3
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 80062d2:	6803      	ldr	r3, [r0, #0]
{
 80062d4:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80062d8:	4606      	mov	r6, r0
 80062da:	460f      	mov	r7, r1
 80062dc:	4690      	mov	r8, r2
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d040      	beq.n	8006364 <mbedtls_debug_print_buf+0x98>
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d03d      	beq.n	8006364 <mbedtls_debug_print_buf+0x98>
 80062e8:	4b41      	ldr	r3, [pc, #260]	; (80063f0 <mbedtls_debug_print_buf+0x124>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	428b      	cmp	r3, r1
 80062ee:	db39      	blt.n	8006364 <mbedtls_debug_print_buf+0x98>
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "dumping '%s' (%u bytes)\n",
 80062f0:	9b94      	ldr	r3, [sp, #592]	; 0x250
 80062f2:	ac08      	add	r4, sp, #32
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	4a3f      	ldr	r2, [pc, #252]	; (80063f4 <mbedtls_debug_print_buf+0x128>)
 80062f8:	9b92      	ldr	r3, [sp, #584]	; 0x248
 80062fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062fe:	4620      	mov	r0, r4
 8006300:	f00b ff30 	bl	8012164 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 8006304:	9400      	str	r4, [sp, #0]
    idx = 0;
 8006306:	2400      	movs	r4, #0
    for( i = 0; i < len; i++ )
 8006308:	4625      	mov	r5, r4
    debug_send_line( ssl, level, file, line, str );
 800630a:	464b      	mov	r3, r9
 800630c:	4642      	mov	r2, r8
 800630e:	4639      	mov	r1, r7
 8006310:	6830      	ldr	r0, [r6, #0]
 8006312:	f7ff fed1 	bl	80060b8 <debug_send_line.isra.0>
    memset( txt, 0, sizeof( txt ) );
 8006316:	2211      	movs	r2, #17
 8006318:	2100      	movs	r1, #0
 800631a:	a803      	add	r0, sp, #12
 800631c:	f00b fd74 	bl	8011e08 <memset>
 8006320:	9b93      	ldr	r3, [sp, #588]	; 0x24c
 8006322:	f103 3bff 	add.w	fp, r3, #4294967295
    for( i = 0; i < len; i++ )
 8006326:	9b94      	ldr	r3, [sp, #592]	; 0x250
 8006328:	429d      	cmp	r5, r3
 800632a:	d002      	beq.n	8006332 <mbedtls_debug_print_buf+0x66>
        if( i >= 4096 )
 800632c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8006330:	d11c      	bne.n	800636c <mbedtls_debug_print_buf+0xa0>
    if( len > 0 )
 8006332:	9b94      	ldr	r3, [sp, #592]	; 0x250
 8006334:	b1b3      	cbz	r3, 8006364 <mbedtls_debug_print_buf+0x98>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 8006336:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8006404 <mbedtls_debug_print_buf+0x138>
 800633a:	f10d 0a20 	add.w	sl, sp, #32
        for( /* i = i */; i % 16 != 0; i++ )
 800633e:	f015 0f0f 	tst.w	r5, #15
 8006342:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8006346:	d14a      	bne.n	80063de <mbedtls_debug_print_buf+0x112>
        mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 8006348:	ab03      	add	r3, sp, #12
 800634a:	4a2b      	ldr	r2, [pc, #172]	; (80063f8 <mbedtls_debug_print_buf+0x12c>)
 800634c:	eb0a 0004 	add.w	r0, sl, r4
 8006350:	f00b ff08 	bl	8012164 <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 8006354:	f8cd a000 	str.w	sl, [sp]
 8006358:	464b      	mov	r3, r9
 800635a:	4642      	mov	r2, r8
 800635c:	4639      	mov	r1, r7
 800635e:	6830      	ldr	r0, [r6, #0]
 8006360:	f7ff feaa 	bl	80060b8 <debug_send_line.isra.0>
}
 8006364:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
 8006368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( i % 16 == 0 )
 800636c:	f015 0a0f 	ands.w	sl, r5, #15
 8006370:	d11f      	bne.n	80063b2 <mbedtls_debug_print_buf+0xe6>
            if( i > 0 )
 8006372:	b1ad      	cbz	r5, 80063a0 <mbedtls_debug_print_buf+0xd4>
                mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 8006374:	a808      	add	r0, sp, #32
 8006376:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 800637a:	ab03      	add	r3, sp, #12
 800637c:	4a1e      	ldr	r2, [pc, #120]	; (80063f8 <mbedtls_debug_print_buf+0x12c>)
 800637e:	4420      	add	r0, r4
 8006380:	f00b fef0 	bl	8012164 <sniprintf>
                debug_send_line( ssl, level, file, line, str );
 8006384:	ab08      	add	r3, sp, #32
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	4642      	mov	r2, r8
 800638a:	464b      	mov	r3, r9
 800638c:	4639      	mov	r1, r7
 800638e:	6830      	ldr	r0, [r6, #0]
 8006390:	f7ff fe92 	bl	80060b8 <debug_send_line.isra.0>
                memset( txt, 0, sizeof( txt ) );
 8006394:	2211      	movs	r2, #17
 8006396:	4651      	mov	r1, sl
 8006398:	a803      	add	r0, sp, #12
 800639a:	f00b fd35 	bl	8011e08 <memset>
                idx = 0;
 800639e:	4654      	mov	r4, sl
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "%04x: ",
 80063a0:	a808      	add	r0, sp, #32
 80063a2:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80063a6:	4420      	add	r0, r4
 80063a8:	462b      	mov	r3, r5
 80063aa:	4a14      	ldr	r2, [pc, #80]	; (80063fc <mbedtls_debug_print_buf+0x130>)
 80063ac:	f00b feda 	bl	8012164 <sniprintf>
 80063b0:	4404      	add	r4, r0
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 80063b2:	a808      	add	r0, sp, #32
 80063b4:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80063b8:	4a11      	ldr	r2, [pc, #68]	; (8006400 <mbedtls_debug_print_buf+0x134>)
 80063ba:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80063be:	4420      	add	r0, r4
 80063c0:	f00b fed0 	bl	8012164 <sniprintf>
        txt[i % 16] = ( buf[i] > 31 && buf[i] < 127 ) ? buf[i] : '.' ;
 80063c4:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 80063c8:	4404      	add	r4, r0
        txt[i % 16] = ( buf[i] > 31 && buf[i] < 127 ) ? buf[i] : '.' ;
 80063ca:	f1a3 0220 	sub.w	r2, r3, #32
 80063ce:	2a5e      	cmp	r2, #94	; 0x5e
 80063d0:	bf88      	it	hi
 80063d2:	232e      	movhi	r3, #46	; 0x2e
 80063d4:	aa03      	add	r2, sp, #12
 80063d6:	f802 300a 	strb.w	r3, [r2, sl]
    for( i = 0; i < len; i++ )
 80063da:	3501      	adds	r5, #1
 80063dc:	e7a3      	b.n	8006326 <mbedtls_debug_print_buf+0x5a>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 80063de:	eb0a 0004 	add.w	r0, sl, r4
 80063e2:	465a      	mov	r2, fp
 80063e4:	f00b febe 	bl	8012164 <sniprintf>
        for( /* i = i */; i % 16 != 0; i++ )
 80063e8:	3501      	adds	r5, #1
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 80063ea:	4404      	add	r4, r0
 80063ec:	e7a7      	b.n	800633e <mbedtls_debug_print_buf+0x72>
 80063ee:	bf00      	nop
 80063f0:	200027c8 	.word	0x200027c8
 80063f4:	08013ca8 	.word	0x08013ca8
 80063f8:	08013cc1 	.word	0x08013cc1
 80063fc:	08013cc7 	.word	0x08013cc7
 8006400:	08017baa 	.word	0x08017baa
 8006404:	08013cce 	.word	0x08013cce

08006408 <mbedtls_debug_print_mpi>:
{
 8006408:	b4f0      	push	{r4, r5, r6, r7}
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
 800640a:	6805      	ldr	r5, [r0, #0]
{
 800640c:	9c05      	ldr	r4, [sp, #20]
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
 800640e:	b14d      	cbz	r5, 8006424 <mbedtls_debug_print_mpi+0x1c>
 8006410:	692d      	ldr	r5, [r5, #16]
 8006412:	b13d      	cbz	r5, 8006424 <mbedtls_debug_print_mpi+0x1c>
 8006414:	b134      	cbz	r4, 8006424 <mbedtls_debug_print_mpi+0x1c>
 8006416:	4d04      	ldr	r5, [pc, #16]	; (8006428 <mbedtls_debug_print_mpi+0x20>)
 8006418:	682d      	ldr	r5, [r5, #0]
 800641a:	428d      	cmp	r5, r1
 800641c:	db02      	blt.n	8006424 <mbedtls_debug_print_mpi+0x1c>
}
 800641e:	bcf0      	pop	{r4, r5, r6, r7}
 8006420:	f7ff be50 	b.w	80060c4 <mbedtls_debug_print_mpi.part.1>
 8006424:	bcf0      	pop	{r4, r5, r6, r7}
 8006426:	4770      	bx	lr
 8006428:	200027c8 	.word	0x200027c8

0800642c <mbedtls_debug_print_crt>:
}

void mbedtls_debug_print_crt( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_x509_crt *crt )
{
 800642c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006430:	4698      	mov	r8, r3
    char str[DEBUG_BUF_SIZE];
    int i = 0;

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )
 8006432:	6803      	ldr	r3, [r0, #0]
{
 8006434:	f6ad 0d24 	subw	sp, sp, #2084	; 0x824
 8006438:	4605      	mov	r5, r0
 800643a:	460e      	mov	r6, r1
 800643c:	4617      	mov	r7, r2
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )
 800643e:	2b00      	cmp	r3, #0
 8006440:	d054      	beq.n	80064ec <mbedtls_debug_print_crt+0xc0>
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d051      	beq.n	80064ec <mbedtls_debug_print_crt+0xc0>
 8006448:	f8dd 384c 	ldr.w	r3, [sp, #2124]	; 0x84c
 800644c:	2b00      	cmp	r3, #0
 800644e:	d04d      	beq.n	80064ec <mbedtls_debug_print_crt+0xc0>
 8006450:	4b50      	ldr	r3, [pc, #320]	; (8006594 <mbedtls_debug_print_crt+0x168>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	428b      	cmp	r3, r1
 8006456:	db49      	blt.n	80064ec <mbedtls_debug_print_crt+0xc0>
 8006458:	2300      	movs	r3, #0
            memcpy( str, start, len );
 800645a:	ac88      	add	r4, sp, #544	; 0x220
 800645c:	9302      	str	r3, [sp, #8]
            str[len] = '\0';
 800645e:	f04f 0b00 	mov.w	fp, #0

    while( crt != NULL )
    {
        char buf[1024];

        mbedtls_snprintf( str, sizeof( str ), "%s #%d:\n", text, ++i );
 8006462:	9b02      	ldr	r3, [sp, #8]
 8006464:	f10d 0920 	add.w	r9, sp, #32
 8006468:	3301      	adds	r3, #1
 800646a:	9302      	str	r3, [sp, #8]
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	4a4a      	ldr	r2, [pc, #296]	; (8006598 <mbedtls_debug_print_crt+0x16c>)
 8006470:	f8dd 3848 	ldr.w	r3, [sp, #2120]	; 0x848
 8006474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006478:	4648      	mov	r0, r9
 800647a:	f00b fe73 	bl	8012164 <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 800647e:	f8cd 9000 	str.w	r9, [sp]
 8006482:	4643      	mov	r3, r8
 8006484:	463a      	mov	r2, r7
 8006486:	4631      	mov	r1, r6
 8006488:	6828      	ldr	r0, [r5, #0]
 800648a:	f7ff fe15 	bl	80060b8 <debug_send_line.isra.0>

        mbedtls_x509_crt_info( buf, sizeof( buf ) - 1, "", crt );
 800648e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006492:	f8dd 384c 	ldr.w	r3, [sp, #2124]	; 0x84c
 8006496:	4a41      	ldr	r2, [pc, #260]	; (800659c <mbedtls_debug_print_crt+0x170>)
 8006498:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 800649c:	f00a fb16 	bl	8010acc <mbedtls_x509_crt_info>
 80064a0:	f20d 491f 	addw	r9, sp, #1055	; 0x41f
    start = text;
 80064a4:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
    for( cur = text; *cur != '\0'; cur++ )
 80064a8:	f899 3001 	ldrb.w	r3, [r9, #1]
 80064ac:	f109 0a01 	add.w	sl, r9, #1
 80064b0:	bb03      	cbnz	r3, 80064f4 <mbedtls_debug_print_crt+0xc8>
    memset( items, 0, sizeof( items ) );
 80064b2:	4619      	mov	r1, r3
 80064b4:	2224      	movs	r2, #36	; 0x24
 80064b6:	4620      	mov	r0, r4
 80064b8:	f00b fca6 	bl	8011e08 <memset>
    if( mbedtls_pk_debug( pk, items ) != 0 )
 80064bc:	f8dd 384c 	ldr.w	r3, [sp, #2124]	; 0x84c
 80064c0:	4621      	mov	r1, r4
 80064c2:	f103 00bc 	add.w	r0, r3, #188	; 0xbc
 80064c6:	f001 fe61 	bl	800818c <mbedtls_pk_debug>
 80064ca:	b380      	cbz	r0, 800652e <mbedtls_debug_print_crt+0x102>
        debug_send_line( ssl, level, file, line,
 80064cc:	4b34      	ldr	r3, [pc, #208]	; (80065a0 <mbedtls_debug_print_crt+0x174>)
 80064ce:	463a      	mov	r2, r7
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	4631      	mov	r1, r6
 80064d4:	4643      	mov	r3, r8
 80064d6:	6828      	ldr	r0, [r5, #0]
 80064d8:	f7ff fdee 	bl	80060b8 <debug_send_line.isra.0>
        debug_print_line_by_line( ssl, level, file, line, buf );

        debug_print_pk( ssl, level, file, line, "crt->", &crt->pk );

        crt = crt->next;
 80064dc:	f8dd 384c 	ldr.w	r3, [sp, #2124]	; 0x84c
 80064e0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80064e4:	f8cd 384c 	str.w	r3, [sp, #2124]	; 0x84c
    while( crt != NULL )
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1b8      	bne.n	800645e <mbedtls_debug_print_crt+0x32>
    }
}
 80064ec:	f60d 0d24 	addw	sp, sp, #2084	; 0x824
 80064f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( *cur == '\n' )
 80064f4:	2b0a      	cmp	r3, #10
 80064f6:	d118      	bne.n	800652a <mbedtls_debug_print_crt+0xfe>
 80064f8:	f240 12ff 	movw	r2, #511	; 0x1ff
            size_t len = cur - start + 1;
 80064fc:	ebaa 0301 	sub.w	r3, sl, r1
 8006500:	3301      	adds	r3, #1
 8006502:	4293      	cmp	r3, r2
 8006504:	bf28      	it	cs
 8006506:	4613      	movcs	r3, r2
            memcpy( str, start, len );
 8006508:	4620      	mov	r0, r4
 800650a:	461a      	mov	r2, r3
 800650c:	9303      	str	r3, [sp, #12]
 800650e:	f00b fc56 	bl	8011dbe <memcpy>
            str[len] = '\0';
 8006512:	9b03      	ldr	r3, [sp, #12]
            debug_send_line( ssl, level, file, line, str );
 8006514:	4631      	mov	r1, r6
            str[len] = '\0';
 8006516:	f804 b003 	strb.w	fp, [r4, r3]
            debug_send_line( ssl, level, file, line, str );
 800651a:	463a      	mov	r2, r7
 800651c:	9400      	str	r4, [sp, #0]
 800651e:	4643      	mov	r3, r8
 8006520:	6828      	ldr	r0, [r5, #0]
 8006522:	f7ff fdc9 	bl	80060b8 <debug_send_line.isra.0>
 8006526:	f109 0102 	add.w	r1, r9, #2
    start = text;
 800652a:	46d1      	mov	r9, sl
 800652c:	e7bc      	b.n	80064a8 <mbedtls_debug_print_crt+0x7c>
    if( mbedtls_pk_debug( pk, items ) != 0 )
 800652e:	4681      	mov	r9, r0
        if( items[i].type == MBEDTLS_PK_DEBUG_NONE )
 8006530:	f819 3004 	ldrb.w	r3, [r9, r4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0d1      	beq.n	80064dc <mbedtls_debug_print_crt+0xb0>
 8006538:	eb04 0b09 	add.w	fp, r4, r9
        mbedtls_snprintf( name, sizeof( name ), "%s%s", text, items[i].name );
 800653c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006540:	f10d 0a10 	add.w	sl, sp, #16
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	4a17      	ldr	r2, [pc, #92]	; (80065a4 <mbedtls_debug_print_crt+0x178>)
 8006548:	4b17      	ldr	r3, [pc, #92]	; (80065a8 <mbedtls_debug_print_crt+0x17c>)
 800654a:	2110      	movs	r1, #16
 800654c:	4650      	mov	r0, sl
 800654e:	f00b fe09 	bl	8012164 <sniprintf>
        name[sizeof( name ) - 1] = '\0';
 8006552:	2300      	movs	r3, #0
 8006554:	f88a 300f 	strb.w	r3, [sl, #15]
        if( items[i].type == MBEDTLS_PK_DEBUG_MPI )
 8006558:	f819 3004 	ldrb.w	r3, [r9, r4]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d110      	bne.n	8006582 <mbedtls_debug_print_crt+0x156>
            mbedtls_debug_print_mpi( ssl, level, file, line, name, items[i].value );
 8006560:	f8db 3008 	ldr.w	r3, [fp, #8]
 8006564:	463a      	mov	r2, r7
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	f8cd a000 	str.w	sl, [sp]
 800656c:	4643      	mov	r3, r8
 800656e:	4631      	mov	r1, r6
 8006570:	4628      	mov	r0, r5
 8006572:	f7ff ff49 	bl	8006408 <mbedtls_debug_print_mpi>
 8006576:	f109 090c 	add.w	r9, r9, #12
    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )
 800657a:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800657e:	d1d7      	bne.n	8006530 <mbedtls_debug_print_crt+0x104>
 8006580:	e7ac      	b.n	80064dc <mbedtls_debug_print_crt+0xb0>
            debug_send_line( ssl, level, file, line,
 8006582:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <mbedtls_debug_print_crt+0x180>)
 8006584:	463a      	mov	r2, r7
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	4631      	mov	r1, r6
 800658a:	4643      	mov	r3, r8
 800658c:	6828      	ldr	r0, [r5, #0]
 800658e:	f7ff fd93 	bl	80060b8 <debug_send_line.isra.0>
 8006592:	e7f0      	b.n	8006576 <mbedtls_debug_print_crt+0x14a>
 8006594:	200027c8 	.word	0x200027c8
 8006598:	08013cd2 	.word	0x08013cd2
 800659c:	0801643c 	.word	0x0801643c
 80065a0:	08013cdb 	.word	0x08013cdb
 80065a4:	08013cf5 	.word	0x08013cf5
 80065a8:	08013cef 	.word	0x08013cef
 80065ac:	08013cfa 	.word	0x08013cfa

080065b0 <mbedtls_strerror>:
#include "mbedtls/xtea.h"
#endif


void mbedtls_strerror( int ret, char *buf, size_t buflen )
{
 80065b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b4:	4607      	mov	r7, r0
 80065b6:	460c      	mov	r4, r1
    size_t len;
    int use_ret;

    if( buflen == 0 )
 80065b8:	4615      	mov	r5, r2
 80065ba:	2a00      	cmp	r2, #0
 80065bc:	f000 8664 	beq.w	8007288 <mbedtls_strerror+0xcd8>
    memset( buf, 0x00, buflen );

    if( ret < 0 )
        ret = -ret;

    if( ret & 0xFF80 )
 80065c0:	f64f 7680 	movw	r6, #65408	; 0xff80
    memset( buf, 0x00, buflen );
 80065c4:	2100      	movs	r1, #0
 80065c6:	4620      	mov	r0, r4
 80065c8:	f00b fc1e 	bl	8011e08 <memset>
 80065cc:	2f00      	cmp	r7, #0
 80065ce:	bfb8      	it	lt
 80065d0:	427f      	neglt	r7, r7
    if( ret & 0xFF80 )
 80065d2:	403e      	ands	r6, r7
 80065d4:	d00f      	beq.n	80065f6 <mbedtls_strerror+0x46>

        // High level error codes
        //
        // BEGIN generated code
#if defined(MBEDTLS_CIPHER_C)
        if( use_ret == -(MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE) )
 80065d6:	f5b6 4fc1 	cmp.w	r6, #24704	; 0x6080
 80065da:	d138      	bne.n	800664e <mbedtls_strerror+0x9e>
            mbedtls_snprintf( buf, buflen, "CIPHER - The selected feature is not available" );
 80065dc:	4abe      	ldr	r2, [pc, #760]	; (80068d8 <mbedtls_strerror+0x328>)
 80065de:	4629      	mov	r1, r5
 80065e0:	4620      	mov	r0, r4
 80065e2:	f00b fdbf 	bl	8012164 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_FATAL_ERROR) )
            mbedtls_snprintf( buf, buflen, "X509 - A fatal error occured, eg the chain is too long or the vrfy callback failed" );
#endif /* MBEDTLS_X509_USE_C || MBEDTLS_X509_CREATE_C */
        // END generated code

        if( strlen( buf ) == 0 )
 80065e6:	7823      	ldrb	r3, [r4, #0]
 80065e8:	b92b      	cbnz	r3, 80065f6 <mbedtls_strerror+0x46>
            mbedtls_snprintf( buf, buflen, "UNKNOWN ERROR CODE (%04X)", use_ret );
 80065ea:	4633      	mov	r3, r6
 80065ec:	4abb      	ldr	r2, [pc, #748]	; (80068dc <mbedtls_strerror+0x32c>)
 80065ee:	4629      	mov	r1, r5
 80065f0:	4620      	mov	r0, r4
 80065f2:	f00b fdb7 	bl	8012164 <sniprintf>
    }

    use_ret = ret & ~0xFF80;
 80065f6:	f427 467f 	bic.w	r6, r7, #65280	; 0xff00
 80065fa:	f026 0680 	bic.w	r6, r6, #128	; 0x80

    if( use_ret == 0 )
 80065fe:	2e00      	cmp	r6, #0
 8006600:	f000 8642 	beq.w	8007288 <mbedtls_strerror+0xcd8>
        return;

    // If high level code is present, make a concatenation between both
    // error strings.
    //
    len = strlen( buf );
 8006604:	4620      	mov	r0, r4
 8006606:	f7f9 fe0f 	bl	8000228 <strlen>

    if( len > 0 )
 800660a:	4607      	mov	r7, r0
 800660c:	b158      	cbz	r0, 8006626 <mbedtls_strerror+0x76>
    {
        if( buflen - len < 5 )
 800660e:	1a2d      	subs	r5, r5, r0
 8006610:	2d04      	cmp	r5, #4
 8006612:	f240 8639 	bls.w	8007288 <mbedtls_strerror+0xcd8>
            return;

        mbedtls_snprintf( buf + len, buflen - len, " : " );
 8006616:	4629      	mov	r1, r5
 8006618:	1820      	adds	r0, r4, r0
 800661a:	4ab1      	ldr	r2, [pc, #708]	; (80068e0 <mbedtls_strerror+0x330>)
 800661c:	f00b fda2 	bl	8012164 <sniprintf>

        buf += len + 3;
 8006620:	3703      	adds	r7, #3
 8006622:	443c      	add	r4, r7
        buflen -= len + 3;
 8006624:	3d03      	subs	r5, #3

    // Low level error codes
    //
    // BEGIN generated code
#if defined(MBEDTLS_AES_C)
    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_KEY_LENGTH) )
 8006626:	2e20      	cmp	r6, #32
 8006628:	f040 8579 	bne.w	800711e <mbedtls_strerror+0xb6e>
        mbedtls_snprintf( buf, buflen, "AES - Invalid key length" );
 800662c:	4aad      	ldr	r2, [pc, #692]	; (80068e4 <mbedtls_strerror+0x334>)

#if defined(MBEDTLS_SHA512_C)
    if( use_ret == -(MBEDTLS_ERR_SHA512_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "SHA512 - SHA-512 hardware accelerator failed" );
    if( use_ret == -(MBEDTLS_ERR_SHA512_BAD_INPUT_DATA) )
        mbedtls_snprintf( buf, buflen, "SHA512 - SHA-512 input data was malformed" );
 800662e:	4629      	mov	r1, r5
 8006630:	4620      	mov	r0, r4
 8006632:	f00b fd97 	bl	8012164 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_XTEA_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "XTEA - XTEA hardware accelerator failed" );
#endif /* MBEDTLS_XTEA_C */
    // END generated code

    if( strlen( buf ) != 0 )
 8006636:	7823      	ldrb	r3, [r4, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	f040 8625 	bne.w	8007288 <mbedtls_strerror+0xcd8>
        return;

    mbedtls_snprintf( buf, buflen, "UNKNOWN ERROR CODE (%04X)", use_ret );
 800663e:	4633      	mov	r3, r6
 8006640:	4629      	mov	r1, r5
 8006642:	4620      	mov	r0, r4
}
 8006644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    mbedtls_snprintf( buf, buflen, "UNKNOWN ERROR CODE (%04X)", use_ret );
 8006648:	4aa4      	ldr	r2, [pc, #656]	; (80068dc <mbedtls_strerror+0x32c>)
 800664a:	f00b bd8b 	b.w	8012164 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA) )
 800664e:	f5b6 4fc2 	cmp.w	r6, #24832	; 0x6100
 8006652:	d105      	bne.n	8006660 <mbedtls_strerror+0xb0>
            mbedtls_snprintf( buf, buflen, "CIPHER - Bad input parameters" );
 8006654:	4aa4      	ldr	r2, [pc, #656]	; (80068e8 <mbedtls_strerror+0x338>)
 8006656:	4629      	mov	r1, r5
 8006658:	4620      	mov	r0, r4
 800665a:	f00b fd83 	bl	8012164 <sniprintf>
 800665e:	e7c2      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_ALLOC_FAILED) )
 8006660:	f5b6 4fc3 	cmp.w	r6, #24960	; 0x6180
 8006664:	d105      	bne.n	8006672 <mbedtls_strerror+0xc2>
            mbedtls_snprintf( buf, buflen, "CIPHER - Failed to allocate memory" );
 8006666:	4aa1      	ldr	r2, [pc, #644]	; (80068ec <mbedtls_strerror+0x33c>)
 8006668:	4629      	mov	r1, r5
 800666a:	4620      	mov	r0, r4
 800666c:	f00b fd7a 	bl	8012164 <sniprintf>
 8006670:	e7b9      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_PADDING) )
 8006672:	f5b6 4fc4 	cmp.w	r6, #25088	; 0x6200
 8006676:	d105      	bne.n	8006684 <mbedtls_strerror+0xd4>
            mbedtls_snprintf( buf, buflen, "CIPHER - Input data contains invalid padding and is rejected" );
 8006678:	4a9d      	ldr	r2, [pc, #628]	; (80068f0 <mbedtls_strerror+0x340>)
 800667a:	4629      	mov	r1, r5
 800667c:	4620      	mov	r0, r4
 800667e:	f00b fd71 	bl	8012164 <sniprintf>
 8006682:	e7b0      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED) )
 8006684:	f5b6 4fc5 	cmp.w	r6, #25216	; 0x6280
 8006688:	d105      	bne.n	8006696 <mbedtls_strerror+0xe6>
            mbedtls_snprintf( buf, buflen, "CIPHER - Decryption of block requires a full block" );
 800668a:	4a9a      	ldr	r2, [pc, #616]	; (80068f4 <mbedtls_strerror+0x344>)
 800668c:	4629      	mov	r1, r5
 800668e:	4620      	mov	r0, r4
 8006690:	f00b fd68 	bl	8012164 <sniprintf>
 8006694:	e7a7      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_AUTH_FAILED) )
 8006696:	f5b6 4fc6 	cmp.w	r6, #25344	; 0x6300
 800669a:	d105      	bne.n	80066a8 <mbedtls_strerror+0xf8>
            mbedtls_snprintf( buf, buflen, "CIPHER - Authentication failed (for AEAD modes)" );
 800669c:	4a96      	ldr	r2, [pc, #600]	; (80068f8 <mbedtls_strerror+0x348>)
 800669e:	4629      	mov	r1, r5
 80066a0:	4620      	mov	r0, r4
 80066a2:	f00b fd5f 	bl	8012164 <sniprintf>
 80066a6:	e79e      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_CONTEXT) )
 80066a8:	f5b6 4fc7 	cmp.w	r6, #25472	; 0x6380
 80066ac:	d105      	bne.n	80066ba <mbedtls_strerror+0x10a>
            mbedtls_snprintf( buf, buflen, "CIPHER - The context is invalid. For example, because it was freed" );
 80066ae:	4a93      	ldr	r2, [pc, #588]	; (80068fc <mbedtls_strerror+0x34c>)
 80066b0:	4629      	mov	r1, r5
 80066b2:	4620      	mov	r0, r4
 80066b4:	f00b fd56 	bl	8012164 <sniprintf>
 80066b8:	e795      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_HW_ACCEL_FAILED) )
 80066ba:	f5b6 4fc8 	cmp.w	r6, #25600	; 0x6400
 80066be:	d105      	bne.n	80066cc <mbedtls_strerror+0x11c>
            mbedtls_snprintf( buf, buflen, "CIPHER - Cipher hardware accelerator failed" );
 80066c0:	4a8f      	ldr	r2, [pc, #572]	; (8006900 <mbedtls_strerror+0x350>)
 80066c2:	4629      	mov	r1, r5
 80066c4:	4620      	mov	r0, r4
 80066c6:	f00b fd4d 	bl	8012164 <sniprintf>
 80066ca:	e78c      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE) )
 80066cc:	f5b6 4fa1 	cmp.w	r6, #20608	; 0x5080
 80066d0:	d105      	bne.n	80066de <mbedtls_strerror+0x12e>
            mbedtls_snprintf( buf, buflen, "MD - The selected feature is not available" );
 80066d2:	4a8c      	ldr	r2, [pc, #560]	; (8006904 <mbedtls_strerror+0x354>)
 80066d4:	4629      	mov	r1, r5
 80066d6:	4620      	mov	r0, r4
 80066d8:	f00b fd44 	bl	8012164 <sniprintf>
 80066dc:	e783      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_MD_BAD_INPUT_DATA) )
 80066de:	f5b6 4fa2 	cmp.w	r6, #20736	; 0x5100
 80066e2:	d105      	bne.n	80066f0 <mbedtls_strerror+0x140>
            mbedtls_snprintf( buf, buflen, "MD - Bad input parameters to function" );
 80066e4:	4a88      	ldr	r2, [pc, #544]	; (8006908 <mbedtls_strerror+0x358>)
 80066e6:	4629      	mov	r1, r5
 80066e8:	4620      	mov	r0, r4
 80066ea:	f00b fd3b 	bl	8012164 <sniprintf>
 80066ee:	e77a      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_MD_ALLOC_FAILED) )
 80066f0:	f5b6 4fa3 	cmp.w	r6, #20864	; 0x5180
 80066f4:	d105      	bne.n	8006702 <mbedtls_strerror+0x152>
            mbedtls_snprintf( buf, buflen, "MD - Failed to allocate memory" );
 80066f6:	4a85      	ldr	r2, [pc, #532]	; (800690c <mbedtls_strerror+0x35c>)
 80066f8:	4629      	mov	r1, r5
 80066fa:	4620      	mov	r0, r4
 80066fc:	f00b fd32 	bl	8012164 <sniprintf>
 8006700:	e771      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_MD_FILE_IO_ERROR) )
 8006702:	f5b6 4fa4 	cmp.w	r6, #20992	; 0x5200
 8006706:	d105      	bne.n	8006714 <mbedtls_strerror+0x164>
            mbedtls_snprintf( buf, buflen, "MD - Opening or reading of file failed" );
 8006708:	4a81      	ldr	r2, [pc, #516]	; (8006910 <mbedtls_strerror+0x360>)
 800670a:	4629      	mov	r1, r5
 800670c:	4620      	mov	r0, r4
 800670e:	f00b fd29 	bl	8012164 <sniprintf>
 8006712:	e768      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_MD_HW_ACCEL_FAILED) )
 8006714:	f5b6 4fa5 	cmp.w	r6, #21120	; 0x5280
 8006718:	d105      	bne.n	8006726 <mbedtls_strerror+0x176>
            mbedtls_snprintf( buf, buflen, "MD - MD hardware accelerator failed" );
 800671a:	4a7e      	ldr	r2, [pc, #504]	; (8006914 <mbedtls_strerror+0x364>)
 800671c:	4629      	mov	r1, r5
 800671e:	4620      	mov	r0, r4
 8006720:	f00b fd20 	bl	8012164 <sniprintf>
 8006724:	e75f      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT) )
 8006726:	f5b6 5f84 	cmp.w	r6, #4224	; 0x1080
 800672a:	d105      	bne.n	8006738 <mbedtls_strerror+0x188>
            mbedtls_snprintf( buf, buflen, "PEM - No PEM header or footer found" );
 800672c:	4a7a      	ldr	r2, [pc, #488]	; (8006918 <mbedtls_strerror+0x368>)
 800672e:	4629      	mov	r1, r5
 8006730:	4620      	mov	r0, r4
 8006732:	f00b fd17 	bl	8012164 <sniprintf>
 8006736:	e756      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_DATA) )
 8006738:	f5b6 5f88 	cmp.w	r6, #4352	; 0x1100
 800673c:	d105      	bne.n	800674a <mbedtls_strerror+0x19a>
            mbedtls_snprintf( buf, buflen, "PEM - PEM string is not as expected" );
 800673e:	4a77      	ldr	r2, [pc, #476]	; (800691c <mbedtls_strerror+0x36c>)
 8006740:	4629      	mov	r1, r5
 8006742:	4620      	mov	r0, r4
 8006744:	f00b fd0e 	bl	8012164 <sniprintf>
 8006748:	e74d      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_ALLOC_FAILED) )
 800674a:	f5b6 5f8c 	cmp.w	r6, #4480	; 0x1180
 800674e:	d105      	bne.n	800675c <mbedtls_strerror+0x1ac>
            mbedtls_snprintf( buf, buflen, "PEM - Failed to allocate memory" );
 8006750:	4a73      	ldr	r2, [pc, #460]	; (8006920 <mbedtls_strerror+0x370>)
 8006752:	4629      	mov	r1, r5
 8006754:	4620      	mov	r0, r4
 8006756:	f00b fd05 	bl	8012164 <sniprintf>
 800675a:	e744      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_ENC_IV) )
 800675c:	f5b6 5f90 	cmp.w	r6, #4608	; 0x1200
 8006760:	d105      	bne.n	800676e <mbedtls_strerror+0x1be>
            mbedtls_snprintf( buf, buflen, "PEM - RSA IV is not in hex-format" );
 8006762:	4a70      	ldr	r2, [pc, #448]	; (8006924 <mbedtls_strerror+0x374>)
 8006764:	4629      	mov	r1, r5
 8006766:	4620      	mov	r0, r4
 8006768:	f00b fcfc 	bl	8012164 <sniprintf>
 800676c:	e73b      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG) )
 800676e:	f5b6 5f94 	cmp.w	r6, #4736	; 0x1280
 8006772:	d105      	bne.n	8006780 <mbedtls_strerror+0x1d0>
            mbedtls_snprintf( buf, buflen, "PEM - Unsupported key encryption algorithm" );
 8006774:	4a6c      	ldr	r2, [pc, #432]	; (8006928 <mbedtls_strerror+0x378>)
 8006776:	4629      	mov	r1, r5
 8006778:	4620      	mov	r0, r4
 800677a:	f00b fcf3 	bl	8012164 <sniprintf>
 800677e:	e732      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_REQUIRED) )
 8006780:	f5b6 5f98 	cmp.w	r6, #4864	; 0x1300
 8006784:	d105      	bne.n	8006792 <mbedtls_strerror+0x1e2>
            mbedtls_snprintf( buf, buflen, "PEM - Private key password can't be empty" );
 8006786:	4a69      	ldr	r2, [pc, #420]	; (800692c <mbedtls_strerror+0x37c>)
 8006788:	4629      	mov	r1, r5
 800678a:	4620      	mov	r0, r4
 800678c:	f00b fcea 	bl	8012164 <sniprintf>
 8006790:	e729      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_MISMATCH) )
 8006792:	f5b6 5f9c 	cmp.w	r6, #4992	; 0x1380
 8006796:	d105      	bne.n	80067a4 <mbedtls_strerror+0x1f4>
            mbedtls_snprintf( buf, buflen, "PEM - Given private key password does not allow for correct decryption" );
 8006798:	4a65      	ldr	r2, [pc, #404]	; (8006930 <mbedtls_strerror+0x380>)
 800679a:	4629      	mov	r1, r5
 800679c:	4620      	mov	r0, r4
 800679e:	f00b fce1 	bl	8012164 <sniprintf>
 80067a2:	e720      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE) )
 80067a4:	f5b6 5fa0 	cmp.w	r6, #5120	; 0x1400
 80067a8:	d105      	bne.n	80067b6 <mbedtls_strerror+0x206>
            mbedtls_snprintf( buf, buflen, "PEM - Unavailable feature, e.g. hashing/encryption combination" );
 80067aa:	4a62      	ldr	r2, [pc, #392]	; (8006934 <mbedtls_strerror+0x384>)
 80067ac:	4629      	mov	r1, r5
 80067ae:	4620      	mov	r0, r4
 80067b0:	f00b fcd8 	bl	8012164 <sniprintf>
 80067b4:	e717      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_BAD_INPUT_DATA) )
 80067b6:	f5b6 5fa4 	cmp.w	r6, #5248	; 0x1480
 80067ba:	d105      	bne.n	80067c8 <mbedtls_strerror+0x218>
            mbedtls_snprintf( buf, buflen, "PEM - Bad input parameters to function" );
 80067bc:	4a5e      	ldr	r2, [pc, #376]	; (8006938 <mbedtls_strerror+0x388>)
 80067be:	4629      	mov	r1, r5
 80067c0:	4620      	mov	r0, r4
 80067c2:	f00b fccf 	bl	8012164 <sniprintf>
 80067c6:	e70e      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_ALLOC_FAILED) )
 80067c8:	f5b6 5f7e 	cmp.w	r6, #16256	; 0x3f80
 80067cc:	d105      	bne.n	80067da <mbedtls_strerror+0x22a>
            mbedtls_snprintf( buf, buflen, "PK - Memory allocation failed" );
 80067ce:	4a5b      	ldr	r2, [pc, #364]	; (800693c <mbedtls_strerror+0x38c>)
 80067d0:	4629      	mov	r1, r5
 80067d2:	4620      	mov	r0, r4
 80067d4:	f00b fcc6 	bl	8012164 <sniprintf>
 80067d8:	e705      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_TYPE_MISMATCH) )
 80067da:	f5b6 5f7c 	cmp.w	r6, #16128	; 0x3f00
 80067de:	d105      	bne.n	80067ec <mbedtls_strerror+0x23c>
            mbedtls_snprintf( buf, buflen, "PK - Type mismatch, eg attempt to encrypt with an ECDSA key" );
 80067e0:	4a57      	ldr	r2, [pc, #348]	; (8006940 <mbedtls_strerror+0x390>)
 80067e2:	4629      	mov	r1, r5
 80067e4:	4620      	mov	r0, r4
 80067e6:	f00b fcbd 	bl	8012164 <sniprintf>
 80067ea:	e6fc      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_BAD_INPUT_DATA) )
 80067ec:	f5b6 5f7a 	cmp.w	r6, #16000	; 0x3e80
 80067f0:	d105      	bne.n	80067fe <mbedtls_strerror+0x24e>
            mbedtls_snprintf( buf, buflen, "PK - Bad input parameters to function" );
 80067f2:	4a54      	ldr	r2, [pc, #336]	; (8006944 <mbedtls_strerror+0x394>)
 80067f4:	4629      	mov	r1, r5
 80067f6:	4620      	mov	r0, r4
 80067f8:	f00b fcb4 	bl	8012164 <sniprintf>
 80067fc:	e6f3      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_FILE_IO_ERROR) )
 80067fe:	f5b6 5f78 	cmp.w	r6, #15872	; 0x3e00
 8006802:	d105      	bne.n	8006810 <mbedtls_strerror+0x260>
            mbedtls_snprintf( buf, buflen, "PK - Read/write of file failed" );
 8006804:	4a50      	ldr	r2, [pc, #320]	; (8006948 <mbedtls_strerror+0x398>)
 8006806:	4629      	mov	r1, r5
 8006808:	4620      	mov	r0, r4
 800680a:	f00b fcab 	bl	8012164 <sniprintf>
 800680e:	e6ea      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_VERSION) )
 8006810:	f5b6 5f76 	cmp.w	r6, #15744	; 0x3d80
 8006814:	d105      	bne.n	8006822 <mbedtls_strerror+0x272>
            mbedtls_snprintf( buf, buflen, "PK - Unsupported key version" );
 8006816:	4a4d      	ldr	r2, [pc, #308]	; (800694c <mbedtls_strerror+0x39c>)
 8006818:	4629      	mov	r1, r5
 800681a:	4620      	mov	r0, r4
 800681c:	f00b fca2 	bl	8012164 <sniprintf>
 8006820:	e6e1      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_FORMAT) )
 8006822:	f5b6 5f74 	cmp.w	r6, #15616	; 0x3d00
 8006826:	d105      	bne.n	8006834 <mbedtls_strerror+0x284>
            mbedtls_snprintf( buf, buflen, "PK - Invalid key tag or value" );
 8006828:	4a49      	ldr	r2, [pc, #292]	; (8006950 <mbedtls_strerror+0x3a0>)
 800682a:	4629      	mov	r1, r5
 800682c:	4620      	mov	r0, r4
 800682e:	f00b fc99 	bl	8012164 <sniprintf>
 8006832:	e6d8      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_PK_ALG) )
 8006834:	f5b6 5f72 	cmp.w	r6, #15488	; 0x3c80
 8006838:	d105      	bne.n	8006846 <mbedtls_strerror+0x296>
            mbedtls_snprintf( buf, buflen, "PK - Key algorithm is unsupported (only RSA and EC are supported)" );
 800683a:	4a46      	ldr	r2, [pc, #280]	; (8006954 <mbedtls_strerror+0x3a4>)
 800683c:	4629      	mov	r1, r5
 800683e:	4620      	mov	r0, r4
 8006840:	f00b fc90 	bl	8012164 <sniprintf>
 8006844:	e6cf      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_REQUIRED) )
 8006846:	f5b6 5f70 	cmp.w	r6, #15360	; 0x3c00
 800684a:	d105      	bne.n	8006858 <mbedtls_strerror+0x2a8>
            mbedtls_snprintf( buf, buflen, "PK - Private key password can't be empty" );
 800684c:	4a42      	ldr	r2, [pc, #264]	; (8006958 <mbedtls_strerror+0x3a8>)
 800684e:	4629      	mov	r1, r5
 8006850:	4620      	mov	r0, r4
 8006852:	f00b fc87 	bl	8012164 <sniprintf>
 8006856:	e6c6      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_MISMATCH) )
 8006858:	f5b6 5f6e 	cmp.w	r6, #15232	; 0x3b80
 800685c:	d105      	bne.n	800686a <mbedtls_strerror+0x2ba>
            mbedtls_snprintf( buf, buflen, "PK - Given private key password does not allow for correct decryption" );
 800685e:	4a3f      	ldr	r2, [pc, #252]	; (800695c <mbedtls_strerror+0x3ac>)
 8006860:	4629      	mov	r1, r5
 8006862:	4620      	mov	r0, r4
 8006864:	f00b fc7e 	bl	8012164 <sniprintf>
 8006868:	e6bd      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_PUBKEY) )
 800686a:	f5b6 5f6c 	cmp.w	r6, #15104	; 0x3b00
 800686e:	d105      	bne.n	800687c <mbedtls_strerror+0x2cc>
            mbedtls_snprintf( buf, buflen, "PK - The pubkey tag or value is invalid (only RSA and EC are supported)" );
 8006870:	4a3b      	ldr	r2, [pc, #236]	; (8006960 <mbedtls_strerror+0x3b0>)
 8006872:	4629      	mov	r1, r5
 8006874:	4620      	mov	r0, r4
 8006876:	f00b fc75 	bl	8012164 <sniprintf>
 800687a:	e6b4      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_ALG) )
 800687c:	f5b6 5f6a 	cmp.w	r6, #14976	; 0x3a80
 8006880:	d105      	bne.n	800688e <mbedtls_strerror+0x2de>
            mbedtls_snprintf( buf, buflen, "PK - The algorithm tag or value is invalid" );
 8006882:	4a38      	ldr	r2, [pc, #224]	; (8006964 <mbedtls_strerror+0x3b4>)
 8006884:	4629      	mov	r1, r5
 8006886:	4620      	mov	r0, r4
 8006888:	f00b fc6c 	bl	8012164 <sniprintf>
 800688c:	e6ab      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE) )
 800688e:	f5b6 5f68 	cmp.w	r6, #14848	; 0x3a00
 8006892:	d105      	bne.n	80068a0 <mbedtls_strerror+0x2f0>
            mbedtls_snprintf( buf, buflen, "PK - Elliptic curve is unsupported (only NIST curves are supported)" );
 8006894:	4a34      	ldr	r2, [pc, #208]	; (8006968 <mbedtls_strerror+0x3b8>)
 8006896:	4629      	mov	r1, r5
 8006898:	4620      	mov	r0, r4
 800689a:	f00b fc63 	bl	8012164 <sniprintf>
 800689e:	e6a2      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE) )
 80068a0:	f5b6 5f66 	cmp.w	r6, #14720	; 0x3980
 80068a4:	d105      	bne.n	80068b2 <mbedtls_strerror+0x302>
            mbedtls_snprintf( buf, buflen, "PK - Unavailable feature, e.g. RSA disabled for RSA key" );
 80068a6:	4a31      	ldr	r2, [pc, #196]	; (800696c <mbedtls_strerror+0x3bc>)
 80068a8:	4629      	mov	r1, r5
 80068aa:	4620      	mov	r0, r4
 80068ac:	f00b fc5a 	bl	8012164 <sniprintf>
 80068b0:	e699      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_SIG_LEN_MISMATCH) )
 80068b2:	f5b6 5f64 	cmp.w	r6, #14592	; 0x3900
 80068b6:	d105      	bne.n	80068c4 <mbedtls_strerror+0x314>
            mbedtls_snprintf( buf, buflen, "PK - The buffer contains a valid signature followed by more data" );
 80068b8:	4a2d      	ldr	r2, [pc, #180]	; (8006970 <mbedtls_strerror+0x3c0>)
 80068ba:	4629      	mov	r1, r5
 80068bc:	4620      	mov	r0, r4
 80068be:	f00b fc51 	bl	8012164 <sniprintf>
 80068c2:	e690      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_HW_ACCEL_FAILED) )
 80068c4:	f5b6 5f62 	cmp.w	r6, #14464	; 0x3880
 80068c8:	d156      	bne.n	8006978 <mbedtls_strerror+0x3c8>
            mbedtls_snprintf( buf, buflen, "PK - PK hardware accelerator failed" );
 80068ca:	4a2a      	ldr	r2, [pc, #168]	; (8006974 <mbedtls_strerror+0x3c4>)
 80068cc:	4629      	mov	r1, r5
 80068ce:	4620      	mov	r0, r4
 80068d0:	f00b fc48 	bl	8012164 <sniprintf>
 80068d4:	e687      	b.n	80065e6 <mbedtls_strerror+0x36>
 80068d6:	bf00      	nop
 80068d8:	08013d4a 	.word	0x08013d4a
 80068dc:	08015702 	.word	0x08015702
 80068e0:	08018a97 	.word	0x08018a97
 80068e4:	0801571c 	.word	0x0801571c
 80068e8:	08013d79 	.word	0x08013d79
 80068ec:	08013d97 	.word	0x08013d97
 80068f0:	08013dba 	.word	0x08013dba
 80068f4:	08013df7 	.word	0x08013df7
 80068f8:	08013e2a 	.word	0x08013e2a
 80068fc:	08013e5a 	.word	0x08013e5a
 8006900:	08013e9d 	.word	0x08013e9d
 8006904:	08013ec9 	.word	0x08013ec9
 8006908:	08013ef4 	.word	0x08013ef4
 800690c:	08013f1a 	.word	0x08013f1a
 8006910:	08013f39 	.word	0x08013f39
 8006914:	08013f60 	.word	0x08013f60
 8006918:	08013f84 	.word	0x08013f84
 800691c:	08013fa8 	.word	0x08013fa8
 8006920:	08013fcc 	.word	0x08013fcc
 8006924:	08013fec 	.word	0x08013fec
 8006928:	0801400e 	.word	0x0801400e
 800692c:	08014039 	.word	0x08014039
 8006930:	08014063 	.word	0x08014063
 8006934:	080140aa 	.word	0x080140aa
 8006938:	080140e9 	.word	0x080140e9
 800693c:	08014110 	.word	0x08014110
 8006940:	0801412e 	.word	0x0801412e
 8006944:	0801416a 	.word	0x0801416a
 8006948:	08014190 	.word	0x08014190
 800694c:	080141af 	.word	0x080141af
 8006950:	080141cc 	.word	0x080141cc
 8006954:	080141ea 	.word	0x080141ea
 8006958:	0801422c 	.word	0x0801422c
 800695c:	08014255 	.word	0x08014255
 8006960:	0801429b 	.word	0x0801429b
 8006964:	080142e3 	.word	0x080142e3
 8006968:	0801430e 	.word	0x0801430e
 800696c:	08014352 	.word	0x08014352
 8006970:	0801438a 	.word	0x0801438a
 8006974:	080143cb 	.word	0x080143cb
        if( use_ret == -(MBEDTLS_ERR_RSA_BAD_INPUT_DATA) )
 8006978:	f5b6 4f81 	cmp.w	r6, #16512	; 0x4080
 800697c:	d105      	bne.n	800698a <mbedtls_strerror+0x3da>
            mbedtls_snprintf( buf, buflen, "RSA - Bad input parameters to function" );
 800697e:	4abc      	ldr	r2, [pc, #752]	; (8006c70 <mbedtls_strerror+0x6c0>)
 8006980:	4629      	mov	r1, r5
 8006982:	4620      	mov	r0, r4
 8006984:	f00b fbee 	bl	8012164 <sniprintf>
 8006988:	e62d      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_INVALID_PADDING) )
 800698a:	f5b6 4f82 	cmp.w	r6, #16640	; 0x4100
 800698e:	d105      	bne.n	800699c <mbedtls_strerror+0x3ec>
            mbedtls_snprintf( buf, buflen, "RSA - Input data contains invalid padding and is rejected" );
 8006990:	4ab8      	ldr	r2, [pc, #736]	; (8006c74 <mbedtls_strerror+0x6c4>)
 8006992:	4629      	mov	r1, r5
 8006994:	4620      	mov	r0, r4
 8006996:	f00b fbe5 	bl	8012164 <sniprintf>
 800699a:	e624      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_KEY_GEN_FAILED) )
 800699c:	f5b6 4f83 	cmp.w	r6, #16768	; 0x4180
 80069a0:	d105      	bne.n	80069ae <mbedtls_strerror+0x3fe>
            mbedtls_snprintf( buf, buflen, "RSA - Something failed during generation of a key" );
 80069a2:	4ab5      	ldr	r2, [pc, #724]	; (8006c78 <mbedtls_strerror+0x6c8>)
 80069a4:	4629      	mov	r1, r5
 80069a6:	4620      	mov	r0, r4
 80069a8:	f00b fbdc 	bl	8012164 <sniprintf>
 80069ac:	e61b      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_KEY_CHECK_FAILED) )
 80069ae:	f5b6 4f84 	cmp.w	r6, #16896	; 0x4200
 80069b2:	d105      	bne.n	80069c0 <mbedtls_strerror+0x410>
            mbedtls_snprintf( buf, buflen, "RSA - Key failed to pass the validity check of the library" );
 80069b4:	4ab1      	ldr	r2, [pc, #708]	; (8006c7c <mbedtls_strerror+0x6cc>)
 80069b6:	4629      	mov	r1, r5
 80069b8:	4620      	mov	r0, r4
 80069ba:	f00b fbd3 	bl	8012164 <sniprintf>
 80069be:	e612      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_PUBLIC_FAILED) )
 80069c0:	f5b6 4f85 	cmp.w	r6, #17024	; 0x4280
 80069c4:	d105      	bne.n	80069d2 <mbedtls_strerror+0x422>
            mbedtls_snprintf( buf, buflen, "RSA - The public key operation failed" );
 80069c6:	4aae      	ldr	r2, [pc, #696]	; (8006c80 <mbedtls_strerror+0x6d0>)
 80069c8:	4629      	mov	r1, r5
 80069ca:	4620      	mov	r0, r4
 80069cc:	f00b fbca 	bl	8012164 <sniprintf>
 80069d0:	e609      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_PRIVATE_FAILED) )
 80069d2:	f5b6 4f86 	cmp.w	r6, #17152	; 0x4300
 80069d6:	d105      	bne.n	80069e4 <mbedtls_strerror+0x434>
            mbedtls_snprintf( buf, buflen, "RSA - The private key operation failed" );
 80069d8:	4aaa      	ldr	r2, [pc, #680]	; (8006c84 <mbedtls_strerror+0x6d4>)
 80069da:	4629      	mov	r1, r5
 80069dc:	4620      	mov	r0, r4
 80069de:	f00b fbc1 	bl	8012164 <sniprintf>
 80069e2:	e600      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_VERIFY_FAILED) )
 80069e4:	f5b6 4f87 	cmp.w	r6, #17280	; 0x4380
 80069e8:	d105      	bne.n	80069f6 <mbedtls_strerror+0x446>
            mbedtls_snprintf( buf, buflen, "RSA - The PKCS#1 verification failed" );
 80069ea:	4aa7      	ldr	r2, [pc, #668]	; (8006c88 <mbedtls_strerror+0x6d8>)
 80069ec:	4629      	mov	r1, r5
 80069ee:	4620      	mov	r0, r4
 80069f0:	f00b fbb8 	bl	8012164 <sniprintf>
 80069f4:	e5f7      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE) )
 80069f6:	f5b6 4f88 	cmp.w	r6, #17408	; 0x4400
 80069fa:	d105      	bne.n	8006a08 <mbedtls_strerror+0x458>
            mbedtls_snprintf( buf, buflen, "RSA - The output buffer for decryption is not large enough" );
 80069fc:	4aa3      	ldr	r2, [pc, #652]	; (8006c8c <mbedtls_strerror+0x6dc>)
 80069fe:	4629      	mov	r1, r5
 8006a00:	4620      	mov	r0, r4
 8006a02:	f00b fbaf 	bl	8012164 <sniprintf>
 8006a06:	e5ee      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_RNG_FAILED) )
 8006a08:	f5b6 4f89 	cmp.w	r6, #17536	; 0x4480
 8006a0c:	d105      	bne.n	8006a1a <mbedtls_strerror+0x46a>
            mbedtls_snprintf( buf, buflen, "RSA - The random generator failed to generate non-zeros" );
 8006a0e:	4aa0      	ldr	r2, [pc, #640]	; (8006c90 <mbedtls_strerror+0x6e0>)
 8006a10:	4629      	mov	r1, r5
 8006a12:	4620      	mov	r0, r4
 8006a14:	f00b fba6 	bl	8012164 <sniprintf>
 8006a18:	e5e5      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION) )
 8006a1a:	f5b6 4f8a 	cmp.w	r6, #17664	; 0x4500
 8006a1e:	d105      	bne.n	8006a2c <mbedtls_strerror+0x47c>
            mbedtls_snprintf( buf, buflen, "RSA - The implementation does not offer the requested operation, for example, because of security violations or lack of functionality" );
 8006a20:	4a9c      	ldr	r2, [pc, #624]	; (8006c94 <mbedtls_strerror+0x6e4>)
 8006a22:	4629      	mov	r1, r5
 8006a24:	4620      	mov	r0, r4
 8006a26:	f00b fb9d 	bl	8012164 <sniprintf>
 8006a2a:	e5dc      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_HW_ACCEL_FAILED) )
 8006a2c:	f5b6 4f8b 	cmp.w	r6, #17792	; 0x4580
 8006a30:	d105      	bne.n	8006a3e <mbedtls_strerror+0x48e>
            mbedtls_snprintf( buf, buflen, "RSA - RSA hardware accelerator failed" );
 8006a32:	4a99      	ldr	r2, [pc, #612]	; (8006c98 <mbedtls_strerror+0x6e8>)
 8006a34:	4629      	mov	r1, r5
 8006a36:	4620      	mov	r0, r4
 8006a38:	f00b fb94 	bl	8012164 <sniprintf>
 8006a3c:	e5d3      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE) )
 8006a3e:	f5b6 4fe1 	cmp.w	r6, #28800	; 0x7080
 8006a42:	d105      	bne.n	8006a50 <mbedtls_strerror+0x4a0>
            mbedtls_snprintf( buf, buflen, "SSL - The requested feature is not available" );
 8006a44:	4a95      	ldr	r2, [pc, #596]	; (8006c9c <mbedtls_strerror+0x6ec>)
 8006a46:	4629      	mov	r1, r5
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f00b fb8b 	bl	8012164 <sniprintf>
 8006a4e:	e5ca      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_INPUT_DATA) )
 8006a50:	f5b6 4fe2 	cmp.w	r6, #28928	; 0x7100
 8006a54:	d105      	bne.n	8006a62 <mbedtls_strerror+0x4b2>
            mbedtls_snprintf( buf, buflen, "SSL - Bad input parameters to function" );
 8006a56:	4a92      	ldr	r2, [pc, #584]	; (8006ca0 <mbedtls_strerror+0x6f0>)
 8006a58:	4629      	mov	r1, r5
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f00b fb82 	bl	8012164 <sniprintf>
 8006a60:	e5c1      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_MAC) )
 8006a62:	f5b6 4fe3 	cmp.w	r6, #29056	; 0x7180
 8006a66:	d105      	bne.n	8006a74 <mbedtls_strerror+0x4c4>
            mbedtls_snprintf( buf, buflen, "SSL - Verification of the message MAC failed" );
 8006a68:	4a8e      	ldr	r2, [pc, #568]	; (8006ca4 <mbedtls_strerror+0x6f4>)
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f00b fb79 	bl	8012164 <sniprintf>
 8006a72:	e5b8      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_RECORD) )
 8006a74:	f5b6 4fe4 	cmp.w	r6, #29184	; 0x7200
 8006a78:	d105      	bne.n	8006a86 <mbedtls_strerror+0x4d6>
            mbedtls_snprintf( buf, buflen, "SSL - An invalid SSL record was received" );
 8006a7a:	4a8b      	ldr	r2, [pc, #556]	; (8006ca8 <mbedtls_strerror+0x6f8>)
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f00b fb70 	bl	8012164 <sniprintf>
 8006a84:	e5af      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_CONN_EOF) )
 8006a86:	f5b6 4fe5 	cmp.w	r6, #29312	; 0x7280
 8006a8a:	d105      	bne.n	8006a98 <mbedtls_strerror+0x4e8>
            mbedtls_snprintf( buf, buflen, "SSL - The connection indicated an EOF" );
 8006a8c:	4a87      	ldr	r2, [pc, #540]	; (8006cac <mbedtls_strerror+0x6fc>)
 8006a8e:	4629      	mov	r1, r5
 8006a90:	4620      	mov	r0, r4
 8006a92:	f00b fb67 	bl	8012164 <sniprintf>
 8006a96:	e5a6      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNKNOWN_CIPHER) )
 8006a98:	f5b6 4fe6 	cmp.w	r6, #29440	; 0x7300
 8006a9c:	d105      	bne.n	8006aaa <mbedtls_strerror+0x4fa>
            mbedtls_snprintf( buf, buflen, "SSL - An unknown cipher was received" );
 8006a9e:	4a84      	ldr	r2, [pc, #528]	; (8006cb0 <mbedtls_strerror+0x700>)
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f00b fb5e 	bl	8012164 <sniprintf>
 8006aa8:	e59d      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN) )
 8006aaa:	f5b6 4fe7 	cmp.w	r6, #29568	; 0x7380
 8006aae:	d105      	bne.n	8006abc <mbedtls_strerror+0x50c>
            mbedtls_snprintf( buf, buflen, "SSL - The server has no ciphersuites in common with the client" );
 8006ab0:	4a80      	ldr	r2, [pc, #512]	; (8006cb4 <mbedtls_strerror+0x704>)
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f00b fb55 	bl	8012164 <sniprintf>
 8006aba:	e594      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_RNG) )
 8006abc:	f5b6 4fe8 	cmp.w	r6, #29696	; 0x7400
 8006ac0:	d105      	bne.n	8006ace <mbedtls_strerror+0x51e>
            mbedtls_snprintf( buf, buflen, "SSL - No RNG was provided to the SSL module" );
 8006ac2:	4a7d      	ldr	r2, [pc, #500]	; (8006cb8 <mbedtls_strerror+0x708>)
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f00b fb4c 	bl	8012164 <sniprintf>
 8006acc:	e58b      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE) )
 8006ace:	f5b6 4fe9 	cmp.w	r6, #29824	; 0x7480
 8006ad2:	d105      	bne.n	8006ae0 <mbedtls_strerror+0x530>
            mbedtls_snprintf( buf, buflen, "SSL - No client certification received from the client, but required by the authentication mode" );
 8006ad4:	4a79      	ldr	r2, [pc, #484]	; (8006cbc <mbedtls_strerror+0x70c>)
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f00b fb43 	bl	8012164 <sniprintf>
 8006ade:	e582      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE) )
 8006ae0:	f5b6 4fea 	cmp.w	r6, #29952	; 0x7500
 8006ae4:	d105      	bne.n	8006af2 <mbedtls_strerror+0x542>
            mbedtls_snprintf( buf, buflen, "SSL - Our own certificate(s) is/are too large to send in an SSL message" );
 8006ae6:	4a76      	ldr	r2, [pc, #472]	; (8006cc0 <mbedtls_strerror+0x710>)
 8006ae8:	4629      	mov	r1, r5
 8006aea:	4620      	mov	r0, r4
 8006aec:	f00b fb3a 	bl	8012164 <sniprintf>
 8006af0:	e579      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED) )
 8006af2:	f5b6 4feb 	cmp.w	r6, #30080	; 0x7580
 8006af6:	d105      	bne.n	8006b04 <mbedtls_strerror+0x554>
            mbedtls_snprintf( buf, buflen, "SSL - The own certificate is not set, but needed by the server" );
 8006af8:	4a72      	ldr	r2, [pc, #456]	; (8006cc4 <mbedtls_strerror+0x714>)
 8006afa:	4629      	mov	r1, r5
 8006afc:	4620      	mov	r0, r4
 8006afe:	f00b fb31 	bl	8012164 <sniprintf>
 8006b02:	e570      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED) )
 8006b04:	f5b6 4fec 	cmp.w	r6, #30208	; 0x7600
 8006b08:	d105      	bne.n	8006b16 <mbedtls_strerror+0x566>
            mbedtls_snprintf( buf, buflen, "SSL - The own private key or pre-shared key is not set, but needed" );
 8006b0a:	4a6f      	ldr	r2, [pc, #444]	; (8006cc8 <mbedtls_strerror+0x718>)
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f00b fb28 	bl	8012164 <sniprintf>
 8006b14:	e567      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED) )
 8006b16:	f5b6 4fed 	cmp.w	r6, #30336	; 0x7680
 8006b1a:	d105      	bne.n	8006b28 <mbedtls_strerror+0x578>
            mbedtls_snprintf( buf, buflen, "SSL - No CA Chain is set, but required to operate" );
 8006b1c:	4a6b      	ldr	r2, [pc, #428]	; (8006ccc <mbedtls_strerror+0x71c>)
 8006b1e:	4629      	mov	r1, r5
 8006b20:	4620      	mov	r0, r4
 8006b22:	f00b fb1f 	bl	8012164 <sniprintf>
 8006b26:	e55e      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE) )
 8006b28:	f5b6 4fee 	cmp.w	r6, #30464	; 0x7700
 8006b2c:	d105      	bne.n	8006b3a <mbedtls_strerror+0x58a>
            mbedtls_snprintf( buf, buflen, "SSL - An unexpected message was received from our peer" );
 8006b2e:	4a68      	ldr	r2, [pc, #416]	; (8006cd0 <mbedtls_strerror+0x720>)
 8006b30:	4629      	mov	r1, r5
 8006b32:	4620      	mov	r0, r4
 8006b34:	f00b fb16 	bl	8012164 <sniprintf>
 8006b38:	e555      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE) )
 8006b3a:	f5b6 4fef 	cmp.w	r6, #30592	; 0x7780
 8006b3e:	d106      	bne.n	8006b4e <mbedtls_strerror+0x59e>
            mbedtls_snprintf( buf, buflen, "SSL - A fatal alert message was received from our peer" );
 8006b40:	4629      	mov	r1, r5
 8006b42:	4620      	mov	r0, r4
}
 8006b44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            mbedtls_snprintf( buf, buflen, "SSL - A fatal alert message was received from our peer" );
 8006b48:	4a62      	ldr	r2, [pc, #392]	; (8006cd4 <mbedtls_strerror+0x724>)
 8006b4a:	f00b bb0b 	b.w	8012164 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_PEER_VERIFY_FAILED) )
 8006b4e:	f5b6 4ff0 	cmp.w	r6, #30720	; 0x7800
 8006b52:	d105      	bne.n	8006b60 <mbedtls_strerror+0x5b0>
            mbedtls_snprintf( buf, buflen, "SSL - Verification of our peer failed" );
 8006b54:	4a60      	ldr	r2, [pc, #384]	; (8006cd8 <mbedtls_strerror+0x728>)
 8006b56:	4629      	mov	r1, r5
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f00b fb03 	bl	8012164 <sniprintf>
 8006b5e:	e542      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY) )
 8006b60:	f5b6 4ff1 	cmp.w	r6, #30848	; 0x7880
 8006b64:	d105      	bne.n	8006b72 <mbedtls_strerror+0x5c2>
            mbedtls_snprintf( buf, buflen, "SSL - The peer notified us that the connection is going to be closed" );
 8006b66:	4a5d      	ldr	r2, [pc, #372]	; (8006cdc <mbedtls_strerror+0x72c>)
 8006b68:	4629      	mov	r1, r5
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f00b fafa 	bl	8012164 <sniprintf>
 8006b70:	e539      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO) )
 8006b72:	f5b6 4ff2 	cmp.w	r6, #30976	; 0x7900
 8006b76:	d105      	bne.n	8006b84 <mbedtls_strerror+0x5d4>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientHello handshake message failed" );
 8006b78:	4a59      	ldr	r2, [pc, #356]	; (8006ce0 <mbedtls_strerror+0x730>)
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f00b faf1 	bl	8012164 <sniprintf>
 8006b82:	e530      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO) )
 8006b84:	f5b6 4ff3 	cmp.w	r6, #31104	; 0x7980
 8006b88:	d105      	bne.n	8006b96 <mbedtls_strerror+0x5e6>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerHello handshake message failed" );
 8006b8a:	4a56      	ldr	r2, [pc, #344]	; (8006ce4 <mbedtls_strerror+0x734>)
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f00b fae8 	bl	8012164 <sniprintf>
 8006b94:	e527      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE) )
 8006b96:	f5b6 4ff4 	cmp.w	r6, #31232	; 0x7a00
 8006b9a:	d105      	bne.n	8006ba8 <mbedtls_strerror+0x5f8>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the Certificate handshake message failed" );
 8006b9c:	4a52      	ldr	r2, [pc, #328]	; (8006ce8 <mbedtls_strerror+0x738>)
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f00b fadf 	bl	8012164 <sniprintf>
 8006ba6:	e51e      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST) )
 8006ba8:	f5b6 4ff5 	cmp.w	r6, #31360	; 0x7a80
 8006bac:	d105      	bne.n	8006bba <mbedtls_strerror+0x60a>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the CertificateRequest handshake message failed" );
 8006bae:	4a4f      	ldr	r2, [pc, #316]	; (8006cec <mbedtls_strerror+0x73c>)
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f00b fad6 	bl	8012164 <sniprintf>
 8006bb8:	e515      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE) )
 8006bba:	f5b6 4ff6 	cmp.w	r6, #31488	; 0x7b00
 8006bbe:	d105      	bne.n	8006bcc <mbedtls_strerror+0x61c>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerKeyExchange handshake message failed" );
 8006bc0:	4a4b      	ldr	r2, [pc, #300]	; (8006cf0 <mbedtls_strerror+0x740>)
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f00b facd 	bl	8012164 <sniprintf>
 8006bca:	e50c      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE) )
 8006bcc:	f5b6 4ff7 	cmp.w	r6, #31616	; 0x7b80
 8006bd0:	d105      	bne.n	8006bde <mbedtls_strerror+0x62e>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerHelloDone handshake message failed" );
 8006bd2:	4a48      	ldr	r2, [pc, #288]	; (8006cf4 <mbedtls_strerror+0x744>)
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f00b fac4 	bl	8012164 <sniprintf>
 8006bdc:	e503      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE) )
 8006bde:	f5b6 4ff8 	cmp.w	r6, #31744	; 0x7c00
 8006be2:	d105      	bne.n	8006bf0 <mbedtls_strerror+0x640>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed" );
 8006be4:	4a44      	ldr	r2, [pc, #272]	; (8006cf8 <mbedtls_strerror+0x748>)
 8006be6:	4629      	mov	r1, r5
 8006be8:	4620      	mov	r0, r4
 8006bea:	f00b fabb 	bl	8012164 <sniprintf>
 8006bee:	e4fa      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP) )
 8006bf0:	f5b6 4ff9 	cmp.w	r6, #31872	; 0x7c80
 8006bf4:	d105      	bne.n	8006c02 <mbedtls_strerror+0x652>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Read Public" );
 8006bf6:	4a41      	ldr	r2, [pc, #260]	; (8006cfc <mbedtls_strerror+0x74c>)
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f00b fab2 	bl	8012164 <sniprintf>
 8006c00:	e4f1      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS) )
 8006c02:	f5b6 4ffa 	cmp.w	r6, #32000	; 0x7d00
 8006c06:	d105      	bne.n	8006c14 <mbedtls_strerror+0x664>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Calculate Secret" );
 8006c08:	4a3d      	ldr	r2, [pc, #244]	; (8006d00 <mbedtls_strerror+0x750>)
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f00b faa9 	bl	8012164 <sniprintf>
 8006c12:	e4e8      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY) )
 8006c14:	f5b6 4ffb 	cmp.w	r6, #32128	; 0x7d80
 8006c18:	d105      	bne.n	8006c26 <mbedtls_strerror+0x676>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the CertificateVerify handshake message failed" );
 8006c1a:	4a3a      	ldr	r2, [pc, #232]	; (8006d04 <mbedtls_strerror+0x754>)
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f00b faa0 	bl	8012164 <sniprintf>
 8006c24:	e4df      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC) )
 8006c26:	f5b6 4ffc 	cmp.w	r6, #32256	; 0x7e00
 8006c2a:	d105      	bne.n	8006c38 <mbedtls_strerror+0x688>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ChangeCipherSpec handshake message failed" );
 8006c2c:	4a36      	ldr	r2, [pc, #216]	; (8006d08 <mbedtls_strerror+0x758>)
 8006c2e:	4629      	mov	r1, r5
 8006c30:	4620      	mov	r0, r4
 8006c32:	f00b fa97 	bl	8012164 <sniprintf>
 8006c36:	e4d6      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_FINISHED) )
 8006c38:	f5b6 4ffd 	cmp.w	r6, #32384	; 0x7e80
 8006c3c:	d105      	bne.n	8006c4a <mbedtls_strerror+0x69a>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the Finished handshake message failed" );
 8006c3e:	4a33      	ldr	r2, [pc, #204]	; (8006d0c <mbedtls_strerror+0x75c>)
 8006c40:	4629      	mov	r1, r5
 8006c42:	4620      	mov	r0, r4
 8006c44:	f00b fa8e 	bl	8012164 <sniprintf>
 8006c48:	e4cd      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_ALLOC_FAILED) )
 8006c4a:	f5b6 4ffe 	cmp.w	r6, #32512	; 0x7f00
 8006c4e:	d105      	bne.n	8006c5c <mbedtls_strerror+0x6ac>
            mbedtls_snprintf( buf, buflen, "SSL - Memory allocation failed" );
 8006c50:	4a2f      	ldr	r2, [pc, #188]	; (8006d10 <mbedtls_strerror+0x760>)
 8006c52:	4629      	mov	r1, r5
 8006c54:	4620      	mov	r0, r4
 8006c56:	f00b fa85 	bl	8012164 <sniprintf>
 8006c5a:	e4c4      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_HW_ACCEL_FAILED) )
 8006c5c:	f5b6 4fff 	cmp.w	r6, #32640	; 0x7f80
 8006c60:	d15a      	bne.n	8006d18 <mbedtls_strerror+0x768>
            mbedtls_snprintf( buf, buflen, "SSL - Hardware acceleration function returned with error" );
 8006c62:	4a2c      	ldr	r2, [pc, #176]	; (8006d14 <mbedtls_strerror+0x764>)
 8006c64:	4629      	mov	r1, r5
 8006c66:	4620      	mov	r0, r4
 8006c68:	f00b fa7c 	bl	8012164 <sniprintf>
 8006c6c:	e4bb      	b.n	80065e6 <mbedtls_strerror+0x36>
 8006c6e:	bf00      	nop
 8006c70:	080143ef 	.word	0x080143ef
 8006c74:	08014416 	.word	0x08014416
 8006c78:	08014450 	.word	0x08014450
 8006c7c:	08014482 	.word	0x08014482
 8006c80:	080144bd 	.word	0x080144bd
 8006c84:	080144e3 	.word	0x080144e3
 8006c88:	0801450a 	.word	0x0801450a
 8006c8c:	0801452f 	.word	0x0801452f
 8006c90:	0801456a 	.word	0x0801456a
 8006c94:	080145a2 	.word	0x080145a2
 8006c98:	08014628 	.word	0x08014628
 8006c9c:	0801464e 	.word	0x0801464e
 8006ca0:	0801467b 	.word	0x0801467b
 8006ca4:	080146a2 	.word	0x080146a2
 8006ca8:	080146cf 	.word	0x080146cf
 8006cac:	080146f8 	.word	0x080146f8
 8006cb0:	0801471e 	.word	0x0801471e
 8006cb4:	08014743 	.word	0x08014743
 8006cb8:	08014782 	.word	0x08014782
 8006cbc:	080147ae 	.word	0x080147ae
 8006cc0:	0801480e 	.word	0x0801480e
 8006cc4:	08014856 	.word	0x08014856
 8006cc8:	08014895 	.word	0x08014895
 8006ccc:	080148d8 	.word	0x080148d8
 8006cd0:	0801490a 	.word	0x0801490a
 8006cd4:	08014941 	.word	0x08014941
 8006cd8:	08014978 	.word	0x08014978
 8006cdc:	0801499e 	.word	0x0801499e
 8006ce0:	080149e3 	.word	0x080149e3
 8006ce4:	08014a20 	.word	0x08014a20
 8006ce8:	08014a5d 	.word	0x08014a5d
 8006cec:	08014a9a 	.word	0x08014a9a
 8006cf0:	08014ade 	.word	0x08014ade
 8006cf4:	08014b21 	.word	0x08014b21
 8006cf8:	08014b62 	.word	0x08014b62
 8006cfc:	08014ba5 	.word	0x08014ba5
 8006d00:	08014c02 	.word	0x08014c02
 8006d04:	08014c64 	.word	0x08014c64
 8006d08:	08014ca7 	.word	0x08014ca7
 8006d0c:	08014ce9 	.word	0x08014ce9
 8006d10:	08014d23 	.word	0x08014d23
 8006d14:	08014d42 	.word	0x08014d42
        if( use_ret == -(MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH) )
 8006d18:	f5b6 4fdf 	cmp.w	r6, #28544	; 0x6f80
 8006d1c:	d105      	bne.n	8006d2a <mbedtls_strerror+0x77a>
            mbedtls_snprintf( buf, buflen, "SSL - Hardware acceleration function skipped / left alone data" );
 8006d1e:	4acb      	ldr	r2, [pc, #812]	; (800704c <mbedtls_strerror+0xa9c>)
 8006d20:	4629      	mov	r1, r5
 8006d22:	4620      	mov	r0, r4
 8006d24:	f00b fa1e 	bl	8012164 <sniprintf>
 8006d28:	e45d      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_COMPRESSION_FAILED) )
 8006d2a:	f5b6 4fde 	cmp.w	r6, #28416	; 0x6f00
 8006d2e:	d105      	bne.n	8006d3c <mbedtls_strerror+0x78c>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the compression / decompression failed" );
 8006d30:	4ac7      	ldr	r2, [pc, #796]	; (8007050 <mbedtls_strerror+0xaa0>)
 8006d32:	4629      	mov	r1, r5
 8006d34:	4620      	mov	r0, r4
 8006d36:	f00b fa15 	bl	8012164 <sniprintf>
 8006d3a:	e454      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION) )
 8006d3c:	f5b6 4fdd 	cmp.w	r6, #28288	; 0x6e80
 8006d40:	d105      	bne.n	8006d4e <mbedtls_strerror+0x79e>
            mbedtls_snprintf( buf, buflen, "SSL - Handshake protocol not within min/max boundaries" );
 8006d42:	4ac4      	ldr	r2, [pc, #784]	; (8007054 <mbedtls_strerror+0xaa4>)
 8006d44:	4629      	mov	r1, r5
 8006d46:	4620      	mov	r0, r4
 8006d48:	f00b fa0c 	bl	8012164 <sniprintf>
 8006d4c:	e44b      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET) )
 8006d4e:	f5b6 4fdc 	cmp.w	r6, #28160	; 0x6e00
 8006d52:	d105      	bne.n	8006d60 <mbedtls_strerror+0x7b0>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the NewSessionTicket handshake message failed" );
 8006d54:	4ac0      	ldr	r2, [pc, #768]	; (8007058 <mbedtls_strerror+0xaa8>)
 8006d56:	4629      	mov	r1, r5
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f00b fa03 	bl	8012164 <sniprintf>
 8006d5e:	e442      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED) )
 8006d60:	f5b6 4fdb 	cmp.w	r6, #28032	; 0x6d80
 8006d64:	d105      	bne.n	8006d72 <mbedtls_strerror+0x7c2>
            mbedtls_snprintf( buf, buflen, "SSL - Session ticket has expired" );
 8006d66:	4abd      	ldr	r2, [pc, #756]	; (800705c <mbedtls_strerror+0xaac>)
 8006d68:	4629      	mov	r1, r5
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f00b f9fa 	bl	8012164 <sniprintf>
 8006d70:	e439      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH) )
 8006d72:	f5b6 4fda 	cmp.w	r6, #27904	; 0x6d00
 8006d76:	d105      	bne.n	8006d84 <mbedtls_strerror+0x7d4>
            mbedtls_snprintf( buf, buflen, "SSL - Public key type mismatch (eg, asked for RSA key exchange and presented EC key)" );
 8006d78:	4ab9      	ldr	r2, [pc, #740]	; (8007060 <mbedtls_strerror+0xab0>)
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f00b f9f1 	bl	8012164 <sniprintf>
 8006d82:	e430      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY) )
 8006d84:	f5b6 4fd9 	cmp.w	r6, #27776	; 0x6c80
 8006d88:	d105      	bne.n	8006d96 <mbedtls_strerror+0x7e6>
            mbedtls_snprintf( buf, buflen, "SSL - Unknown identity received (eg, PSK identity)" );
 8006d8a:	4ab6      	ldr	r2, [pc, #728]	; (8007064 <mbedtls_strerror+0xab4>)
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f00b f9e8 	bl	8012164 <sniprintf>
 8006d94:	e427      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_INTERNAL_ERROR) )
 8006d96:	f5b6 4fd8 	cmp.w	r6, #27648	; 0x6c00
 8006d9a:	d105      	bne.n	8006da8 <mbedtls_strerror+0x7f8>
            mbedtls_snprintf( buf, buflen, "SSL - Internal error (eg, unexpected failure in lower-level module)" );
 8006d9c:	4ab2      	ldr	r2, [pc, #712]	; (8007068 <mbedtls_strerror+0xab8>)
 8006d9e:	4629      	mov	r1, r5
 8006da0:	4620      	mov	r0, r4
 8006da2:	f00b f9df 	bl	8012164 <sniprintf>
 8006da6:	e41e      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_COUNTER_WRAPPING) )
 8006da8:	f5b6 4fd7 	cmp.w	r6, #27520	; 0x6b80
 8006dac:	d105      	bne.n	8006dba <mbedtls_strerror+0x80a>
            mbedtls_snprintf( buf, buflen, "SSL - A counter would wrap (eg, too many messages exchanged)" );
 8006dae:	4aaf      	ldr	r2, [pc, #700]	; (800706c <mbedtls_strerror+0xabc>)
 8006db0:	4629      	mov	r1, r5
 8006db2:	4620      	mov	r0, r4
 8006db4:	f00b f9d6 	bl	8012164 <sniprintf>
 8006db8:	e415      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO) )
 8006dba:	f5b6 4fd6 	cmp.w	r6, #27392	; 0x6b00
 8006dbe:	d105      	bne.n	8006dcc <mbedtls_strerror+0x81c>
            mbedtls_snprintf( buf, buflen, "SSL - Unexpected message at ServerHello in renegotiation" );
 8006dc0:	4aab      	ldr	r2, [pc, #684]	; (8007070 <mbedtls_strerror+0xac0>)
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f00b f9cd 	bl	8012164 <sniprintf>
 8006dca:	e40c      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED) )
 8006dcc:	f5b6 4fd5 	cmp.w	r6, #27264	; 0x6a80
 8006dd0:	d105      	bne.n	8006dde <mbedtls_strerror+0x82e>
            mbedtls_snprintf( buf, buflen, "SSL - DTLS client must retry for hello verification" );
 8006dd2:	4aa8      	ldr	r2, [pc, #672]	; (8007074 <mbedtls_strerror+0xac4>)
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f00b f9c4 	bl	8012164 <sniprintf>
 8006ddc:	e403      	b.n	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL) )
 8006dde:	f5b6 4fd4 	cmp.w	r6, #27136	; 0x6a00
 8006de2:	d106      	bne.n	8006df2 <mbedtls_strerror+0x842>
            mbedtls_snprintf( buf, buflen, "SSL - A buffer is too small to receive or write a message" );
 8006de4:	4aa4      	ldr	r2, [pc, #656]	; (8007078 <mbedtls_strerror+0xac8>)
 8006de6:	4629      	mov	r1, r5
 8006de8:	4620      	mov	r0, r4
 8006dea:	f00b f9bb 	bl	8012164 <sniprintf>
 8006dee:	f7ff bbfa 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE) )
 8006df2:	f5b6 4fd3 	cmp.w	r6, #27008	; 0x6980
 8006df6:	d106      	bne.n	8006e06 <mbedtls_strerror+0x856>
            mbedtls_snprintf( buf, buflen, "SSL - None of the common ciphersuites is usable (eg, no suitable certificate, see debug messages)" );
 8006df8:	4aa0      	ldr	r2, [pc, #640]	; (800707c <mbedtls_strerror+0xacc>)
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f00b f9b1 	bl	8012164 <sniprintf>
 8006e02:	f7ff bbf0 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_WANT_READ) )
 8006e06:	f5b6 4fd2 	cmp.w	r6, #26880	; 0x6900
 8006e0a:	d106      	bne.n	8006e1a <mbedtls_strerror+0x86a>
            mbedtls_snprintf( buf, buflen, "SSL - No data of requested type currently available on underlying transport" );
 8006e0c:	4a9c      	ldr	r2, [pc, #624]	; (8007080 <mbedtls_strerror+0xad0>)
 8006e0e:	4629      	mov	r1, r5
 8006e10:	4620      	mov	r0, r4
 8006e12:	f00b f9a7 	bl	8012164 <sniprintf>
 8006e16:	f7ff bbe6 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_WANT_WRITE) )
 8006e1a:	f5b6 4fd1 	cmp.w	r6, #26752	; 0x6880
 8006e1e:	d106      	bne.n	8006e2e <mbedtls_strerror+0x87e>
            mbedtls_snprintf( buf, buflen, "SSL - Connection requires a write call" );
 8006e20:	4a98      	ldr	r2, [pc, #608]	; (8007084 <mbedtls_strerror+0xad4>)
 8006e22:	4629      	mov	r1, r5
 8006e24:	4620      	mov	r0, r4
 8006e26:	f00b f99d 	bl	8012164 <sniprintf>
 8006e2a:	f7ff bbdc 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_TIMEOUT) )
 8006e2e:	f5b6 4fd0 	cmp.w	r6, #26624	; 0x6800
 8006e32:	d106      	bne.n	8006e42 <mbedtls_strerror+0x892>
            mbedtls_snprintf( buf, buflen, "SSL - The operation timed out" );
 8006e34:	4a94      	ldr	r2, [pc, #592]	; (8007088 <mbedtls_strerror+0xad8>)
 8006e36:	4629      	mov	r1, r5
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f00b f993 	bl	8012164 <sniprintf>
 8006e3e:	f7ff bbd2 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_CLIENT_RECONNECT) )
 8006e42:	f5b6 4fcf 	cmp.w	r6, #26496	; 0x6780
 8006e46:	d106      	bne.n	8006e56 <mbedtls_strerror+0x8a6>
            mbedtls_snprintf( buf, buflen, "SSL - The client initiated a reconnect from the same port" );
 8006e48:	4a90      	ldr	r2, [pc, #576]	; (800708c <mbedtls_strerror+0xadc>)
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f00b f989 	bl	8012164 <sniprintf>
 8006e52:	f7ff bbc8 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNEXPECTED_RECORD) )
 8006e56:	f5b6 4fce 	cmp.w	r6, #26368	; 0x6700
 8006e5a:	d106      	bne.n	8006e6a <mbedtls_strerror+0x8ba>
            mbedtls_snprintf( buf, buflen, "SSL - Record header looks valid but is not expected" );
 8006e5c:	4a8c      	ldr	r2, [pc, #560]	; (8007090 <mbedtls_strerror+0xae0>)
 8006e5e:	4629      	mov	r1, r5
 8006e60:	4620      	mov	r0, r4
 8006e62:	f00b f97f 	bl	8012164 <sniprintf>
 8006e66:	f7ff bbbe 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_NON_FATAL) )
 8006e6a:	f5b6 4fcd 	cmp.w	r6, #26240	; 0x6680
 8006e6e:	d106      	bne.n	8006e7e <mbedtls_strerror+0x8ce>
            mbedtls_snprintf( buf, buflen, "SSL - The alert message received indicates a non-fatal error" );
 8006e70:	4a88      	ldr	r2, [pc, #544]	; (8007094 <mbedtls_strerror+0xae4>)
 8006e72:	4629      	mov	r1, r5
 8006e74:	4620      	mov	r0, r4
 8006e76:	f00b f975 	bl	8012164 <sniprintf>
 8006e7a:	f7ff bbb4 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH) )
 8006e7e:	f5b6 4fcc 	cmp.w	r6, #26112	; 0x6600
 8006e82:	d106      	bne.n	8006e92 <mbedtls_strerror+0x8e2>
            mbedtls_snprintf( buf, buflen, "SSL - Couldn't set the hash for verifying CertificateVerify" );
 8006e84:	4a84      	ldr	r2, [pc, #528]	; (8007098 <mbedtls_strerror+0xae8>)
 8006e86:	4629      	mov	r1, r5
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f00b f96b 	bl	8012164 <sniprintf>
 8006e8e:	f7ff bbaa 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_CONTINUE_PROCESSING) )
 8006e92:	f5b6 4fcb 	cmp.w	r6, #25984	; 0x6580
 8006e96:	d106      	bne.n	8006ea6 <mbedtls_strerror+0x8f6>
            mbedtls_snprintf( buf, buflen, "SSL - Internal-only message signaling that further message-processing should be done" );
 8006e98:	4a80      	ldr	r2, [pc, #512]	; (800709c <mbedtls_strerror+0xaec>)
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f00b f961 	bl	8012164 <sniprintf>
 8006ea2:	f7ff bba0 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS) )
 8006ea6:	f5b6 4fca 	cmp.w	r6, #25856	; 0x6500
 8006eaa:	d106      	bne.n	8006eba <mbedtls_strerror+0x90a>
            mbedtls_snprintf( buf, buflen, "SSL - The asynchronous operation is not completed yet" );
 8006eac:	4a7c      	ldr	r2, [pc, #496]	; (80070a0 <mbedtls_strerror+0xaf0>)
 8006eae:	4629      	mov	r1, r5
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f00b f957 	bl	8012164 <sniprintf>
 8006eb6:	f7ff bb96 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_EARLY_MESSAGE) )
 8006eba:	f5b6 4fc9 	cmp.w	r6, #25728	; 0x6480
 8006ebe:	d106      	bne.n	8006ece <mbedtls_strerror+0x91e>
            mbedtls_snprintf( buf, buflen, "SSL - Internal-only message signaling that a message arrived early" );
 8006ec0:	4a78      	ldr	r2, [pc, #480]	; (80070a4 <mbedtls_strerror+0xaf4>)
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f00b f94d 	bl	8012164 <sniprintf>
 8006eca:	f7ff bb8c 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS) )
 8006ece:	f5b6 4fe0 	cmp.w	r6, #28672	; 0x7000
 8006ed2:	d106      	bne.n	8006ee2 <mbedtls_strerror+0x932>
            mbedtls_snprintf( buf, buflen, "SSL - A cryptographic operation is in progress. Try again later" );
 8006ed4:	4a74      	ldr	r2, [pc, #464]	; (80070a8 <mbedtls_strerror+0xaf8>)
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f00b f943 	bl	8012164 <sniprintf>
 8006ede:	f7ff bb82 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE) )
 8006ee2:	f5b6 5f02 	cmp.w	r6, #8320	; 0x2080
 8006ee6:	d106      	bne.n	8006ef6 <mbedtls_strerror+0x946>
            mbedtls_snprintf( buf, buflen, "X509 - Unavailable feature, e.g. RSA hashing/encryption combination" );
 8006ee8:	4a70      	ldr	r2, [pc, #448]	; (80070ac <mbedtls_strerror+0xafc>)
 8006eea:	4629      	mov	r1, r5
 8006eec:	4620      	mov	r0, r4
 8006eee:	f00b f939 	bl	8012164 <sniprintf>
 8006ef2:	f7ff bb78 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_OID) )
 8006ef6:	f5b6 5f04 	cmp.w	r6, #8448	; 0x2100
 8006efa:	d106      	bne.n	8006f0a <mbedtls_strerror+0x95a>
            mbedtls_snprintf( buf, buflen, "X509 - Requested OID is unknown" );
 8006efc:	4a6c      	ldr	r2, [pc, #432]	; (80070b0 <mbedtls_strerror+0xb00>)
 8006efe:	4629      	mov	r1, r5
 8006f00:	4620      	mov	r0, r4
 8006f02:	f00b f92f 	bl	8012164 <sniprintf>
 8006f06:	f7ff bb6e 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_FORMAT) )
 8006f0a:	f5b6 5f06 	cmp.w	r6, #8576	; 0x2180
 8006f0e:	d106      	bne.n	8006f1e <mbedtls_strerror+0x96e>
            mbedtls_snprintf( buf, buflen, "X509 - The CRT/CRL/CSR format is invalid, e.g. different type expected" );
 8006f10:	4a68      	ldr	r2, [pc, #416]	; (80070b4 <mbedtls_strerror+0xb04>)
 8006f12:	4629      	mov	r1, r5
 8006f14:	4620      	mov	r0, r4
 8006f16:	f00b f925 	bl	8012164 <sniprintf>
 8006f1a:	f7ff bb64 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_VERSION) )
 8006f1e:	f5b6 5f08 	cmp.w	r6, #8704	; 0x2200
 8006f22:	d106      	bne.n	8006f32 <mbedtls_strerror+0x982>
            mbedtls_snprintf( buf, buflen, "X509 - The CRT/CRL/CSR version element is invalid" );
 8006f24:	4a64      	ldr	r2, [pc, #400]	; (80070b8 <mbedtls_strerror+0xb08>)
 8006f26:	4629      	mov	r1, r5
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f00b f91b 	bl	8012164 <sniprintf>
 8006f2e:	f7ff bb5a 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SERIAL) )
 8006f32:	f5b6 5f0a 	cmp.w	r6, #8832	; 0x2280
 8006f36:	d106      	bne.n	8006f46 <mbedtls_strerror+0x996>
            mbedtls_snprintf( buf, buflen, "X509 - The serial tag or value is invalid" );
 8006f38:	4a60      	ldr	r2, [pc, #384]	; (80070bc <mbedtls_strerror+0xb0c>)
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f00b f911 	bl	8012164 <sniprintf>
 8006f42:	f7ff bb50 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_ALG) )
 8006f46:	f5b6 5f0c 	cmp.w	r6, #8960	; 0x2300
 8006f4a:	d106      	bne.n	8006f5a <mbedtls_strerror+0x9aa>
            mbedtls_snprintf( buf, buflen, "X509 - The algorithm tag or value is invalid" );
 8006f4c:	4a5c      	ldr	r2, [pc, #368]	; (80070c0 <mbedtls_strerror+0xb10>)
 8006f4e:	4629      	mov	r1, r5
 8006f50:	4620      	mov	r0, r4
 8006f52:	f00b f907 	bl	8012164 <sniprintf>
 8006f56:	f7ff bb46 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_NAME) )
 8006f5a:	f5b6 5f0e 	cmp.w	r6, #9088	; 0x2380
 8006f5e:	d106      	bne.n	8006f6e <mbedtls_strerror+0x9be>
            mbedtls_snprintf( buf, buflen, "X509 - The name tag or value is invalid" );
 8006f60:	4a58      	ldr	r2, [pc, #352]	; (80070c4 <mbedtls_strerror+0xb14>)
 8006f62:	4629      	mov	r1, r5
 8006f64:	4620      	mov	r0, r4
 8006f66:	f00b f8fd 	bl	8012164 <sniprintf>
 8006f6a:	f7ff bb3c 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_DATE) )
 8006f6e:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
 8006f72:	d106      	bne.n	8006f82 <mbedtls_strerror+0x9d2>
            mbedtls_snprintf( buf, buflen, "X509 - The date tag or value is invalid" );
 8006f74:	4a54      	ldr	r2, [pc, #336]	; (80070c8 <mbedtls_strerror+0xb18>)
 8006f76:	4629      	mov	r1, r5
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f00b f8f3 	bl	8012164 <sniprintf>
 8006f7e:	f7ff bb32 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SIGNATURE) )
 8006f82:	f5b6 5f12 	cmp.w	r6, #9344	; 0x2480
 8006f86:	d106      	bne.n	8006f96 <mbedtls_strerror+0x9e6>
            mbedtls_snprintf( buf, buflen, "X509 - The signature tag or value invalid" );
 8006f88:	4a50      	ldr	r2, [pc, #320]	; (80070cc <mbedtls_strerror+0xb1c>)
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f00b f8e9 	bl	8012164 <sniprintf>
 8006f92:	f7ff bb28 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_EXTENSIONS) )
 8006f96:	f5b6 5f14 	cmp.w	r6, #9472	; 0x2500
 8006f9a:	d106      	bne.n	8006faa <mbedtls_strerror+0x9fa>
            mbedtls_snprintf( buf, buflen, "X509 - The extension tag or value is invalid" );
 8006f9c:	4a4c      	ldr	r2, [pc, #304]	; (80070d0 <mbedtls_strerror+0xb20>)
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f00b f8df 	bl	8012164 <sniprintf>
 8006fa6:	f7ff bb1e 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_VERSION) )
 8006faa:	f5b6 5f16 	cmp.w	r6, #9600	; 0x2580
 8006fae:	d106      	bne.n	8006fbe <mbedtls_strerror+0xa0e>
            mbedtls_snprintf( buf, buflen, "X509 - CRT/CRL/CSR has an unsupported version number" );
 8006fb0:	4a48      	ldr	r2, [pc, #288]	; (80070d4 <mbedtls_strerror+0xb24>)
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f00b f8d5 	bl	8012164 <sniprintf>
 8006fba:	f7ff bb14 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG) )
 8006fbe:	f5b6 5f18 	cmp.w	r6, #9728	; 0x2600
 8006fc2:	d106      	bne.n	8006fd2 <mbedtls_strerror+0xa22>
            mbedtls_snprintf( buf, buflen, "X509 - Signature algorithm (oid) is unsupported" );
 8006fc4:	4a44      	ldr	r2, [pc, #272]	; (80070d8 <mbedtls_strerror+0xb28>)
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f00b f8cb 	bl	8012164 <sniprintf>
 8006fce:	f7ff bb0a 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_SIG_MISMATCH) )
 8006fd2:	f5b6 5f1a 	cmp.w	r6, #9856	; 0x2680
 8006fd6:	d106      	bne.n	8006fe6 <mbedtls_strerror+0xa36>
            mbedtls_snprintf( buf, buflen, "X509 - Signature algorithms do not match. (see \\c ::mbedtls_x509_crt sig_oid)" );
 8006fd8:	4a40      	ldr	r2, [pc, #256]	; (80070dc <mbedtls_strerror+0xb2c>)
 8006fda:	4629      	mov	r1, r5
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f00b f8c1 	bl	8012164 <sniprintf>
 8006fe2:	f7ff bb00 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_CERT_VERIFY_FAILED) )
 8006fe6:	f5b6 5f1c 	cmp.w	r6, #9984	; 0x2700
 8006fea:	d106      	bne.n	8006ffa <mbedtls_strerror+0xa4a>
            mbedtls_snprintf( buf, buflen, "X509 - Certificate verification failed, e.g. CRL, CA or signature check failed" );
 8006fec:	4a3c      	ldr	r2, [pc, #240]	; (80070e0 <mbedtls_strerror+0xb30>)
 8006fee:	4629      	mov	r1, r5
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f00b f8b7 	bl	8012164 <sniprintf>
 8006ff6:	f7ff baf6 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT) )
 8006ffa:	f5b6 5f1e 	cmp.w	r6, #10112	; 0x2780
 8006ffe:	d106      	bne.n	800700e <mbedtls_strerror+0xa5e>
            mbedtls_snprintf( buf, buflen, "X509 - Format not recognized as DER or PEM" );
 8007000:	4a38      	ldr	r2, [pc, #224]	; (80070e4 <mbedtls_strerror+0xb34>)
 8007002:	4629      	mov	r1, r5
 8007004:	4620      	mov	r0, r4
 8007006:	f00b f8ad 	bl	8012164 <sniprintf>
 800700a:	f7ff baec 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_BAD_INPUT_DATA) )
 800700e:	f5b6 5f20 	cmp.w	r6, #10240	; 0x2800
 8007012:	d106      	bne.n	8007022 <mbedtls_strerror+0xa72>
            mbedtls_snprintf( buf, buflen, "X509 - Input invalid" );
 8007014:	4a34      	ldr	r2, [pc, #208]	; (80070e8 <mbedtls_strerror+0xb38>)
 8007016:	4629      	mov	r1, r5
 8007018:	4620      	mov	r0, r4
 800701a:	f00b f8a3 	bl	8012164 <sniprintf>
 800701e:	f7ff bae2 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_ALLOC_FAILED) )
 8007022:	f5b6 5f22 	cmp.w	r6, #10368	; 0x2880
 8007026:	d106      	bne.n	8007036 <mbedtls_strerror+0xa86>
            mbedtls_snprintf( buf, buflen, "X509 - Allocation of memory failed" );
 8007028:	4a30      	ldr	r2, [pc, #192]	; (80070ec <mbedtls_strerror+0xb3c>)
 800702a:	4629      	mov	r1, r5
 800702c:	4620      	mov	r0, r4
 800702e:	f00b f899 	bl	8012164 <sniprintf>
 8007032:	f7ff bad8 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_FILE_IO_ERROR) )
 8007036:	f5b6 5f24 	cmp.w	r6, #10496	; 0x2900
 800703a:	d15b      	bne.n	80070f4 <mbedtls_strerror+0xb44>
            mbedtls_snprintf( buf, buflen, "X509 - Read/write of file failed" );
 800703c:	4a2c      	ldr	r2, [pc, #176]	; (80070f0 <mbedtls_strerror+0xb40>)
 800703e:	4629      	mov	r1, r5
 8007040:	4620      	mov	r0, r4
 8007042:	f00b f88f 	bl	8012164 <sniprintf>
 8007046:	f7ff bace 	b.w	80065e6 <mbedtls_strerror+0x36>
 800704a:	bf00      	nop
 800704c:	08014d7b 	.word	0x08014d7b
 8007050:	08014dba 	.word	0x08014dba
 8007054:	08014df5 	.word	0x08014df5
 8007058:	08014e2c 	.word	0x08014e2c
 800705c:	08014e6e 	.word	0x08014e6e
 8007060:	08014e8f 	.word	0x08014e8f
 8007064:	08014ee4 	.word	0x08014ee4
 8007068:	08014f17 	.word	0x08014f17
 800706c:	08014f5b 	.word	0x08014f5b
 8007070:	08014f98 	.word	0x08014f98
 8007074:	08014fd1 	.word	0x08014fd1
 8007078:	08015005 	.word	0x08015005
 800707c:	0801503f 	.word	0x0801503f
 8007080:	080150a1 	.word	0x080150a1
 8007084:	080150ed 	.word	0x080150ed
 8007088:	08015114 	.word	0x08015114
 800708c:	08015132 	.word	0x08015132
 8007090:	0801516c 	.word	0x0801516c
 8007094:	080151a0 	.word	0x080151a0
 8007098:	080151dd 	.word	0x080151dd
 800709c:	08015219 	.word	0x08015219
 80070a0:	0801526e 	.word	0x0801526e
 80070a4:	080152a4 	.word	0x080152a4
 80070a8:	080152e7 	.word	0x080152e7
 80070ac:	08015327 	.word	0x08015327
 80070b0:	0801536b 	.word	0x0801536b
 80070b4:	0801538b 	.word	0x0801538b
 80070b8:	080153d2 	.word	0x080153d2
 80070bc:	08015404 	.word	0x08015404
 80070c0:	0801542e 	.word	0x0801542e
 80070c4:	0801545b 	.word	0x0801545b
 80070c8:	08015483 	.word	0x08015483
 80070cc:	080154ab 	.word	0x080154ab
 80070d0:	080154d5 	.word	0x080154d5
 80070d4:	08015502 	.word	0x08015502
 80070d8:	08015537 	.word	0x08015537
 80070dc:	08015567 	.word	0x08015567
 80070e0:	080155b5 	.word	0x080155b5
 80070e4:	08015604 	.word	0x08015604
 80070e8:	0801562f 	.word	0x0801562f
 80070ec:	08015644 	.word	0x08015644
 80070f0:	08015667 	.word	0x08015667
        if( use_ret == -(MBEDTLS_ERR_X509_BUFFER_TOO_SMALL) )
 80070f4:	f5b6 5f26 	cmp.w	r6, #10624	; 0x2980
 80070f8:	d106      	bne.n	8007108 <mbedtls_strerror+0xb58>
            mbedtls_snprintf( buf, buflen, "X509 - Destination buffer is too small" );
 80070fa:	4a64      	ldr	r2, [pc, #400]	; (800728c <mbedtls_strerror+0xcdc>)
 80070fc:	4629      	mov	r1, r5
 80070fe:	4620      	mov	r0, r4
 8007100:	f00b f830 	bl	8012164 <sniprintf>
 8007104:	f7ff ba6f 	b.w	80065e6 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_FATAL_ERROR) )
 8007108:	f5b6 5f40 	cmp.w	r6, #12288	; 0x3000
 800710c:	f47f aa6b 	bne.w	80065e6 <mbedtls_strerror+0x36>
            mbedtls_snprintf( buf, buflen, "X509 - A fatal error occured, eg the chain is too long or the vrfy callback failed" );
 8007110:	4a5f      	ldr	r2, [pc, #380]	; (8007290 <mbedtls_strerror+0xce0>)
 8007112:	4629      	mov	r1, r5
 8007114:	4620      	mov	r0, r4
 8007116:	f00b f825 	bl	8012164 <sniprintf>
 800711a:	f7ff ba64 	b.w	80065e6 <mbedtls_strerror+0x36>
    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH) )
 800711e:	2e22      	cmp	r6, #34	; 0x22
 8007120:	d102      	bne.n	8007128 <mbedtls_strerror+0xb78>
        mbedtls_snprintf( buf, buflen, "AES - Invalid data input length" );
 8007122:	4a5c      	ldr	r2, [pc, #368]	; (8007294 <mbedtls_strerror+0xce4>)
 8007124:	f7ff ba83 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_AES_BAD_INPUT_DATA) )
 8007128:	2e21      	cmp	r6, #33	; 0x21
 800712a:	d102      	bne.n	8007132 <mbedtls_strerror+0xb82>
        mbedtls_snprintf( buf, buflen, "AES - Invalid input data" );
 800712c:	4a5a      	ldr	r2, [pc, #360]	; (8007298 <mbedtls_strerror+0xce8>)
 800712e:	f7ff ba7e 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE) )
 8007132:	2e23      	cmp	r6, #35	; 0x23
 8007134:	d102      	bne.n	800713c <mbedtls_strerror+0xb8c>
        mbedtls_snprintf( buf, buflen, "AES - Feature not available. For example, an unsupported AES key size" );
 8007136:	4a59      	ldr	r2, [pc, #356]	; (800729c <mbedtls_strerror+0xcec>)
 8007138:	f7ff ba79 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_AES_HW_ACCEL_FAILED) )
 800713c:	2e25      	cmp	r6, #37	; 0x25
 800713e:	d102      	bne.n	8007146 <mbedtls_strerror+0xb96>
        mbedtls_snprintf( buf, buflen, "AES - AES hardware accelerator failed" );
 8007140:	4a57      	ldr	r2, [pc, #348]	; (80072a0 <mbedtls_strerror+0xcf0>)
 8007142:	f7ff ba74 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_OUT_OF_DATA) )
 8007146:	2e60      	cmp	r6, #96	; 0x60
 8007148:	d102      	bne.n	8007150 <mbedtls_strerror+0xba0>
        mbedtls_snprintf( buf, buflen, "ASN1 - Out of data when parsing an ASN1 data structure" );
 800714a:	4a56      	ldr	r2, [pc, #344]	; (80072a4 <mbedtls_strerror+0xcf4>)
 800714c:	f7ff ba6f 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_UNEXPECTED_TAG) )
 8007150:	2e62      	cmp	r6, #98	; 0x62
 8007152:	d102      	bne.n	800715a <mbedtls_strerror+0xbaa>
        mbedtls_snprintf( buf, buflen, "ASN1 - ASN1 tag was of an unexpected value" );
 8007154:	4a54      	ldr	r2, [pc, #336]	; (80072a8 <mbedtls_strerror+0xcf8>)
 8007156:	f7ff ba6a 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_LENGTH) )
 800715a:	2e64      	cmp	r6, #100	; 0x64
 800715c:	d102      	bne.n	8007164 <mbedtls_strerror+0xbb4>
        mbedtls_snprintf( buf, buflen, "ASN1 - Error when trying to determine the length or invalid length" );
 800715e:	4a53      	ldr	r2, [pc, #332]	; (80072ac <mbedtls_strerror+0xcfc>)
 8007160:	f7ff ba65 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_LENGTH_MISMATCH) )
 8007164:	2e66      	cmp	r6, #102	; 0x66
 8007166:	d102      	bne.n	800716e <mbedtls_strerror+0xbbe>
        mbedtls_snprintf( buf, buflen, "ASN1 - Actual length differs from expected length" );
 8007168:	4a51      	ldr	r2, [pc, #324]	; (80072b0 <mbedtls_strerror+0xd00>)
 800716a:	f7ff ba60 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_DATA) )
 800716e:	2e68      	cmp	r6, #104	; 0x68
 8007170:	d102      	bne.n	8007178 <mbedtls_strerror+0xbc8>
        mbedtls_snprintf( buf, buflen, "ASN1 - Data is invalid. (not used)" );
 8007172:	4a50      	ldr	r2, [pc, #320]	; (80072b4 <mbedtls_strerror+0xd04>)
 8007174:	f7ff ba5b 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_ALLOC_FAILED) )
 8007178:	2e6a      	cmp	r6, #106	; 0x6a
 800717a:	d102      	bne.n	8007182 <mbedtls_strerror+0xbd2>
        mbedtls_snprintf( buf, buflen, "ASN1 - Memory allocation failed" );
 800717c:	4a4e      	ldr	r2, [pc, #312]	; (80072b8 <mbedtls_strerror+0xd08>)
 800717e:	f7ff ba56 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_BUF_TOO_SMALL) )
 8007182:	2e6c      	cmp	r6, #108	; 0x6c
 8007184:	d102      	bne.n	800718c <mbedtls_strerror+0xbdc>
        mbedtls_snprintf( buf, buflen, "ASN1 - Buffer too small when writing ASN.1 data structure" );
 8007186:	4a4d      	ldr	r2, [pc, #308]	; (80072bc <mbedtls_strerror+0xd0c>)
 8007188:	f7ff ba51 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL) )
 800718c:	2e2a      	cmp	r6, #42	; 0x2a
 800718e:	d102      	bne.n	8007196 <mbedtls_strerror+0xbe6>
        mbedtls_snprintf( buf, buflen, "BASE64 - Output buffer too small" );
 8007190:	4a4b      	ldr	r2, [pc, #300]	; (80072c0 <mbedtls_strerror+0xd10>)
 8007192:	f7ff ba4c 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_BASE64_INVALID_CHARACTER) )
 8007196:	2e2c      	cmp	r6, #44	; 0x2c
 8007198:	d102      	bne.n	80071a0 <mbedtls_strerror+0xbf0>
        mbedtls_snprintf( buf, buflen, "BASE64 - Invalid character in input" );
 800719a:	4a4a      	ldr	r2, [pc, #296]	; (80072c4 <mbedtls_strerror+0xd14>)
 800719c:	f7ff ba47 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_FILE_IO_ERROR) )
 80071a0:	2e02      	cmp	r6, #2
 80071a2:	d102      	bne.n	80071aa <mbedtls_strerror+0xbfa>
        mbedtls_snprintf( buf, buflen, "BIGNUM - An error occurred while reading from or writing to a file" );
 80071a4:	4a48      	ldr	r2, [pc, #288]	; (80072c8 <mbedtls_strerror+0xd18>)
 80071a6:	f7ff ba42 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_BAD_INPUT_DATA) )
 80071aa:	2e04      	cmp	r6, #4
 80071ac:	d102      	bne.n	80071b4 <mbedtls_strerror+0xc04>
        mbedtls_snprintf( buf, buflen, "BIGNUM - Bad input parameters to function" );
 80071ae:	4a47      	ldr	r2, [pc, #284]	; (80072cc <mbedtls_strerror+0xd1c>)
 80071b0:	f7ff ba3d 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_INVALID_CHARACTER) )
 80071b4:	2e06      	cmp	r6, #6
 80071b6:	d102      	bne.n	80071be <mbedtls_strerror+0xc0e>
        mbedtls_snprintf( buf, buflen, "BIGNUM - There is an invalid character in the digit string" );
 80071b8:	4a45      	ldr	r2, [pc, #276]	; (80072d0 <mbedtls_strerror+0xd20>)
 80071ba:	f7ff ba38 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL) )
 80071be:	2e08      	cmp	r6, #8
 80071c0:	d102      	bne.n	80071c8 <mbedtls_strerror+0xc18>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The buffer is too small to write to" );
 80071c2:	4a44      	ldr	r2, [pc, #272]	; (80072d4 <mbedtls_strerror+0xd24>)
 80071c4:	f7ff ba33 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_NEGATIVE_VALUE) )
 80071c8:	2e0a      	cmp	r6, #10
 80071ca:	d102      	bne.n	80071d2 <mbedtls_strerror+0xc22>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input arguments are negative or result in illegal output" );
 80071cc:	4a42      	ldr	r2, [pc, #264]	; (80072d8 <mbedtls_strerror+0xd28>)
 80071ce:	f7ff ba2e 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_DIVISION_BY_ZERO) )
 80071d2:	2e0c      	cmp	r6, #12
 80071d4:	d102      	bne.n	80071dc <mbedtls_strerror+0xc2c>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input argument for division is zero, which is not allowed" );
 80071d6:	4a41      	ldr	r2, [pc, #260]	; (80072dc <mbedtls_strerror+0xd2c>)
 80071d8:	f7ff ba29 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_NOT_ACCEPTABLE) )
 80071dc:	2e0e      	cmp	r6, #14
 80071de:	d102      	bne.n	80071e6 <mbedtls_strerror+0xc36>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input arguments are not acceptable" );
 80071e0:	4a3f      	ldr	r2, [pc, #252]	; (80072e0 <mbedtls_strerror+0xd30>)
 80071e2:	f7ff ba24 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_ALLOC_FAILED) )
 80071e6:	2e10      	cmp	r6, #16
 80071e8:	d102      	bne.n	80071f0 <mbedtls_strerror+0xc40>
        mbedtls_snprintf( buf, buflen, "BIGNUM - Memory allocation failed" );
 80071ea:	4a3e      	ldr	r2, [pc, #248]	; (80072e4 <mbedtls_strerror+0xd34>)
 80071ec:	f7ff ba1f 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED) )
 80071f0:	2e34      	cmp	r6, #52	; 0x34
 80071f2:	d102      	bne.n	80071fa <mbedtls_strerror+0xc4a>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The entropy source failed" );
 80071f4:	4a3c      	ldr	r2, [pc, #240]	; (80072e8 <mbedtls_strerror+0xd38>)
 80071f6:	f7ff ba1a 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG) )
 80071fa:	2e36      	cmp	r6, #54	; 0x36
 80071fc:	d102      	bne.n	8007204 <mbedtls_strerror+0xc54>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The requested random buffer length is too big" );
 80071fe:	4a3b      	ldr	r2, [pc, #236]	; (80072ec <mbedtls_strerror+0xd3c>)
 8007200:	f7ff ba15 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG) )
 8007204:	2e38      	cmp	r6, #56	; 0x38
 8007206:	d102      	bne.n	800720e <mbedtls_strerror+0xc5e>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The input (entropy + additional data) is too large" );
 8007208:	4a39      	ldr	r2, [pc, #228]	; (80072f0 <mbedtls_strerror+0xd40>)
 800720a:	f7ff ba10 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR) )
 800720e:	2e3a      	cmp	r6, #58	; 0x3a
 8007210:	d102      	bne.n	8007218 <mbedtls_strerror+0xc68>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - Read or write error in file" );
 8007212:	4a38      	ldr	r2, [pc, #224]	; (80072f4 <mbedtls_strerror+0xd44>)
 8007214:	f7ff ba0b 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_GCM_AUTH_FAILED) )
 8007218:	2e12      	cmp	r6, #18
 800721a:	d102      	bne.n	8007222 <mbedtls_strerror+0xc72>
        mbedtls_snprintf( buf, buflen, "GCM - Authenticated decryption failed" );
 800721c:	4a36      	ldr	r2, [pc, #216]	; (80072f8 <mbedtls_strerror+0xd48>)
 800721e:	f7ff ba06 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_GCM_HW_ACCEL_FAILED) )
 8007222:	2e13      	cmp	r6, #19
 8007224:	d102      	bne.n	800722c <mbedtls_strerror+0xc7c>
        mbedtls_snprintf( buf, buflen, "GCM - GCM hardware accelerator failed" );
 8007226:	4a35      	ldr	r2, [pc, #212]	; (80072fc <mbedtls_strerror+0xd4c>)
 8007228:	f7ff ba01 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_GCM_BAD_INPUT) )
 800722c:	2e14      	cmp	r6, #20
 800722e:	d102      	bne.n	8007236 <mbedtls_strerror+0xc86>
        mbedtls_snprintf( buf, buflen, "GCM - Bad input parameters to function" );
 8007230:	4a33      	ldr	r2, [pc, #204]	; (8007300 <mbedtls_strerror+0xd50>)
 8007232:	f7ff b9fc 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_OID_NOT_FOUND) )
 8007236:	2e2e      	cmp	r6, #46	; 0x2e
 8007238:	d102      	bne.n	8007240 <mbedtls_strerror+0xc90>
        mbedtls_snprintf( buf, buflen, "OID - OID is not found" );
 800723a:	4a32      	ldr	r2, [pc, #200]	; (8007304 <mbedtls_strerror+0xd54>)
 800723c:	f7ff b9f7 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_OID_BUF_TOO_SMALL) )
 8007240:	2e0b      	cmp	r6, #11
 8007242:	d102      	bne.n	800724a <mbedtls_strerror+0xc9a>
        mbedtls_snprintf( buf, buflen, "OID - output buffer is too small" );
 8007244:	4a30      	ldr	r2, [pc, #192]	; (8007308 <mbedtls_strerror+0xd58>)
 8007246:	f7ff b9f2 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_SHA1_HW_ACCEL_FAILED) )
 800724a:	2e35      	cmp	r6, #53	; 0x35
 800724c:	d102      	bne.n	8007254 <mbedtls_strerror+0xca4>
        mbedtls_snprintf( buf, buflen, "SHA1 - SHA-1 hardware accelerator failed" );
 800724e:	4a2f      	ldr	r2, [pc, #188]	; (800730c <mbedtls_strerror+0xd5c>)
 8007250:	f7ff b9ed 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_SHA1_BAD_INPUT_DATA) )
 8007254:	2e73      	cmp	r6, #115	; 0x73
 8007256:	d102      	bne.n	800725e <mbedtls_strerror+0xcae>
        mbedtls_snprintf( buf, buflen, "SHA1 - SHA-1 input data was malformed" );
 8007258:	4a2d      	ldr	r2, [pc, #180]	; (8007310 <mbedtls_strerror+0xd60>)
 800725a:	f7ff b9e8 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED) )
 800725e:	2e37      	cmp	r6, #55	; 0x37
 8007260:	d102      	bne.n	8007268 <mbedtls_strerror+0xcb8>
        mbedtls_snprintf( buf, buflen, "SHA256 - SHA-256 hardware accelerator failed" );
 8007262:	4a2c      	ldr	r2, [pc, #176]	; (8007314 <mbedtls_strerror+0xd64>)
 8007264:	f7ff b9e3 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_SHA256_BAD_INPUT_DATA) )
 8007268:	2e74      	cmp	r6, #116	; 0x74
 800726a:	d102      	bne.n	8007272 <mbedtls_strerror+0xcc2>
        mbedtls_snprintf( buf, buflen, "SHA256 - SHA-256 input data was malformed" );
 800726c:	4a2a      	ldr	r2, [pc, #168]	; (8007318 <mbedtls_strerror+0xd68>)
 800726e:	f7ff b9de 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_SHA512_HW_ACCEL_FAILED) )
 8007272:	2e39      	cmp	r6, #57	; 0x39
 8007274:	d102      	bne.n	800727c <mbedtls_strerror+0xccc>
        mbedtls_snprintf( buf, buflen, "SHA512 - SHA-512 hardware accelerator failed" );
 8007276:	4a29      	ldr	r2, [pc, #164]	; (800731c <mbedtls_strerror+0xd6c>)
 8007278:	f7ff b9d9 	b.w	800662e <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_SHA512_BAD_INPUT_DATA) )
 800727c:	2e75      	cmp	r6, #117	; 0x75
 800727e:	f47f a9da 	bne.w	8006636 <mbedtls_strerror+0x86>
        mbedtls_snprintf( buf, buflen, "SHA512 - SHA-512 input data was malformed" );
 8007282:	4a27      	ldr	r2, [pc, #156]	; (8007320 <mbedtls_strerror+0xd70>)
 8007284:	f7ff b9d3 	b.w	800662e <mbedtls_strerror+0x7e>
 8007288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800728c:	08015688 	.word	0x08015688
 8007290:	080156af 	.word	0x080156af
 8007294:	08015735 	.word	0x08015735
 8007298:	08015755 	.word	0x08015755
 800729c:	0801576e 	.word	0x0801576e
 80072a0:	080157b4 	.word	0x080157b4
 80072a4:	080157da 	.word	0x080157da
 80072a8:	08015811 	.word	0x08015811
 80072ac:	0801583c 	.word	0x0801583c
 80072b0:	0801587f 	.word	0x0801587f
 80072b4:	080158b1 	.word	0x080158b1
 80072b8:	080158d4 	.word	0x080158d4
 80072bc:	080158f4 	.word	0x080158f4
 80072c0:	0801592e 	.word	0x0801592e
 80072c4:	0801594f 	.word	0x0801594f
 80072c8:	08015973 	.word	0x08015973
 80072cc:	080159b6 	.word	0x080159b6
 80072d0:	080159e0 	.word	0x080159e0
 80072d4:	08015a1b 	.word	0x08015a1b
 80072d8:	08015a48 	.word	0x08015a48
 80072dc:	08015a8e 	.word	0x08015a8e
 80072e0:	08015ad5 	.word	0x08015ad5
 80072e4:	08015b05 	.word	0x08015b05
 80072e8:	08015b27 	.word	0x08015b27
 80072ec:	08015b4c 	.word	0x08015b4c
 80072f0:	08015b85 	.word	0x08015b85
 80072f4:	08015bc3 	.word	0x08015bc3
 80072f8:	08015bea 	.word	0x08015bea
 80072fc:	08015c10 	.word	0x08015c10
 8007300:	08015c36 	.word	0x08015c36
 8007304:	08015c5d 	.word	0x08015c5d
 8007308:	08015c74 	.word	0x08015c74
 800730c:	08015c95 	.word	0x08015c95
 8007310:	08015cbe 	.word	0x08015cbe
 8007314:	08015ce4 	.word	0x08015ce4
 8007318:	08015d11 	.word	0x08015d11
 800731c:	08015d3b 	.word	0x08015d3b
 8007320:	08015d68 	.word	0x08015d68

08007324 <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 8007324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 8007328:	7bcb      	ldrb	r3, [r1, #15]
{
 800732a:	b093      	sub	sp, #76	; 0x4c
 800732c:	f003 030f 	and.w	r3, r3, #15
 8007330:	eb00 03c3 	add.w	r3, r0, r3, lsl #3

    zh = ctx->HH[lo];
 8007334:	e9d3 6730 	ldrd	r6, r7, [r3, #192]	; 0xc0
    zl = ctx->HL[lo];
 8007338:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 800733c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8007490 <gcm_mult+0x16c>
 8007340:	f101 0310 	add.w	r3, r1, #16
 8007344:	9310      	str	r3, [sp, #64]	; 0x40
        lo = x[i] & 0xf;
 8007346:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007348:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
 800734c:	9310      	str	r3, [sp, #64]	; 0x40
 800734e:	f00e 030f 	and.w	r3, lr, #15
 8007352:	9311      	str	r3, [sp, #68]	; 0x44
        if( i != 15 )
 8007354:	9b10      	ldr	r3, [sp, #64]	; 0x40
        hi = x[i] >> 4;
 8007356:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
        if( i != 15 )
 800735a:	eba3 0801 	sub.w	r8, r3, r1
 800735e:	f1b8 0f0f 	cmp.w	r8, #15
 8007362:	d03a      	beq.n	80073da <gcm_mult+0xb6>
            zl = ( zh << 60 ) | ( zl >> 4 );
 8007364:	0923      	lsrs	r3, r4, #4
 8007366:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	092b      	lsrs	r3, r5, #4
 800736e:	9301      	str	r3, [sp, #4]
 8007370:	0733      	lsls	r3, r6, #28
 8007372:	9309      	str	r3, [sp, #36]	; 0x24
 8007374:	2300      	movs	r3, #0
 8007376:	e9dd ab00 	ldrd	sl, fp, [sp]
 800737a:	9308      	str	r3, [sp, #32]
 800737c:	9b11      	ldr	r3, [sp, #68]	; 0x44
            zh ^= (uint64_t) last4[rem] << 48;
 800737e:	f004 040f 	and.w	r4, r4, #15
 8007382:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
            zh = ( zh >> 4 );
 8007386:	0933      	lsrs	r3, r6, #4
 8007388:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
            zh ^= (uint64_t) last4[rem] << 48;
 800738c:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
            zh = ( zh >> 4 );
 8007390:	9304      	str	r3, [sp, #16]
 8007392:	093b      	lsrs	r3, r7, #4
            zl = ( zh << 60 ) | ( zl >> 4 );
 8007394:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
            zh = ( zh >> 4 );
 8007398:	9305      	str	r3, [sp, #20]
            zl = ( zh << 60 ) | ( zl >> 4 );
 800739a:	ea48 080a 	orr.w	r8, r8, sl
            zh ^= (uint64_t) last4[rem] << 48;
 800739e:	0423      	lsls	r3, r4, #16
            zl = ( zh << 60 ) | ( zl >> 4 );
 80073a0:	ea49 090b 	orr.w	r9, r9, fp
 80073a4:	e9d5 6730 	ldrd	r6, r7, [r5, #192]	; 0xc0
 80073a8:	46c2      	mov	sl, r8
 80073aa:	46cb      	mov	fp, r9
 80073ac:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
            zh ^= (uint64_t) last4[rem] << 48;
 80073b0:	930d      	str	r3, [sp, #52]	; 0x34
 80073b2:	ea88 0806 	eor.w	r8, r8, r6
 80073b6:	2300      	movs	r3, #0
 80073b8:	4646      	mov	r6, r8
 80073ba:	ea89 0907 	eor.w	r9, r9, r7
 80073be:	464f      	mov	r7, r9
 80073c0:	930c      	str	r3, [sp, #48]	; 0x30
            zh ^= ctx->HH[lo];
 80073c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80073c6:	4073      	eors	r3, r6
 80073c8:	461e      	mov	r6, r3
 80073ca:	407c      	eors	r4, r7
 80073cc:	4627      	mov	r7, r4
            zl ^= ctx->HL[lo];
 80073ce:	e9d5 4510 	ldrd	r4, r5, [r5, #64]	; 0x40
 80073d2:	ea84 040a 	eor.w	r4, r4, sl
 80073d6:	ea85 050b 	eor.w	r5, r5, fp

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
 80073da:	0923      	lsrs	r3, r4, #4
 80073dc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80073e0:	9302      	str	r3, [sp, #8]
 80073e2:	092b      	lsrs	r3, r5, #4
 80073e4:	9303      	str	r3, [sp, #12]
 80073e6:	0733      	lsls	r3, r6, #28
 80073e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80073ea:	2300      	movs	r3, #0
 80073ec:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80073f0:	930a      	str	r3, [sp, #40]	; 0x28
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
 80073f2:	f004 040f 	and.w	r4, r4, #15
        zh = ( zh >> 4 );
 80073f6:	0933      	lsrs	r3, r6, #4
 80073f8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
        zh ^= (uint64_t) last4[rem] << 48;
 80073fc:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
        zh = ( zh >> 4 );
 8007400:	9306      	str	r3, [sp, #24]
 8007402:	093b      	lsrs	r3, r7, #4
 8007404:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8007408:	9307      	str	r3, [sp, #28]
        zh ^= (uint64_t) last4[rem] << 48;
 800740a:	0423      	lsls	r3, r4, #16
 800740c:	e9de 6730 	ldrd	r6, r7, [lr, #192]	; 0xc0
        zl = ( zh << 60 ) | ( zl >> 4 );
 8007410:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
        zh ^= (uint64_t) last4[rem] << 48;
 8007414:	930f      	str	r3, [sp, #60]	; 0x3c
        zl = ( zh << 60 ) | ( zl >> 4 );
 8007416:	ea48 080a 	orr.w	r8, r8, sl
 800741a:	ea49 090b 	orr.w	r9, r9, fp
        zh ^= (uint64_t) last4[rem] << 48;
 800741e:	2300      	movs	r3, #0
 8007420:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8007424:	ea8a 0a06 	eor.w	sl, sl, r6
 8007428:	4656      	mov	r6, sl
 800742a:	ea8b 0b07 	eor.w	fp, fp, r7
 800742e:	465f      	mov	r7, fp
 8007430:	930e      	str	r3, [sp, #56]	; 0x38
        zh ^= ctx->HH[hi];
 8007432:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8007436:	4073      	eors	r3, r6
 8007438:	461e      	mov	r6, r3
    for( i = 15; i >= 0; i-- )
 800743a:	9b10      	ldr	r3, [sp, #64]	; 0x40
        zh ^= ctx->HH[hi];
 800743c:	407c      	eors	r4, r7
    for( i = 15; i >= 0; i-- )
 800743e:	4299      	cmp	r1, r3
        zh ^= ctx->HH[hi];
 8007440:	4627      	mov	r7, r4
        zl ^= ctx->HL[hi];
 8007442:	e9de 4510 	ldrd	r4, r5, [lr, #64]	; 0x40
 8007446:	ea84 0408 	eor.w	r4, r4, r8
 800744a:	ea85 0509 	eor.w	r5, r5, r9
    for( i = 15; i >= 0; i-- )
 800744e:	f47f af7a 	bne.w	8007346 <gcm_mult+0x22>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8007452:	0e3b      	lsrs	r3, r7, #24
 8007454:	7013      	strb	r3, [r2, #0]
 8007456:	0c3b      	lsrs	r3, r7, #16
 8007458:	7053      	strb	r3, [r2, #1]
 800745a:	0a3b      	lsrs	r3, r7, #8
 800745c:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
 800745e:	0e33      	lsrs	r3, r6, #24
 8007460:	7113      	strb	r3, [r2, #4]
 8007462:	0c33      	lsrs	r3, r6, #16
 8007464:	7153      	strb	r3, [r2, #5]
 8007466:	0a33      	lsrs	r3, r6, #8
 8007468:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 800746a:	0e2b      	lsrs	r3, r5, #24
 800746c:	7213      	strb	r3, [r2, #8]
 800746e:	0c2b      	lsrs	r3, r5, #16
 8007470:	7253      	strb	r3, [r2, #9]
 8007472:	0a2b      	lsrs	r3, r5, #8
 8007474:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
 8007476:	0e23      	lsrs	r3, r4, #24
 8007478:	7313      	strb	r3, [r2, #12]
 800747a:	0c23      	lsrs	r3, r4, #16
 800747c:	7353      	strb	r3, [r2, #13]
 800747e:	0a23      	lsrs	r3, r4, #8
    PUT_UINT32_BE( zh >> 32, output, 0 );
 8007480:	70d7      	strb	r7, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
 8007482:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8007484:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
 8007486:	7393      	strb	r3, [r2, #14]
 8007488:	73d4      	strb	r4, [r2, #15]
}
 800748a:	b013      	add	sp, #76	; 0x4c
 800748c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007490:	08015d98 	.word	0x08015d98

08007494 <mbedtls_gcm_init>:
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 8007494:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8007498:	2100      	movs	r1, #0
 800749a:	f00a bcb5 	b.w	8011e08 <memset>

0800749e <mbedtls_gcm_setkey>:
{
 800749e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a2:	b08f      	sub	sp, #60	; 0x3c
 80074a4:	9202      	str	r2, [sp, #8]
 80074a6:	4683      	mov	fp, r0
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 80074a8:	2201      	movs	r2, #1
{
 80074aa:	4608      	mov	r0, r1
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 80074ac:	4619      	mov	r1, r3
{
 80074ae:	461f      	mov	r7, r3
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 80074b0:	f7fe fb7e 	bl	8005bb0 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 80074b4:	4682      	mov	sl, r0
 80074b6:	2800      	cmp	r0, #0
 80074b8:	f000 809f 	beq.w	80075fa <mbedtls_gcm_setkey+0x15c>
    if( cipher_info->block_size != 16 )
 80074bc:	6946      	ldr	r6, [r0, #20]
 80074be:	2e10      	cmp	r6, #16
 80074c0:	f040 809b 	bne.w	80075fa <mbedtls_gcm_setkey+0x15c>
    mbedtls_cipher_free( &ctx->cipher_ctx );
 80074c4:	4658      	mov	r0, fp
 80074c6:	f7fe fb8b 	bl	8005be0 <mbedtls_cipher_free>
    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 80074ca:	4651      	mov	r1, sl
 80074cc:	4658      	mov	r0, fp
 80074ce:	f7fe fd13 	bl	8005ef8 <mbedtls_cipher_setup>
 80074d2:	4682      	mov	sl, r0
 80074d4:	2800      	cmp	r0, #0
 80074d6:	f040 808c 	bne.w	80075f2 <mbedtls_gcm_setkey+0x154>
    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 80074da:	2301      	movs	r3, #1
 80074dc:	463a      	mov	r2, r7
 80074de:	9902      	ldr	r1, [sp, #8]
 80074e0:	4658      	mov	r0, fp
 80074e2:	f7fe fb8d 	bl	8005c00 <mbedtls_cipher_setkey>
 80074e6:	4682      	mov	sl, r0
 80074e8:	2800      	cmp	r0, #0
 80074ea:	f040 8082 	bne.w	80075f2 <mbedtls_gcm_setkey+0x154>
    memset( h, 0, 16 );
 80074ee:	4601      	mov	r1, r0
    size_t olen = 0;
 80074f0:	9009      	str	r0, [sp, #36]	; 0x24
    memset( h, 0, 16 );
 80074f2:	4632      	mov	r2, r6
 80074f4:	a80a      	add	r0, sp, #40	; 0x28
 80074f6:	f00a fc87 	bl	8011e08 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 80074fa:	ab09      	add	r3, sp, #36	; 0x24
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	ab0a      	add	r3, sp, #40	; 0x28
 8007500:	4632      	mov	r2, r6
 8007502:	4619      	mov	r1, r3
 8007504:	4658      	mov	r0, fp
 8007506:	f7fe fbbb 	bl	8005c80 <mbedtls_cipher_update>
 800750a:	4682      	mov	sl, r0
 800750c:	2800      	cmp	r0, #0
 800750e:	d170      	bne.n	80075f2 <mbedtls_gcm_setkey+0x154>
    vh = (uint64_t) hi << 32 | lo;
 8007510:	4652      	mov	r2, sl
 8007512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007514:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007516:	ba18      	rev	r0, r3
 8007518:	ba0b      	rev	r3, r1
 800751a:	990d      	ldr	r1, [sp, #52]	; 0x34
    vl = (uint64_t) hi << 32 | lo;
 800751c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800751e:	fa91 fe81 	rev.w	lr, r1
    vh = (uint64_t) hi << 32 | lo;
 8007522:	4302      	orrs	r2, r0
    vl = (uint64_t) hi << 32 | lo;
 8007524:	ba31      	rev	r1, r6
 8007526:	ea4a 000e 	orr.w	r0, sl, lr
    ctx->HH[8] = vh;
 800752a:	f50b 7680 	add.w	r6, fp, #256	; 0x100
    ctx->HH[0] = 0;
 800752e:	2700      	movs	r7, #0
    ctx->HL[8] = vl;
 8007530:	e9cb 0120 	strd	r0, r1, [fp, #128]	; 0x80
    ctx->HH[8] = vh;
 8007534:	e9c6 2300 	strd	r2, r3, [r6]
    ctx->HH[0] = 0;
 8007538:	2600      	movs	r6, #0
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 800753a:	f04f 4e61 	mov.w	lr, #3774873600	; 0xe1000000
    ctx->HH[0] = 0;
 800753e:	e9cb 6730 	strd	r6, r7, [fp, #192]	; 0xc0
    ctx->HL[0] = 0;
 8007542:	e9cb 6710 	strd	r6, r7, [fp, #64]	; 0x40
 8007546:	2603      	movs	r6, #3
    for( i = 4; i > 0; i >>= 1 )
 8007548:	2704      	movs	r7, #4
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 800754a:	f000 0c01 	and.w	ip, r0, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 800754e:	07d5      	lsls	r5, r2, #31
 8007550:	0849      	lsrs	r1, r1, #1
 8007552:	ea4f 0030 	mov.w	r0, r0, rrx
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8007556:	085b      	lsrs	r3, r3, #1
 8007558:	ea4f 0232 	mov.w	r2, r2, rrx
        vl  = ( vh << 63 ) | ( vl >> 1 );
 800755c:	2400      	movs	r4, #0
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 800755e:	fb0e f90c 	mul.w	r9, lr, ip
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8007562:	4320      	orrs	r0, r4
 8007564:	eb0b 0cc7 	add.w	ip, fp, r7, lsl #3
 8007568:	4329      	orrs	r1, r5
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 800756a:	4062      	eors	r2, r4
 800756c:	ea83 0309 	eor.w	r3, r3, r9
    for( i = 4; i > 0; i >>= 1 )
 8007570:	3e01      	subs	r6, #1
        ctx->HL[i] = vl;
 8007572:	e9cc 0110 	strd	r0, r1, [ip, #64]	; 0x40
        ctx->HH[i] = vh;
 8007576:	e9cc 2330 	strd	r2, r3, [ip, #192]	; 0xc0
    for( i = 4; i > 0; i >>= 1 )
 800757a:	ea4f 0767 	mov.w	r7, r7, asr #1
 800757e:	d1e4      	bne.n	800754a <mbedtls_gcm_setkey+0xac>
 8007580:	2603      	movs	r6, #3
 8007582:	2402      	movs	r4, #2
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 8007584:	f10b 0340 	add.w	r3, fp, #64	; 0x40
 8007588:	9307      	str	r3, [sp, #28]
 800758a:	f10b 0ec0 	add.w	lr, fp, #192	; 0xc0
 800758e:	9b07      	ldr	r3, [sp, #28]
 8007590:	00e7      	lsls	r7, r4, #3
 8007592:	19d9      	adds	r1, r3, r7
 8007594:	eb0e 0307 	add.w	r3, lr, r7
        vh = *HiH;
 8007598:	e9d3 8900 	ldrd	r8, r9, [r3]
 800759c:	e9cd 8902 	strd	r8, r9, [sp, #8]
        vl = *HiL;
 80075a0:	e9d1 8900 	ldrd	r8, r9, [r1]
 80075a4:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80075a8:	f10b 0048 	add.w	r0, fp, #72	; 0x48
 80075ac:	f103 0508 	add.w	r5, r3, #8
 80075b0:	441f      	add	r7, r3
            HiH[j] = vh ^ ctx->HH[j];
 80075b2:	e9d0 2320 	ldrd	r2, r3, [r0, #128]	; 0x80
 80075b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80075ba:	ea88 0802 	eor.w	r8, r8, r2
 80075be:	ea89 0903 	eor.w	r9, r9, r3
 80075c2:	4642      	mov	r2, r8
 80075c4:	464b      	mov	r3, r9
            HiL[j] = vl ^ ctx->HL[j];
 80075c6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
            HiH[j] = vh ^ ctx->HH[j];
 80075ca:	e8e5 2302 	strd	r2, r3, [r5], #8
            HiL[j] = vl ^ ctx->HL[j];
 80075ce:	e9d0 2300 	ldrd	r2, r3, [r0]
 80075d2:	ea88 0802 	eor.w	r8, r8, r2
 80075d6:	ea89 0903 	eor.w	r9, r9, r3
 80075da:	4642      	mov	r2, r8
 80075dc:	464b      	mov	r3, r9
        for( j = 1; j < i; j++ )
 80075de:	42bd      	cmp	r5, r7
            HiL[j] = vl ^ ctx->HL[j];
 80075e0:	f100 0008 	add.w	r0, r0, #8
 80075e4:	e9e1 2302 	strd	r2, r3, [r1, #8]!
        for( j = 1; j < i; j++ )
 80075e8:	d1e3      	bne.n	80075b2 <mbedtls_gcm_setkey+0x114>
    for( i = 2; i <= 8; i *= 2 )
 80075ea:	3e01      	subs	r6, #1
 80075ec:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80075f0:	d1cd      	bne.n	800758e <mbedtls_gcm_setkey+0xf0>
}
 80075f2:	4650      	mov	r0, sl
 80075f4:	b00f      	add	sp, #60	; 0x3c
 80075f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80075fa:	f06f 0a13 	mvn.w	sl, #19
 80075fe:	e7f8      	b.n	80075f2 <mbedtls_gcm_setkey+0x154>

08007600 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 8007604:	f04f 0900 	mov.w	r9, #0
{
 8007608:	b08b      	sub	sp, #44	; 0x2c
 800760a:	4604      	mov	r4, r0
 800760c:	468b      	mov	fp, r1
 800760e:	4617      	mov	r7, r2
 8007610:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    size_t use_len, olen = 0;
 8007614:	f8cd 9014 	str.w	r9, [sp, #20]
    GCM_VALIDATE_RET( iv != NULL );
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 8007618:	461d      	mov	r5, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 8095 	beq.w	800774a <mbedtls_gcm_starts+0x14a>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8007620:	f500 76b0 	add.w	r6, r0, #352	; 0x160
 8007624:	2210      	movs	r2, #16
 8007626:	4649      	mov	r1, r9
 8007628:	4630      	mov	r0, r6
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 800762a:	f504 7ab8 	add.w	sl, r4, #368	; 0x170
    memset( ctx->y, 0x00, sizeof(ctx->y) );
 800762e:	f00a fbeb 	bl	8011e08 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8007632:	4649      	mov	r1, r9
 8007634:	2210      	movs	r2, #16
 8007636:	4650      	mov	r0, sl
 8007638:	f00a fbe6 	bl	8011e08 <memset>

    ctx->mode = mode;
    ctx->len = 0;
 800763c:	2000      	movs	r0, #0
 800763e:	2100      	movs	r1, #0
 8007640:	f504 73a0 	add.w	r3, r4, #320	; 0x140
    ctx->mode = mode;
 8007644:	f8c4 b180 	str.w	fp, [r4, #384]	; 0x180
    ctx->add_len = 0;

    if( iv_len == 12 )
 8007648:	2d0c      	cmp	r5, #12
    ctx->len = 0;
 800764a:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
 800764e:	f504 73a4 	add.w	r3, r4, #328	; 0x148
 8007652:	e9c3 0100 	strd	r0, r1, [r3]
    if( iv_len == 12 )
 8007656:	d11f      	bne.n	8007698 <mbedtls_gcm_starts+0x98>
    {
        memcpy( ctx->y, iv, iv_len );
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6073      	str	r3, [r6, #4]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	60b3      	str	r3, [r6, #8]
        ctx->y[15] = 1;
 8007666:	2301      	movs	r3, #1
 8007668:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 800766c:	ab05      	add	r3, sp, #20
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	2210      	movs	r2, #16
 8007672:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 8007676:	4631      	mov	r1, r6
 8007678:	4620      	mov	r0, r4
 800767a:	f7fe fb01 	bl	8005c80 <mbedtls_cipher_update>
 800767e:	4605      	mov	r5, r0
 8007680:	b930      	cbnz	r0, 8007690 <mbedtls_gcm_starts+0x90>
      ( (uint64_t) add_len ) >> 61 != 0 )
 8007682:	f8c4 8148 	str.w	r8, [r4, #328]	; 0x148
 8007686:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 800768a:	f1b8 0f00 	cmp.w	r8, #0
 800768e:	d141      	bne.n	8007714 <mbedtls_gcm_starts+0x114>
        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
}
 8007690:	4628      	mov	r0, r5
 8007692:	b00b      	add	sp, #44	; 0x2c
 8007694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset( work_buf, 0x00, 16 );
 8007698:	f10d 0b18 	add.w	fp, sp, #24
 800769c:	2210      	movs	r2, #16
 800769e:	4649      	mov	r1, r9
 80076a0:	4658      	mov	r0, fp
 80076a2:	f00a fbb1 	bl	8011e08 <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 80076a6:	00eb      	lsls	r3, r5, #3
 80076a8:	0e1a      	lsrs	r2, r3, #24
 80076aa:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80076ae:	0c1a      	lsrs	r2, r3, #16
 80076b0:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 80076b4:	0a1a      	lsrs	r2, r3, #8
 80076b6:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 80076ba:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 80076be:	2d10      	cmp	r5, #16
 80076c0:	462b      	mov	r3, r5
 80076c2:	bf28      	it	cs
 80076c4:	2310      	movcs	r3, #16
 80076c6:	46b1      	mov	r9, r6
 80076c8:	4631      	mov	r1, r6
 80076ca:	463a      	mov	r2, r7
 80076cc:	441f      	add	r7, r3
                ctx->y[i] ^= p[i];
 80076ce:	f812 0b01 	ldrb.w	r0, [r2], #1
 80076d2:	f891 e000 	ldrb.w	lr, [r1]
            for( i = 0; i < use_len; i++ )
 80076d6:	4297      	cmp	r7, r2
                ctx->y[i] ^= p[i];
 80076d8:	ea80 000e 	eor.w	r0, r0, lr
 80076dc:	f801 0b01 	strb.w	r0, [r1], #1
            for( i = 0; i < use_len; i++ )
 80076e0:	d1f5      	bne.n	80076ce <mbedtls_gcm_starts+0xce>
            gcm_mult( ctx, ctx->y, ctx->y );
 80076e2:	4632      	mov	r2, r6
 80076e4:	4631      	mov	r1, r6
 80076e6:	4620      	mov	r0, r4
 80076e8:	9303      	str	r3, [sp, #12]
 80076ea:	f7ff fe1b 	bl	8007324 <gcm_mult>
        while( iv_len > 0 )
 80076ee:	9b03      	ldr	r3, [sp, #12]
 80076f0:	1aed      	subs	r5, r5, r3
 80076f2:	d1e4      	bne.n	80076be <mbedtls_gcm_starts+0xbe>
            ctx->y[i] ^= work_buf[i];
 80076f4:	f899 3000 	ldrb.w	r3, [r9]
 80076f8:	f81b 2005 	ldrb.w	r2, [fp, r5]
        for( i = 0; i < 16; i++ )
 80076fc:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
 80076fe:	4053      	eors	r3, r2
        for( i = 0; i < 16; i++ )
 8007700:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
 8007702:	f809 3b01 	strb.w	r3, [r9], #1
        for( i = 0; i < 16; i++ )
 8007706:	d1f5      	bne.n	80076f4 <mbedtls_gcm_starts+0xf4>
        gcm_mult( ctx, ctx->y, ctx->y );
 8007708:	4632      	mov	r2, r6
 800770a:	4631      	mov	r1, r6
 800770c:	4620      	mov	r0, r4
 800770e:	f7ff fe09 	bl	8007324 <gcm_mult>
 8007712:	e7ab      	b.n	800766c <mbedtls_gcm_starts+0x6c>
        use_len = ( add_len < 16 ) ? add_len : 16;
 8007714:	4646      	mov	r6, r8
 8007716:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007718:	2e10      	cmp	r6, #16
 800771a:	bf28      	it	cs
 800771c:	2610      	movcs	r6, #16
 800771e:	4619      	mov	r1, r3
 8007720:	4431      	add	r1, r6
 8007722:	f504 72b8 	add.w	r2, r4, #368	; 0x170
 8007726:	9114      	str	r1, [sp, #80]	; 0x50
            ctx->buf[i] ^= p[i];
 8007728:	f813 1b01 	ldrb.w	r1, [r3], #1
 800772c:	7810      	ldrb	r0, [r2, #0]
 800772e:	4041      	eors	r1, r0
 8007730:	f802 1b01 	strb.w	r1, [r2], #1
        for( i = 0; i < use_len; i++ )
 8007734:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007736:	4299      	cmp	r1, r3
 8007738:	d1f6      	bne.n	8007728 <mbedtls_gcm_starts+0x128>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 800773a:	4652      	mov	r2, sl
 800773c:	4651      	mov	r1, sl
 800773e:	4620      	mov	r0, r4
 8007740:	f7ff fdf0 	bl	8007324 <gcm_mult>
        add_len -= use_len;
 8007744:	eba8 0806 	sub.w	r8, r8, r6
 8007748:	e79f      	b.n	800768a <mbedtls_gcm_starts+0x8a>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800774a:	f06f 0513 	mvn.w	r5, #19
 800774e:	e79f      	b.n	8007690 <mbedtls_gcm_starts+0x90>

08007750 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 8007750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	461f      	mov	r7, r3
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 8007756:	2300      	movs	r3, #0
{
 8007758:	b089      	sub	sp, #36	; 0x24

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
 800775a:	4297      	cmp	r7, r2
{
 800775c:	4604      	mov	r4, r0
 800775e:	460d      	mov	r5, r1
 8007760:	4616      	mov	r6, r2
    size_t use_len, olen = 0;
 8007762:	9303      	str	r3, [sp, #12]
    if( output > input && (size_t) ( output - input ) < length )
 8007764:	d902      	bls.n	800776c <mbedtls_gcm_update+0x1c>
 8007766:	1abb      	subs	r3, r7, r2
 8007768:	428b      	cmp	r3, r1
 800776a:	d362      	bcc.n	8007832 <mbedtls_gcm_update+0xe2>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 800776c:	f504 7ea0 	add.w	lr, r4, #320	; 0x140
 8007770:	e9de 0100 	ldrd	r0, r1, [lr]
 8007774:	1942      	adds	r2, r0, r5
 8007776:	f141 0300 	adc.w	r3, r1, #0
 800777a:	428b      	cmp	r3, r1
 800777c:	bf08      	it	eq
 800777e:	4282      	cmpeq	r2, r0
 8007780:	d357      	bcc.n	8007832 <mbedtls_gcm_update+0xe2>
 8007782:	210f      	movs	r1, #15
 8007784:	f06f 001f 	mvn.w	r0, #31
 8007788:	4299      	cmp	r1, r3
 800778a:	bf08      	it	eq
 800778c:	4290      	cmpeq	r0, r2
 800778e:	d350      	bcc.n	8007832 <mbedtls_gcm_update+0xe2>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 8007790:	e9ce 2300 	strd	r2, r3, [lr]
 8007794:	f204 1a6b 	addw	sl, r4, #363	; 0x16b

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8007798:	f10d 0910 	add.w	r9, sp, #16
 800779c:	f504 7bb0 	add.w	fp, r4, #352	; 0x160
    while( length > 0 )
 80077a0:	b91d      	cbnz	r5, 80077aa <mbedtls_gcm_update+0x5a>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
 80077a2:	4628      	mov	r0, r5
}
 80077a4:	b009      	add	sp, #36	; 0x24
 80077a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        use_len = ( length < 16 ) ? length : 16;
 80077aa:	2d10      	cmp	r5, #16
 80077ac:	46a8      	mov	r8, r5
 80077ae:	bf28      	it	cs
 80077b0:	f04f 0810 	movcs.w	r8, #16
 80077b4:	f204 126f 	addw	r2, r4, #367	; 0x16f
            if( ++ctx->y[i - 1] != 0 )
 80077b8:	7813      	ldrb	r3, [r2, #0]
 80077ba:	3301      	adds	r3, #1
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	f802 3901 	strb.w	r3, [r2], #-1
 80077c2:	b90b      	cbnz	r3, 80077c8 <mbedtls_gcm_update+0x78>
        for( i = 16; i > 12; i-- )
 80077c4:	4552      	cmp	r2, sl
 80077c6:	d1f7      	bne.n	80077b8 <mbedtls_gcm_update+0x68>
        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 80077c8:	ab03      	add	r3, sp, #12
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	2210      	movs	r2, #16
 80077ce:	464b      	mov	r3, r9
 80077d0:	4659      	mov	r1, fp
 80077d2:	4620      	mov	r0, r4
 80077d4:	f7fe fa54 	bl	8005c80 <mbedtls_cipher_update>
 80077d8:	2800      	cmp	r0, #0
 80077da:	d1e3      	bne.n	80077a4 <mbedtls_gcm_update+0x54>
 80077dc:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 80077e0:	469c      	mov	ip, r3
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 80077e2:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
 80077e6:	b929      	cbnz	r1, 80077f4 <mbedtls_gcm_update+0xa4>
                ctx->buf[i] ^= p[i];
 80077e8:	7819      	ldrb	r1, [r3, #0]
 80077ea:	f816 e000 	ldrb.w	lr, [r6, r0]
 80077ee:	ea81 010e 	eor.w	r1, r1, lr
 80077f2:	7019      	strb	r1, [r3, #0]
            out_p[i] = ectr[i] ^ p[i];
 80077f4:	f816 e000 	ldrb.w	lr, [r6, r0]
 80077f8:	f819 1000 	ldrb.w	r1, [r9, r0]
 80077fc:	3301      	adds	r3, #1
 80077fe:	ea81 010e 	eor.w	r1, r1, lr
 8007802:	5439      	strb	r1, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 8007804:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
        for( i = 0; i < use_len; i++ )
 8007808:	3001      	adds	r0, #1
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 800780a:	2a01      	cmp	r2, #1
                ctx->buf[i] ^= out_p[i];
 800780c:	bf02      	ittt	eq
 800780e:	f813 ec01 	ldrbeq.w	lr, [r3, #-1]
 8007812:	ea81 010e 	eoreq.w	r1, r1, lr
 8007816:	f803 1c01 	strbeq.w	r1, [r3, #-1]
        for( i = 0; i < use_len; i++ )
 800781a:	4580      	cmp	r8, r0
 800781c:	d1e1      	bne.n	80077e2 <mbedtls_gcm_update+0x92>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 800781e:	4662      	mov	r2, ip
 8007820:	4661      	mov	r1, ip
 8007822:	4620      	mov	r0, r4
 8007824:	f7ff fd7e 	bl	8007324 <gcm_mult>
        length -= use_len;
 8007828:	eba5 0508 	sub.w	r5, r5, r8
        p += use_len;
 800782c:	4446      	add	r6, r8
        out_p += use_len;
 800782e:	4447      	add	r7, r8
 8007830:	e7b6      	b.n	80077a0 <mbedtls_gcm_update+0x50>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8007832:	f06f 0013 	mvn.w	r0, #19
 8007836:	e7b5      	b.n	80077a4 <mbedtls_gcm_update+0x54>

08007838 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 8007838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800783c:	4688      	mov	r8, r1
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
 800783e:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
 8007842:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 8007846:	00cd      	lsls	r5, r1, #3
    orig_add_len = ctx->add_len * 8;
 8007848:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
    orig_len = ctx->len * 8;
 800784c:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 8007850:	00dc      	lsls	r4, r3, #3
    orig_add_len = ctx->add_len * 8;
 8007852:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 8007856:	00cf      	lsls	r7, r1, #3
 8007858:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
 800785c:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
 800785e:	1f13      	subs	r3, r2, #4
 8007860:	2b0c      	cmp	r3, #12
{
 8007862:	4681      	mov	r9, r0
 8007864:	4692      	mov	sl, r2
    if( tag_len > 16 || tag_len < 4 )
 8007866:	d85c      	bhi.n	8007922 <mbedtls_gcm_finish+0xea>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 8007868:	f500 71a8 	add.w	r1, r0, #336	; 0x150
 800786c:	4640      	mov	r0, r8
 800786e:	f00a faa6 	bl	8011dbe <memcpy>

    if( orig_len || orig_add_len )
 8007872:	ea54 0305 	orrs.w	r3, r4, r5
 8007876:	d106      	bne.n	8007886 <mbedtls_gcm_finish+0x4e>
 8007878:	ea56 0307 	orrs.w	r3, r6, r7
 800787c:	d103      	bne.n	8007886 <mbedtls_gcm_finish+0x4e>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
 800787e:	2000      	movs	r0, #0
}
 8007880:	b004      	add	sp, #16
 8007882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memset( work_buf, 0x00, 16 );
 8007886:	2210      	movs	r2, #16
 8007888:	2100      	movs	r1, #0
 800788a:	4668      	mov	r0, sp
 800788c:	f00a fabc 	bl	8011e08 <memset>
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8007890:	0e3b      	lsrs	r3, r7, #24
 8007892:	f88d 3000 	strb.w	r3, [sp]
 8007896:	0c3b      	lsrs	r3, r7, #16
 8007898:	f88d 3001 	strb.w	r3, [sp, #1]
 800789c:	0a3b      	lsrs	r3, r7, #8
 800789e:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 80078a2:	0e33      	lsrs	r3, r6, #24
 80078a4:	f88d 3004 	strb.w	r3, [sp, #4]
 80078a8:	0c33      	lsrs	r3, r6, #16
 80078aa:	f88d 3005 	strb.w	r3, [sp, #5]
 80078ae:	0a33      	lsrs	r3, r6, #8
 80078b0:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 80078b4:	0e2b      	lsrs	r3, r5, #24
 80078b6:	f88d 3008 	strb.w	r3, [sp, #8]
 80078ba:	0c2b      	lsrs	r3, r5, #16
 80078bc:	f88d 3009 	strb.w	r3, [sp, #9]
 80078c0:	0a2b      	lsrs	r3, r5, #8
 80078c2:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 80078c6:	0e23      	lsrs	r3, r4, #24
 80078c8:	f88d 300c 	strb.w	r3, [sp, #12]
 80078cc:	0c23      	lsrs	r3, r4, #16
 80078ce:	f88d 300d 	strb.w	r3, [sp, #13]
 80078d2:	f88d 400f 	strb.w	r4, [sp, #15]
 80078d6:	0a23      	lsrs	r3, r4, #8
 80078d8:	f509 74b8 	add.w	r4, r9, #368	; 0x170
 80078dc:	f88d 300e 	strb.w	r3, [sp, #14]
 80078e0:	4622      	mov	r2, r4
        for( i = 0; i < 16; i++ )
 80078e2:	2300      	movs	r3, #0
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 80078e4:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 80078e8:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 80078ec:	f88d 500b 	strb.w	r5, [sp, #11]
            ctx->buf[i] ^= work_buf[i];
 80078f0:	7811      	ldrb	r1, [r2, #0]
 80078f2:	f81d 0003 	ldrb.w	r0, [sp, r3]
        for( i = 0; i < 16; i++ )
 80078f6:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
 80078f8:	4041      	eors	r1, r0
        for( i = 0; i < 16; i++ )
 80078fa:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
 80078fc:	f802 1b01 	strb.w	r1, [r2], #1
        for( i = 0; i < 16; i++ )
 8007900:	d1f6      	bne.n	80078f0 <mbedtls_gcm_finish+0xb8>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 8007902:	4621      	mov	r1, r4
 8007904:	4622      	mov	r2, r4
 8007906:	4648      	mov	r0, r9
 8007908:	f7ff fd0c 	bl	8007324 <gcm_mult>
 800790c:	4641      	mov	r1, r8
 800790e:	44c2      	add	sl, r8
            tag[i] ^= ctx->buf[i];
 8007910:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007914:	780a      	ldrb	r2, [r1, #0]
 8007916:	4053      	eors	r3, r2
 8007918:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < tag_len; i++ )
 800791c:	458a      	cmp	sl, r1
 800791e:	d1f7      	bne.n	8007910 <mbedtls_gcm_finish+0xd8>
 8007920:	e7ad      	b.n	800787e <mbedtls_gcm_finish+0x46>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8007922:	f06f 0013 	mvn.w	r0, #19
 8007926:	e7ab      	b.n	8007880 <mbedtls_gcm_finish+0x48>

08007928 <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8007928:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800792c:	4617      	mov	r7, r2
 800792e:	461a      	mov	r2, r3
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8007930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
{
 8007932:	4604      	mov	r4, r0
    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8007934:	9301      	str	r3, [sp, #4]
 8007936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
{
 8007938:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
 8007940:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007944:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8007946:	9d10      	ldr	r5, [sp, #64]	; 0x40
    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8007948:	f7ff fe5a 	bl	8007600 <mbedtls_gcm_starts>
 800794c:	b970      	cbnz	r0, 800796c <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 800794e:	464b      	mov	r3, r9
 8007950:	4642      	mov	r2, r8
 8007952:	4639      	mov	r1, r7
 8007954:	4620      	mov	r0, r4
 8007956:	f7ff fefb 	bl	8007750 <mbedtls_gcm_update>
 800795a:	b938      	cbnz	r0, 800796c <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 800795c:	4632      	mov	r2, r6
 800795e:	4629      	mov	r1, r5
 8007960:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 8007962:	b003      	add	sp, #12
 8007964:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 8007968:	f7ff bf66 	b.w	8007838 <mbedtls_gcm_finish>
}
 800796c:	b003      	add	sp, #12
 800796e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007972 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8007972:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007974:	460e      	mov	r6, r1
 8007976:	b08d      	sub	sp, #52	; 0x34
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8007978:	9916      	ldr	r1, [sp, #88]	; 0x58
{
 800797a:	9f15      	ldr	r7, [sp, #84]	; 0x54
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 800797c:	9103      	str	r1, [sp, #12]
 800797e:	9913      	ldr	r1, [sp, #76]	; 0x4c
{
 8007980:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8007982:	9102      	str	r1, [sp, #8]
 8007984:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007986:	ac08      	add	r4, sp, #32
 8007988:	9101      	str	r1, [sp, #4]
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	9406      	str	r4, [sp, #24]
 800798e:	4613      	mov	r3, r2
 8007990:	9705      	str	r7, [sp, #20]
 8007992:	9504      	str	r5, [sp, #16]
 8007994:	4632      	mov	r2, r6
 8007996:	2100      	movs	r1, #0
 8007998:	f7ff ffc6 	bl	8007928 <mbedtls_gcm_crypt_and_tag>
 800799c:	b948      	cbnz	r0, 80079b2 <mbedtls_gcm_auth_decrypt+0x40>
 800799e:	4603      	mov	r3, r0
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80079a0:	42bb      	cmp	r3, r7
 80079a2:	d108      	bne.n	80079b6 <mbedtls_gcm_auth_decrypt+0x44>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 80079a4:	b128      	cbz	r0, 80079b2 <mbedtls_gcm_auth_decrypt+0x40>
    {
        mbedtls_platform_zeroize( output, length );
 80079a6:	4628      	mov	r0, r5
 80079a8:	4631      	mov	r1, r6
 80079aa:	f000 fdb9 	bl	8008520 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 80079ae:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
 80079b2:	b00d      	add	sp, #52	; 0x34
 80079b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        diff |= tag[i] ^ check_tag[i];
 80079b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80079b8:	5ce1      	ldrb	r1, [r4, r3]
 80079ba:	5cd2      	ldrb	r2, [r2, r3]
    for( diff = 0, i = 0; i < tag_len; i++ )
 80079bc:	3301      	adds	r3, #1
        diff |= tag[i] ^ check_tag[i];
 80079be:	404a      	eors	r2, r1
 80079c0:	4310      	orrs	r0, r2
 80079c2:	e7ed      	b.n	80079a0 <mbedtls_gcm_auth_decrypt+0x2e>

080079c4 <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 80079c4:	b510      	push	{r4, lr}
    if( ctx == NULL )
 80079c6:	4604      	mov	r4, r0
 80079c8:	b140      	cbz	r0, 80079dc <mbedtls_gcm_free+0x18>
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
 80079ca:	f7fe f909 	bl	8005be0 <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 80079ce:	4620      	mov	r0, r4
}
 80079d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 80079d4:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80079d8:	f000 bda2 	b.w	8008520 <mbedtls_platform_zeroize>
 80079dc:	bd10      	pop	{r4, pc}
	...

080079e0 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 80079e0:	3804      	subs	r0, #4
 80079e2:	b2c0      	uxtb	r0, r0
 80079e4:	2804      	cmp	r0, #4
 80079e6:	bf9a      	itte	ls
 80079e8:	4b02      	ldrls	r3, [pc, #8]	; (80079f4 <mbedtls_md_info_from_type+0x14>)
 80079ea:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80079ee:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	08015e18 	.word	0x08015e18

080079f8 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 80079f8:	2300      	movs	r3, #0
 80079fa:	6003      	str	r3, [r0, #0]
 80079fc:	6043      	str	r3, [r0, #4]
 80079fe:	6083      	str	r3, [r0, #8]
 8007a00:	4770      	bx	lr

08007a02 <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 8007a02:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8007a04:	4604      	mov	r4, r0
 8007a06:	b1a8      	cbz	r0, 8007a34 <mbedtls_md_free+0x32>
 8007a08:	6803      	ldr	r3, [r0, #0]
 8007a0a:	b19b      	cbz	r3, 8007a34 <mbedtls_md_free+0x32>
        return;

    if( ctx->md_ctx != NULL )
 8007a0c:	6840      	ldr	r0, [r0, #4]
 8007a0e:	b108      	cbz	r0, 8007a14 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 8007a14:	68a0      	ldr	r0, [r4, #8]
 8007a16:	b138      	cbz	r0, 8007a28 <mbedtls_md_free+0x26>
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	68d9      	ldr	r1, [r3, #12]
        mbedtls_platform_zeroize( ctx->hmac_ctx,
 8007a1c:	0049      	lsls	r1, r1, #1
 8007a1e:	f000 fd7f 	bl	8008520 <mbedtls_platform_zeroize>
        mbedtls_free( ctx->hmac_ctx );
 8007a22:	68a0      	ldr	r0, [r4, #8]
 8007a24:	f00a f9b4 	bl	8011d90 <free>
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 8007a28:	4620      	mov	r0, r4
}
 8007a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 8007a2e:	210c      	movs	r1, #12
 8007a30:	f000 bd76 	b.w	8008520 <mbedtls_platform_zeroize>
 8007a34:	bd10      	pop	{r4, pc}
	...

08007a38 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	4605      	mov	r5, r0
 8007a3c:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
 8007a3e:	460c      	mov	r4, r1
 8007a40:	b1a1      	cbz	r1, 8007a6c <mbedtls_md_setup+0x34>
 8007a42:	b198      	cbz	r0, 8007a6c <mbedtls_md_setup+0x34>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 8007a44:	6a0b      	ldr	r3, [r1, #32]
 8007a46:	4798      	blx	r3
 8007a48:	4606      	mov	r6, r0
 8007a4a:	6068      	str	r0, [r5, #4]
 8007a4c:	b148      	cbz	r0, 8007a62 <mbedtls_md_setup+0x2a>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 8007a4e:	b157      	cbz	r7, 8007a66 <mbedtls_md_setup+0x2e>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 8007a50:	68e1      	ldr	r1, [r4, #12]
 8007a52:	2002      	movs	r0, #2
 8007a54:	f00a f962 	bl	8011d1c <calloc>
 8007a58:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
 8007a5a:	b920      	cbnz	r0, 8007a66 <mbedtls_md_setup+0x2e>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 8007a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a5e:	4630      	mov	r0, r6
 8007a60:	4798      	blx	r3
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 8007a62:	4803      	ldr	r0, [pc, #12]	; (8007a70 <mbedtls_md_setup+0x38>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
 8007a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ctx->md_info = md_info;
 8007a66:	602c      	str	r4, [r5, #0]
    return( 0 );
 8007a68:	2000      	movs	r0, #0
 8007a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8007a6c:	4801      	ldr	r0, [pc, #4]	; (8007a74 <mbedtls_md_setup+0x3c>)
 8007a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a70:	ffffae80 	.word	0xffffae80
 8007a74:	ffffaf00 	.word	0xffffaf00

08007a78 <mbedtls_md>:
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 8007a78:	b430      	push	{r4, r5}
 8007a7a:	460d      	mov	r5, r1
 8007a7c:	4611      	mov	r1, r2
    if( md_info == NULL )
 8007a7e:	b128      	cbz	r0, 8007a8c <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 8007a80:	69c4      	ldr	r4, [r0, #28]
 8007a82:	461a      	mov	r2, r3
 8007a84:	4628      	mov	r0, r5
 8007a86:	4623      	mov	r3, r4
}
 8007a88:	bc30      	pop	{r4, r5}
    return( md_info->digest_func( input, ilen, output ) );
 8007a8a:	4718      	bx	r3
}
 8007a8c:	4801      	ldr	r0, [pc, #4]	; (8007a94 <mbedtls_md+0x1c>)
 8007a8e:	bc30      	pop	{r4, r5}
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	ffffaf00 	.word	0xffffaf00

08007a98 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 8007a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a9c:	460e      	mov	r6, r1
 8007a9e:	b090      	sub	sp, #64	; 0x40
 8007aa0:	4617      	mov	r7, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d057      	beq.n	8007b58 <mbedtls_md_hmac_starts+0xc0>
 8007aa8:	6803      	ldr	r3, [r0, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d054      	beq.n	8007b58 <mbedtls_md_hmac_starts+0xc0>
 8007aae:	6882      	ldr	r2, [r0, #8]
 8007ab0:	2a00      	cmp	r2, #0
 8007ab2:	d051      	beq.n	8007b58 <mbedtls_md_hmac_starts+0xc0>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	42ba      	cmp	r2, r7
 8007ab8:	d217      	bcs.n	8007aea <mbedtls_md_hmac_starts+0x52>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	6840      	ldr	r0, [r0, #4]
 8007abe:	4798      	blx	r3
 8007ac0:	4605      	mov	r5, r0
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d134      	bne.n	8007b30 <mbedtls_md_hmac_starts+0x98>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	463a      	mov	r2, r7
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	4631      	mov	r1, r6
 8007ace:	6860      	ldr	r0, [r4, #4]
 8007ad0:	4798      	blx	r3
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	bb60      	cbnz	r0, 8007b30 <mbedtls_md_hmac_starts+0x98>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	4669      	mov	r1, sp
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	6860      	ldr	r0, [r4, #4]
 8007ade:	4798      	blx	r3
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	bb28      	cbnz	r0, 8007b30 <mbedtls_md_hmac_starts+0x98>
            goto cleanup;

        keylen = ctx->md_info->size;
        key = sum;
 8007ae4:	466e      	mov	r6, sp
        keylen = ctx->md_info->size;
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	689f      	ldr	r7, [r3, #8]
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8007aea:	6823      	ldr	r3, [r4, #0]
    ipad = (unsigned char *) ctx->hmac_ctx;
 8007aec:	f8d4 8008 	ldr.w	r8, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8007af0:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 8007af2:	2136      	movs	r1, #54	; 0x36
 8007af4:	4640      	mov	r0, r8
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8007af6:	eb08 0502 	add.w	r5, r8, r2
    memset( ipad, 0x36, ctx->md_info->block_size );
 8007afa:	f00a f985 	bl	8011e08 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	215c      	movs	r1, #92	; 0x5c
 8007b02:	68da      	ldr	r2, [r3, #12]
 8007b04:	4628      	mov	r0, r5
 8007b06:	f00a f97f 	bl	8011e08 <memset>
 8007b0a:	4643      	mov	r3, r8
 8007b0c:	3e01      	subs	r6, #1
 8007b0e:	1e68      	subs	r0, r5, #1
 8007b10:	4447      	add	r7, r8

    for( i = 0; i < keylen; i++ )
 8007b12:	429f      	cmp	r7, r3
 8007b14:	d114      	bne.n	8007b40 <mbedtls_md_hmac_starts+0xa8>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	6860      	ldr	r0, [r4, #4]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	4798      	blx	r3
 8007b1e:	4605      	mov	r5, r0
 8007b20:	b930      	cbnz	r0, 8007b30 <mbedtls_md_hmac_starts+0x98>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	4641      	mov	r1, r8
 8007b26:	695d      	ldr	r5, [r3, #20]
 8007b28:	68da      	ldr	r2, [r3, #12]
 8007b2a:	6860      	ldr	r0, [r4, #4]
 8007b2c:	47a8      	blx	r5
 8007b2e:	4605      	mov	r5, r0
                                           ctx->md_info->block_size ) ) != 0 )
        goto cleanup;

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );
 8007b30:	2140      	movs	r1, #64	; 0x40
 8007b32:	4668      	mov	r0, sp
 8007b34:	f000 fcf4 	bl	8008520 <mbedtls_platform_zeroize>

    return( ret );
}
 8007b38:	4628      	mov	r0, r5
 8007b3a:	b010      	add	sp, #64	; 0x40
 8007b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 8007b40:	7871      	ldrb	r1, [r6, #1]
 8007b42:	781a      	ldrb	r2, [r3, #0]
 8007b44:	404a      	eors	r2, r1
 8007b46:	f803 2b01 	strb.w	r2, [r3], #1
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 8007b4a:	7842      	ldrb	r2, [r0, #1]
 8007b4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b50:	404a      	eors	r2, r1
 8007b52:	f800 2f01 	strb.w	r2, [r0, #1]!
 8007b56:	e7dc      	b.n	8007b12 <mbedtls_md_hmac_starts+0x7a>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8007b58:	4d00      	ldr	r5, [pc, #0]	; (8007b5c <mbedtls_md_hmac_starts+0xc4>)
 8007b5a:	e7ed      	b.n	8007b38 <mbedtls_md_hmac_starts+0xa0>
 8007b5c:	ffffaf00 	.word	0xffffaf00

08007b60 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 8007b60:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8007b62:	b138      	cbz	r0, 8007b74 <mbedtls_md_hmac_update+0x14>
 8007b64:	6803      	ldr	r3, [r0, #0]
 8007b66:	b12b      	cbz	r3, 8007b74 <mbedtls_md_hmac_update+0x14>
 8007b68:	6884      	ldr	r4, [r0, #8]
 8007b6a:	b11c      	cbz	r4, 8007b74 <mbedtls_md_hmac_update+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	6840      	ldr	r0, [r0, #4]
}
 8007b70:	bc10      	pop	{r4}
    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 8007b72:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8007b74:	4801      	ldr	r0, [pc, #4]	; (8007b7c <mbedtls_md_hmac_update+0x1c>)
}
 8007b76:	bc10      	pop	{r4}
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	ffffaf00 	.word	0xffffaf00

08007b80 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 8007b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b84:	460e      	mov	r6, r1
 8007b86:	b090      	sub	sp, #64	; 0x40
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8007b88:	4604      	mov	r4, r0
 8007b8a:	b330      	cbz	r0, 8007bda <mbedtls_md_hmac_finish+0x5a>
 8007b8c:	6803      	ldr	r3, [r0, #0]
 8007b8e:	b323      	cbz	r3, 8007bda <mbedtls_md_hmac_finish+0x5a>
 8007b90:	6885      	ldr	r5, [r0, #8]
 8007b92:	b315      	cbz	r5, 8007bda <mbedtls_md_hmac_finish+0x5a>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8007b94:	f8d3 800c 	ldr.w	r8, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 8007b98:	4669      	mov	r1, sp
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	6840      	ldr	r0, [r0, #4]
 8007b9e:	4798      	blx	r3
 8007ba0:	b9c0      	cbnz	r0, 8007bd4 <mbedtls_md_hmac_finish+0x54>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	6860      	ldr	r0, [r4, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	4798      	blx	r3
 8007baa:	b998      	cbnz	r0, 8007bd4 <mbedtls_md_hmac_finish+0x54>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	eb05 0108 	add.w	r1, r5, r8
 8007bb2:	695f      	ldr	r7, [r3, #20]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	6860      	ldr	r0, [r4, #4]
 8007bb8:	47b8      	blx	r7
 8007bba:	b958      	cbnz	r0, 8007bd4 <mbedtls_md_hmac_finish+0x54>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	4669      	mov	r1, sp
 8007bc0:	695d      	ldr	r5, [r3, #20]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	6860      	ldr	r0, [r4, #4]
 8007bc6:	47a8      	blx	r5
 8007bc8:	b920      	cbnz	r0, 8007bd4 <mbedtls_md_hmac_finish+0x54>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	4631      	mov	r1, r6
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	6860      	ldr	r0, [r4, #4]
 8007bd2:	4798      	blx	r3
}
 8007bd4:	b010      	add	sp, #64	; 0x40
 8007bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8007bda:	4801      	ldr	r0, [pc, #4]	; (8007be0 <mbedtls_md_hmac_finish+0x60>)
 8007bdc:	e7fa      	b.n	8007bd4 <mbedtls_md_hmac_finish+0x54>
 8007bde:	bf00      	nop
 8007be0:	ffffaf00 	.word	0xffffaf00

08007be4 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 8007be4:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8007be6:	4604      	mov	r4, r0
 8007be8:	b180      	cbz	r0, 8007c0c <mbedtls_md_hmac_reset+0x28>
 8007bea:	6803      	ldr	r3, [r0, #0]
 8007bec:	b173      	cbz	r3, 8007c0c <mbedtls_md_hmac_reset+0x28>
 8007bee:	6885      	ldr	r5, [r0, #8]
 8007bf0:	b165      	cbz	r5, 8007c0c <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	6840      	ldr	r0, [r0, #4]
 8007bf6:	4798      	blx	r3
 8007bf8:	b948      	cbnz	r0, 8007c0e <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	695e      	ldr	r6, [r3, #20]
 8007c00:	68da      	ldr	r2, [r3, #12]
 8007c02:	6860      	ldr	r0, [r4, #4]
 8007c04:	4633      	mov	r3, r6
                                       ctx->md_info->block_size ) );
}
 8007c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 8007c0a:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8007c0c:	4800      	ldr	r0, [pc, #0]	; (8007c10 <mbedtls_md_hmac_reset+0x2c>)
}
 8007c0e:	bd70      	pop	{r4, r5, r6, pc}
 8007c10:	ffffaf00 	.word	0xffffaf00

08007c14 <mbedtls_md_process>:
    return( ret );
}

int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8007c14:	b120      	cbz	r0, 8007c20 <mbedtls_md_process+0xc>
 8007c16:	6803      	ldr	r3, [r0, #0]
 8007c18:	b113      	cbz	r3, 8007c20 <mbedtls_md_process+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
 8007c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1c:	6840      	ldr	r0, [r0, #4]
 8007c1e:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8007c20:	4800      	ldr	r0, [pc, #0]	; (8007c24 <mbedtls_md_process+0x10>)
}
 8007c22:	4770      	bx	lr
 8007c24:	ffffaf00 	.word	0xffffaf00

08007c28 <mbedtls_md_get_size>:

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 8007c28:	b100      	cbz	r0, 8007c2c <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 8007c2a:	6880      	ldr	r0, [r0, #8]
}
 8007c2c:	b2c0      	uxtb	r0, r0
 8007c2e:	4770      	bx	lr

08007c30 <sha1_process_wrap>:
    mbedtls_free( ctx );
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
 8007c30:	f001 be3a 	b.w	80098a8 <mbedtls_internal_sha1_process>

08007c34 <sha1_clone_wrap>:
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
 8007c34:	f001 be18 	b.w	8009868 <mbedtls_sha1_clone>

08007c38 <sha1_ctx_free>:
{
 8007c38:	b510      	push	{r4, lr}
 8007c3a:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
 8007c3c:	f001 fe0f 	bl	800985e <mbedtls_sha1_free>
    mbedtls_free( ctx );
 8007c40:	4620      	mov	r0, r4
}
 8007c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8007c46:	f00a b8a3 	b.w	8011d90 <free>

08007c4a <sha1_ctx_alloc>:
{
 8007c4a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 8007c4c:	215c      	movs	r1, #92	; 0x5c
 8007c4e:	2001      	movs	r0, #1
 8007c50:	f00a f864 	bl	8011d1c <calloc>
    if( ctx != NULL )
 8007c54:	4604      	mov	r4, r0
 8007c56:	b108      	cbz	r0, 8007c5c <sha1_ctx_alloc+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
 8007c58:	f001 fdfd 	bl	8009856 <mbedtls_sha1_init>
}
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	bd10      	pop	{r4, pc}

08007c60 <sha1_finish_wrap>:
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
 8007c60:	f002 be09 	b.w	800a876 <mbedtls_sha1_finish_ret>

08007c64 <sha1_update_wrap>:
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
 8007c64:	f002 bdc8 	b.w	800a7f8 <mbedtls_sha1_update_ret>

08007c68 <sha1_starts_wrap>:
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
 8007c68:	f001 be04 	b.w	8009874 <mbedtls_sha1_starts_ret>

08007c6c <sha224_process_wrap>:
                    (const mbedtls_sha256_context *) src );
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
 8007c6c:	f002 bef4 	b.w	800aa58 <mbedtls_internal_sha256_process>

08007c70 <sha224_clone_wrap>:
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 8007c70:	f002 be9d 	b.w	800a9ae <mbedtls_sha256_clone>

08007c74 <sha224_ctx_free>:
{
 8007c74:	b510      	push	{r4, lr}
 8007c76:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 8007c78:	f002 fe94 	bl	800a9a4 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 8007c7c:	4620      	mov	r0, r4
}
 8007c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8007c82:	f00a b885 	b.w	8011d90 <free>

08007c86 <sha224_ctx_alloc>:
{
 8007c86:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 8007c88:	216c      	movs	r1, #108	; 0x6c
 8007c8a:	2001      	movs	r0, #1
 8007c8c:	f00a f846 	bl	8011d1c <calloc>
    if( ctx != NULL )
 8007c90:	4604      	mov	r4, r0
 8007c92:	b108      	cbz	r0, 8007c98 <sha224_ctx_alloc+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 8007c94:	f002 fe82 	bl	800a99c <mbedtls_sha256_init>
}
 8007c98:	4620      	mov	r0, r4
 8007c9a:	bd10      	pop	{r4, pc}

08007c9c <sha224_wrap>:
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f003 bb06 	b.w	800b2ae <mbedtls_sha256_ret>

08007ca2 <sha256_wrap>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f003 bb03 	b.w	800b2ae <mbedtls_sha256_ret>

08007ca8 <sha224_finish_wrap>:
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
 8007ca8:	f003 ba6d 	b.w	800b186 <mbedtls_sha256_finish_ret>

08007cac <sha224_update_wrap>:
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
 8007cac:	f003 ba2c 	b.w	800b108 <mbedtls_sha256_update_ret>

08007cb0 <sha224_starts_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	f002 be81 	b.w	800a9b8 <mbedtls_sha256_starts_ret>

08007cb6 <sha256_starts_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	f002 be7e 	b.w	800a9b8 <mbedtls_sha256_starts_ret>

08007cbc <sha384_process_wrap>:
                    (const mbedtls_sha512_context *) src );
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
 8007cbc:	f003 bbc4 	b.w	800b448 <mbedtls_internal_sha512_process>

08007cc0 <sha384_clone_wrap>:
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
 8007cc0:	f003 bb1f 	b.w	800b302 <mbedtls_sha512_clone>

08007cc4 <sha384_ctx_free>:
{
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 8007cc8:	f003 fb16 	bl	800b2f8 <mbedtls_sha512_free>
    mbedtls_free( ctx );
 8007ccc:	4620      	mov	r0, r4
}
 8007cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8007cd2:	f00a b85d 	b.w	8011d90 <free>

08007cd6 <sha384_ctx_alloc>:
{
 8007cd6:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 8007cd8:	21d8      	movs	r1, #216	; 0xd8
 8007cda:	2001      	movs	r0, #1
 8007cdc:	f00a f81e 	bl	8011d1c <calloc>
    if( ctx != NULL )
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	b108      	cbz	r0, 8007ce8 <sha384_ctx_alloc+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 8007ce4:	f003 fb04 	bl	800b2f0 <mbedtls_sha512_init>
}
 8007ce8:	4620      	mov	r0, r4
 8007cea:	bd10      	pop	{r4, pc}

08007cec <sha384_wrap>:
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
 8007cec:	2301      	movs	r3, #1
 8007cee:	f004 bb6f 	b.w	800c3d0 <mbedtls_sha512_ret>

08007cf2 <sha512_wrap>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f004 bb6c 	b.w	800c3d0 <mbedtls_sha512_ret>

08007cf8 <sha384_finish_wrap>:
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
 8007cf8:	f004 ba36 	b.w	800c168 <mbedtls_sha512_finish_ret>

08007cfc <sha384_update_wrap>:
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
 8007cfc:	f004 b9e8 	b.w	800c0d0 <mbedtls_sha512_update_ret>

08007d00 <sha384_starts_wrap>:
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
 8007d00:	2101      	movs	r1, #1
 8007d02:	f003 bb05 	b.w	800b310 <mbedtls_sha512_starts_ret>

08007d06 <sha512_starts_wrap>:
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
 8007d06:	2100      	movs	r1, #0
 8007d08:	f003 bb02 	b.w	800b310 <mbedtls_sha512_starts_ret>

08007d0c <oid_sig_alg_from_asn1>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4605      	mov	r5, r0
 8007d10:	b180      	cbz	r0, 8007d34 <oid_sig_alg_from_asn1+0x28>
 8007d12:	4c09      	ldr	r4, [pc, #36]	; (8007d38 <oid_sig_alg_from_asn1+0x2c>)
 8007d14:	6820      	ldr	r0, [r4, #0]
 8007d16:	b910      	cbnz	r0, 8007d1e <oid_sig_alg_from_asn1+0x12>
 8007d18:	4604      	mov	r4, r0
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	bd38      	pop	{r3, r4, r5, pc}
 8007d1e:	6862      	ldr	r2, [r4, #4]
 8007d20:	686b      	ldr	r3, [r5, #4]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d104      	bne.n	8007d30 <oid_sig_alg_from_asn1+0x24>
 8007d26:	68a9      	ldr	r1, [r5, #8]
 8007d28:	f00a f83a 	bl	8011da0 <memcmp>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d0f4      	beq.n	8007d1a <oid_sig_alg_from_asn1+0xe>
 8007d30:	3414      	adds	r4, #20
 8007d32:	e7ef      	b.n	8007d14 <oid_sig_alg_from_asn1+0x8>
 8007d34:	4604      	mov	r4, r0
 8007d36:	e7f0      	b.n	8007d1a <oid_sig_alg_from_asn1+0xe>
 8007d38:	08016054 	.word	0x08016054

08007d3c <mbedtls_oid_get_attr_short_name>:
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8007d3c:	b570      	push	{r4, r5, r6, lr}
 8007d3e:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 8007d40:	4605      	mov	r5, r0
 8007d42:	b110      	cbz	r0, 8007d4a <mbedtls_oid_get_attr_short_name+0xe>
 8007d44:	4c09      	ldr	r4, [pc, #36]	; (8007d6c <mbedtls_oid_get_attr_short_name+0x30>)
 8007d46:	6820      	ldr	r0, [r4, #0]
 8007d48:	b910      	cbnz	r0, 8007d50 <mbedtls_oid_get_attr_short_name+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8007d4a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8007d4e:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 8007d50:	6862      	ldr	r2, [r4, #4]
 8007d52:	686b      	ldr	r3, [r5, #4]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d103      	bne.n	8007d60 <mbedtls_oid_get_attr_short_name+0x24>
 8007d58:	68a9      	ldr	r1, [r5, #8]
 8007d5a:	f00a f821 	bl	8011da0 <memcmp>
 8007d5e:	b108      	cbz	r0, 8007d64 <mbedtls_oid_get_attr_short_name+0x28>
 8007d60:	3414      	adds	r4, #20
 8007d62:	e7f0      	b.n	8007d46 <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8007d64:	6923      	ldr	r3, [r4, #16]
 8007d66:	6033      	str	r3, [r6, #0]
 8007d68:	bd70      	pop	{r4, r5, r6, pc}
 8007d6a:	bf00      	nop
 8007d6c:	0801616c 	.word	0x0801616c

08007d70 <mbedtls_oid_get_x509_ext_type>:
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 8007d74:	4605      	mov	r5, r0
 8007d76:	b110      	cbz	r0, 8007d7e <mbedtls_oid_get_x509_ext_type+0xe>
 8007d78:	4c09      	ldr	r4, [pc, #36]	; (8007da0 <mbedtls_oid_get_x509_ext_type+0x30>)
 8007d7a:	6820      	ldr	r0, [r4, #0]
 8007d7c:	b910      	cbnz	r0, 8007d84 <mbedtls_oid_get_x509_ext_type+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8007d7e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8007d82:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 8007d84:	6862      	ldr	r2, [r4, #4]
 8007d86:	686b      	ldr	r3, [r5, #4]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d103      	bne.n	8007d94 <mbedtls_oid_get_x509_ext_type+0x24>
 8007d8c:	68a9      	ldr	r1, [r5, #8]
 8007d8e:	f00a f807 	bl	8011da0 <memcmp>
 8007d92:	b108      	cbz	r0, 8007d98 <mbedtls_oid_get_x509_ext_type+0x28>
 8007d94:	3414      	adds	r4, #20
 8007d96:	e7f0      	b.n	8007d7a <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8007d98:	6923      	ldr	r3, [r4, #16]
 8007d9a:	6033      	str	r3, [r6, #0]
 8007d9c:	bd70      	pop	{r4, r5, r6, pc}
 8007d9e:	bf00      	nop
 8007da0:	080160f4 	.word	0x080160f4

08007da4 <mbedtls_oid_get_extended_key_usage>:
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8007da4:	b570      	push	{r4, r5, r6, lr}
 8007da6:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8007da8:	4605      	mov	r5, r0
 8007daa:	b110      	cbz	r0, 8007db2 <mbedtls_oid_get_extended_key_usage+0xe>
 8007dac:	4c09      	ldr	r4, [pc, #36]	; (8007dd4 <mbedtls_oid_get_extended_key_usage+0x30>)
 8007dae:	6820      	ldr	r0, [r4, #0]
 8007db0:	b910      	cbnz	r0, 8007db8 <mbedtls_oid_get_extended_key_usage+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8007db2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8007db8:	6862      	ldr	r2, [r4, #4]
 8007dba:	686b      	ldr	r3, [r5, #4]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d103      	bne.n	8007dc8 <mbedtls_oid_get_extended_key_usage+0x24>
 8007dc0:	68a9      	ldr	r1, [r5, #8]
 8007dc2:	f009 ffed 	bl	8011da0 <memcmp>
 8007dc6:	b108      	cbz	r0, 8007dcc <mbedtls_oid_get_extended_key_usage+0x28>
 8007dc8:	3410      	adds	r4, #16
 8007dca:	e7f0      	b.n	8007dae <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8007dcc:	68e3      	ldr	r3, [r4, #12]
 8007dce:	6033      	str	r3, [r6, #0]
 8007dd0:	bd70      	pop	{r4, r5, r6, pc}
 8007dd2:	bf00      	nop
 8007dd4:	08015f1c 	.word	0x08015f1c

08007dd8 <mbedtls_oid_get_sig_alg_desc>:
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 8007dd8:	b510      	push	{r4, lr}
 8007dda:	460c      	mov	r4, r1
 8007ddc:	f7ff ff96 	bl	8007d0c <oid_sig_alg_from_asn1>
 8007de0:	b118      	cbz	r0, 8007dea <mbedtls_oid_get_sig_alg_desc+0x12>
 8007de2:	68c3      	ldr	r3, [r0, #12]
 8007de4:	2000      	movs	r0, #0
 8007de6:	6023      	str	r3, [r4, #0]
 8007de8:	bd10      	pop	{r4, pc}
 8007dea:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8007dee:	bd10      	pop	{r4, pc}

08007df0 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	460d      	mov	r5, r1
 8007df4:	4614      	mov	r4, r2
 8007df6:	f7ff ff89 	bl	8007d0c <oid_sig_alg_from_asn1>
 8007dfa:	b128      	cbz	r0, 8007e08 <mbedtls_oid_get_sig_alg+0x18>
 8007dfc:	7c03      	ldrb	r3, [r0, #16]
 8007dfe:	702b      	strb	r3, [r5, #0]
 8007e00:	7c43      	ldrb	r3, [r0, #17]
 8007e02:	2000      	movs	r0, #0
 8007e04:	7023      	strb	r3, [r4, #0]
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8007e0c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007e10 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8007e10:	b570      	push	{r4, r5, r6, lr}
 8007e12:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8007e14:	4605      	mov	r5, r0
 8007e16:	b110      	cbz	r0, 8007e1e <mbedtls_oid_get_pk_alg+0xe>
 8007e18:	4c09      	ldr	r4, [pc, #36]	; (8007e40 <mbedtls_oid_get_pk_alg+0x30>)
 8007e1a:	6820      	ldr	r0, [r4, #0]
 8007e1c:	b910      	cbnz	r0, 8007e24 <mbedtls_oid_get_pk_alg+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8007e1e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8007e22:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8007e24:	6862      	ldr	r2, [r4, #4]
 8007e26:	686b      	ldr	r3, [r5, #4]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d103      	bne.n	8007e34 <mbedtls_oid_get_pk_alg+0x24>
 8007e2c:	68a9      	ldr	r1, [r5, #8]
 8007e2e:	f009 ffb7 	bl	8011da0 <memcmp>
 8007e32:	b108      	cbz	r0, 8007e38 <mbedtls_oid_get_pk_alg+0x28>
 8007e34:	3414      	adds	r4, #20
 8007e36:	e7f0      	b.n	8007e1a <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8007e38:	7c23      	ldrb	r3, [r4, #16]
 8007e3a:	7033      	strb	r3, [r6, #0]
 8007e3c:	bd70      	pop	{r4, r5, r6, pc}
 8007e3e:	bf00      	nop
 8007e40:	08016004 	.word	0x08016004

08007e44 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 8007e44:	b530      	push	{r4, r5, lr}
 8007e46:	4b08      	ldr	r3, [pc, #32]	; (8007e68 <mbedtls_oid_get_oid_by_md+0x24>)
 8007e48:	681c      	ldr	r4, [r3, #0]
 8007e4a:	b914      	cbnz	r4, 8007e52 <mbedtls_oid_get_oid_by_md+0xe>
 8007e4c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8007e50:	bd30      	pop	{r4, r5, pc}
 8007e52:	7c1d      	ldrb	r5, [r3, #16]
 8007e54:	4285      	cmp	r5, r0
 8007e56:	d104      	bne.n	8007e62 <mbedtls_oid_get_oid_by_md+0x1e>
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	600c      	str	r4, [r1, #0]
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	bd30      	pop	{r4, r5, pc}
 8007e62:	3314      	adds	r3, #20
 8007e64:	e7f0      	b.n	8007e48 <mbedtls_oid_get_oid_by_md+0x4>
 8007e66:	bf00      	nop
 8007e68:	08015f8c 	.word	0x08015f8c

08007e6c <mbedtls_pem_init>:
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	6003      	str	r3, [r0, #0]
 8007e70:	6043      	str	r3, [r0, #4]
 8007e72:	6083      	str	r3, [r0, #8]
 8007e74:	4770      	bx	lr
	...

08007e78 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 8007e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e7c:	4689      	mov	r9, r1
 8007e7e:	b085      	sub	sp, #20
 8007e80:	4690      	mov	r8, r2
 8007e82:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 8007e84:	4606      	mov	r6, r0
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d066      	beq.n	8007f58 <mbedtls_pem_read_buffer+0xe0>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f00a f9b0 	bl	80121f0 <strstr>

    if( s1 == NULL )
 8007e90:	4604      	mov	r4, r0
 8007e92:	2800      	cmp	r0, #0
 8007e94:	d062      	beq.n	8007f5c <mbedtls_pem_read_buffer+0xe4>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 8007e96:	4641      	mov	r1, r8
 8007e98:	4638      	mov	r0, r7
 8007e9a:	f00a f9a9 	bl	80121f0 <strstr>

    if( s2 == NULL || s2 <= s1 )
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	d05b      	beq.n	8007f5c <mbedtls_pem_read_buffer+0xe4>
 8007ea4:	4284      	cmp	r4, r0
 8007ea6:	d259      	bcs.n	8007f5c <mbedtls_pem_read_buffer+0xe4>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 8007ea8:	4648      	mov	r0, r9
 8007eaa:	f7f8 f9bd 	bl	8000228 <strlen>
    if( *s1 == ' '  ) s1++;
 8007eae:	5c22      	ldrb	r2, [r4, r0]
    s1 += strlen( header );
 8007eb0:	1823      	adds	r3, r4, r0
    if( *s1 == ' '  ) s1++;
 8007eb2:	2a20      	cmp	r2, #32
 8007eb4:	bf08      	it	eq
 8007eb6:	3301      	addeq	r3, #1
    if( *s1 == '\r' ) s1++;
 8007eb8:	781a      	ldrb	r2, [r3, #0]
 8007eba:	2a0d      	cmp	r2, #13
 8007ebc:	bf08      	it	eq
 8007ebe:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
 8007ec0:	781a      	ldrb	r2, [r3, #0]
 8007ec2:	2a0a      	cmp	r2, #10
 8007ec4:	d14a      	bne.n	8007f5c <mbedtls_pem_read_buffer+0xe4>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 8007ec6:	4640      	mov	r0, r8
    if( *s1 == '\n' ) s1++;
 8007ec8:	1c5c      	adds	r4, r3, #1
    end += strlen( footer );
 8007eca:	f7f8 f9ad 	bl	8000228 <strlen>
    if( *end == ' '  ) end++;
 8007ece:	5c2a      	ldrb	r2, [r5, r0]
    end += strlen( footer );
 8007ed0:	182b      	adds	r3, r5, r0
    if( *end == ' '  ) end++;
 8007ed2:	2a20      	cmp	r2, #32
 8007ed4:	bf08      	it	eq
 8007ed6:	3301      	addeq	r3, #1
    if( *end == '\r' ) end++;
 8007ed8:	781a      	ldrb	r2, [r3, #0]
 8007eda:	2a0d      	cmp	r2, #13
 8007edc:	bf08      	it	eq
 8007ede:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
 8007ee0:	781a      	ldrb	r2, [r3, #0]
 8007ee2:	2a0a      	cmp	r2, #10
 8007ee4:	bf08      	it	eq
 8007ee6:	3301      	addeq	r3, #1
    *use_len = end - data;
 8007ee8:	1bdb      	subs	r3, r3, r7
 8007eea:	9a0e      	ldr	r2, [sp, #56]	; 0x38

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 8007eec:	1b2f      	subs	r7, r5, r4
 8007eee:	2f15      	cmp	r7, #21
    *use_len = end - data;
 8007ef0:	6013      	str	r3, [r2, #0]
    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 8007ef2:	dd05      	ble.n	8007f00 <mbedtls_pem_read_buffer+0x88>
 8007ef4:	2216      	movs	r2, #22
 8007ef6:	491e      	ldr	r1, [pc, #120]	; (8007f70 <mbedtls_pem_read_buffer+0xf8>)
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f009 ff51 	bl	8011da0 <memcmp>
 8007efe:	b378      	cbz	r0, 8007f60 <mbedtls_pem_read_buffer+0xe8>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 8007f00:	42a5      	cmp	r5, r4
 8007f02:	d92f      	bls.n	8007f64 <mbedtls_pem_read_buffer+0xec>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 8007f04:	2100      	movs	r1, #0
 8007f06:	9700      	str	r7, [sp, #0]
 8007f08:	4623      	mov	r3, r4
 8007f0a:	aa03      	add	r2, sp, #12
 8007f0c:	4608      	mov	r0, r1
 8007f0e:	f7fc f945 	bl	800419c <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 8007f12:	302c      	adds	r0, #44	; 0x2c
 8007f14:	d028      	beq.n	8007f68 <mbedtls_pem_read_buffer+0xf0>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
 8007f16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007f1a:	2001      	movs	r0, #1
 8007f1c:	4641      	mov	r1, r8
 8007f1e:	f009 fefd 	bl	8011d1c <calloc>
 8007f22:	4605      	mov	r5, r0
 8007f24:	b310      	cbz	r0, 8007f6c <mbedtls_pem_read_buffer+0xf4>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 8007f26:	4623      	mov	r3, r4
 8007f28:	9700      	str	r7, [sp, #0]
 8007f2a:	aa03      	add	r2, sp, #12
 8007f2c:	4641      	mov	r1, r8
 8007f2e:	f7fc f935 	bl	800419c <mbedtls_base64_decode>
 8007f32:	4604      	mov	r4, r0
 8007f34:	b160      	cbz	r0, 8007f50 <mbedtls_pem_read_buffer+0xd8>
    {
        mbedtls_platform_zeroize( buf, len );
 8007f36:	9903      	ldr	r1, [sp, #12]
 8007f38:	4628      	mov	r0, r5
 8007f3a:	f000 faf1 	bl	8008520 <mbedtls_platform_zeroize>
        mbedtls_free( buf );
 8007f3e:	4628      	mov	r0, r5
 8007f40:	f009 ff26 	bl	8011d90 <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 8007f44:	f5a4 5488 	sub.w	r4, r4, #4352	; 0x1100

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
 8007f48:	4620      	mov	r0, r4
 8007f4a:	b005      	add	sp, #20
 8007f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ctx->buflen = len;
 8007f50:	9b03      	ldr	r3, [sp, #12]
    ctx->buf = buf;
 8007f52:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
 8007f54:	6073      	str	r3, [r6, #4]
    return( 0 );
 8007f56:	e7f7      	b.n	8007f48 <mbedtls_pem_read_buffer+0xd0>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 8007f58:	4c06      	ldr	r4, [pc, #24]	; (8007f74 <mbedtls_pem_read_buffer+0xfc>)
 8007f5a:	e7f5      	b.n	8007f48 <mbedtls_pem_read_buffer+0xd0>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 8007f5c:	4c06      	ldr	r4, [pc, #24]	; (8007f78 <mbedtls_pem_read_buffer+0x100>)
 8007f5e:	e7f3      	b.n	8007f48 <mbedtls_pem_read_buffer+0xd0>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 8007f60:	4c06      	ldr	r4, [pc, #24]	; (8007f7c <mbedtls_pem_read_buffer+0x104>)
 8007f62:	e7f1      	b.n	8007f48 <mbedtls_pem_read_buffer+0xd0>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 8007f64:	4c06      	ldr	r4, [pc, #24]	; (8007f80 <mbedtls_pem_read_buffer+0x108>)
 8007f66:	e7ef      	b.n	8007f48 <mbedtls_pem_read_buffer+0xd0>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 8007f68:	4c06      	ldr	r4, [pc, #24]	; (8007f84 <mbedtls_pem_read_buffer+0x10c>)
 8007f6a:	e7ed      	b.n	8007f48 <mbedtls_pem_read_buffer+0xd0>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 8007f6c:	4c06      	ldr	r4, [pc, #24]	; (8007f88 <mbedtls_pem_read_buffer+0x110>)
 8007f6e:	e7eb      	b.n	8007f48 <mbedtls_pem_read_buffer+0xd0>
 8007f70:	08016a45 	.word	0x08016a45
 8007f74:	ffffeb80 	.word	0xffffeb80
 8007f78:	ffffef80 	.word	0xffffef80
 8007f7c:	ffffec00 	.word	0xffffec00
 8007f80:	ffffef00 	.word	0xffffef00
 8007f84:	ffffeed4 	.word	0xffffeed4
 8007f88:	ffffee80 	.word	0xffffee80

08007f8c <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 8007f8c:	b510      	push	{r4, lr}
 8007f8e:	4604      	mov	r4, r0
    if ( ctx->buf != NULL )
 8007f90:	6800      	ldr	r0, [r0, #0]
 8007f92:	b128      	cbz	r0, 8007fa0 <mbedtls_pem_free+0x14>
    {
        mbedtls_platform_zeroize( ctx->buf, ctx->buflen );
 8007f94:	6861      	ldr	r1, [r4, #4]
 8007f96:	f000 fac3 	bl	8008520 <mbedtls_platform_zeroize>
        mbedtls_free( ctx->buf );
 8007f9a:	6820      	ldr	r0, [r4, #0]
 8007f9c:	f009 fef8 	bl	8011d90 <free>
    }
    mbedtls_free( ctx->info );
 8007fa0:	68a0      	ldr	r0, [r4, #8]
 8007fa2:	f009 fef5 	bl	8011d90 <free>

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
 8007fa6:	4620      	mov	r0, r4
}
 8007fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
 8007fac:	210c      	movs	r1, #12
 8007fae:	f000 bab7 	b.w	8008520 <mbedtls_platform_zeroize>

08007fb2 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 8007fb2:	b510      	push	{r4, lr}
    if( ctx == NULL )
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	b150      	cbz	r0, 8007fce <mbedtls_pk_free+0x1c>
        return;

    if ( ctx->pk_info != NULL )
 8007fb8:	6803      	ldr	r3, [r0, #0]
 8007fba:	b113      	cbz	r3, 8007fc2 <mbedtls_pk_free+0x10>
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbe:	6840      	ldr	r0, [r0, #4]
 8007fc0:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 8007fc2:	4620      	mov	r0, r4
}
 8007fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 8007fc8:	2108      	movs	r1, #8
 8007fca:	f000 baa9 	b.w	8008520 <mbedtls_platform_zeroize>
 8007fce:	bd10      	pop	{r4, pc}

08007fd0 <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
 8007fd0:	2801      	cmp	r0, #1
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 8007fd2:	4802      	ldr	r0, [pc, #8]	; (8007fdc <mbedtls_pk_info_from_type+0xc>)
 8007fd4:	bf18      	it	ne
 8007fd6:	2000      	movne	r0, #0
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	08016a68 	.word	0x08016a68

08007fe0 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	4605      	mov	r5, r0
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
 8007fe4:	460e      	mov	r6, r1
 8007fe6:	b141      	cbz	r1, 8007ffa <mbedtls_pk_setup+0x1a>
 8007fe8:	6804      	ldr	r4, [r0, #0]
 8007fea:	b934      	cbnz	r4, 8007ffa <mbedtls_pk_setup+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 8007fec:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8007fee:	4798      	blx	r3
 8007ff0:	6068      	str	r0, [r5, #4]
 8007ff2:	b120      	cbz	r0, 8007ffe <mbedtls_pk_setup+0x1e>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 8007ff4:	602e      	str	r6, [r5, #0]

    return( 0 );
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8007ffa:	4802      	ldr	r0, [pc, #8]	; (8008004 <mbedtls_pk_setup+0x24>)
 8007ffc:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 8007ffe:	4802      	ldr	r0, [pc, #8]	; (8008008 <mbedtls_pk_setup+0x28>)
}
 8008000:	bd70      	pop	{r4, r5, r6, pc}
 8008002:	bf00      	nop
 8008004:	ffffc180 	.word	0xffffc180
 8008008:	ffffc080 	.word	0xffffc080

0800800c <mbedtls_pk_can_do>:
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* A context with null pk_info is not set up yet and can't do anything.
     * For backward compatibility, also accept NULL instead of a context
     * pointer. */
    if( ctx == NULL || ctx->pk_info == NULL )
 800800c:	b120      	cbz	r0, 8008018 <mbedtls_pk_can_do+0xc>
 800800e:	6803      	ldr	r3, [r0, #0]
 8008010:	b113      	cbz	r3, 8008018 <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	4608      	mov	r0, r1
 8008016:	4718      	bx	r3
}
 8008018:	2000      	movs	r0, #0
 800801a:	4770      	bx	lr

0800801c <mbedtls_pk_verify_restartable>:
int mbedtls_pk_verify_restartable( mbedtls_pk_context *ctx,
               mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len,
               mbedtls_pk_restart_ctx *rs_ctx )
{
 800801c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008020:	4617      	mov	r7, r2
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
 8008022:	6802      	ldr	r2, [r0, #0]
{
 8008024:	4604      	mov	r4, r0
 8008026:	460e      	mov	r6, r1
 8008028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800802c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( ctx->pk_info == NULL ||
 8008030:	b912      	cbnz	r2, 8008038 <mbedtls_pk_verify_restartable+0x1c>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8008032:	480e      	ldr	r0, [pc, #56]	; (800806c <mbedtls_pk_verify_restartable+0x50>)
 8008034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( *hash_len != 0 )
 8008038:	b93b      	cbnz	r3, 800804a <mbedtls_pk_verify_restartable+0x2e>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 800803a:	4608      	mov	r0, r1
 800803c:	f7ff fcd0 	bl	80079e0 <mbedtls_md_info_from_type>
 8008040:	2800      	cmp	r0, #0
 8008042:	d0f6      	beq.n	8008032 <mbedtls_pk_verify_restartable+0x16>
    *hash_len = mbedtls_md_get_size( md_info );
 8008044:	f7ff fdf0 	bl	8007c28 <mbedtls_md_get_size>
 8008048:	4603      	mov	r3, r0
    }
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->verify_func == NULL )
 800804a:	6822      	ldr	r2, [r4, #0]
 800804c:	6915      	ldr	r5, [r2, #16]
 800804e:	b915      	cbnz	r5, 8008056 <mbedtls_pk_verify_restartable+0x3a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8008050:	4807      	ldr	r0, [pc, #28]	; (8008070 <mbedtls_pk_verify_restartable+0x54>)
 8008052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8008056:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800805a:	f8cd 8020 	str.w	r8, [sp, #32]
 800805e:	463a      	mov	r2, r7
 8008060:	4631      	mov	r1, r6
 8008062:	6860      	ldr	r0, [r4, #4]
 8008064:	46ac      	mov	ip, r5
                                       sig, sig_len ) );
}
 8008066:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 800806a:	4760      	bx	ip
 800806c:	ffffc180 	.word	0xffffc180
 8008070:	ffffc100 	.word	0xffffc100

08008074 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 8008074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( mbedtls_pk_verify_restartable( ctx, md_alg, hash, hash_len,
 8008076:	2400      	movs	r4, #0
 8008078:	9402      	str	r4, [sp, #8]
 800807a:	9c07      	ldr	r4, [sp, #28]
 800807c:	9401      	str	r4, [sp, #4]
 800807e:	9c06      	ldr	r4, [sp, #24]
 8008080:	9400      	str	r4, [sp, #0]
 8008082:	f7ff ffcb 	bl	800801c <mbedtls_pk_verify_restartable>
                                           sig, sig_len, NULL ) );
}
 8008086:	b004      	add	sp, #16
 8008088:	bd10      	pop	{r4, pc}
	...

0800808c <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 800808c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008090:	461e      	mov	r6, r3
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL )
 8008092:	6813      	ldr	r3, [r2, #0]
{
 8008094:	af0a      	add	r7, sp, #40	; 0x28
 8008096:	4605      	mov	r5, r0
 8008098:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
 800809c:	468b      	mov	fp, r1
 800809e:	4614      	mov	r4, r2
    if( ctx->pk_info == NULL )
 80080a0:	b91b      	cbnz	r3, 80080aa <mbedtls_pk_verify_ext+0x1e>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80080a2:	480f      	ldr	r0, [pc, #60]	; (80080e0 <mbedtls_pk_verify_ext+0x54>)
    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
 80080a4:	b001      	add	sp, #4
 80080a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ! mbedtls_pk_can_do( ctx, type ) )
 80080aa:	4601      	mov	r1, r0
 80080ac:	4610      	mov	r0, r2
 80080ae:	f7ff ffad 	bl	800800c <mbedtls_pk_can_do>
 80080b2:	b188      	cbz	r0, 80080d8 <mbedtls_pk_verify_ext+0x4c>
    if( type == MBEDTLS_PK_RSASSA_PSS )
 80080b4:	2d06      	cmp	r5, #6
 80080b6:	d011      	beq.n	80080dc <mbedtls_pk_verify_ext+0x50>
    if( options != NULL )
 80080b8:	f1bb 0f00 	cmp.w	fp, #0
 80080bc:	d1f1      	bne.n	80080a2 <mbedtls_pk_verify_ext+0x16>
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 80080be:	4643      	mov	r3, r8
 80080c0:	463a      	mov	r2, r7
 80080c2:	4631      	mov	r1, r6
 80080c4:	4620      	mov	r0, r4
 80080c6:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80080ca:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
}
 80080ce:	b001      	add	sp, #4
 80080d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 80080d4:	f7ff bfce 	b.w	8008074 <mbedtls_pk_verify>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80080d8:	4802      	ldr	r0, [pc, #8]	; (80080e4 <mbedtls_pk_verify_ext+0x58>)
 80080da:	e7e3      	b.n	80080a4 <mbedtls_pk_verify_ext+0x18>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 80080dc:	4802      	ldr	r0, [pc, #8]	; (80080e8 <mbedtls_pk_verify_ext+0x5c>)
 80080de:	e7e1      	b.n	80080a4 <mbedtls_pk_verify_ext+0x18>
 80080e0:	ffffc180 	.word	0xffffc180
 80080e4:	ffffc100 	.word	0xffffc100
 80080e8:	ffffc680 	.word	0xffffc680

080080ec <mbedtls_pk_sign_restartable>:
             mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_pk_restart_ctx *rs_ctx )
{
 80080ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f0:	4616      	mov	r6, r2
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
 80080f2:	6802      	ldr	r2, [r0, #0]
{
 80080f4:	af08      	add	r7, sp, #32
 80080f6:	4604      	mov	r4, r0
 80080f8:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
 80080fc:	460d      	mov	r5, r1
    if( ctx->pk_info == NULL ||
 80080fe:	b912      	cbnz	r2, 8008106 <mbedtls_pk_sign_restartable+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8008100:	4811      	ldr	r0, [pc, #68]	; (8008148 <mbedtls_pk_sign_restartable+0x5c>)
 8008102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( *hash_len != 0 )
 8008106:	b93b      	cbnz	r3, 8008118 <mbedtls_pk_sign_restartable+0x2c>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8008108:	4608      	mov	r0, r1
 800810a:	f7ff fc69 	bl	80079e0 <mbedtls_md_info_from_type>
 800810e:	2800      	cmp	r0, #0
 8008110:	d0f6      	beq.n	8008100 <mbedtls_pk_sign_restartable+0x14>
    *hash_len = mbedtls_md_get_size( md_info );
 8008112:	f7ff fd89 	bl	8007c28 <mbedtls_md_get_size>
 8008116:	4603      	mov	r3, r0
    }
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->sign_func == NULL )
 8008118:	6822      	ldr	r2, [r4, #0]
 800811a:	f8d2 e014 	ldr.w	lr, [r2, #20]
 800811e:	f1be 0f00 	cmp.w	lr, #0
 8008122:	d102      	bne.n	800812a <mbedtls_pk_sign_restartable+0x3e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8008124:	4809      	ldr	r0, [pc, #36]	; (800814c <mbedtls_pk_sign_restartable+0x60>)
 8008126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 800812a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800812e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8008132:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8008136:	9708      	str	r7, [sp, #32]
 8008138:	4632      	mov	r2, r6
 800813a:	4629      	mov	r1, r5
 800813c:	6860      	ldr	r0, [r4, #4]
 800813e:	46f4      	mov	ip, lr
                                     sig, sig_len, f_rng, p_rng ) );
}
 8008140:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8008144:	4760      	bx	ip
 8008146:	bf00      	nop
 8008148:	ffffc180 	.word	0xffffc180
 800814c:	ffffc100 	.word	0xffffc100

08008150 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8008150:	b5f0      	push	{r4, r5, r6, r7, lr}
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( input != NULL || ilen == 0 );
    PK_VALIDATE_RET( output != NULL || osize == 0 );
    PK_VALIDATE_RET( olen != NULL );

    if( ctx->pk_info == NULL )
 8008152:	6804      	ldr	r4, [r0, #0]
{
 8008154:	ad05      	add	r5, sp, #20
 8008156:	e895 40e0 	ldmia.w	r5, {r5, r6, r7, lr}
    if( ctx->pk_info == NULL )
 800815a:	b134      	cbz	r4, 800816a <mbedtls_pk_encrypt+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
 800815c:	69e4      	ldr	r4, [r4, #28]
 800815e:	b134      	cbz	r4, 800816e <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 8008160:	46a4      	mov	ip, r4
                output, olen, osize, f_rng, p_rng ) );
}
 8008162:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 8008166:	6840      	ldr	r0, [r0, #4]
 8008168:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800816a:	4802      	ldr	r0, [pc, #8]	; (8008174 <mbedtls_pk_encrypt+0x24>)
 800816c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800816e:	4802      	ldr	r0, [pc, #8]	; (8008178 <mbedtls_pk_encrypt+0x28>)
}
 8008170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008172:	bf00      	nop
 8008174:	ffffc180 	.word	0xffffc180
 8008178:	ffffc100 	.word	0xffffc100

0800817c <mbedtls_pk_get_bitlen>:
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    /* For backward compatibility, accept NULL or a context that
     * isn't set up yet, and return a fake value that should be safe. */
    if( ctx == NULL || ctx->pk_info == NULL )
 800817c:	b120      	cbz	r0, 8008188 <mbedtls_pk_get_bitlen+0xc>
 800817e:	6803      	ldr	r3, [r0, #0]
 8008180:	b113      	cbz	r3, 8008188 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	6840      	ldr	r0, [r0, #4]
 8008186:	4718      	bx	r3
}
 8008188:	2000      	movs	r0, #0
 800818a:	4770      	bx	lr

0800818c <mbedtls_pk_debug>:

/*
 * Export debug information
 */
int mbedtls_pk_debug( const mbedtls_pk_context *ctx, mbedtls_pk_debug_item *items )
{
 800818c:	b508      	push	{r3, lr}
    PK_VALIDATE_RET( ctx != NULL );
    if( ctx->pk_info == NULL )
 800818e:	6803      	ldr	r3, [r0, #0]
 8008190:	b12b      	cbz	r3, 800819e <mbedtls_pk_debug+0x12>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->debug_func == NULL )
 8008192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008194:	b12b      	cbz	r3, 80081a2 <mbedtls_pk_debug+0x16>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    ctx->pk_info->debug_func( ctx->pk_ctx, items );
 8008196:	6840      	ldr	r0, [r0, #4]
 8008198:	4798      	blx	r3
    return( 0 );
 800819a:	2000      	movs	r0, #0
 800819c:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800819e:	4802      	ldr	r0, [pc, #8]	; (80081a8 <mbedtls_pk_debug+0x1c>)
 80081a0:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80081a2:	4802      	ldr	r0, [pc, #8]	; (80081ac <mbedtls_pk_debug+0x20>)
}
 80081a4:	bd08      	pop	{r3, pc}
 80081a6:	bf00      	nop
 80081a8:	ffffc180 	.word	0xffffc180
 80081ac:	ffffc100 	.word	0xffffc100

080081b0 <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 80081b0:	b118      	cbz	r0, 80081ba <mbedtls_pk_get_name+0xa>
 80081b2:	6803      	ldr	r3, [r0, #0]
 80081b4:	b10b      	cbz	r3, 80081ba <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
 80081b6:	6858      	ldr	r0, [r3, #4]
 80081b8:	4770      	bx	lr
        return( "invalid PK" );
 80081ba:	4801      	ldr	r0, [pc, #4]	; (80081c0 <mbedtls_pk_get_name+0x10>)
}
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	08016a5c 	.word	0x08016a5c

080081c4 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 80081c4:	b110      	cbz	r0, 80081cc <mbedtls_pk_get_type+0x8>
 80081c6:	6800      	ldr	r0, [r0, #0]
 80081c8:	b100      	cbz	r0, 80081cc <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 80081ca:	7800      	ldrb	r0, [r0, #0]
}
 80081cc:	4770      	bx	lr

080081ce <rsa_can_do>:
#include <stdint.h>

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 80081ce:	2801      	cmp	r0, #1
 80081d0:	d002      	beq.n	80081d8 <rsa_can_do+0xa>
 80081d2:	1f83      	subs	r3, r0, #6
 80081d4:	4258      	negs	r0, r3
 80081d6:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 80081d8:	4770      	bx	lr
	...

080081dc <rsa_debug>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 80081dc:	2301      	movs	r3, #1
    items->name = "rsa.N";
 80081de:	4a06      	ldr	r2, [pc, #24]	; (80081f8 <rsa_debug+0x1c>)
    items->type = MBEDTLS_PK_DEBUG_MPI;
 80081e0:	700b      	strb	r3, [r1, #0]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 80081e2:	730b      	strb	r3, [r1, #12]
    items->name = "rsa.E";
 80081e4:	4b05      	ldr	r3, [pc, #20]	; (80081fc <rsa_debug+0x20>)
    items->name = "rsa.N";
 80081e6:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 80081e8:	f100 0208 	add.w	r2, r0, #8
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 80081ec:	3014      	adds	r0, #20
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 80081ee:	608a      	str	r2, [r1, #8]
    items->name = "rsa.E";
 80081f0:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 80081f2:	6148      	str	r0, [r1, #20]
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	08016a98 	.word	0x08016a98
 80081fc:	08016a9e 	.word	0x08016a9e

08008200 <rsa_free_wrap>:
{
 8008200:	b510      	push	{r4, lr}
 8008202:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 8008204:	f001 f810 	bl	8009228 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 8008208:	4620      	mov	r0, r4
}
 800820a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 800820e:	f009 bdbf 	b.w	8011d90 <free>

08008212 <rsa_alloc_wrap>:
{
 8008212:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 8008214:	21ac      	movs	r1, #172	; 0xac
 8008216:	2001      	movs	r0, #1
 8008218:	f009 fd80 	bl	8011d1c <calloc>
    if( ctx != NULL )
 800821c:	4604      	mov	r4, r0
 800821e:	b118      	cbz	r0, 8008228 <rsa_alloc_wrap+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 8008220:	2200      	movs	r2, #0
 8008222:	4611      	mov	r1, r2
 8008224:	f000 fb4a 	bl	80088bc <mbedtls_rsa_init>
}
 8008228:	4620      	mov	r0, r4
 800822a:	bd10      	pop	{r4, pc}

0800822c <rsa_check_pair_wrap>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
 800822c:	f000 bbb0 	b.w	8008990 <mbedtls_rsa_check_pub_priv>

08008230 <rsa_get_bitlen>:
{
 8008230:	b508      	push	{r3, lr}
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 8008232:	f000 fb50 	bl	80088d6 <mbedtls_rsa_get_len>
}
 8008236:	00c0      	lsls	r0, r0, #3
 8008238:	bd08      	pop	{r3, pc}
	...

0800823c <rsa_encrypt_wrap>:
{
 800823c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008240:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8008244:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8008248:	4604      	mov	r4, r0
 800824a:	4688      	mov	r8, r1
 800824c:	4617      	mov	r7, r2
 800824e:	4699      	mov	r9, r3
 8008250:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008252:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    *olen = mbedtls_rsa_get_len( rsa );
 8008254:	f000 fb3f 	bl	80088d6 <mbedtls_rsa_get_len>
    if( *olen > osize )
 8008258:	4550      	cmp	r0, sl
    *olen = mbedtls_rsa_get_len( rsa );
 800825a:	f8cb 0000 	str.w	r0, [fp]
    if( *olen > osize )
 800825e:	d80d      	bhi.n	800827c <rsa_encrypt_wrap+0x40>
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 8008260:	2300      	movs	r3, #0
 8008262:	4632      	mov	r2, r6
 8008264:	4629      	mov	r1, r5
 8008266:	4620      	mov	r0, r4
 8008268:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800826c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8008270:	970a      	str	r7, [sp, #40]	; 0x28
}
 8008272:	b001      	add	sp, #4
 8008274:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 8008278:	f000 be0c 	b.w	8008e94 <mbedtls_rsa_pkcs1_encrypt>
}
 800827c:	4801      	ldr	r0, [pc, #4]	; (8008284 <rsa_encrypt_wrap+0x48>)
 800827e:	b001      	add	sp, #4
 8008280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008284:	ffffbc00 	.word	0xffffbc00

08008288 <rsa_decrypt_wrap>:
{
 8008288:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800828e:	4693      	mov	fp, r2
 8008290:	4604      	mov	r4, r0
 8008292:	4688      	mov	r8, r1
 8008294:	4699      	mov	r9, r3
 8008296:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800829a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800829c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    if( ilen != mbedtls_rsa_get_len( rsa ) )
 800829e:	f000 fb1a 	bl	80088d6 <mbedtls_rsa_get_len>
 80082a2:	4558      	cmp	r0, fp
 80082a4:	d10f      	bne.n	80082c6 <rsa_decrypt_wrap+0x3e>
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 80082a6:	2301      	movs	r3, #1
 80082a8:	4632      	mov	r2, r6
 80082aa:	4629      	mov	r1, r5
 80082ac:	4620      	mov	r0, r4
 80082ae:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80082b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80082b6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80082ba:	970a      	str	r7, [sp, #40]	; 0x28
}
 80082bc:	b001      	add	sp, #4
 80082be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 80082c2:	f000 beb9 	b.w	8009038 <mbedtls_rsa_pkcs1_decrypt>
}
 80082c6:	4802      	ldr	r0, [pc, #8]	; (80082d0 <rsa_decrypt_wrap+0x48>)
 80082c8:	b001      	add	sp, #4
 80082ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ce:	bf00      	nop
 80082d0:	ffffbf80 	.word	0xffffbf80

080082d4 <rsa_sign_wrap>:
{
 80082d4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80082dc:	460f      	mov	r7, r1
 80082de:	4691      	mov	r9, r2
 80082e0:	4698      	mov	r8, r3
 80082e2:	4604      	mov	r4, r0
 80082e4:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80082e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082ea:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    *sig_len = mbedtls_rsa_get_len( rsa );
 80082ec:	f000 faf3 	bl	80088d6 <mbedtls_rsa_get_len>
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 80082f0:	2301      	movs	r3, #1
    *sig_len = mbedtls_rsa_get_len( rsa );
 80082f2:	f8cb 0000 	str.w	r0, [fp]
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 80082f6:	4632      	mov	r2, r6
 80082f8:	4629      	mov	r1, r5
 80082fa:	4620      	mov	r0, r4
 80082fc:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008300:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008304:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8008308:	970a      	str	r7, [sp, #40]	; 0x28
}
 800830a:	b001      	add	sp, #4
 800830c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 8008310:	f000 bf06 	b.w	8009120 <mbedtls_rsa_pkcs1_sign>

08008314 <rsa_verify_wrap>:
{
 8008314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008318:	b085      	sub	sp, #20
 800831a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800831c:	4606      	mov	r6, r0
 800831e:	460f      	mov	r7, r1
 8008320:	4691      	mov	r9, r2
 8008322:	4698      	mov	r8, r3
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 8008324:	f000 fad7 	bl	80088d6 <mbedtls_rsa_get_len>
    if( sig_len < rsa_len )
 8008328:	42a0      	cmp	r0, r4
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 800832a:	4605      	mov	r5, r0
    if( sig_len < rsa_len )
 800832c:	d811      	bhi.n	8008352 <rsa_verify_wrap+0x3e>
    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 800832e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008330:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 8008334:	9303      	str	r3, [sp, #12]
 8008336:	2300      	movs	r3, #0
 8008338:	4630      	mov	r0, r6
 800833a:	461a      	mov	r2, r3
 800833c:	4619      	mov	r1, r3
 800833e:	f000 ff63 	bl	8009208 <mbedtls_rsa_pkcs1_verify>
 8008342:	b918      	cbnz	r0, 800834c <rsa_verify_wrap+0x38>
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 8008344:	4b04      	ldr	r3, [pc, #16]	; (8008358 <rsa_verify_wrap+0x44>)
 8008346:	42a5      	cmp	r5, r4
 8008348:	bf38      	it	cc
 800834a:	4618      	movcc	r0, r3
}
 800834c:	b005      	add	sp, #20
 800834e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 8008352:	4802      	ldr	r0, [pc, #8]	; (800835c <rsa_verify_wrap+0x48>)
 8008354:	e7fa      	b.n	800834c <rsa_verify_wrap+0x38>
 8008356:	bf00      	nop
 8008358:	ffffc700 	.word	0xffffc700
 800835c:	ffffbc80 	.word	0xffffbc80

08008360 <pk_get_rsapubkey>:
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	b08a      	sub	sp, #40	; 0x28
 8008364:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8008366:	2330      	movs	r3, #48	; 0x30
 8008368:	aa09      	add	r2, sp, #36	; 0x24
{
 800836a:	4604      	mov	r4, r0
 800836c:	460d      	mov	r5, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800836e:	f7fb fe03 	bl	8003f78 <mbedtls_asn1_get_tag>
 8008372:	b110      	cbz	r0, 800837a <pk_get_rsapubkey+0x1a>

    *p += len;

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8008374:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 8008378:	e005      	b.n	8008386 <pk_get_rsapubkey+0x26>
    if( *p + len != end )
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800837e:	4413      	add	r3, r2
 8008380:	429d      	cmp	r5, r3
 8008382:	d002      	beq.n	800838a <pk_get_rsapubkey+0x2a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 8008384:	4824      	ldr	r0, [pc, #144]	; (8008418 <pk_get_rsapubkey+0xb8>)
    if( *p != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8008386:	b00a      	add	sp, #40	; 0x28
 8008388:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800838a:	2302      	movs	r3, #2
 800838c:	aa09      	add	r2, sp, #36	; 0x24
 800838e:	4629      	mov	r1, r5
 8008390:	4620      	mov	r0, r4
 8008392:	f7fb fdf1 	bl	8003f78 <mbedtls_asn1_get_tag>
 8008396:	2800      	cmp	r0, #0
 8008398:	d1ec      	bne.n	8008374 <pk_get_rsapubkey+0x14>
    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 800839a:	9006      	str	r0, [sp, #24]
 800839c:	9005      	str	r0, [sp, #20]
 800839e:	9004      	str	r0, [sp, #16]
 80083a0:	9003      	str	r0, [sp, #12]
 80083a2:	9002      	str	r0, [sp, #8]
 80083a4:	9001      	str	r0, [sp, #4]
 80083a6:	9000      	str	r0, [sp, #0]
 80083a8:	4603      	mov	r3, r0
 80083aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083ac:	6821      	ldr	r1, [r4, #0]
 80083ae:	4630      	mov	r0, r6
 80083b0:	f000 f9aa 	bl	8008708 <mbedtls_rsa_import_raw>
 80083b4:	b108      	cbz	r0, 80083ba <pk_get_rsapubkey+0x5a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 80083b6:	4819      	ldr	r0, [pc, #100]	; (800841c <pk_get_rsapubkey+0xbc>)
 80083b8:	e7e5      	b.n	8008386 <pk_get_rsapubkey+0x26>
    *p += len;
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80083be:	4629      	mov	r1, r5
    *p += len;
 80083c0:	4413      	add	r3, r2
 80083c2:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80083c4:	aa09      	add	r2, sp, #36	; 0x24
 80083c6:	2302      	movs	r3, #2
 80083c8:	4620      	mov	r0, r4
 80083ca:	f7fb fdd5 	bl	8003f78 <mbedtls_asn1_get_tag>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	d1d0      	bne.n	8008374 <pk_get_rsapubkey+0x14>
    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 80083d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d4:	9004      	str	r0, [sp, #16]
 80083d6:	9306      	str	r3, [sp, #24]
 80083d8:	6823      	ldr	r3, [r4, #0]
 80083da:	9003      	str	r0, [sp, #12]
 80083dc:	9305      	str	r3, [sp, #20]
 80083de:	9002      	str	r0, [sp, #8]
 80083e0:	9001      	str	r0, [sp, #4]
 80083e2:	9000      	str	r0, [sp, #0]
 80083e4:	4603      	mov	r3, r0
 80083e6:	4602      	mov	r2, r0
 80083e8:	4601      	mov	r1, r0
 80083ea:	4630      	mov	r0, r6
 80083ec:	f000 f98c 	bl	8008708 <mbedtls_rsa_import_raw>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	d1e0      	bne.n	80083b6 <pk_get_rsapubkey+0x56>
    *p += len;
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 80083f8:	4630      	mov	r0, r6
    *p += len;
 80083fa:	4413      	add	r3, r2
 80083fc:	6023      	str	r3, [r4, #0]
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 80083fe:	f000 f9c5 	bl	800878c <mbedtls_rsa_complete>
 8008402:	2800      	cmp	r0, #0
 8008404:	d1d7      	bne.n	80083b6 <pk_get_rsapubkey+0x56>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 8008406:	4630      	mov	r0, r6
 8008408:	f000 fa68 	bl	80088dc <mbedtls_rsa_check_pubkey>
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 800840c:	2800      	cmp	r0, #0
 800840e:	d1d2      	bne.n	80083b6 <pk_get_rsapubkey+0x56>
    if( *p != end )
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	429d      	cmp	r5, r3
 8008414:	d0b7      	beq.n	8008386 <pk_get_rsapubkey+0x26>
 8008416:	e7b5      	b.n	8008384 <pk_get_rsapubkey+0x24>
 8008418:	ffffc49a 	.word	0xffffc49a
 800841c:	ffffc500 	.word	0xffffc500

08008420 <pk_get_pk_alg>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 8008420:	b530      	push	{r4, r5, lr}
 8008422:	4615      	mov	r5, r2
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 8008424:	2200      	movs	r2, #0
{
 8008426:	b085      	sub	sp, #20
    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	605a      	str	r2, [r3, #4]
 800842c:	609a      	str	r2, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 800842e:	aa01      	add	r2, sp, #4
{
 8008430:	461c      	mov	r4, r3
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8008432:	f7fb fe66 	bl	8004102 <mbedtls_asn1_get_alg>
 8008436:	b118      	cbz	r0, 8008440 <pk_get_pk_alg+0x20>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 8008438:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
    }

    return( 0 );
}
 800843c:	b005      	add	sp, #20
 800843e:	bd30      	pop	{r4, r5, pc}
    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 8008440:	4629      	mov	r1, r5
 8008442:	a801      	add	r0, sp, #4
 8008444:	f7ff fce4 	bl	8007e10 <mbedtls_oid_get_pk_alg>
 8008448:	b960      	cbnz	r0, 8008464 <pk_get_pk_alg+0x44>
    if( *pk_alg == MBEDTLS_PK_RSA &&
 800844a:	782b      	ldrb	r3, [r5, #0]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d1f5      	bne.n	800843c <pk_get_pk_alg+0x1c>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8008450:	6823      	ldr	r3, [r4, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8008452:	2b05      	cmp	r3, #5
 8008454:	d000      	beq.n	8008458 <pk_get_pk_alg+0x38>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8008456:	b93b      	cbnz	r3, 8008468 <pk_get_pk_alg+0x48>
 8008458:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 800845a:	4b04      	ldr	r3, [pc, #16]	; (800846c <pk_get_pk_alg+0x4c>)
 800845c:	2a00      	cmp	r2, #0
 800845e:	bf18      	it	ne
 8008460:	4618      	movne	r0, r3
 8008462:	e7eb      	b.n	800843c <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8008464:	4802      	ldr	r0, [pc, #8]	; (8008470 <pk_get_pk_alg+0x50>)
 8008466:	e7e9      	b.n	800843c <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8008468:	4800      	ldr	r0, [pc, #0]	; (800846c <pk_get_pk_alg+0x4c>)
 800846a:	e7e7      	b.n	800843c <pk_get_pk_alg+0x1c>
 800846c:	ffffc580 	.word	0xffffc580
 8008470:	ffffc380 	.word	0xffffc380

08008474 <mbedtls_pk_parse_subpubkey>:
                        mbedtls_pk_context *pk )
{
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8008474:	2300      	movs	r3, #0
{
 8008476:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008478:	b087      	sub	sp, #28
 800847a:	4617      	mov	r7, r2
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 800847c:	f88d 3007 	strb.w	r3, [sp, #7]
    PK_VALIDATE_RET( p != NULL );
    PK_VALIDATE_RET( *p != NULL );
    PK_VALIDATE_RET( end != NULL );
    PK_VALIDATE_RET( pk != NULL );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8008480:	aa02      	add	r2, sp, #8
 8008482:	2330      	movs	r3, #48	; 0x30
{
 8008484:	4606      	mov	r6, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8008486:	f7fb fd77 	bl	8003f78 <mbedtls_asn1_get_tag>
 800848a:	b120      	cbz	r0, 8008496 <mbedtls_pk_parse_subpubkey+0x22>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 800848c:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00

    if( ret != 0 )
        mbedtls_pk_free( pk );

    return( ret );
}
 8008490:	4620      	mov	r0, r4
 8008492:	b007      	add	sp, #28
 8008494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = *p + len;
 8008496:	9b02      	ldr	r3, [sp, #8]
 8008498:	6835      	ldr	r5, [r6, #0]
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 800849a:	f10d 0207 	add.w	r2, sp, #7
    end = *p + len;
 800849e:	441d      	add	r5, r3
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 80084a0:	4629      	mov	r1, r5
 80084a2:	ab03      	add	r3, sp, #12
 80084a4:	4630      	mov	r0, r6
 80084a6:	f7ff ffbb 	bl	8008420 <pk_get_pk_alg>
 80084aa:	4604      	mov	r4, r0
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d1ef      	bne.n	8008490 <mbedtls_pk_parse_subpubkey+0x1c>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 80084b0:	aa02      	add	r2, sp, #8
 80084b2:	4629      	mov	r1, r5
 80084b4:	4630      	mov	r0, r6
 80084b6:	f7fb fdd2 	bl	800405e <mbedtls_asn1_get_bitstring_null>
 80084ba:	b110      	cbz	r0, 80084c2 <mbedtls_pk_parse_subpubkey+0x4e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 80084bc:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
 80084c0:	e7e6      	b.n	8008490 <mbedtls_pk_parse_subpubkey+0x1c>
    if( *p + len != end )
 80084c2:	6833      	ldr	r3, [r6, #0]
 80084c4:	9a02      	ldr	r2, [sp, #8]
 80084c6:	4413      	add	r3, r2
 80084c8:	429d      	cmp	r5, r3
 80084ca:	d11b      	bne.n	8008504 <mbedtls_pk_parse_subpubkey+0x90>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 80084cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80084d0:	f7ff fd7e 	bl	8007fd0 <mbedtls_pk_info_from_type>
 80084d4:	4601      	mov	r1, r0
 80084d6:	b1b8      	cbz	r0, 8008508 <mbedtls_pk_parse_subpubkey+0x94>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 80084d8:	4638      	mov	r0, r7
 80084da:	f7ff fd81 	bl	8007fe0 <mbedtls_pk_setup>
 80084de:	4604      	mov	r4, r0
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d1d5      	bne.n	8008490 <mbedtls_pk_parse_subpubkey+0x1c>
    if( pk_alg == MBEDTLS_PK_RSA )
 80084e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d10f      	bne.n	800850c <mbedtls_pk_parse_subpubkey+0x98>
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	4629      	mov	r1, r5
 80084f0:	4630      	mov	r0, r6
 80084f2:	f7ff ff35 	bl	8008360 <pk_get_rsapubkey>
    if( ret == 0 && *p != end )
 80084f6:	4604      	mov	r4, r0
 80084f8:	b948      	cbnz	r0, 800850e <mbedtls_pk_parse_subpubkey+0x9a>
 80084fa:	6833      	ldr	r3, [r6, #0]
 80084fc:	429d      	cmp	r5, r3
 80084fe:	d0c7      	beq.n	8008490 <mbedtls_pk_parse_subpubkey+0x1c>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
 8008500:	4c05      	ldr	r4, [pc, #20]	; (8008518 <mbedtls_pk_parse_subpubkey+0xa4>)
 8008502:	e004      	b.n	800850e <mbedtls_pk_parse_subpubkey+0x9a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 8008504:	4c04      	ldr	r4, [pc, #16]	; (8008518 <mbedtls_pk_parse_subpubkey+0xa4>)
 8008506:	e7c3      	b.n	8008490 <mbedtls_pk_parse_subpubkey+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8008508:	4c04      	ldr	r4, [pc, #16]	; (800851c <mbedtls_pk_parse_subpubkey+0xa8>)
 800850a:	e7c1      	b.n	8008490 <mbedtls_pk_parse_subpubkey+0x1c>
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 800850c:	4c03      	ldr	r4, [pc, #12]	; (800851c <mbedtls_pk_parse_subpubkey+0xa8>)
        mbedtls_pk_free( pk );
 800850e:	4638      	mov	r0, r7
 8008510:	f7ff fd4f 	bl	8007fb2 <mbedtls_pk_free>
 8008514:	e7bc      	b.n	8008490 <mbedtls_pk_parse_subpubkey+0x1c>
 8008516:	bf00      	nop
 8008518:	ffffc49a 	.word	0xffffc49a
 800851c:	ffffc380 	.word	0xffffc380

08008520 <mbedtls_platform_zeroize>:
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    memset_func( buf, 0, len );
 8008520:	4b02      	ldr	r3, [pc, #8]	; (800852c <mbedtls_platform_zeroize+0xc>)
 8008522:	460a      	mov	r2, r1
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2100      	movs	r1, #0
 8008528:	4718      	bx	r3
 800852a:	bf00      	nop
 800852c:	200000b4 	.word	0x200000b4

08008530 <rsa_rsassa_pkcs1_v15_encode>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 8008530:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008534:	461d      	mov	r5, r3
    size_t oid_size  = 0;
 8008536:	2300      	movs	r3, #0
{
 8008538:	460e      	mov	r6, r1
 800853a:	4691      	mov	r9, r2
 800853c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    size_t oid_size  = 0;
 8008540:	9300      	str	r3, [sp, #0]
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
 8008542:	9301      	str	r3, [sp, #4]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 8008544:	4604      	mov	r4, r0
 8008546:	2800      	cmp	r0, #0
 8008548:	d066      	beq.n	8008618 <rsa_rsassa_pkcs1_v15_encode+0xe8>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 800854a:	f7ff fa49 	bl	80079e0 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 800854e:	4606      	mov	r6, r0
 8008550:	b920      	cbnz	r0, 800855c <rsa_rsassa_pkcs1_v15_encode+0x2c>
    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
    {
        mbedtls_platform_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8008552:	4c3e      	ldr	r4, [pc, #248]	; (800864c <rsa_rsassa_pkcs1_v15_encode+0x11c>)
    }

    return( 0 );
}
 8008554:	4620      	mov	r0, r4
 8008556:	b002      	add	sp, #8
 8008558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 800855c:	4620      	mov	r0, r4
 800855e:	466a      	mov	r2, sp
 8008560:	a901      	add	r1, sp, #4
 8008562:	f7ff fc6f 	bl	8007e44 <mbedtls_oid_get_oid_by_md>
 8008566:	4604      	mov	r4, r0
 8008568:	2800      	cmp	r0, #0
 800856a:	d1f2      	bne.n	8008552 <rsa_rsassa_pkcs1_v15_encode+0x22>
        hashlen = mbedtls_md_get_size( md_info );
 800856c:	4630      	mov	r0, r6
 800856e:	f7ff fb5b 	bl	8007c28 <mbedtls_md_get_size>
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8008572:	9e00      	ldr	r6, [sp, #0]
        hashlen = mbedtls_md_get_size( md_info );
 8008574:	4607      	mov	r7, r0
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8008576:	1983      	adds	r3, r0, r6
 8008578:	f103 0208 	add.w	r2, r3, #8
 800857c:	2a7f      	cmp	r2, #127	; 0x7f
 800857e:	d8e8      	bhi.n	8008552 <rsa_rsassa_pkcs1_v15_encode+0x22>
 8008580:	f110 010a 	adds.w	r1, r0, #10
 8008584:	d2e5      	bcs.n	8008552 <rsa_rsassa_pkcs1_v15_encode+0x22>
            10 + hashlen + oid_size <  10 + hashlen )
 8008586:	f103 020a 	add.w	r2, r3, #10
            10 + hashlen            <  hashlen      ||
 800858a:	4291      	cmp	r1, r2
 800858c:	d8e1      	bhi.n	8008552 <rsa_rsassa_pkcs1_v15_encode+0x22>
        if( nb_pad < 10 + hashlen + oid_size )
 800858e:	4295      	cmp	r5, r2
 8008590:	d3df      	bcc.n	8008552 <rsa_rsassa_pkcs1_v15_encode+0x22>
        nb_pad -= 10 + hashlen + oid_size;
 8008592:	f1a5 060a 	sub.w	r6, r5, #10
 8008596:	1af6      	subs	r6, r6, r3
    if( nb_pad < 3 + 8 )
 8008598:	2e0a      	cmp	r6, #10
 800859a:	d9da      	bls.n	8008552 <rsa_rsassa_pkcs1_v15_encode+0x22>
    *p++ = 0;
 800859c:	46c2      	mov	sl, r8
    *p++ = MBEDTLS_RSA_SIGN;
 800859e:	2301      	movs	r3, #1
    *p++ = 0;
 80085a0:	f80a 4b02 	strb.w	r4, [sl], #2
    nb_pad -= 3;
 80085a4:	3e03      	subs	r6, #3
    memset( p, 0xFF, nb_pad );
 80085a6:	4632      	mov	r2, r6
    *p++ = MBEDTLS_RSA_SIGN;
 80085a8:	f888 3001 	strb.w	r3, [r8, #1]
    memset( p, 0xFF, nb_pad );
 80085ac:	21ff      	movs	r1, #255	; 0xff
 80085ae:	4650      	mov	r0, sl
 80085b0:	f009 fc2a 	bl	8011e08 <memset>
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80085b4:	2130      	movs	r1, #48	; 0x30
    p += nb_pad;
 80085b6:	eb0a 0306 	add.w	r3, sl, r6
    *p++ = 0;
 80085ba:	f80a 4006 	strb.w	r4, [sl, r6]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80085be:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 80085c0:	9e00      	ldr	r6, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80085c2:	70d9      	strb	r1, [r3, #3]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 80085c4:	f106 0208 	add.w	r2, r6, #8
 80085c8:	443a      	add	r2, r7
 80085ca:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char)( 0x04 + oid_size );
 80085cc:	b2f2      	uxtb	r2, r6
 80085ce:	1d11      	adds	r1, r2, #4
 80085d0:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
 80085d2:	2106      	movs	r1, #6
    *p++ = (unsigned char) oid_size;
 80085d4:	f103 0a07 	add.w	sl, r3, #7
    *p++ = MBEDTLS_ASN1_OID;
 80085d8:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
 80085da:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
 80085dc:	9901      	ldr	r1, [sp, #4]
 80085de:	4632      	mov	r2, r6
 80085e0:	4650      	mov	r0, sl
 80085e2:	f009 fbec 	bl	8011dbe <memcpy>
    *p++ = MBEDTLS_ASN1_NULL;
 80085e6:	2305      	movs	r3, #5
 80085e8:	f80a 3006 	strb.w	r3, [sl, r6]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 80085ec:	2304      	movs	r3, #4
    p += oid_size;
 80085ee:	eb0a 0206 	add.w	r2, sl, r6
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 80085f2:	7093      	strb	r3, [r2, #2]
    *p++ = (unsigned char) hashlen;
 80085f4:	18d3      	adds	r3, r2, r3
 80085f6:	70d7      	strb	r7, [r2, #3]
    *p++ = 0x00;
 80085f8:	7054      	strb	r4, [r2, #1]
    memcpy( p, hash, hashlen );
 80085fa:	4618      	mov	r0, r3
 80085fc:	463a      	mov	r2, r7
 80085fe:	4649      	mov	r1, r9
 8008600:	f009 fbdd 	bl	8011dbe <memcpy>
    if( p != dst + dst_len )
 8008604:	eb08 0305 	add.w	r3, r8, r5
    p += hashlen;
 8008608:	4407      	add	r7, r0
    if( p != dst + dst_len )
 800860a:	429f      	cmp	r7, r3
 800860c:	d0a2      	beq.n	8008554 <rsa_rsassa_pkcs1_v15_encode+0x24>
        mbedtls_platform_zeroize( dst, dst_len );
 800860e:	4629      	mov	r1, r5
 8008610:	4640      	mov	r0, r8
 8008612:	f7ff ff85 	bl	8008520 <mbedtls_platform_zeroize>
 8008616:	e79c      	b.n	8008552 <rsa_rsassa_pkcs1_v15_encode+0x22>
        if( nb_pad < hashlen )
 8008618:	428d      	cmp	r5, r1
 800861a:	d39a      	bcc.n	8008552 <rsa_rsassa_pkcs1_v15_encode+0x22>
        nb_pad -= hashlen;
 800861c:	1a6d      	subs	r5, r5, r1
    if( nb_pad < 3 + 8 )
 800861e:	2d0a      	cmp	r5, #10
 8008620:	d997      	bls.n	8008552 <rsa_rsassa_pkcs1_v15_encode+0x22>
    *p++ = 0;
 8008622:	4643      	mov	r3, r8
    *p++ = MBEDTLS_RSA_SIGN;
 8008624:	2201      	movs	r2, #1
    nb_pad -= 3;
 8008626:	3d03      	subs	r5, #3
    *p++ = 0;
 8008628:	f803 0b02 	strb.w	r0, [r3], #2
    memset( p, 0xFF, nb_pad );
 800862c:	21ff      	movs	r1, #255	; 0xff
    *p++ = MBEDTLS_RSA_SIGN;
 800862e:	f888 2001 	strb.w	r2, [r8, #1]
    memset( p, 0xFF, nb_pad );
 8008632:	4618      	mov	r0, r3
 8008634:	462a      	mov	r2, r5
 8008636:	f009 fbe7 	bl	8011e08 <memset>
 800863a:	4603      	mov	r3, r0
    p += nb_pad;
 800863c:	4428      	add	r0, r5
    *p++ = 0;
 800863e:	555c      	strb	r4, [r3, r5]
        memcpy( p, hash, hashlen );
 8008640:	4632      	mov	r2, r6
 8008642:	4649      	mov	r1, r9
 8008644:	3001      	adds	r0, #1
 8008646:	f009 fbba 	bl	8011dbe <memcpy>
        return( 0 );
 800864a:	e783      	b.n	8008554 <rsa_rsassa_pkcs1_v15_encode+0x24>
 800864c:	ffffbf80 	.word	0xffffbf80

08008650 <rsa_check_context.isra.0>:
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8008650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8008652:	f100 0508 	add.w	r5, r0, #8
 8008656:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8008658:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 800865a:	4628      	mov	r0, r5
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 800865c:	460e      	mov	r6, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 800865e:	f7fc f902 	bl	8004866 <mbedtls_mpi_size>
 8008662:	4287      	cmp	r7, r0
 8008664:	d001      	beq.n	800866a <rsa_check_context.isra.0+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8008666:	4827      	ldr	r0, [pc, #156]	; (8008704 <rsa_check_context.isra.0+0xb4>)
 8008668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 800866a:	6863      	ldr	r3, [r4, #4]
 800866c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008670:	d8f9      	bhi.n	8008666 <rsa_check_context.isra.0+0x16>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 8008672:	2100      	movs	r1, #0
 8008674:	4628      	mov	r0, r5
 8008676:	f7fc fad1 	bl	8004c1c <mbedtls_mpi_cmp_int>
 800867a:	2800      	cmp	r0, #0
 800867c:	ddf3      	ble.n	8008666 <rsa_check_context.isra.0+0x16>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 800867e:	2100      	movs	r1, #0
 8008680:	4628      	mov	r0, r5
 8008682:	f7fc f8a6 	bl	80047d2 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 8008686:	2800      	cmp	r0, #0
 8008688:	d0ed      	beq.n	8008666 <rsa_check_context.isra.0+0x16>
    if( is_priv &&
 800868a:	b9f6      	cbnz	r6, 80086ca <rsa_check_context.isra.0+0x7a>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 800868c:	2100      	movs	r1, #0
 800868e:	f104 0014 	add.w	r0, r4, #20
 8008692:	f7fc fac3 	bl	8004c1c <mbedtls_mpi_cmp_int>
 8008696:	2800      	cmp	r0, #0
 8008698:	dde5      	ble.n	8008666 <rsa_check_context.isra.0+0x16>
    if( is_priv &&
 800869a:	b1a6      	cbz	r6, 80086c6 <rsa_check_context.isra.0+0x76>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 800869c:	2100      	movs	r1, #0
 800869e:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80086a2:	f7fc fabb 	bl	8004c1c <mbedtls_mpi_cmp_int>
    if( is_priv &&
 80086a6:	2800      	cmp	r0, #0
 80086a8:	dddd      	ble.n	8008666 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 80086aa:	2100      	movs	r1, #0
 80086ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086b0:	f7fc fab4 	bl	8004c1c <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 80086b4:	2800      	cmp	r0, #0
 80086b6:	ddd6      	ble.n	8008666 <rsa_check_context.isra.0+0x16>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 80086b8:	2100      	movs	r1, #0
 80086ba:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086be:	f7fc faad 	bl	8004c1c <mbedtls_mpi_cmp_int>
    if( is_priv &&
 80086c2:	2800      	cmp	r0, #0
 80086c4:	ddcf      	ble.n	8008666 <rsa_check_context.isra.0+0x16>
    return( 0 );
 80086c6:	2000      	movs	r0, #0
 80086c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 80086ca:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 80086ce:	2100      	movs	r1, #0
 80086d0:	4628      	mov	r0, r5
 80086d2:	f7fc faa3 	bl	8004c1c <mbedtls_mpi_cmp_int>
    if( is_priv &&
 80086d6:	2800      	cmp	r0, #0
 80086d8:	ddc5      	ble.n	8008666 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 80086da:	2100      	movs	r1, #0
 80086dc:	4628      	mov	r0, r5
 80086de:	f7fc f878 	bl	80047d2 <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d0bf      	beq.n	8008666 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 80086e6:	f104 0538 	add.w	r5, r4, #56	; 0x38
 80086ea:	2100      	movs	r1, #0
 80086ec:	4628      	mov	r0, r5
 80086ee:	f7fc fa95 	bl	8004c1c <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 80086f2:	2800      	cmp	r0, #0
 80086f4:	ddb7      	ble.n	8008666 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 80086f6:	2100      	movs	r1, #0
 80086f8:	4628      	mov	r0, r5
 80086fa:	f7fc f86a 	bl	80047d2 <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 80086fe:	2800      	cmp	r0, #0
 8008700:	d1c4      	bne.n	800868c <rsa_check_context.isra.0+0x3c>
 8008702:	e7b0      	b.n	8008666 <rsa_check_context.isra.0+0x16>
 8008704:	ffffbf80 	.word	0xffffbf80

08008708 <mbedtls_rsa_import_raw>:
{
 8008708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800870c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800870e:	4604      	mov	r4, r0
 8008710:	4698      	mov	r8, r3
 8008712:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008714:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    if( N != NULL )
 8008716:	b149      	cbz	r1, 800872c <mbedtls_rsa_import_raw+0x24>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 8008718:	f100 0908 	add.w	r9, r0, #8
 800871c:	4648      	mov	r0, r9
 800871e:	f7fc f8a8 	bl	8004872 <mbedtls_mpi_read_binary>
 8008722:	b9a0      	cbnz	r0, 800874e <mbedtls_rsa_import_raw+0x46>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 8008724:	4648      	mov	r0, r9
 8008726:	f7fc f89e 	bl	8004866 <mbedtls_mpi_size>
 800872a:	6060      	str	r0, [r4, #4]
    if( P != NULL )
 800872c:	f1b8 0f00 	cmp.w	r8, #0
 8008730:	d105      	bne.n	800873e <mbedtls_rsa_import_raw+0x36>
    if( Q != NULL )
 8008732:	b987      	cbnz	r7, 8008756 <mbedtls_rsa_import_raw+0x4e>
    if( D != NULL )
 8008734:	b9c6      	cbnz	r6, 8008768 <mbedtls_rsa_import_raw+0x60>
    if( E != NULL )
 8008736:	bb05      	cbnz	r5, 800877a <mbedtls_rsa_import_raw+0x72>
    return( 0 );
 8008738:	2000      	movs	r0, #0
 800873a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 800873e:	9a08      	ldr	r2, [sp, #32]
 8008740:	4641      	mov	r1, r8
 8008742:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8008746:	f7fc f894 	bl	8004872 <mbedtls_mpi_read_binary>
 800874a:	2800      	cmp	r0, #0
 800874c:	d0f1      	beq.n	8008732 <mbedtls_rsa_import_raw+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 800874e:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
 8008752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 8008756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008758:	4639      	mov	r1, r7
 800875a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800875e:	f7fc f888 	bl	8004872 <mbedtls_mpi_read_binary>
 8008762:	2800      	cmp	r0, #0
 8008764:	d1f3      	bne.n	800874e <mbedtls_rsa_import_raw+0x46>
 8008766:	e7e5      	b.n	8008734 <mbedtls_rsa_import_raw+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 8008768:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800876a:	4631      	mov	r1, r6
 800876c:	f104 0020 	add.w	r0, r4, #32
 8008770:	f7fc f87f 	bl	8004872 <mbedtls_mpi_read_binary>
 8008774:	2800      	cmp	r0, #0
 8008776:	d1ea      	bne.n	800874e <mbedtls_rsa_import_raw+0x46>
 8008778:	e7dd      	b.n	8008736 <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 800877a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800877c:	4629      	mov	r1, r5
 800877e:	f104 0014 	add.w	r0, r4, #20
 8008782:	f7fc f876 	bl	8004872 <mbedtls_mpi_read_binary>
    if( ret != 0 )
 8008786:	2800      	cmp	r0, #0
 8008788:	d0d6      	beq.n	8008738 <mbedtls_rsa_import_raw+0x30>
 800878a:	e7e0      	b.n	800874e <mbedtls_rsa_import_raw+0x46>

0800878c <mbedtls_rsa_complete>:
{
 800878c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8008790:	f100 0908 	add.w	r9, r0, #8
{
 8008794:	b085      	sub	sp, #20
 8008796:	4604      	mov	r4, r0
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8008798:	2100      	movs	r1, #0
 800879a:	4648      	mov	r0, r9
 800879c:	f7fc fa3e 	bl	8004c1c <mbedtls_mpi_cmp_int>
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 80087a0:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 80087a4:	2100      	movs	r1, #0
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 80087a6:	4683      	mov	fp, r0
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 80087a8:	4630      	mov	r0, r6
 80087aa:	f7fc fa37 	bl	8004c1c <mbedtls_mpi_cmp_int>
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 80087ae:	f104 0738 	add.w	r7, r4, #56	; 0x38
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 80087b2:	9003      	str	r0, [sp, #12]
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 80087b4:	2100      	movs	r1, #0
 80087b6:	4638      	mov	r0, r7
 80087b8:	f7fc fa30 	bl	8004c1c <mbedtls_mpi_cmp_int>
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 80087bc:	f104 0820 	add.w	r8, r4, #32
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 80087c0:	9002      	str	r0, [sp, #8]
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 80087c2:	2100      	movs	r1, #0
 80087c4:	4640      	mov	r0, r8
 80087c6:	f7fc fa29 	bl	8004c1c <mbedtls_mpi_cmp_int>
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 80087ca:	f104 0a14 	add.w	sl, r4, #20
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 80087ce:	4605      	mov	r5, r0
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 80087d0:	2100      	movs	r1, #0
 80087d2:	4650      	mov	r0, sl
 80087d4:	f7fc fa22 	bl	8004c1c <mbedtls_mpi_cmp_int>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80087d8:	9a03      	ldr	r2, [sp, #12]
 80087da:	9b02      	ldr	r3, [sp, #8]
 80087dc:	b16a      	cbz	r2, 80087fa <mbedtls_rsa_complete+0x6e>
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d065      	beq.n	80088ae <mbedtls_rsa_complete+0x122>
 80087e2:	2d00      	cmp	r5, #0
 80087e4:	d05e      	beq.n	80088a4 <mbedtls_rsa_complete+0x118>
 80087e6:	1c01      	adds	r1, r0, #0
 80087e8:	bf18      	it	ne
 80087ea:	2101      	movne	r1, #1
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80087ec:	f1bb 0f00 	cmp.w	fp, #0
 80087f0:	d101      	bne.n	80087f6 <mbedtls_rsa_complete+0x6a>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80087f2:	b103      	cbz	r3, 80087f6 <mbedtls_rsa_complete+0x6a>
 80087f4:	b15d      	cbz	r5, 800880e <mbedtls_rsa_complete+0x82>
 80087f6:	2500      	movs	r5, #0
 80087f8:	e00c      	b.n	8008814 <mbedtls_rsa_complete+0x88>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80087fa:	f1bb 0f00 	cmp.w	fp, #0
 80087fe:	d003      	beq.n	8008808 <mbedtls_rsa_complete+0x7c>
 8008800:	b913      	cbnz	r3, 8008808 <mbedtls_rsa_complete+0x7c>
 8008802:	b1d5      	cbz	r5, 800883a <mbedtls_rsa_complete+0xae>
 8008804:	2800      	cmp	r0, #0
 8008806:	d133      	bne.n	8008870 <mbedtls_rsa_complete+0xe4>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8008808:	482b      	ldr	r0, [pc, #172]	; (80088b8 <mbedtls_rsa_complete+0x12c>)
 800880a:	e013      	b.n	8008834 <mbedtls_rsa_complete+0xa8>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 800880c:	4629      	mov	r1, r5
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 800880e:	1c05      	adds	r5, r0, #0
 8008810:	bf18      	it	ne
 8008812:	2501      	movne	r5, #1
    is_priv = n_missing || pq_missing || d_missing;
 8008814:	b9d1      	cbnz	r1, 800884c <mbedtls_rsa_complete+0xc0>
 8008816:	2d00      	cmp	r5, #0
 8008818:	d0f6      	beq.n	8008808 <mbedtls_rsa_complete+0x7c>
    if( !have_N && have_P && have_Q )
 800881a:	f1bb 0f00 	cmp.w	fp, #0
 800881e:	d11b      	bne.n	8008858 <mbedtls_rsa_complete+0xcc>
 8008820:	b1d2      	cbz	r2, 8008858 <mbedtls_rsa_complete+0xcc>
 8008822:	b1c3      	cbz	r3, 8008856 <mbedtls_rsa_complete+0xca>
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 8008824:	463a      	mov	r2, r7
 8008826:	4631      	mov	r1, r6
 8008828:	4648      	mov	r0, r9
 800882a:	f7fc fb19 	bl	8004e60 <mbedtls_mpi_mul_mpi>
 800882e:	b1d0      	cbz	r0, 8008866 <mbedtls_rsa_complete+0xda>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 8008830:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
 8008834:	b005      	add	sp, #20
 8008836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 800883a:	2800      	cmp	r0, #0
 800883c:	d0e4      	beq.n	8008808 <mbedtls_rsa_complete+0x7c>
    return( rsa_check_context( ctx, is_priv, 1 ) );
 800883e:	4629      	mov	r1, r5
 8008840:	4620      	mov	r0, r4
}
 8008842:	b005      	add	sp, #20
 8008844:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( rsa_check_context( ctx, is_priv, 1 ) );
 8008848:	f7ff bf02 	b.w	8008650 <rsa_check_context.isra.0>
    if( !have_N && have_P && have_Q )
 800884c:	f1bb 0f00 	cmp.w	fp, #0
 8008850:	d101      	bne.n	8008856 <mbedtls_rsa_complete+0xca>
 8008852:	2a00      	cmp	r2, #0
 8008854:	d1e5      	bne.n	8008822 <mbedtls_rsa_complete+0x96>
    else if( d_missing )
 8008856:	b1a5      	cbz	r5, 8008882 <mbedtls_rsa_complete+0xf6>
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 8008858:	4643      	mov	r3, r8
 800885a:	4652      	mov	r2, sl
 800885c:	4639      	mov	r1, r7
 800885e:	4630      	mov	r0, r6
 8008860:	f000 fe0e 	bl	8009480 <mbedtls_rsa_deduce_private_exponent>
 8008864:	e00b      	b.n	800887e <mbedtls_rsa_complete+0xf2>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 8008866:	4648      	mov	r0, r9
 8008868:	f7fb fffd 	bl	8004866 <mbedtls_mpi_size>
 800886c:	6060      	str	r0, [r4, #4]
 800886e:	e7f2      	b.n	8008856 <mbedtls_rsa_complete+0xca>
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
 8008870:	9700      	str	r7, [sp, #0]
 8008872:	4633      	mov	r3, r6
 8008874:	4642      	mov	r2, r8
 8008876:	4651      	mov	r1, sl
 8008878:	4648      	mov	r0, r9
 800887a:	f000 fd0f 	bl	800929c <mbedtls_rsa_deduce_primes>
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 800887e:	2800      	cmp	r0, #0
 8008880:	d1d6      	bne.n	8008830 <mbedtls_rsa_complete+0xa4>
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 8008882:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8008886:	9301      	str	r3, [sp, #4]
 8008888:	f104 0350 	add.w	r3, r4, #80	; 0x50
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	4642      	mov	r2, r8
 8008890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008894:	4639      	mov	r1, r7
 8008896:	4630      	mov	r0, r6
 8008898:	f000 ff9a 	bl	80097d0 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
 800889c:	2800      	cmp	r0, #0
 800889e:	d1c7      	bne.n	8008830 <mbedtls_rsa_complete+0xa4>
 80088a0:	2501      	movs	r5, #1
 80088a2:	e7cc      	b.n	800883e <mbedtls_rsa_complete+0xb2>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80088a4:	f1bb 0f00 	cmp.w	fp, #0
 80088a8:	d1b0      	bne.n	800880c <mbedtls_rsa_complete+0x80>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80088aa:	4659      	mov	r1, fp
 80088ac:	e7a1      	b.n	80087f2 <mbedtls_rsa_complete+0x66>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80088ae:	f1bb 0f00 	cmp.w	fp, #0
 80088b2:	d1a9      	bne.n	8008808 <mbedtls_rsa_complete+0x7c>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80088b4:	4659      	mov	r1, fp
 80088b6:	e79e      	b.n	80087f6 <mbedtls_rsa_complete+0x6a>
 80088b8:	ffffbf80 	.word	0xffffbf80

080088bc <mbedtls_rsa_init>:
{
 80088bc:	b570      	push	{r4, r5, r6, lr}
 80088be:	4604      	mov	r4, r0
 80088c0:	460e      	mov	r6, r1
 80088c2:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 80088c4:	2100      	movs	r1, #0
 80088c6:	22ac      	movs	r2, #172	; 0xac
 80088c8:	f009 fa9e 	bl	8011e08 <memset>
    ctx->padding = padding;
 80088cc:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    ctx->hash_id = hash_id;
 80088d0:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 80088d4:	bd70      	pop	{r4, r5, r6, pc}

080088d6 <mbedtls_rsa_get_len>:
}
 80088d6:	6840      	ldr	r0, [r0, #4]
 80088d8:	4770      	bx	lr
	...

080088dc <mbedtls_rsa_check_pubkey>:
{
 80088dc:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 80088de:	2100      	movs	r1, #0
{
 80088e0:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 80088e2:	f7ff feb5 	bl	8008650 <rsa_check_context.isra.0>
 80088e6:	4605      	mov	r5, r0
 80088e8:	b9b8      	cbnz	r0, 800891a <mbedtls_rsa_check_pubkey+0x3e>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 80088ea:	f104 0608 	add.w	r6, r4, #8
 80088ee:	4630      	mov	r0, r6
 80088f0:	f7fb ff97 	bl	8004822 <mbedtls_mpi_bitlen>
 80088f4:	287f      	cmp	r0, #127	; 0x7f
 80088f6:	d910      	bls.n	800891a <mbedtls_rsa_check_pubkey+0x3e>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 80088f8:	3414      	adds	r4, #20
 80088fa:	4629      	mov	r1, r5
 80088fc:	4620      	mov	r0, r4
 80088fe:	f7fb ff68 	bl	80047d2 <mbedtls_mpi_get_bit>
 8008902:	b150      	cbz	r0, 800891a <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 8008904:	4620      	mov	r0, r4
 8008906:	f7fb ff8c 	bl	8004822 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 800890a:	2801      	cmp	r0, #1
 800890c:	d905      	bls.n	800891a <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 800890e:	4631      	mov	r1, r6
 8008910:	4620      	mov	r0, r4
 8008912:	f7fc f93d 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 8008916:	2800      	cmp	r0, #0
 8008918:	db00      	blt.n	800891c <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800891a:	4d01      	ldr	r5, [pc, #4]	; (8008920 <mbedtls_rsa_check_pubkey+0x44>)
}
 800891c:	4628      	mov	r0, r5
 800891e:	bd70      	pop	{r4, r5, r6, pc}
 8008920:	ffffbe00 	.word	0xffffbe00

08008924 <mbedtls_rsa_check_privkey>:
{
 8008924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008926:	b085      	sub	sp, #20
 8008928:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 800892a:	f7ff ffd7 	bl	80088dc <mbedtls_rsa_check_pubkey>
 800892e:	b110      	cbz	r0, 8008936 <mbedtls_rsa_check_privkey+0x12>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8008930:	4816      	ldr	r0, [pc, #88]	; (800898c <mbedtls_rsa_check_privkey+0x68>)
}
 8008932:	b005      	add	sp, #20
 8008934:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 8008936:	2101      	movs	r1, #1
 8008938:	4620      	mov	r0, r4
 800893a:	f7ff fe89 	bl	8008650 <rsa_check_context.isra.0>
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 800893e:	2800      	cmp	r0, #0
 8008940:	d1f6      	bne.n	8008930 <mbedtls_rsa_check_privkey+0xc>
    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 8008942:	f104 0314 	add.w	r3, r4, #20
 8008946:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 800894a:	f104 0638 	add.w	r6, r4, #56	; 0x38
 800894e:	f104 0720 	add.w	r7, r4, #32
 8008952:	9002      	str	r0, [sp, #8]
 8008954:	9001      	str	r0, [sp, #4]
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	4632      	mov	r2, r6
 800895a:	463b      	mov	r3, r7
 800895c:	4629      	mov	r1, r5
 800895e:	f104 0008 	add.w	r0, r4, #8
 8008962:	f000 fe6f 	bl	8009644 <mbedtls_rsa_validate_params>
 8008966:	2800      	cmp	r0, #0
 8008968:	d1e2      	bne.n	8008930 <mbedtls_rsa_check_privkey+0xc>
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 800896a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800896e:	9301      	str	r3, [sp, #4]
 8008970:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	463a      	mov	r2, r7
 8008978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800897c:	4631      	mov	r1, r6
 800897e:	4628      	mov	r0, r5
 8008980:	f000 fddc 	bl	800953c <mbedtls_rsa_validate_crt>
 8008984:	2800      	cmp	r0, #0
 8008986:	d0d4      	beq.n	8008932 <mbedtls_rsa_check_privkey+0xe>
 8008988:	e7d2      	b.n	8008930 <mbedtls_rsa_check_privkey+0xc>
 800898a:	bf00      	nop
 800898c:	ffffbe00 	.word	0xffffbe00

08008990 <mbedtls_rsa_check_pub_priv>:
{
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4605      	mov	r5, r0
 8008994:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 8008996:	f7ff ffa1 	bl	80088dc <mbedtls_rsa_check_pubkey>
 800899a:	b988      	cbnz	r0, 80089c0 <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 800899c:	4620      	mov	r0, r4
 800899e:	f7ff ffc1 	bl	8008924 <mbedtls_rsa_check_privkey>
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 80089a2:	b968      	cbnz	r0, 80089c0 <mbedtls_rsa_check_pub_priv+0x30>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 80089a4:	f104 0108 	add.w	r1, r4, #8
 80089a8:	f105 0008 	add.w	r0, r5, #8
 80089ac:	f7fc f8f0 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
 80089b0:	b930      	cbnz	r0, 80089c0 <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 80089b2:	f104 0114 	add.w	r1, r4, #20
 80089b6:	f105 0014 	add.w	r0, r5, #20
 80089ba:	f7fc f8e9 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 80089be:	b100      	cbz	r0, 80089c2 <mbedtls_rsa_check_pub_priv+0x32>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80089c0:	4800      	ldr	r0, [pc, #0]	; (80089c4 <mbedtls_rsa_check_pub_priv+0x34>)
}
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	ffffbe00 	.word	0xffffbe00

080089c8 <mbedtls_rsa_public>:
{
 80089c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ca:	460c      	mov	r4, r1
 80089cc:	b087      	sub	sp, #28
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 80089ce:	2100      	movs	r1, #0
{
 80089d0:	4605      	mov	r5, r0
 80089d2:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 80089d4:	f7ff fe3c 	bl	8008650 <rsa_check_context.isra.0>
 80089d8:	bb80      	cbnz	r0, 8008a3c <mbedtls_rsa_public+0x74>
    mbedtls_mpi_init( &T );
 80089da:	a803      	add	r0, sp, #12
 80089dc:	f7fb fe6f 	bl	80046be <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 80089e0:	4621      	mov	r1, r4
 80089e2:	686a      	ldr	r2, [r5, #4]
 80089e4:	a803      	add	r0, sp, #12
 80089e6:	f7fb ff44 	bl	8004872 <mbedtls_mpi_read_binary>
 80089ea:	4604      	mov	r4, r0
 80089ec:	b9d0      	cbnz	r0, 8008a24 <mbedtls_rsa_public+0x5c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 80089ee:	f105 0408 	add.w	r4, r5, #8
 80089f2:	4621      	mov	r1, r4
 80089f4:	a803      	add	r0, sp, #12
 80089f6:	f7fc f8cb 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	da1b      	bge.n	8008a36 <mbedtls_rsa_public+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 80089fe:	f105 0368 	add.w	r3, r5, #104	; 0x68
 8008a02:	a903      	add	r1, sp, #12
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	f105 0214 	add.w	r2, r5, #20
 8008a0a:	4623      	mov	r3, r4
 8008a0c:	4608      	mov	r0, r1
    olen = ctx->len;
 8008a0e:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 8008a10:	f7fc fc88 	bl	8005324 <mbedtls_mpi_exp_mod>
 8008a14:	4604      	mov	r4, r0
 8008a16:	b928      	cbnz	r0, 8008a24 <mbedtls_rsa_public+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8008a18:	463a      	mov	r2, r7
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	a803      	add	r0, sp, #12
 8008a1e:	f7fb ff60 	bl	80048e2 <mbedtls_mpi_write_binary>
 8008a22:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
 8008a24:	a803      	add	r0, sp, #12
 8008a26:	f7fb fe50 	bl	80046ca <mbedtls_mpi_free>
    if( ret != 0 )
 8008a2a:	b10c      	cbz	r4, 8008a30 <mbedtls_rsa_public+0x68>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 8008a2c:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
}
 8008a30:	4620      	mov	r0, r4
 8008a32:	b007      	add	sp, #28
 8008a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8008a36:	f06f 0403 	mvn.w	r4, #3
 8008a3a:	e7f3      	b.n	8008a24 <mbedtls_rsa_public+0x5c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8008a3c:	4c00      	ldr	r4, [pc, #0]	; (8008a40 <mbedtls_rsa_public+0x78>)
 8008a3e:	e7f7      	b.n	8008a30 <mbedtls_rsa_public+0x68>
 8008a40:	ffffbf80 	.word	0xffffbf80

08008a44 <mbedtls_rsa_private>:
{
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	460e      	mov	r6, r1
 8008a4a:	b0a3      	sub	sp, #140	; 0x8c
    if( rsa_check_context( ctx, 1             /* private key checks */,
 8008a4c:	2101      	movs	r1, #1
{
 8008a4e:	4604      	mov	r4, r0
 8008a50:	4692      	mov	sl, r2
 8008a52:	461d      	mov	r5, r3
    if( rsa_check_context( ctx, 1             /* private key checks */,
 8008a54:	f7ff fdfc 	bl	8008650 <rsa_check_context.isra.0>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	f040 81a7 	bne.w	8008dac <mbedtls_rsa_private+0x368>
    mbedtls_mpi_init( &T );
 8008a5e:	a804      	add	r0, sp, #16
 8008a60:	f7fb fe2d 	bl	80046be <mbedtls_mpi_init>
    mbedtls_mpi_init( &P1 );
 8008a64:	a807      	add	r0, sp, #28
 8008a66:	f7fb fe2a 	bl	80046be <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 8008a6a:	a80a      	add	r0, sp, #40	; 0x28
 8008a6c:	f7fb fe27 	bl	80046be <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 8008a70:	a80d      	add	r0, sp, #52	; 0x34
 8008a72:	f7fb fe24 	bl	80046be <mbedtls_mpi_init>
    if( f_rng != NULL )
 8008a76:	b12e      	cbz	r6, 8008a84 <mbedtls_rsa_private+0x40>
        mbedtls_mpi_init( &DP_blind );
 8008a78:	a816      	add	r0, sp, #88	; 0x58
 8008a7a:	f7fb fe20 	bl	80046be <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 8008a7e:	a819      	add	r0, sp, #100	; 0x64
 8008a80:	f7fb fe1d 	bl	80046be <mbedtls_mpi_init>
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 8008a84:	a810      	add	r0, sp, #64	; 0x40
 8008a86:	f7fb fe1a 	bl	80046be <mbedtls_mpi_init>
 8008a8a:	a813      	add	r0, sp, #76	; 0x4c
 8008a8c:	f7fb fe17 	bl	80046be <mbedtls_mpi_init>
    mbedtls_mpi_init( &I );
 8008a90:	a81c      	add	r0, sp, #112	; 0x70
 8008a92:	f7fb fe14 	bl	80046be <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 8008a96:	a81f      	add	r0, sp, #124	; 0x7c
 8008a98:	f7fb fe11 	bl	80046be <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8008a9c:	6862      	ldr	r2, [r4, #4]
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	a804      	add	r0, sp, #16
 8008aa2:	f7fb fee6 	bl	8004872 <mbedtls_mpi_read_binary>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	f040 814d 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8008aae:	f104 0508 	add.w	r5, r4, #8
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	a804      	add	r0, sp, #16
 8008ab6:	f7fc f86b 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	f280 816f 	bge.w	8008d9e <mbedtls_rsa_private+0x35a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 8008ac0:	a904      	add	r1, sp, #16
 8008ac2:	a81c      	add	r0, sp, #112	; 0x70
 8008ac4:	f7fb fe3d 	bl	8004742 <mbedtls_mpi_copy>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2800      	cmp	r0, #0
 8008acc:	f040 813c 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
    mbedtls_mpi *DP = &ctx->DP;
 8008ad0:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 8008ad4:	f104 0850 	add.w	r8, r4, #80	; 0x50
    if( f_rng != NULL )
 8008ad8:	2e00      	cmp	r6, #0
 8008ada:	f000 8090 	beq.w	8008bfe <mbedtls_rsa_private+0x1ba>
    if( ctx->Vf.p != NULL )
 8008ade:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f000 80ee 	beq.w	8008cc4 <mbedtls_rsa_private+0x280>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 8008ae8:	f104 078c 	add.w	r7, r4, #140	; 0x8c
 8008aec:	463a      	mov	r2, r7
 8008aee:	4639      	mov	r1, r7
 8008af0:	4638      	mov	r0, r7
 8008af2:	f7fc f9b5 	bl	8004e60 <mbedtls_mpi_mul_mpi>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2800      	cmp	r0, #0
 8008afa:	f040 8125 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 8008afe:	462a      	mov	r2, r5
 8008b00:	4639      	mov	r1, r7
 8008b02:	4638      	mov	r0, r7
 8008b04:	f7fc fbdc 	bl	80052c0 <mbedtls_mpi_mod_mpi>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	f040 811c 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 8008b10:	f104 0798 	add.w	r7, r4, #152	; 0x98
 8008b14:	463a      	mov	r2, r7
 8008b16:	4639      	mov	r1, r7
 8008b18:	4638      	mov	r0, r7
 8008b1a:	f7fc f9a1 	bl	8004e60 <mbedtls_mpi_mul_mpi>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2800      	cmp	r0, #0
 8008b22:	f040 8111 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 8008b26:	462a      	mov	r2, r5
 8008b28:	4639      	mov	r1, r7
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	f7fc fbc8 	bl	80052c0 <mbedtls_mpi_mod_mpi>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 8008b30:	4603      	mov	r3, r0
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 8008b32:	2800      	cmp	r0, #0
 8008b34:	f040 8108 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 8008b38:	a904      	add	r1, sp, #16
 8008b3a:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8008b3e:	4608      	mov	r0, r1
 8008b40:	f7fc f98e 	bl	8004e60 <mbedtls_mpi_mul_mpi>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2800      	cmp	r0, #0
 8008b48:	f040 80fe 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8008b4c:	a904      	add	r1, sp, #16
 8008b4e:	462a      	mov	r2, r5
 8008b50:	4608      	mov	r0, r1
 8008b52:	f7fc fbb5 	bl	80052c0 <mbedtls_mpi_mod_mpi>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	f040 80f5 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8008b64:	a807      	add	r0, sp, #28
 8008b66:	f7fc f965 	bl	8004e34 <mbedtls_mpi_sub_int>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	f040 80eb 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 8008b72:	2201      	movs	r2, #1
 8008b74:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8008b78:	a80a      	add	r0, sp, #40	; 0x28
 8008b7a:	f7fc f95b 	bl	8004e34 <mbedtls_mpi_sub_int>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2800      	cmp	r0, #0
 8008b82:	f040 80e1 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8008b86:	4653      	mov	r3, sl
 8008b88:	4632      	mov	r2, r6
 8008b8a:	211c      	movs	r1, #28
 8008b8c:	a80d      	add	r0, sp, #52	; 0x34
 8008b8e:	f7fc fe84 	bl	800589a <mbedtls_mpi_fill_random>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2800      	cmp	r0, #0
 8008b96:	f040 80d7 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 8008b9a:	aa0d      	add	r2, sp, #52	; 0x34
 8008b9c:	a907      	add	r1, sp, #28
 8008b9e:	a816      	add	r0, sp, #88	; 0x58
 8008ba0:	f7fc f95e 	bl	8004e60 <mbedtls_mpi_mul_mpi>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	f040 80ce 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 8008bac:	a916      	add	r1, sp, #88	; 0x58
 8008bae:	464a      	mov	r2, r9
 8008bb0:	4608      	mov	r0, r1
 8008bb2:	f7fc f8e4 	bl	8004d7e <mbedtls_mpi_add_mpi>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	f040 80c5 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8008bbe:	4653      	mov	r3, sl
 8008bc0:	4632      	mov	r2, r6
 8008bc2:	211c      	movs	r1, #28
 8008bc4:	a80d      	add	r0, sp, #52	; 0x34
 8008bc6:	f7fc fe68 	bl	800589a <mbedtls_mpi_fill_random>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	f040 80bb 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 8008bd2:	aa0d      	add	r2, sp, #52	; 0x34
 8008bd4:	a90a      	add	r1, sp, #40	; 0x28
 8008bd6:	a819      	add	r0, sp, #100	; 0x64
 8008bd8:	f7fc f942 	bl	8004e60 <mbedtls_mpi_mul_mpi>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2800      	cmp	r0, #0
 8008be0:	f040 80b2 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 8008be4:	a919      	add	r1, sp, #100	; 0x64
 8008be6:	4642      	mov	r2, r8
 8008be8:	4608      	mov	r0, r1
 8008bea:	f7fc f8c8 	bl	8004d7e <mbedtls_mpi_add_mpi>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	f040 80a9 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
        DQ = &DQ_blind;
 8008bf6:	f10d 0864 	add.w	r8, sp, #100	; 0x64
        DP = &DP_blind;
 8008bfa:	f10d 0958 	add.w	r9, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 8008bfe:	f104 0374 	add.w	r3, r4, #116	; 0x74
 8008c02:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	464a      	mov	r2, r9
 8008c0a:	4653      	mov	r3, sl
 8008c0c:	a904      	add	r1, sp, #16
 8008c0e:	a810      	add	r0, sp, #64	; 0x40
 8008c10:	f7fc fb88 	bl	8005324 <mbedtls_mpi_exp_mod>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2800      	cmp	r0, #0
 8008c18:	f040 8096 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 8008c1c:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8008c20:	f104 0738 	add.w	r7, r4, #56	; 0x38
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	4642      	mov	r2, r8
 8008c28:	463b      	mov	r3, r7
 8008c2a:	a904      	add	r1, sp, #16
 8008c2c:	a813      	add	r0, sp, #76	; 0x4c
 8008c2e:	f7fc fb79 	bl	8005324 <mbedtls_mpi_exp_mod>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2800      	cmp	r0, #0
 8008c36:	f040 8087 	bne.w	8008d48 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 8008c3a:	aa13      	add	r2, sp, #76	; 0x4c
 8008c3c:	a910      	add	r1, sp, #64	; 0x40
 8008c3e:	a804      	add	r0, sp, #16
 8008c40:	f7fc f8bf 	bl	8004dc2 <mbedtls_mpi_sub_mpi>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d17e      	bne.n	8008d48 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 8008c4a:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 8008c4e:	a904      	add	r1, sp, #16
 8008c50:	a810      	add	r0, sp, #64	; 0x40
 8008c52:	f7fc f905 	bl	8004e60 <mbedtls_mpi_mul_mpi>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d175      	bne.n	8008d48 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 8008c5c:	4652      	mov	r2, sl
 8008c5e:	a910      	add	r1, sp, #64	; 0x40
 8008c60:	a804      	add	r0, sp, #16
 8008c62:	f7fc fb2d 	bl	80052c0 <mbedtls_mpi_mod_mpi>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d16d      	bne.n	8008d48 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 8008c6c:	463a      	mov	r2, r7
 8008c6e:	a904      	add	r1, sp, #16
 8008c70:	a810      	add	r0, sp, #64	; 0x40
 8008c72:	f7fc f8f5 	bl	8004e60 <mbedtls_mpi_mul_mpi>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d165      	bne.n	8008d48 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 8008c7c:	aa10      	add	r2, sp, #64	; 0x40
 8008c7e:	a913      	add	r1, sp, #76	; 0x4c
 8008c80:	a804      	add	r0, sp, #16
 8008c82:	f7fc f87c 	bl	8004d7e <mbedtls_mpi_add_mpi>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d15d      	bne.n	8008d48 <mbedtls_rsa_private+0x304>
    if( f_rng != NULL )
 8008c8c:	2e00      	cmp	r6, #0
 8008c8e:	d14b      	bne.n	8008d28 <mbedtls_rsa_private+0x2e4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 8008c90:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	f104 0214 	add.w	r2, r4, #20
 8008c9a:	462b      	mov	r3, r5
 8008c9c:	a904      	add	r1, sp, #16
 8008c9e:	a81f      	add	r0, sp, #124	; 0x7c
 8008ca0:	f7fc fb40 	bl	8005324 <mbedtls_mpi_exp_mod>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d14e      	bne.n	8008d48 <mbedtls_rsa_private+0x304>
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 8008caa:	a91c      	add	r1, sp, #112	; 0x70
 8008cac:	a81f      	add	r0, sp, #124	; 0x7c
 8008cae:	f7fb ff6f 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d178      	bne.n	8008da8 <mbedtls_rsa_private+0x364>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8008cb6:	6862      	ldr	r2, [r4, #4]
 8008cb8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8008cba:	a804      	add	r0, sp, #16
 8008cbc:	f7fb fe11 	bl	80048e2 <mbedtls_mpi_write_binary>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	e041      	b.n	8008d48 <mbedtls_rsa_private+0x304>
    if( ctx->Vf.p != NULL )
 8008cc4:	230c      	movs	r3, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8008cc6:	f104 0b98 	add.w	fp, r4, #152	; 0x98
    if( ctx->Vf.p != NULL )
 8008cca:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8008ccc:	f104 078c 	add.w	r7, r4, #140	; 0x8c
        if( count++ > 10 )
 8008cd0:	9b03      	ldr	r3, [sp, #12]
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	9303      	str	r3, [sp, #12]
 8008cd6:	d065      	beq.n	8008da4 <mbedtls_rsa_private+0x360>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8008cd8:	6861      	ldr	r1, [r4, #4]
 8008cda:	4653      	mov	r3, sl
 8008cdc:	4632      	mov	r2, r6
 8008cde:	3901      	subs	r1, #1
 8008ce0:	4658      	mov	r0, fp
 8008ce2:	f7fc fdda 	bl	800589a <mbedtls_mpi_fill_random>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	bb70      	cbnz	r0, 8008d48 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8008cea:	462a      	mov	r2, r5
 8008cec:	4659      	mov	r1, fp
 8008cee:	4638      	mov	r0, r7
 8008cf0:	f7fc fd4f 	bl	8005792 <mbedtls_mpi_gcd>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	bb38      	cbnz	r0, 8008d48 <mbedtls_rsa_private+0x304>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	f7fb ff8e 	bl	8004c1c <mbedtls_mpi_cmp_int>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d1e5      	bne.n	8008cd0 <mbedtls_rsa_private+0x28c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8008d04:	462a      	mov	r2, r5
 8008d06:	4659      	mov	r1, fp
 8008d08:	4638      	mov	r0, r7
 8008d0a:	f7fc fde5 	bl	80058d8 <mbedtls_mpi_inv_mod>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	b9d0      	cbnz	r0, 8008d48 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 8008d12:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	f104 0214 	add.w	r2, r4, #20
 8008d1c:	462b      	mov	r3, r5
 8008d1e:	4639      	mov	r1, r7
 8008d20:	4638      	mov	r0, r7
 8008d22:	f7fc faff 	bl	8005324 <mbedtls_mpi_exp_mod>
 8008d26:	e703      	b.n	8008b30 <mbedtls_rsa_private+0xec>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 8008d28:	a904      	add	r1, sp, #16
 8008d2a:	f104 0298 	add.w	r2, r4, #152	; 0x98
 8008d2e:	4608      	mov	r0, r1
 8008d30:	f7fc f896 	bl	8004e60 <mbedtls_mpi_mul_mpi>
 8008d34:	4603      	mov	r3, r0
 8008d36:	b938      	cbnz	r0, 8008d48 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8008d38:	a904      	add	r1, sp, #16
 8008d3a:	462a      	mov	r2, r5
 8008d3c:	4608      	mov	r0, r1
 8008d3e:	f7fc fabf 	bl	80052c0 <mbedtls_mpi_mod_mpi>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2800      	cmp	r0, #0
 8008d46:	d0a3      	beq.n	8008c90 <mbedtls_rsa_private+0x24c>
    mbedtls_mpi_free( &P1 );
 8008d48:	a807      	add	r0, sp, #28
 8008d4a:	9303      	str	r3, [sp, #12]
 8008d4c:	f7fb fcbd 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 8008d50:	a80a      	add	r0, sp, #40	; 0x28
 8008d52:	f7fb fcba 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 8008d56:	a80d      	add	r0, sp, #52	; 0x34
 8008d58:	f7fb fcb7 	bl	80046ca <mbedtls_mpi_free>
    if( f_rng != NULL )
 8008d5c:	9b03      	ldr	r3, [sp, #12]
 8008d5e:	b136      	cbz	r6, 8008d6e <mbedtls_rsa_private+0x32a>
        mbedtls_mpi_free( &DP_blind );
 8008d60:	a816      	add	r0, sp, #88	; 0x58
 8008d62:	f7fb fcb2 	bl	80046ca <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 8008d66:	a819      	add	r0, sp, #100	; 0x64
 8008d68:	f7fb fcaf 	bl	80046ca <mbedtls_mpi_free>
 8008d6c:	9b03      	ldr	r3, [sp, #12]
    mbedtls_mpi_free( &T );
 8008d6e:	a804      	add	r0, sp, #16
 8008d70:	9303      	str	r3, [sp, #12]
 8008d72:	f7fb fcaa 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 8008d76:	a810      	add	r0, sp, #64	; 0x40
 8008d78:	f7fb fca7 	bl	80046ca <mbedtls_mpi_free>
 8008d7c:	a813      	add	r0, sp, #76	; 0x4c
 8008d7e:	f7fb fca4 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &C );
 8008d82:	a81f      	add	r0, sp, #124	; 0x7c
 8008d84:	f7fb fca1 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 8008d88:	a81c      	add	r0, sp, #112	; 0x70
 8008d8a:	f7fb fc9e 	bl	80046ca <mbedtls_mpi_free>
    if( ret != 0 )
 8008d8e:	9b03      	ldr	r3, [sp, #12]
 8008d90:	b10b      	cbz	r3, 8008d96 <mbedtls_rsa_private+0x352>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 8008d92:	f5a3 4386 	sub.w	r3, r3, #17152	; 0x4300
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	b023      	add	sp, #140	; 0x8c
 8008d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8008d9e:	f06f 0303 	mvn.w	r3, #3
 8008da2:	e7d1      	b.n	8008d48 <mbedtls_rsa_private+0x304>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 8008da4:	4b02      	ldr	r3, [pc, #8]	; (8008db0 <mbedtls_rsa_private+0x36c>)
 8008da6:	e7cf      	b.n	8008d48 <mbedtls_rsa_private+0x304>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8008da8:	4b02      	ldr	r3, [pc, #8]	; (8008db4 <mbedtls_rsa_private+0x370>)
 8008daa:	e7cd      	b.n	8008d48 <mbedtls_rsa_private+0x304>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8008dac:	4b02      	ldr	r3, [pc, #8]	; (8008db8 <mbedtls_rsa_private+0x374>)
 8008dae:	e7f2      	b.n	8008d96 <mbedtls_rsa_private+0x352>
 8008db0:	ffffbb80 	.word	0xffffbb80
 8008db4:	ffffbc80 	.word	0xffffbc80
 8008db8:	ffffbf80 	.word	0xffffbf80

08008dbc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
{
 8008dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc0:	4699      	mov	r9, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8008dc2:	f1b9 0f01 	cmp.w	r9, #1
{
 8008dc6:	4606      	mov	r6, r0
 8008dc8:	4688      	mov	r8, r1
 8008dca:	4693      	mov	fp, r2
 8008dcc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8008dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dd0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8008dd2:	d106      	bne.n	8008de2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
 8008dd4:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8008dd8:	b11a      	cbz	r2, 8008de2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8008dda:	482d      	ldr	r0, [pc, #180]	; (8008e90 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd4>)
}
 8008ddc:	b003      	add	sp, #12
 8008dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8008de2:	f117 010b 	adds.w	r1, r7, #11
    olen = ctx->len;
 8008de6:	6872      	ldr	r2, [r6, #4]
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8008de8:	d2f7      	bcs.n	8008dda <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
 8008dea:	428a      	cmp	r2, r1
 8008dec:	d3f5      	bcc.n	8008dda <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
    *p++ = 0;
 8008dee:	2100      	movs	r1, #0
    nb_pad = olen - 3 - ilen;
 8008df0:	1bd2      	subs	r2, r2, r7
 8008df2:	3a03      	subs	r2, #3
    *p++ = 0;
 8008df4:	7029      	strb	r1, [r5, #0]
    if( mode == MBEDTLS_RSA_PUBLIC )
 8008df6:	f1b9 0f00 	cmp.w	r9, #0
 8008dfa:	d130      	bne.n	8008e5e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa2>
        if( f_rng == NULL )
 8008dfc:	f1b8 0f00 	cmp.w	r8, #0
 8008e00:	d0eb      	beq.n	8008dda <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
        *p++ = MBEDTLS_RSA_CRYPT;
 8008e02:	2102      	movs	r1, #2
 8008e04:	1cac      	adds	r4, r5, #2
 8008e06:	18a2      	adds	r2, r4, r2
 8008e08:	7069      	strb	r1, [r5, #1]
 8008e0a:	9200      	str	r2, [sp, #0]
        while( nb_pad-- > 0 )
 8008e0c:	9a00      	ldr	r2, [sp, #0]
 8008e0e:	4294      	cmp	r4, r2
 8008e10:	d112      	bne.n	8008e38 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x7c>
    *p++ = 0;
 8008e12:	2200      	movs	r2, #0
 8008e14:	4620      	mov	r0, r4
    memcpy( p, input, ilen );
 8008e16:	4619      	mov	r1, r3
    *p++ = 0;
 8008e18:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
 8008e1c:	463a      	mov	r2, r7
 8008e1e:	f008 ffce 	bl	8011dbe <memcpy>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8008e22:	f1b9 0f00 	cmp.w	r9, #0
 8008e26:	d124      	bne.n	8008e72 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xb6>
 8008e28:	462a      	mov	r2, r5
 8008e2a:	4629      	mov	r1, r5
 8008e2c:	4630      	mov	r0, r6
}
 8008e2e:	b003      	add	sp, #12
 8008e30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8008e34:	f7ff bdc8 	b.w	80089c8 <mbedtls_rsa_public>
 8008e38:	f04f 0a64 	mov.w	sl, #100	; 0x64
                ret = f_rng( p_rng, p, 1 );
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	4621      	mov	r1, r4
 8008e40:	4658      	mov	r0, fp
 8008e42:	9301      	str	r3, [sp, #4]
 8008e44:	47c0      	blx	r8
            } while( *p == 0 && --rng_dl && ret == 0 );
 8008e46:	7822      	ldrb	r2, [r4, #0]
 8008e48:	9b01      	ldr	r3, [sp, #4]
 8008e4a:	b9e2      	cbnz	r2, 8008e86 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xca>
 8008e4c:	f1ba 0a01 	subs.w	sl, sl, #1
 8008e50:	d102      	bne.n	8008e58 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x9c>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8008e52:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 8008e56:	e7c1      	b.n	8008ddc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x20>
            } while( *p == 0 && --rng_dl && ret == 0 );
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d0ef      	beq.n	8008e3c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x80>
 8008e5c:	e7f9      	b.n	8008e52 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x96>
        *p++ = MBEDTLS_RSA_SIGN;
 8008e5e:	1ca9      	adds	r1, r5, #2
 8008e60:	2001      	movs	r0, #1
 8008e62:	188c      	adds	r4, r1, r2
            *p++ = 0xFF;
 8008e64:	22ff      	movs	r2, #255	; 0xff
        *p++ = MBEDTLS_RSA_SIGN;
 8008e66:	7068      	strb	r0, [r5, #1]
        while( nb_pad-- > 0 )
 8008e68:	42a1      	cmp	r1, r4
 8008e6a:	d0d2      	beq.n	8008e12 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x56>
            *p++ = 0xFF;
 8008e6c:	f801 2b01 	strb.w	r2, [r1], #1
 8008e70:	e7fa      	b.n	8008e68 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xac>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8008e72:	462b      	mov	r3, r5
 8008e74:	465a      	mov	r2, fp
 8008e76:	4641      	mov	r1, r8
 8008e78:	4630      	mov	r0, r6
 8008e7a:	950c      	str	r5, [sp, #48]	; 0x30
}
 8008e7c:	b003      	add	sp, #12
 8008e7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8008e82:	f7ff bddf 	b.w	8008a44 <mbedtls_rsa_private>
            if( rng_dl == 0 || ret != 0 )
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d1e3      	bne.n	8008e52 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x96>
            p++;
 8008e8a:	3401      	adds	r4, #1
 8008e8c:	e7be      	b.n	8008e0c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x50>
 8008e8e:	bf00      	nop
 8008e90:	ffffbf80 	.word	0xffffbf80

08008e94 <mbedtls_rsa_pkcs1_encrypt>:
{
 8008e94:	b4f0      	push	{r4, r5, r6, r7}
    switch( ctx->padding )
 8008e96:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
 8008e9a:	b917      	cbnz	r7, 8008ea2 <mbedtls_rsa_pkcs1_encrypt+0xe>
}
 8008e9c:	bcf0      	pop	{r4, r5, r6, r7}
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
 8008e9e:	f7ff bf8d 	b.w	8008dbc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
}
 8008ea2:	4801      	ldr	r0, [pc, #4]	; (8008ea8 <mbedtls_rsa_pkcs1_encrypt+0x14>)
 8008ea4:	bcf0      	pop	{r4, r5, r6, r7}
 8008ea6:	4770      	bx	lr
 8008ea8:	ffffbf00 	.word	0xffffbf00

08008eac <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
{
 8008eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8008eb0:	2b01      	cmp	r3, #1
{
 8008eb2:	b0c2      	sub	sp, #264	; 0x108
 8008eb4:	461f      	mov	r7, r3
    ilen = ctx->len;
 8008eb6:	6845      	ldr	r5, [r0, #4]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8008eb8:	d104      	bne.n	8008ec4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x18>
 8008eba:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f040 80b5 	bne.w	800902e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x182>
    if( ilen < 16 || ilen > sizeof( buf ) )
 8008ec4:	f1a5 0310 	sub.w	r3, r5, #16
 8008ec8:	2bf0      	cmp	r3, #240	; 0xf0
 8008eca:	f200 80b0 	bhi.w	800902e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x182>
 8008ece:	ae02      	add	r6, sp, #8
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8008ed0:	bb17      	cbnz	r7, 8008f18 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x6c>
 8008ed2:	4632      	mov	r2, r6
 8008ed4:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8008ed6:	f7ff fd77 	bl	80089c8 <mbedtls_rsa_public>
    if( ret != 0 )
 8008eda:	4604      	mov	r4, r0
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d17d      	bne.n	8008fdc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x130>
    bad |= buf[0];
 8008ee0:	7830      	ldrb	r0, [r6, #0]
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
 8008ee2:	7873      	ldrb	r3, [r6, #1]
        for( i = 2; i < ilen; i++ )
 8008ee4:	2402      	movs	r4, #2
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
 8008ee6:	f083 0301 	eor.w	r3, r3, #1
 8008eea:	4303      	orrs	r3, r0
    unsigned char pad_done = 0;
 8008eec:	2000      	movs	r0, #0
    size_t pad_count = 0;
 8008eee:	4601      	mov	r1, r0
            pad_done |= if_int( buf[i], 0, 1 );
 8008ef0:	5d32      	ldrb	r2, [r6, r4]
        for( i = 2; i < ilen; i++ )
 8008ef2:	3401      	adds	r4, #1
            pad_done |= if_int( buf[i], 0, 1 );
 8008ef4:	2a00      	cmp	r2, #0
 8008ef6:	bf08      	it	eq
 8008ef8:	f040 0001 	orreq.w	r0, r0, #1
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 8008efc:	43d2      	mvns	r2, r2
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 8008efe:	4247      	negs	r7, r0
 8008f00:	4307      	orrs	r7, r0
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 8008f02:	b2d2      	uxtb	r2, r2
    return( ( mask & if1 ) | (~mask & if0 ) );
 8008f04:	ea22 72e7 	bic.w	r2, r2, r7, asr #31
            pad_count += if_int( pad_done, 0, 1 );
 8008f08:	2f00      	cmp	r7, #0
 8008f0a:	bfa8      	it	ge
 8008f0c:	3101      	addge	r1, #1
        for( i = 2; i < ilen; i++ )
 8008f0e:	42a5      	cmp	r5, r4
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 8008f10:	ea43 0302 	orr.w	r3, r3, r2
        for( i = 2; i < ilen; i++ )
 8008f14:	d1ec      	bne.n	8008ef0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x44>
 8008f16:	e022      	b.n	8008f5e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb2>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8008f18:	9600      	str	r6, [sp, #0]
 8008f1a:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8008f1c:	f7ff fd92 	bl	8008a44 <mbedtls_rsa_private>
    if( ret != 0 )
 8008f20:	4604      	mov	r4, r0
 8008f22:	2800      	cmp	r0, #0
 8008f24:	d15a      	bne.n	8008fdc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x130>
    if( mode == MBEDTLS_RSA_PRIVATE )
 8008f26:	2f01      	cmp	r7, #1
    bad |= buf[0];
 8008f28:	7830      	ldrb	r0, [r6, #0]
    if( mode == MBEDTLS_RSA_PRIVATE )
 8008f2a:	d1da      	bne.n	8008ee2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x36>
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;
 8008f2c:	7873      	ldrb	r3, [r6, #1]
    size_t pad_count = 0;
 8008f2e:	4621      	mov	r1, r4
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;
 8008f30:	f083 0302 	eor.w	r3, r3, #2
 8008f34:	4303      	orrs	r3, r0
    unsigned char pad_done = 0;
 8008f36:	4620      	mov	r0, r4
        for( i = 2; i < ilen; i++ )
 8008f38:	2402      	movs	r4, #2
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
 8008f3a:	5d32      	ldrb	r2, [r6, r4]
        for( i = 2; i < ilen; i++ )
 8008f3c:	3401      	adds	r4, #1
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
 8008f3e:	4257      	negs	r7, r2
 8008f40:	433a      	orrs	r2, r7
 8008f42:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8008f46:	f082 0201 	eor.w	r2, r2, #1
 8008f4a:	4310      	orrs	r0, r2
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8008f4c:	4242      	negs	r2, r0
 8008f4e:	4302      	orrs	r2, r0
 8008f50:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8008f54:	f082 0201 	eor.w	r2, r2, #1
        for( i = 2; i < ilen; i++ )
 8008f58:	42a5      	cmp	r5, r4
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8008f5a:	4411      	add	r1, r2
        for( i = 2; i < ilen; i++ )
 8008f5c:	d1ed      	bne.n	8008f3a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x8e>
    plaintext_max_size = ( output_max_len > ilen - 11 ?
 8008f5e:	9c4d      	ldr	r4, [sp, #308]	; 0x134
                           ilen - 11 :
 8008f60:	f1a5 020b 	sub.w	r2, r5, #11
    plaintext_max_size = ( output_max_len > ilen - 11 ?
 8008f64:	42a2      	cmp	r2, r4
 8008f66:	bf28      	it	cs
 8008f68:	4622      	movcs	r2, r4
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 8008f6a:	f1a1 0408 	sub.w	r4, r1, #8
 8008f6e:	ea43 73d4 	orr.w	r3, r3, r4, lsr #31
    bad |= size_greater_than( 8, pad_count );
 8008f72:	2800      	cmp	r0, #0
 8008f74:	bf14      	ite	ne
 8008f76:	4618      	movne	r0, r3
 8008f78:	f043 0001 	orreq.w	r0, r3, #1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 8008f7c:	4244      	negs	r4, r0
                             (unsigned) ( ilen - pad_count - 3 ) );
 8008f7e:	1eeb      	subs	r3, r5, #3
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 8008f80:	4304      	orrs	r4, r0
                             (unsigned) ( ilen - pad_count - 3 ) );
 8008f82:	1a59      	subs	r1, r3, r1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 8008f84:	17e4      	asrs	r4, r4, #31
    return( ( mask & if1 ) | (~mask & if0 ) );
 8008f86:	2c00      	cmp	r4, #0
 8008f88:	bf18      	it	ne
 8008f8a:	4611      	movne	r1, r2
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 8008f8c:	1a53      	subs	r3, r2, r1
 8008f8e:	0fdb      	lsrs	r3, r3, #31
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 8008f90:	425f      	negs	r7, r3
    bad = all_or_nothing_int( bad | output_too_large );
 8008f92:	4303      	orrs	r3, r0
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 8008f94:	4258      	negs	r0, r3
 8008f96:	4318      	orrs	r0, r3
 8008f98:	f407 4e88 	and.w	lr, r7, #17408	; 0x4400
    return( ( mask & if1 ) | (~mask & if0 ) );
 8008f9c:	2c00      	cmp	r4, #0
 8008f9e:	bf0c      	ite	eq
 8008fa0:	4674      	moveq	r4, lr
 8008fa2:	f44f 4482 	movne.w	r4, #16640	; 0x4100
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 8008fa6:	17c0      	asrs	r0, r0, #31
        buf[i] &= ~bad;
 8008fa8:	43c0      	mvns	r0, r0
    ret = - (int) if_int( bad, - MBEDTLS_ERR_RSA_INVALID_PADDING,
 8008faa:	4264      	negs	r4, r4
 8008fac:	f10d 0313 	add.w	r3, sp, #19
        buf[i] &= ~bad;
 8008fb0:	f893 e000 	ldrb.w	lr, [r3]
 8008fb4:	ea0e 0e00 	and.w	lr, lr, r0
 8008fb8:	f803 eb01 	strb.w	lr, [r3], #1
    for( i = 11; i < ilen; i++ )
 8008fbc:	eba3 0e06 	sub.w	lr, r3, r6
 8008fc0:	4575      	cmp	r5, lr
 8008fc2:	d8f5      	bhi.n	8008fb0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x104>
    return( ( mask & if1 ) | (~mask & if0 ) );
 8008fc4:	2f00      	cmp	r7, #0
 8008fc6:	bf14      	ite	ne
 8008fc8:	4617      	movne	r7, r2
 8008fca:	460f      	moveq	r7, r1
    mem_move_to_left( buf + ilen - plaintext_max_size,
 8008fcc:	1aa9      	subs	r1, r5, r2
 8008fce:	4431      	add	r1, r6
    if( total == 0 )
 8008fd0:	b96a      	cbnz	r2, 8008fee <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x142>
    memcpy( output, buf + ilen - plaintext_max_size, plaintext_max_size );
 8008fd2:	984c      	ldr	r0, [sp, #304]	; 0x130
 8008fd4:	f008 fef3 	bl	8011dbe <memcpy>
    *olen = plaintext_size;
 8008fd8:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8008fda:	601f      	str	r7, [r3, #0]
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8008fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f7ff fa9d 	bl	8008520 <mbedtls_platform_zeroize>
}
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	b042      	add	sp, #264	; 0x108
 8008fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( total == 0 )
 8008fee:	2000      	movs	r0, #0
        for( n = 0; n < total - 1; n++ )
 8008ff0:	f102 38ff 	add.w	r8, r2, #4294967295
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 8008ff4:	eb01 0c08 	add.w	ip, r1, r8
        for( n = 0; n < total - 1; n++ )
 8008ff8:	2300      	movs	r3, #0
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 8008ffa:	1bc5      	subs	r5, r0, r7
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 8008ffc:	17ed      	asrs	r5, r5, #31
        for( n = 0; n < total - 1; n++ )
 8008ffe:	4543      	cmp	r3, r8
 8009000:	d308      	bcc.n	8009014 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x168>
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 8009002:	f89c 3000 	ldrb.w	r3, [ip]
    for( i = 0; i < total; i++ )
 8009006:	3001      	adds	r0, #1
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 8009008:	401d      	ands	r5, r3
    for( i = 0; i < total; i++ )
 800900a:	4282      	cmp	r2, r0
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 800900c:	f88c 5000 	strb.w	r5, [ip]
    for( i = 0; i < total; i++ )
 8009010:	d1f2      	bne.n	8008ff8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x14c>
 8009012:	e7de      	b.n	8008fd2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x126>
            unsigned char next = buf[n+1];
 8009014:	f103 0901 	add.w	r9, r3, #1
            unsigned char current = buf[n];
 8009018:	f811 e003 	ldrb.w	lr, [r1, r3]
            unsigned char next = buf[n+1];
 800901c:	f811 a009 	ldrb.w	sl, [r1, r9]
            buf[n] = if_int( no_op, current, next );
 8009020:	2d00      	cmp	r5, #0
 8009022:	bf08      	it	eq
 8009024:	46d6      	moveq	lr, sl
 8009026:	f801 e003 	strb.w	lr, [r1, r3]
        for( n = 0; n < total - 1; n++ )
 800902a:	464b      	mov	r3, r9
 800902c:	e7e7      	b.n	8008ffe <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x152>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800902e:	4c01      	ldr	r4, [pc, #4]	; (8009034 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x188>)
 8009030:	e7d9      	b.n	8008fe6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x13a>
 8009032:	bf00      	nop
 8009034:	ffffbf80 	.word	0xffffbf80

08009038 <mbedtls_rsa_pkcs1_decrypt>:
{
 8009038:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 800903a:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 800903e:	f8dd e014 	ldr.w	lr, [sp, #20]
    switch( ctx->padding )
 8009042:	b91c      	cbnz	r4, 800904c <mbedtls_rsa_pkcs1_decrypt+0x14>
}
 8009044:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
 8009048:	f7ff bf30 	b.w	8008eac <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
}
 800904c:	4800      	ldr	r0, [pc, #0]	; (8009050 <mbedtls_rsa_pkcs1_decrypt+0x18>)
 800904e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009050:	ffffbf00 	.word	0xffffbf00

08009054 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 8009054:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8009058:	2b01      	cmp	r3, #1
{
 800905a:	4689      	mov	r9, r1
 800905c:	a90b      	add	r1, sp, #44	; 0x2c
 800905e:	4605      	mov	r5, r0
 8009060:	4692      	mov	sl, r2
 8009062:	c986      	ldmia	r1, {r1, r2, r7}
 8009064:	461e      	mov	r6, r3
 8009066:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 800906a:	d103      	bne.n	8009074 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x20>
 800906c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8009070:	2b00      	cmp	r3, #0
 8009072:	d14e      	bne.n	8009112 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbe>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 8009074:	9700      	str	r7, [sp, #0]
 8009076:	686b      	ldr	r3, [r5, #4]
 8009078:	f7ff fa5a 	bl	8008530 <rsa_rsassa_pkcs1_v15_encode>
 800907c:	4604      	mov	r4, r0
 800907e:	bbd8      	cbnz	r0, 80090f8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 8009080:	b93e      	cbnz	r6, 8009092 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 8009082:	463a      	mov	r2, r7
 8009084:	4639      	mov	r1, r7
 8009086:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 8009088:	b002      	add	sp, #8
 800908a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 800908e:	f7ff bc9b 	b.w	80089c8 <mbedtls_rsa_public>
    sig_try = mbedtls_calloc( 1, ctx->len );
 8009092:	686c      	ldr	r4, [r5, #4]
 8009094:	2001      	movs	r0, #1
 8009096:	4621      	mov	r1, r4
 8009098:	f008 fe40 	bl	8011d1c <calloc>
    if( sig_try == NULL )
 800909c:	4606      	mov	r6, r0
 800909e:	b140      	cbz	r0, 80090b2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x5e>
    verif = mbedtls_calloc( 1, ctx->len );
 80090a0:	4621      	mov	r1, r4
 80090a2:	2001      	movs	r0, #1
 80090a4:	f008 fe3a 	bl	8011d1c <calloc>
    if( verif == NULL )
 80090a8:	4680      	mov	r8, r0
 80090aa:	b928      	cbnz	r0, 80090b8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x64>
        mbedtls_free( sig_try );
 80090ac:	4630      	mov	r0, r6
 80090ae:	f008 fe6f 	bl	8011d90 <free>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80090b2:	f06f 040f 	mvn.w	r4, #15
 80090b6:	e01f      	b.n	80090f8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 80090b8:	9600      	str	r6, [sp, #0]
 80090ba:	463b      	mov	r3, r7
 80090bc:	4652      	mov	r2, sl
 80090be:	4649      	mov	r1, r9
 80090c0:	4628      	mov	r0, r5
 80090c2:	f7ff fcbf 	bl	8008a44 <mbedtls_rsa_private>
 80090c6:	4604      	mov	r4, r0
 80090c8:	b980      	cbnz	r0, 80090ec <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x98>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 80090ca:	4642      	mov	r2, r8
 80090cc:	4631      	mov	r1, r6
 80090ce:	4628      	mov	r0, r5
 80090d0:	f7ff fc7a 	bl	80089c8 <mbedtls_rsa_public>
 80090d4:	4604      	mov	r4, r0
 80090d6:	b948      	cbnz	r0, 80090ec <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x98>
    unsigned char diff = 0;
 80090d8:	4601      	mov	r1, r0
    for( i = 0; i < n; i++ )
 80090da:	4603      	mov	r3, r0
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 80090dc:	686a      	ldr	r2, [r5, #4]
    for( i = 0; i < n; i++ )
 80090de:	429a      	cmp	r2, r3
 80090e0:	d10e      	bne.n	8009100 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xac>
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 80090e2:	b9a1      	cbnz	r1, 800910e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xba>
    memcpy( sig, sig_try, ctx->len );
 80090e4:	4631      	mov	r1, r6
 80090e6:	4638      	mov	r0, r7
 80090e8:	f008 fe69 	bl	8011dbe <memcpy>
    mbedtls_free( sig_try );
 80090ec:	4630      	mov	r0, r6
 80090ee:	f008 fe4f 	bl	8011d90 <free>
    mbedtls_free( verif );
 80090f2:	4640      	mov	r0, r8
 80090f4:	f008 fe4c 	bl	8011d90 <free>
}
 80090f8:	4620      	mov	r0, r4
 80090fa:	b002      	add	sp, #8
 80090fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        diff |= A[i] ^ B[i];
 8009100:	f818 0003 	ldrb.w	r0, [r8, r3]
 8009104:	5cfd      	ldrb	r5, [r7, r3]
    for( i = 0; i < n; i++ )
 8009106:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 8009108:	4068      	eors	r0, r5
 800910a:	4301      	orrs	r1, r0
 800910c:	e7e7      	b.n	80090de <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x8a>
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 800910e:	4c02      	ldr	r4, [pc, #8]	; (8009118 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc4>)
 8009110:	e7ec      	b.n	80090ec <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x98>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8009112:	4c02      	ldr	r4, [pc, #8]	; (800911c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
 8009114:	e7f0      	b.n	80090f8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>
 8009116:	bf00      	nop
 8009118:	ffffbd00 	.word	0xffffbd00
 800911c:	ffffbf80 	.word	0xffffbf80

08009120 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 8009120:	b5f0      	push	{r4, r5, r6, r7, lr}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    switch( ctx->padding )
 8009122:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 8009126:	f89d e014 	ldrb.w	lr, [sp, #20]
    switch( ctx->padding )
 800912a:	b92c      	cbnz	r4, 8009138 <mbedtls_rsa_pkcs1_sign+0x18>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 800912c:	f8cd e014 	str.w	lr, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8009130:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 8009134:	f7ff bf8e 	b.w	8009054 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
}
 8009138:	4800      	ldr	r0, [pc, #0]	; (800913c <mbedtls_rsa_pkcs1_sign+0x1c>)
 800913a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800913c:	ffffbf00 	.word	0xffffbf00

08009140 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                        hashlen == 0 ) ||
                      hash != NULL );

    sig_len = ctx->len;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8009140:	2b01      	cmp	r3, #1
{
 8009142:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009146:	4680      	mov	r8, r0
 8009148:	468a      	mov	sl, r1
 800914a:	4693      	mov	fp, r2
 800914c:	4699      	mov	r9, r3
    sig_len = ctx->len;
 800914e:	6847      	ldr	r7, [r0, #4]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8009150:	d103      	bne.n	800915a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x1a>
 8009152:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8009156:	2b00      	cmp	r3, #0
 8009158:	d14a      	bne.n	80091f0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb0>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||
 800915a:	4639      	mov	r1, r7
 800915c:	2001      	movs	r0, #1
 800915e:	f008 fddd 	bl	8011d1c <calloc>
 8009162:	4606      	mov	r6, r0
 8009164:	2800      	cmp	r0, #0
 8009166:	d045      	beq.n	80091f4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb4>
 8009168:	4639      	mov	r1, r7
 800916a:	2001      	movs	r0, #1
 800916c:	f008 fdd6 	bl	8011d1c <calloc>
 8009170:	4605      	mov	r5, r0
 8009172:	2800      	cmp	r0, #0
 8009174:	d041      	beq.n	80091fa <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xba>
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 8009176:	9000      	str	r0, [sp, #0]
 8009178:	463b      	mov	r3, r7
 800917a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800917c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800917e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8009182:	f7ff f9d5 	bl	8008530 <rsa_rsassa_pkcs1_v15_encode>
 8009186:	4604      	mov	r4, r0
 8009188:	b988      	cbnz	r0, 80091ae <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 800918a:	f1b9 0f00 	cmp.w	r9, #0
 800918e:	d121      	bne.n	80091d4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
 8009190:	4632      	mov	r2, r6
 8009192:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009194:	4640      	mov	r0, r8
 8009196:	f7ff fc17 	bl	80089c8 <mbedtls_rsa_public>
 800919a:	4604      	mov	r4, r0
    if( ret != 0 )
 800919c:	b938      	cbnz	r0, 80091ae <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
 800919e:	4602      	mov	r2, r0
 80091a0:	4603      	mov	r3, r0
    for( i = 0; i < n; i++ )
 80091a2:	429f      	cmp	r7, r3
 80091a4:	d11e      	bne.n	80091e4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa4>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80091a6:	4b16      	ldr	r3, [pc, #88]	; (8009200 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc0>)
 80091a8:	2a00      	cmp	r2, #0
 80091aa:	bf18      	it	ne
 80091ac:	461c      	movne	r4, r3

cleanup:

    if( encoded != NULL )
    {
        mbedtls_platform_zeroize( encoded, sig_len );
 80091ae:	4630      	mov	r0, r6
 80091b0:	4639      	mov	r1, r7
 80091b2:	f7ff f9b5 	bl	8008520 <mbedtls_platform_zeroize>
        mbedtls_free( encoded );
 80091b6:	4630      	mov	r0, r6
 80091b8:	f008 fdea 	bl	8011d90 <free>
    }

    if( encoded_expected != NULL )
 80091bc:	b135      	cbz	r5, 80091cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8c>
    {
        mbedtls_platform_zeroize( encoded_expected, sig_len );
 80091be:	4628      	mov	r0, r5
 80091c0:	4639      	mov	r1, r7
 80091c2:	f7ff f9ad 	bl	8008520 <mbedtls_platform_zeroize>
        mbedtls_free( encoded_expected );
 80091c6:	4628      	mov	r0, r5
 80091c8:	f008 fde2 	bl	8011d90 <free>
    }

    return( ret );
}
 80091cc:	4620      	mov	r0, r4
 80091ce:	b003      	add	sp, #12
 80091d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 80091d4:	9600      	str	r6, [sp, #0]
 80091d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091d8:	465a      	mov	r2, fp
 80091da:	4651      	mov	r1, sl
 80091dc:	4640      	mov	r0, r8
 80091de:	f7ff fc31 	bl	8008a44 <mbedtls_rsa_private>
 80091e2:	e7da      	b.n	800919a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5a>
        diff |= A[i] ^ B[i];
 80091e4:	5cf1      	ldrb	r1, [r6, r3]
 80091e6:	5ce8      	ldrb	r0, [r5, r3]
    for( i = 0; i < n; i++ )
 80091e8:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 80091ea:	4041      	eors	r1, r0
 80091ec:	430a      	orrs	r2, r1
 80091ee:	e7d8      	b.n	80091a2 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80091f0:	4c04      	ldr	r4, [pc, #16]	; (8009204 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
 80091f2:	e7eb      	b.n	80091cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8c>
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 80091f4:	f06f 040f 	mvn.w	r4, #15
 80091f8:	e7e8      	b.n	80091cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8c>
 80091fa:	f06f 040f 	mvn.w	r4, #15
 80091fe:	e7d6      	b.n	80091ae <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
 8009200:	ffffbc80 	.word	0xffffbc80
 8009204:	ffffbf80 	.word	0xffffbf80

08009208 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 8009208:	b5f0      	push	{r4, r5, r6, r7, lr}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    switch( ctx->padding )
 800920a:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 800920e:	f89d e014 	ldrb.w	lr, [sp, #20]
    switch( ctx->padding )
 8009212:	b92c      	cbnz	r4, 8009220 <mbedtls_rsa_pkcs1_verify+0x18>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 8009214:	f8cd e014 	str.w	lr, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8009218:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 800921c:	f7ff bf90 	b.w	8009140 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
}
 8009220:	4800      	ldr	r0, [pc, #0]	; (8009224 <mbedtls_rsa_pkcs1_verify+0x1c>)
 8009222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009224:	ffffbf00 	.word	0xffffbf00

08009228 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 8009228:	b510      	push	{r4, lr}
    if( ctx == NULL )
 800922a:	4604      	mov	r4, r0
 800922c:	b3a0      	cbz	r0, 8009298 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
 800922e:	308c      	adds	r0, #140	; 0x8c
 8009230:	f7fb fa4b 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
 8009234:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8009238:	f7fb fa47 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
 800923c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009240:	f7fb fa43 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
 8009244:	f104 0020 	add.w	r0, r4, #32
 8009248:	f7fb fa3f 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
 800924c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8009250:	f7fb fa3b 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
 8009254:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8009258:	f7fb fa37 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
 800925c:	f104 0014 	add.w	r0, r4, #20
 8009260:	f7fb fa33 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
 8009264:	f104 0008 	add.w	r0, r4, #8
 8009268:	f7fb fa2f 	bl	80046ca <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
 800926c:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8009270:	f7fb fa2b 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
 8009274:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8009278:	f7fb fa27 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
 800927c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009280:	f7fb fa23 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
 8009284:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009288:	f7fb fa1f 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 800928c:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 8009290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
 8009294:	f7fb ba19 	b.w	80046ca <mbedtls_mpi_free>
 8009298:	bd10      	pop	{r4, pc}
	...

0800929c <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 800929c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a0:	4606      	mov	r6, r0
 80092a2:	4688      	mov	r8, r1
 80092a4:	b096      	sub	sp, #88	; 0x58
 80092a6:	461f      	mov	r7, r3
    uint16_t order;    /* Order of 2 in DE - 1 */

    mbedtls_mpi T;  /* Holds largest odd divisor of DE - 1     */
    mbedtls_mpi K;  /* Temporary holding the current candidate */

    const unsigned char primes[] = { 2,
 80092a8:	4b74      	ldr	r3, [pc, #464]	; (800947c <mbedtls_rsa_deduce_primes+0x1e0>)
{
 80092aa:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80092ae:	4615      	mov	r5, r2
    const unsigned char primes[] = { 2,
 80092b0:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 80092b4:	aa08      	add	r2, sp, #32
 80092b6:	4614      	mov	r4, r2
 80092b8:	6818      	ldr	r0, [r3, #0]
 80092ba:	6859      	ldr	r1, [r3, #4]
 80092bc:	3308      	adds	r3, #8
 80092be:	c403      	stmia	r4!, {r0, r1}
 80092c0:	4573      	cmp	r3, lr
 80092c2:	4622      	mov	r2, r4
 80092c4:	d1f7      	bne.n	80092b6 <mbedtls_rsa_deduce_primes+0x1a>
 80092c6:	6818      	ldr	r0, [r3, #0]
 80092c8:	889b      	ldrh	r3, [r3, #4]
 80092ca:	6020      	str	r0, [r4, #0]
 80092cc:	80a3      	strh	r3, [r4, #4]
         229,  233,  239,  241,  251
    };

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 80092ce:	b92f      	cbnz	r7, 80092dc <mbedtls_rsa_deduce_primes+0x40>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80092d0:	f06f 0403 	mvn.w	r4, #3
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
 80092d4:	4620      	mov	r0, r4
 80092d6:	b016      	add	sp, #88	; 0x58
 80092d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 80092dc:	f1b9 0f00 	cmp.w	r9, #0
 80092e0:	d0f6      	beq.n	80092d0 <mbedtls_rsa_deduce_primes+0x34>
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1f3      	bne.n	80092d0 <mbedtls_rsa_deduce_primes+0x34>
 80092e8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80092ec:	2900      	cmp	r1, #0
 80092ee:	d1ef      	bne.n	80092d0 <mbedtls_rsa_deduce_primes+0x34>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 80092f0:	4630      	mov	r0, r6
 80092f2:	f7fb fc93 	bl	8004c1c <mbedtls_mpi_cmp_int>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	ddea      	ble.n	80092d0 <mbedtls_rsa_deduce_primes+0x34>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80092fa:	2101      	movs	r1, #1
 80092fc:	4628      	mov	r0, r5
 80092fe:	f7fb fc8d 	bl	8004c1c <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 8009302:	2800      	cmp	r0, #0
 8009304:	dde4      	ble.n	80092d0 <mbedtls_rsa_deduce_primes+0x34>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8009306:	4631      	mov	r1, r6
 8009308:	4628      	mov	r0, r5
 800930a:	f7fb fc41 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 800930e:	2800      	cmp	r0, #0
 8009310:	dade      	bge.n	80092d0 <mbedtls_rsa_deduce_primes+0x34>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8009312:	2101      	movs	r1, #1
 8009314:	4640      	mov	r0, r8
 8009316:	f7fb fc81 	bl	8004c1c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 800931a:	2800      	cmp	r0, #0
 800931c:	ddd8      	ble.n	80092d0 <mbedtls_rsa_deduce_primes+0x34>
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 800931e:	4631      	mov	r1, r6
 8009320:	4640      	mov	r0, r8
 8009322:	f7fb fc35 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8009326:	2800      	cmp	r0, #0
 8009328:	dad2      	bge.n	80092d0 <mbedtls_rsa_deduce_primes+0x34>
    mbedtls_mpi_init( &K );
 800932a:	a805      	add	r0, sp, #20
 800932c:	f7fb f9c7 	bl	80046be <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 8009330:	a802      	add	r0, sp, #8
 8009332:	f7fb f9c4 	bl	80046be <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 8009336:	4642      	mov	r2, r8
 8009338:	4629      	mov	r1, r5
 800933a:	a802      	add	r0, sp, #8
 800933c:	f7fb fd90 	bl	8004e60 <mbedtls_mpi_mul_mpi>
 8009340:	4604      	mov	r4, r0
 8009342:	b980      	cbnz	r0, 8009366 <mbedtls_rsa_deduce_primes+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 8009344:	a902      	add	r1, sp, #8
 8009346:	2201      	movs	r2, #1
 8009348:	4608      	mov	r0, r1
 800934a:	f7fb fd73 	bl	8004e34 <mbedtls_mpi_sub_int>
 800934e:	4604      	mov	r4, r0
 8009350:	b948      	cbnz	r0, 8009366 <mbedtls_rsa_deduce_primes+0xca>
    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 8009352:	a802      	add	r0, sp, #8
 8009354:	f7fb fa4d 	bl	80047f2 <mbedtls_mpi_lsb>
 8009358:	fa1f fa80 	uxth.w	sl, r0
 800935c:	f1ba 0f00 	cmp.w	sl, #0
 8009360:	d108      	bne.n	8009374 <mbedtls_rsa_deduce_primes+0xd8>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8009362:	f06f 0403 	mvn.w	r4, #3
    mbedtls_mpi_free( &K );
 8009366:	a805      	add	r0, sp, #20
 8009368:	f7fb f9af 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 800936c:	a802      	add	r0, sp, #8
 800936e:	f7fb f9ac 	bl	80046ca <mbedtls_mpi_free>
    return( ret );
 8009372:	e7af      	b.n	80092d4 <mbedtls_rsa_deduce_primes+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 8009374:	b281      	uxth	r1, r0
 8009376:	a802      	add	r0, sp, #8
 8009378:	f7fb fb33 	bl	80049e2 <mbedtls_mpi_shift_r>
 800937c:	4604      	mov	r4, r0
 800937e:	2800      	cmp	r0, #0
 8009380:	d1f1      	bne.n	8009366 <mbedtls_rsa_deduce_primes+0xca>
    if( N->p[0] % 8 == 1 )
 8009382:	68b3      	ldr	r3, [r6, #8]
 8009384:	681d      	ldr	r5, [r3, #0]
 8009386:	f005 0507 	and.w	r5, r5, #7
    for( ; attempt < num_primes; ++attempt )
 800938a:	1e6b      	subs	r3, r5, #1
 800938c:	425d      	negs	r5, r3
 800938e:	415d      	adcs	r5, r3
        mbedtls_mpi_lset( &K, primes[attempt] );
 8009390:	ab16      	add	r3, sp, #88	; 0x58
 8009392:	442b      	add	r3, r5
 8009394:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8009398:	a805      	add	r0, sp, #20
 800939a:	f7fb f9fe 	bl	800479a <mbedtls_mpi_lset>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 800939e:	4632      	mov	r2, r6
 80093a0:	a905      	add	r1, sp, #20
 80093a2:	4638      	mov	r0, r7
 80093a4:	f7fc f9f5 	bl	8005792 <mbedtls_mpi_gcd>
 80093a8:	4604      	mov	r4, r0
 80093aa:	2800      	cmp	r0, #0
 80093ac:	d1db      	bne.n	8009366 <mbedtls_rsa_deduce_primes+0xca>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 80093ae:	2101      	movs	r1, #1
 80093b0:	4638      	mov	r0, r7
 80093b2:	f7fb fc33 	bl	8004c1c <mbedtls_mpi_cmp_int>
 80093b6:	b120      	cbz	r0, 80093c2 <mbedtls_rsa_deduce_primes+0x126>
    for( ; attempt < num_primes; ++attempt )
 80093b8:	3501      	adds	r5, #1
 80093ba:	b2ad      	uxth	r5, r5
 80093bc:	2d36      	cmp	r5, #54	; 0x36
 80093be:	d1e7      	bne.n	8009390 <mbedtls_rsa_deduce_primes+0xf4>
 80093c0:	e7cf      	b.n	8009362 <mbedtls_rsa_deduce_primes+0xc6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 80093c2:	a905      	add	r1, sp, #20
 80093c4:	f8cd 9000 	str.w	r9, [sp]
 80093c8:	4633      	mov	r3, r6
 80093ca:	aa02      	add	r2, sp, #8
 80093cc:	4608      	mov	r0, r1
 80093ce:	f7fb ffa9 	bl	8005324 <mbedtls_mpi_exp_mod>
 80093d2:	4604      	mov	r4, r0
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d1c6      	bne.n	8009366 <mbedtls_rsa_deduce_primes+0xca>
 80093d8:	f04f 0801 	mov.w	r8, #1
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 80093dc:	2101      	movs	r1, #1
 80093de:	a805      	add	r0, sp, #20
 80093e0:	f7fb fc1c 	bl	8004c1c <mbedtls_mpi_cmp_int>
 80093e4:	b930      	cbnz	r0, 80093f4 <mbedtls_rsa_deduce_primes+0x158>
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 80093e6:	2101      	movs	r1, #1
 80093e8:	a805      	add	r0, sp, #20
 80093ea:	f7fb fc17 	bl	8004c1c <mbedtls_mpi_cmp_int>
 80093ee:	2800      	cmp	r0, #0
 80093f0:	d0e2      	beq.n	80093b8 <mbedtls_rsa_deduce_primes+0x11c>
 80093f2:	e7b6      	b.n	8009362 <mbedtls_rsa_deduce_primes+0xc6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 80093f4:	a905      	add	r1, sp, #20
 80093f6:	2201      	movs	r2, #1
 80093f8:	4608      	mov	r0, r1
 80093fa:	f7fb fd05 	bl	8004e08 <mbedtls_mpi_add_int>
 80093fe:	4604      	mov	r4, r0
 8009400:	2800      	cmp	r0, #0
 8009402:	d1b0      	bne.n	8009366 <mbedtls_rsa_deduce_primes+0xca>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 8009404:	4632      	mov	r2, r6
 8009406:	a905      	add	r1, sp, #20
 8009408:	4638      	mov	r0, r7
 800940a:	f7fc f9c2 	bl	8005792 <mbedtls_mpi_gcd>
 800940e:	4604      	mov	r4, r0
 8009410:	2800      	cmp	r0, #0
 8009412:	d1a8      	bne.n	8009366 <mbedtls_rsa_deduce_primes+0xca>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 8009414:	2101      	movs	r1, #1
 8009416:	4638      	mov	r0, r7
 8009418:	f7fb fc00 	bl	8004c1c <mbedtls_mpi_cmp_int>
 800941c:	2801      	cmp	r0, #1
 800941e:	d10d      	bne.n	800943c <mbedtls_rsa_deduce_primes+0x1a0>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 8009420:	4631      	mov	r1, r6
 8009422:	4638      	mov	r0, r7
 8009424:	f7fb fbb4 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 8009428:	3001      	adds	r0, #1
 800942a:	d107      	bne.n	800943c <mbedtls_rsa_deduce_primes+0x1a0>
                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 800942c:	4621      	mov	r1, r4
 800942e:	463b      	mov	r3, r7
 8009430:	4632      	mov	r2, r6
 8009432:	4648      	mov	r0, r9
 8009434:	f7fb fd8f 	bl	8004f56 <mbedtls_mpi_div_mpi>
 8009438:	4604      	mov	r4, r0
 800943a:	e794      	b.n	8009366 <mbedtls_rsa_deduce_primes+0xca>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 800943c:	a905      	add	r1, sp, #20
 800943e:	2201      	movs	r2, #1
 8009440:	4608      	mov	r0, r1
 8009442:	f7fb fcf7 	bl	8004e34 <mbedtls_mpi_sub_int>
 8009446:	4604      	mov	r4, r0
 8009448:	2800      	cmp	r0, #0
 800944a:	d18c      	bne.n	8009366 <mbedtls_rsa_deduce_primes+0xca>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 800944c:	aa05      	add	r2, sp, #20
 800944e:	4611      	mov	r1, r2
 8009450:	4610      	mov	r0, r2
 8009452:	f7fb fd05 	bl	8004e60 <mbedtls_mpi_mul_mpi>
 8009456:	4604      	mov	r4, r0
 8009458:	2800      	cmp	r0, #0
 800945a:	d184      	bne.n	8009366 <mbedtls_rsa_deduce_primes+0xca>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 800945c:	a905      	add	r1, sp, #20
 800945e:	4632      	mov	r2, r6
 8009460:	4608      	mov	r0, r1
 8009462:	f7fb ff2d 	bl	80052c0 <mbedtls_mpi_mod_mpi>
 8009466:	4604      	mov	r4, r0
 8009468:	2800      	cmp	r0, #0
 800946a:	f47f af7c 	bne.w	8009366 <mbedtls_rsa_deduce_primes+0xca>
        for( iter = 1; iter <= order; ++iter )
 800946e:	f108 0801 	add.w	r8, r8, #1
 8009472:	fa1f f888 	uxth.w	r8, r8
 8009476:	45c2      	cmp	sl, r8
 8009478:	d2b0      	bcs.n	80093dc <mbedtls_rsa_deduce_primes+0x140>
 800947a:	e7b4      	b.n	80093e6 <mbedtls_rsa_deduce_primes+0x14a>
 800947c:	08013238 	.word	0x08013238

08009480 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 8009480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009484:	4604      	mov	r4, r0
 8009486:	b086      	sub	sp, #24
 8009488:	460f      	mov	r7, r1
 800948a:	4616      	mov	r6, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 800948c:	461d      	mov	r5, r3
 800948e:	b92b      	cbnz	r3, 800949c <mbedtls_rsa_deduce_private_exponent+0x1c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8009490:	f06f 0403 	mvn.w	r4, #3

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &L );

    return( ret );
}
 8009494:	4620      	mov	r0, r4
 8009496:	b006      	add	sp, #24
 8009498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 800949c:	2100      	movs	r1, #0
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fb fbbc 	bl	8004c1c <mbedtls_mpi_cmp_int>
 80094a4:	4680      	mov	r8, r0
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d1f2      	bne.n	8009490 <mbedtls_rsa_deduce_private_exponent+0x10>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80094aa:	2101      	movs	r1, #1
 80094ac:	4620      	mov	r0, r4
 80094ae:	f7fb fbb5 	bl	8004c1c <mbedtls_mpi_cmp_int>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	ddec      	ble.n	8009490 <mbedtls_rsa_deduce_private_exponent+0x10>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 80094b6:	2101      	movs	r1, #1
 80094b8:	4638      	mov	r0, r7
 80094ba:	f7fb fbaf 	bl	8004c1c <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80094be:	2800      	cmp	r0, #0
 80094c0:	dde6      	ble.n	8009490 <mbedtls_rsa_deduce_private_exponent+0x10>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 80094c2:	4641      	mov	r1, r8
 80094c4:	4630      	mov	r0, r6
 80094c6:	f7fb fba9 	bl	8004c1c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d0e0      	beq.n	8009490 <mbedtls_rsa_deduce_private_exponent+0x10>
    mbedtls_mpi_init( &K );
 80094ce:	4668      	mov	r0, sp
 80094d0:	f7fb f8f5 	bl	80046be <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 80094d4:	a803      	add	r0, sp, #12
 80094d6:	f7fb f8f2 	bl	80046be <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 80094da:	4621      	mov	r1, r4
 80094dc:	2201      	movs	r2, #1
 80094de:	4668      	mov	r0, sp
 80094e0:	f7fb fca8 	bl	8004e34 <mbedtls_mpi_sub_int>
 80094e4:	4604      	mov	r4, r0
 80094e6:	bb10      	cbnz	r0, 800952e <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 80094e8:	2201      	movs	r2, #1
 80094ea:	4639      	mov	r1, r7
 80094ec:	a803      	add	r0, sp, #12
 80094ee:	f7fb fca1 	bl	8004e34 <mbedtls_mpi_sub_int>
 80094f2:	4604      	mov	r4, r0
 80094f4:	b9d8      	cbnz	r0, 800952e <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 80094f6:	aa03      	add	r2, sp, #12
 80094f8:	4669      	mov	r1, sp
 80094fa:	4628      	mov	r0, r5
 80094fc:	f7fc f949 	bl	8005792 <mbedtls_mpi_gcd>
 8009500:	4604      	mov	r4, r0
 8009502:	b9a0      	cbnz	r0, 800952e <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 8009504:	aa03      	add	r2, sp, #12
 8009506:	4669      	mov	r1, sp
 8009508:	4668      	mov	r0, sp
 800950a:	f7fb fca9 	bl	8004e60 <mbedtls_mpi_mul_mpi>
 800950e:	4604      	mov	r4, r0
 8009510:	b968      	cbnz	r0, 800952e <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 8009512:	4601      	mov	r1, r0
 8009514:	462b      	mov	r3, r5
 8009516:	466a      	mov	r2, sp
 8009518:	4668      	mov	r0, sp
 800951a:	f7fb fd1c 	bl	8004f56 <mbedtls_mpi_div_mpi>
 800951e:	4604      	mov	r4, r0
 8009520:	b928      	cbnz	r0, 800952e <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 8009522:	466a      	mov	r2, sp
 8009524:	4631      	mov	r1, r6
 8009526:	4628      	mov	r0, r5
 8009528:	f7fc f9d6 	bl	80058d8 <mbedtls_mpi_inv_mod>
 800952c:	4604      	mov	r4, r0
    mbedtls_mpi_free( &K );
 800952e:	4668      	mov	r0, sp
 8009530:	f7fb f8cb 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 8009534:	a803      	add	r0, sp, #12
 8009536:	f7fb f8c8 	bl	80046ca <mbedtls_mpi_free>
    return( ret );
 800953a:	e7ab      	b.n	8009494 <mbedtls_rsa_deduce_private_exponent+0x14>

0800953c <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 800953c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009540:	4699      	mov	r9, r3
 8009542:	b087      	sub	sp, #28
 8009544:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 8009546:	4668      	mov	r0, sp
{
 8009548:	460d      	mov	r5, r1
 800954a:	4690      	mov	r8, r2
 800954c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800954e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    mbedtls_mpi_init( &K );
 8009550:	f7fb f8b5 	bl	80046be <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 8009554:	a803      	add	r0, sp, #12
 8009556:	f7fb f8b2 	bl	80046be <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 800955a:	f1b9 0f00 	cmp.w	r9, #0
 800955e:	d10d      	bne.n	800957c <mbedtls_rsa_validate_crt+0x40>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 8009560:	bb5f      	cbnz	r7, 80095ba <mbedtls_rsa_validate_crt+0x7e>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 8009562:	2e00      	cmp	r6, #0
 8009564:	d144      	bne.n	80095f0 <mbedtls_rsa_validate_crt+0xb4>
{
 8009566:	2400      	movs	r4, #0
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
 8009568:	4668      	mov	r0, sp
 800956a:	f7fb f8ae 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 800956e:	a803      	add	r0, sp, #12
 8009570:	f7fb f8ab 	bl	80046ca <mbedtls_mpi_free>

    return( ret );
}
 8009574:	4620      	mov	r0, r4
 8009576:	b007      	add	sp, #28
 8009578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( P == NULL )
 800957c:	2c00      	cmp	r4, #0
 800957e:	d05b      	beq.n	8009638 <mbedtls_rsa_validate_crt+0xfc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 8009580:	2201      	movs	r2, #1
 8009582:	4621      	mov	r1, r4
 8009584:	4668      	mov	r0, sp
 8009586:	f7fb fc55 	bl	8004e34 <mbedtls_mpi_sub_int>
 800958a:	2800      	cmp	r0, #0
 800958c:	d14b      	bne.n	8009626 <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 800958e:	4642      	mov	r2, r8
 8009590:	4649      	mov	r1, r9
 8009592:	a803      	add	r0, sp, #12
 8009594:	f7fb fc15 	bl	8004dc2 <mbedtls_mpi_sub_mpi>
 8009598:	2800      	cmp	r0, #0
 800959a:	d144      	bne.n	8009626 <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 800959c:	a903      	add	r1, sp, #12
 800959e:	466a      	mov	r2, sp
 80095a0:	4608      	mov	r0, r1
 80095a2:	f7fb fe8d 	bl	80052c0 <mbedtls_mpi_mod_mpi>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d13d      	bne.n	8009626 <mbedtls_rsa_validate_crt+0xea>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 80095aa:	4601      	mov	r1, r0
 80095ac:	a803      	add	r0, sp, #12
 80095ae:	f7fb fb35 	bl	8004c1c <mbedtls_mpi_cmp_int>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d0d4      	beq.n	8009560 <mbedtls_rsa_validate_crt+0x24>
{
 80095b6:	4c21      	ldr	r4, [pc, #132]	; (800963c <mbedtls_rsa_validate_crt+0x100>)
 80095b8:	e7d6      	b.n	8009568 <mbedtls_rsa_validate_crt+0x2c>
        if( Q == NULL )
 80095ba:	2d00      	cmp	r5, #0
 80095bc:	d03c      	beq.n	8009638 <mbedtls_rsa_validate_crt+0xfc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 80095be:	2201      	movs	r2, #1
 80095c0:	4629      	mov	r1, r5
 80095c2:	4668      	mov	r0, sp
 80095c4:	f7fb fc36 	bl	8004e34 <mbedtls_mpi_sub_int>
 80095c8:	bb68      	cbnz	r0, 8009626 <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 80095ca:	4642      	mov	r2, r8
 80095cc:	4639      	mov	r1, r7
 80095ce:	a803      	add	r0, sp, #12
 80095d0:	f7fb fbf7 	bl	8004dc2 <mbedtls_mpi_sub_mpi>
 80095d4:	bb38      	cbnz	r0, 8009626 <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 80095d6:	a903      	add	r1, sp, #12
 80095d8:	466a      	mov	r2, sp
 80095da:	4608      	mov	r0, r1
 80095dc:	f7fb fe70 	bl	80052c0 <mbedtls_mpi_mod_mpi>
 80095e0:	bb08      	cbnz	r0, 8009626 <mbedtls_rsa_validate_crt+0xea>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 80095e2:	4601      	mov	r1, r0
 80095e4:	a803      	add	r0, sp, #12
 80095e6:	f7fb fb19 	bl	8004c1c <mbedtls_mpi_cmp_int>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d1e3      	bne.n	80095b6 <mbedtls_rsa_validate_crt+0x7a>
 80095ee:	e7b8      	b.n	8009562 <mbedtls_rsa_validate_crt+0x26>
        if( P == NULL || Q == NULL )
 80095f0:	b314      	cbz	r4, 8009638 <mbedtls_rsa_validate_crt+0xfc>
 80095f2:	b30d      	cbz	r5, 8009638 <mbedtls_rsa_validate_crt+0xfc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 80095f4:	462a      	mov	r2, r5
 80095f6:	4631      	mov	r1, r6
 80095f8:	4668      	mov	r0, sp
 80095fa:	f7fb fc31 	bl	8004e60 <mbedtls_mpi_mul_mpi>
 80095fe:	b990      	cbnz	r0, 8009626 <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8009600:	2201      	movs	r2, #1
 8009602:	4669      	mov	r1, sp
 8009604:	4668      	mov	r0, sp
 8009606:	f7fb fc15 	bl	8004e34 <mbedtls_mpi_sub_int>
 800960a:	b960      	cbnz	r0, 8009626 <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 800960c:	4622      	mov	r2, r4
 800960e:	4669      	mov	r1, sp
 8009610:	4668      	mov	r0, sp
 8009612:	f7fb fe55 	bl	80052c0 <mbedtls_mpi_mod_mpi>
 8009616:	b930      	cbnz	r0, 8009626 <mbedtls_rsa_validate_crt+0xea>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 8009618:	4601      	mov	r1, r0
 800961a:	4668      	mov	r0, sp
 800961c:	f7fb fafe 	bl	8004c1c <mbedtls_mpi_cmp_int>
 8009620:	2800      	cmp	r0, #0
 8009622:	d1c8      	bne.n	80095b6 <mbedtls_rsa_validate_crt+0x7a>
 8009624:	e79f      	b.n	8009566 <mbedtls_rsa_validate_crt+0x2a>
    if( ret != 0 &&
 8009626:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 800962a:	d0c4      	beq.n	80095b6 <mbedtls_rsa_validate_crt+0x7a>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 800962c:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 8009630:	d002      	beq.n	8009638 <mbedtls_rsa_validate_crt+0xfc>
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8009632:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
 8009636:	e797      	b.n	8009568 <mbedtls_rsa_validate_crt+0x2c>
{
 8009638:	4c01      	ldr	r4, [pc, #4]	; (8009640 <mbedtls_rsa_validate_crt+0x104>)
 800963a:	e795      	b.n	8009568 <mbedtls_rsa_validate_crt+0x2c>
 800963c:	ffffbe00 	.word	0xffffbe00
 8009640:	ffffbf80 	.word	0xffffbf80

08009644 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 8009644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009648:	4688      	mov	r8, r1
 800964a:	b087      	sub	sp, #28
 800964c:	4606      	mov	r6, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 800964e:	4668      	mov	r0, sp
{
 8009650:	4691      	mov	r9, r2
 8009652:	461d      	mov	r5, r3
 8009654:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    mbedtls_mpi_init( &K );
 8009656:	f7fb f832 	bl	80046be <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 800965a:	a803      	add	r0, sp, #12
 800965c:	f7fb f82f 	bl	80046be <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 8009660:	f1b8 0f00 	cmp.w	r8, #0
 8009664:	d046      	beq.n	80096f4 <mbedtls_rsa_validate_params+0xb0>
 8009666:	f1b9 0f00 	cmp.w	r9, #0
 800966a:	d043      	beq.n	80096f4 <mbedtls_rsa_validate_params+0xb0>
 800966c:	b996      	cbnz	r6, 8009694 <mbedtls_rsa_validate_params+0x50>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 800966e:	2d00      	cmp	r5, #0
 8009670:	d14a      	bne.n	8009708 <mbedtls_rsa_validate_params+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8009672:	2400      	movs	r4, #0
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
 8009674:	4668      	mov	r0, sp
 8009676:	f7fb f828 	bl	80046ca <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 800967a:	a803      	add	r0, sp, #12
 800967c:	f7fb f825 	bl	80046ca <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 8009680:	b124      	cbz	r4, 800968c <mbedtls_rsa_validate_params+0x48>
 8009682:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 8009686:	d001      	beq.n	800968c <mbedtls_rsa_validate_params+0x48>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8009688:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
}
 800968c:	4620      	mov	r0, r4
 800968e:	b007      	add	sp, #28
 8009690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 8009694:	464a      	mov	r2, r9
 8009696:	4641      	mov	r1, r8
 8009698:	4668      	mov	r0, sp
 800969a:	f7fb fbe1 	bl	8004e60 <mbedtls_mpi_mul_mpi>
 800969e:	4604      	mov	r4, r0
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d1e7      	bne.n	8009674 <mbedtls_rsa_validate_params+0x30>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 80096a4:	2101      	movs	r1, #1
 80096a6:	4630      	mov	r0, r6
 80096a8:	f7fb fab8 	bl	8004c1c <mbedtls_mpi_cmp_int>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	dd1f      	ble.n	80096f0 <mbedtls_rsa_validate_params+0xac>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 80096b0:	4631      	mov	r1, r6
 80096b2:	4668      	mov	r0, sp
 80096b4:	f7fb fa6c 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 80096b8:	b9d0      	cbnz	r0, 80096f0 <mbedtls_rsa_validate_params+0xac>
    if( N != NULL && D != NULL && E != NULL )
 80096ba:	2d00      	cmp	r5, #0
 80096bc:	d0d9      	beq.n	8009672 <mbedtls_rsa_validate_params+0x2e>
 80096be:	b1e7      	cbz	r7, 80096fa <mbedtls_rsa_validate_params+0xb6>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80096c0:	2101      	movs	r1, #1
 80096c2:	4628      	mov	r0, r5
 80096c4:	f7fb faaa 	bl	8004c1c <mbedtls_mpi_cmp_int>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	dd11      	ble.n	80096f0 <mbedtls_rsa_validate_params+0xac>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80096cc:	2101      	movs	r1, #1
 80096ce:	4638      	mov	r0, r7
 80096d0:	f7fb faa4 	bl	8004c1c <mbedtls_mpi_cmp_int>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80096d4:	2800      	cmp	r0, #0
 80096d6:	dd0b      	ble.n	80096f0 <mbedtls_rsa_validate_params+0xac>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80096d8:	4631      	mov	r1, r6
 80096da:	4628      	mov	r0, r5
 80096dc:	f7fb fa58 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80096e0:	2800      	cmp	r0, #0
 80096e2:	da05      	bge.n	80096f0 <mbedtls_rsa_validate_params+0xac>
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 80096e4:	4631      	mov	r1, r6
 80096e6:	4638      	mov	r0, r7
 80096e8:	f7fb fa52 	bl	8004b90 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80096ec:	2800      	cmp	r0, #0
 80096ee:	db04      	blt.n	80096fa <mbedtls_rsa_validate_params+0xb6>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80096f0:	4c36      	ldr	r4, [pc, #216]	; (80097cc <mbedtls_rsa_validate_params+0x188>)
            goto cleanup;
 80096f2:	e7bf      	b.n	8009674 <mbedtls_rsa_validate_params+0x30>
    if( N != NULL && D != NULL && E != NULL )
 80096f4:	b10e      	cbz	r6, 80096fa <mbedtls_rsa_validate_params+0xb6>
 80096f6:	2d00      	cmp	r5, #0
 80096f8:	d1e1      	bne.n	80096be <mbedtls_rsa_validate_params+0x7a>
    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 80096fa:	f1b8 0f00 	cmp.w	r8, #0
 80096fe:	d0b8      	beq.n	8009672 <mbedtls_rsa_validate_params+0x2e>
 8009700:	f1b9 0f00 	cmp.w	r9, #0
 8009704:	d0b5      	beq.n	8009672 <mbedtls_rsa_validate_params+0x2e>
 8009706:	e7b2      	b.n	800966e <mbedtls_rsa_validate_params+0x2a>
 8009708:	2f00      	cmp	r7, #0
 800970a:	d0b2      	beq.n	8009672 <mbedtls_rsa_validate_params+0x2e>
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 800970c:	2101      	movs	r1, #1
 800970e:	4640      	mov	r0, r8
 8009710:	f7fb fa84 	bl	8004c1c <mbedtls_mpi_cmp_int>
 8009714:	2800      	cmp	r0, #0
 8009716:	ddeb      	ble.n	80096f0 <mbedtls_rsa_validate_params+0xac>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 8009718:	2101      	movs	r1, #1
 800971a:	4648      	mov	r0, r9
 800971c:	f7fb fa7e 	bl	8004c1c <mbedtls_mpi_cmp_int>
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8009720:	2800      	cmp	r0, #0
 8009722:	dde5      	ble.n	80096f0 <mbedtls_rsa_validate_params+0xac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 8009724:	463a      	mov	r2, r7
 8009726:	4629      	mov	r1, r5
 8009728:	4668      	mov	r0, sp
 800972a:	f7fb fb99 	bl	8004e60 <mbedtls_mpi_mul_mpi>
 800972e:	4604      	mov	r4, r0
 8009730:	2800      	cmp	r0, #0
 8009732:	d19f      	bne.n	8009674 <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8009734:	2201      	movs	r2, #1
 8009736:	4669      	mov	r1, sp
 8009738:	4668      	mov	r0, sp
 800973a:	f7fb fb7b 	bl	8004e34 <mbedtls_mpi_sub_int>
 800973e:	4604      	mov	r4, r0
 8009740:	2800      	cmp	r0, #0
 8009742:	d197      	bne.n	8009674 <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 8009744:	2201      	movs	r2, #1
 8009746:	4641      	mov	r1, r8
 8009748:	a803      	add	r0, sp, #12
 800974a:	f7fb fb73 	bl	8004e34 <mbedtls_mpi_sub_int>
 800974e:	4604      	mov	r4, r0
 8009750:	2800      	cmp	r0, #0
 8009752:	d18f      	bne.n	8009674 <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 8009754:	aa03      	add	r2, sp, #12
 8009756:	4669      	mov	r1, sp
 8009758:	4668      	mov	r0, sp
 800975a:	f7fb fdb1 	bl	80052c0 <mbedtls_mpi_mod_mpi>
 800975e:	4604      	mov	r4, r0
 8009760:	2800      	cmp	r0, #0
 8009762:	d187      	bne.n	8009674 <mbedtls_rsa_validate_params+0x30>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 8009764:	4601      	mov	r1, r0
 8009766:	4668      	mov	r0, sp
 8009768:	f7fb fa58 	bl	8004c1c <mbedtls_mpi_cmp_int>
 800976c:	2800      	cmp	r0, #0
 800976e:	d1bf      	bne.n	80096f0 <mbedtls_rsa_validate_params+0xac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 8009770:	463a      	mov	r2, r7
 8009772:	4629      	mov	r1, r5
 8009774:	4668      	mov	r0, sp
 8009776:	f7fb fb73 	bl	8004e60 <mbedtls_mpi_mul_mpi>
 800977a:	4604      	mov	r4, r0
 800977c:	2800      	cmp	r0, #0
 800977e:	f47f af79 	bne.w	8009674 <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8009782:	2201      	movs	r2, #1
 8009784:	4669      	mov	r1, sp
 8009786:	4668      	mov	r0, sp
 8009788:	f7fb fb54 	bl	8004e34 <mbedtls_mpi_sub_int>
 800978c:	4604      	mov	r4, r0
 800978e:	2800      	cmp	r0, #0
 8009790:	f47f af70 	bne.w	8009674 <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 8009794:	2201      	movs	r2, #1
 8009796:	4649      	mov	r1, r9
 8009798:	a803      	add	r0, sp, #12
 800979a:	f7fb fb4b 	bl	8004e34 <mbedtls_mpi_sub_int>
 800979e:	4604      	mov	r4, r0
 80097a0:	2800      	cmp	r0, #0
 80097a2:	f47f af67 	bne.w	8009674 <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 80097a6:	aa03      	add	r2, sp, #12
 80097a8:	4669      	mov	r1, sp
 80097aa:	4668      	mov	r0, sp
 80097ac:	f7fb fd88 	bl	80052c0 <mbedtls_mpi_mod_mpi>
 80097b0:	4604      	mov	r4, r0
 80097b2:	2800      	cmp	r0, #0
 80097b4:	f47f af5e 	bne.w	8009674 <mbedtls_rsa_validate_params+0x30>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 80097b8:	4601      	mov	r1, r0
 80097ba:	4668      	mov	r0, sp
 80097bc:	f7fb fa2e 	bl	8004c1c <mbedtls_mpi_cmp_int>
 80097c0:	4604      	mov	r4, r0
 80097c2:	2800      	cmp	r0, #0
 80097c4:	f43f af56 	beq.w	8009674 <mbedtls_rsa_validate_params+0x30>
 80097c8:	e792      	b.n	80096f0 <mbedtls_rsa_validate_params+0xac>
 80097ca:	bf00      	nop
 80097cc:	ffffbe00 	.word	0xffffbe00

080097d0 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 80097d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097d4:	469a      	mov	sl, r3
 80097d6:	4607      	mov	r7, r0
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 80097d8:	a801      	add	r0, sp, #4
{
 80097da:	460e      	mov	r6, r1
 80097dc:	4691      	mov	r9, r2
 80097de:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80097e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    mbedtls_mpi_init( &K );
 80097e4:	f7fa ff6b 	bl	80046be <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 80097e8:	f1ba 0f00 	cmp.w	sl, #0
 80097ec:	d105      	bne.n	80097fa <mbedtls_rsa_deduce_crt+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 80097ee:	f1b8 0f00 	cmp.w	r8, #0
 80097f2:	d118      	bne.n	8009826 <mbedtls_rsa_deduce_crt+0x56>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 80097f4:	bb45      	cbnz	r5, 8009848 <mbedtls_rsa_deduce_crt+0x78>
 80097f6:	462c      	mov	r4, r5
 80097f8:	e00e      	b.n	8009818 <mbedtls_rsa_deduce_crt+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 80097fa:	2201      	movs	r2, #1
 80097fc:	4639      	mov	r1, r7
 80097fe:	a801      	add	r0, sp, #4
 8009800:	f7fb fb18 	bl	8004e34 <mbedtls_mpi_sub_int>
 8009804:	4604      	mov	r4, r0
 8009806:	b938      	cbnz	r0, 8009818 <mbedtls_rsa_deduce_crt+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 8009808:	aa01      	add	r2, sp, #4
 800980a:	4649      	mov	r1, r9
 800980c:	4650      	mov	r0, sl
 800980e:	f7fb fd57 	bl	80052c0 <mbedtls_mpi_mod_mpi>
 8009812:	4604      	mov	r4, r0
 8009814:	2800      	cmp	r0, #0
 8009816:	d0ea      	beq.n	80097ee <mbedtls_rsa_deduce_crt+0x1e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
    }

cleanup:
    mbedtls_mpi_free( &K );
 8009818:	a801      	add	r0, sp, #4
 800981a:	f7fa ff56 	bl	80046ca <mbedtls_mpi_free>

    return( ret );
}
 800981e:	4620      	mov	r0, r4
 8009820:	b004      	add	sp, #16
 8009822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 8009826:	2201      	movs	r2, #1
 8009828:	4631      	mov	r1, r6
 800982a:	a801      	add	r0, sp, #4
 800982c:	f7fb fb02 	bl	8004e34 <mbedtls_mpi_sub_int>
 8009830:	4604      	mov	r4, r0
 8009832:	2800      	cmp	r0, #0
 8009834:	d1f0      	bne.n	8009818 <mbedtls_rsa_deduce_crt+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 8009836:	aa01      	add	r2, sp, #4
 8009838:	4649      	mov	r1, r9
 800983a:	4640      	mov	r0, r8
 800983c:	f7fb fd40 	bl	80052c0 <mbedtls_mpi_mod_mpi>
 8009840:	4604      	mov	r4, r0
 8009842:	2800      	cmp	r0, #0
 8009844:	d0d6      	beq.n	80097f4 <mbedtls_rsa_deduce_crt+0x24>
 8009846:	e7e7      	b.n	8009818 <mbedtls_rsa_deduce_crt+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 8009848:	463a      	mov	r2, r7
 800984a:	4631      	mov	r1, r6
 800984c:	4628      	mov	r0, r5
 800984e:	f7fc f843 	bl	80058d8 <mbedtls_mpi_inv_mod>
 8009852:	4604      	mov	r4, r0
 8009854:	e7e0      	b.n	8009818 <mbedtls_rsa_deduce_crt+0x48>

08009856 <mbedtls_sha1_init>:

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    SHA1_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
 8009856:	225c      	movs	r2, #92	; 0x5c
 8009858:	2100      	movs	r1, #0
 800985a:	f008 bad5 	b.w	8011e08 <memset>

0800985e <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
 800985e:	b110      	cbz	r0, 8009866 <mbedtls_sha1_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
 8009860:	215c      	movs	r1, #92	; 0x5c
 8009862:	f7fe be5d 	b.w	8008520 <mbedtls_platform_zeroize>
 8009866:	4770      	bx	lr

08009868 <mbedtls_sha1_clone>:
}

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
 8009868:	b508      	push	{r3, lr}
    SHA1_VALIDATE( dst != NULL );
    SHA1_VALIDATE( src != NULL );

    *dst = *src;
 800986a:	225c      	movs	r2, #92	; 0x5c
 800986c:	f008 faa7 	bl	8011dbe <memcpy>
 8009870:	bd08      	pop	{r3, pc}
	...

08009874 <mbedtls_sha1_starts_ret>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
 8009874:	4603      	mov	r3, r0
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
 8009876:	2000      	movs	r0, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 8009878:	4a09      	ldr	r2, [pc, #36]	; (80098a0 <mbedtls_sha1_starts_ret+0x2c>)
    ctx->total[0] = 0;
 800987a:	6018      	str	r0, [r3, #0]
    ctx->state[0] = 0x67452301;
 800987c:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 800987e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8009882:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 8009884:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
 8009888:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
 800988c:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
 8009890:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 8009892:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
 8009896:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
 8009898:	4a02      	ldr	r2, [pc, #8]	; (80098a4 <mbedtls_sha1_starts_ret+0x30>)
    ctx->total[1] = 0;
 800989a:	6058      	str	r0, [r3, #4]
    ctx->state[4] = 0xC3D2E1F0;
 800989c:	619a      	str	r2, [r3, #24]

    return( 0 );
}
 800989e:	4770      	bx	lr
 80098a0:	67452301 	.word	0x67452301
 80098a4:	c3d2e1f0 	.word	0xc3d2e1f0

080098a8 <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 80098a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t temp, W[16], A, B, C, D, E;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
 80098ac:	784f      	ldrb	r7, [r1, #1]
 80098ae:	780b      	ldrb	r3, [r1, #0]
 80098b0:	043f      	lsls	r7, r7, #16
 80098b2:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
 80098b6:	78cb      	ldrb	r3, [r1, #3]
{
 80098b8:	b097      	sub	sp, #92	; 0x5c
    GET_UINT32_BE( W[ 0], data,  0 );
 80098ba:	431f      	orrs	r7, r3
 80098bc:	788b      	ldrb	r3, [r1, #2]
    GET_UINT32_BE( W[ 1], data,  4 );
 80098be:	794a      	ldrb	r2, [r1, #5]
    GET_UINT32_BE( W[ 0], data,  0 );
 80098c0:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
 80098c4:	9305      	str	r3, [sp, #20]
    GET_UINT32_BE( W[ 1], data,  4 );
 80098c6:	790b      	ldrb	r3, [r1, #4]
 80098c8:	0412      	lsls	r2, r2, #16
 80098ca:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 80098ce:	79cb      	ldrb	r3, [r1, #7]
    GET_UINT32_BE( W[ 2], data,  8 );
 80098d0:	7a4d      	ldrb	r5, [r1, #9]
    GET_UINT32_BE( W[ 1], data,  4 );
 80098d2:	431a      	orrs	r2, r3
 80098d4:	798b      	ldrb	r3, [r1, #6]
    GET_UINT32_BE( W[ 2], data,  8 );
 80098d6:	042d      	lsls	r5, r5, #16
    GET_UINT32_BE( W[ 1], data,  4 );
 80098d8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80098dc:	9306      	str	r3, [sp, #24]
    GET_UINT32_BE( W[ 2], data,  8 );
 80098de:	7a0b      	ldrb	r3, [r1, #8]
    GET_UINT32_BE( W[ 3], data, 12 );
 80098e0:	f891 800d 	ldrb.w	r8, [r1, #13]
    GET_UINT32_BE( W[ 2], data,  8 );
 80098e4:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 80098e8:	7acb      	ldrb	r3, [r1, #11]
    GET_UINT32_BE( W[ 3], data, 12 );
 80098ea:	ea4f 4808 	mov.w	r8, r8, lsl #16
    GET_UINT32_BE( W[ 2], data,  8 );
 80098ee:	431d      	orrs	r5, r3
 80098f0:	7a8b      	ldrb	r3, [r1, #10]
    GET_UINT32_BE( W[ 3], data, 12 );
 80098f2:	7b8e      	ldrb	r6, [r1, #14]
    GET_UINT32_BE( W[ 2], data,  8 );
 80098f4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    GET_UINT32_BE( W[ 3], data, 12 );
 80098f8:	7b0b      	ldrb	r3, [r1, #12]
    GET_UINT32_BE( W[ 4], data, 16 );
 80098fa:	7c0a      	ldrb	r2, [r1, #16]
    GET_UINT32_BE( W[ 3], data, 12 );
 80098fc:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8009900:	7bcb      	ldrb	r3, [r1, #15]
    GET_UINT32_BE( W[ 5], data, 20 );
 8009902:	7d4c      	ldrb	r4, [r1, #21]
    GET_UINT32_BE( W[ 3], data, 12 );
 8009904:	ea48 0803 	orr.w	r8, r8, r3
 8009908:	ea48 2306 	orr.w	r3, r8, r6, lsl #8
 800990c:	9308      	str	r3, [sp, #32]
    GET_UINT32_BE( W[ 4], data, 16 );
 800990e:	7c4b      	ldrb	r3, [r1, #17]
    GET_UINT32_BE( W[ 5], data, 20 );
 8009910:	0424      	lsls	r4, r4, #16
    GET_UINT32_BE( W[ 4], data, 16 );
 8009912:	041b      	lsls	r3, r3, #16
 8009914:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009918:	7cca      	ldrb	r2, [r1, #19]
{
 800991a:	9001      	str	r0, [sp, #4]
    GET_UINT32_BE( W[ 4], data, 16 );
 800991c:	4313      	orrs	r3, r2
 800991e:	7c8a      	ldrb	r2, [r1, #18]
 8009920:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009924:	930d      	str	r3, [sp, #52]	; 0x34
    GET_UINT32_BE( W[ 5], data, 20 );
 8009926:	7d0b      	ldrb	r3, [r1, #20]
 8009928:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 800992c:	7dcb      	ldrb	r3, [r1, #23]
 800992e:	431c      	orrs	r4, r3
 8009930:	7d8b      	ldrb	r3, [r1, #22]
 8009932:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8009936:	930e      	str	r3, [sp, #56]	; 0x38
    GET_UINT32_BE( W[ 6], data, 24 );
 8009938:	7e0b      	ldrb	r3, [r1, #24]
 800993a:	7e48      	ldrb	r0, [r1, #25]
    GET_UINT32_BE( W[ 7], data, 28 );
 800993c:	7f0a      	ldrb	r2, [r1, #28]
    GET_UINT32_BE( W[ 6], data, 24 );
 800993e:	0400      	lsls	r0, r0, #16
 8009940:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8009944:	7ecb      	ldrb	r3, [r1, #27]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
 8009946:	f891 7025 	ldrb.w	r7, [r1, #37]	; 0x25
    GET_UINT32_BE( W[ 6], data, 24 );
 800994a:	4318      	orrs	r0, r3
 800994c:	7e8b      	ldrb	r3, [r1, #26]
    GET_UINT32_BE( W[ 9], data, 36 );
 800994e:	043f      	lsls	r7, r7, #16
    GET_UINT32_BE( W[ 6], data, 24 );
 8009950:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
 8009954:	930f      	str	r3, [sp, #60]	; 0x3c
    GET_UINT32_BE( W[ 7], data, 28 );
 8009956:	7f4b      	ldrb	r3, [r1, #29]
    GET_UINT32_BE( W[10], data, 40 );
 8009958:	f891 c029 	ldrb.w	ip, [r1, #41]	; 0x29
    GET_UINT32_BE( W[ 7], data, 28 );
 800995c:	041b      	lsls	r3, r3, #16
 800995e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009962:	7fca      	ldrb	r2, [r1, #31]
    GET_UINT32_BE( W[10], data, 40 );
 8009964:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    GET_UINT32_BE( W[ 7], data, 28 );
 8009968:	4313      	orrs	r3, r2
 800996a:	7f8a      	ldrb	r2, [r1, #30]
    GET_UINT32_BE( W[11], data, 44 );
    GET_UINT32_BE( W[12], data, 48 );
 800996c:	f891 e030 	ldrb.w	lr, [r1, #48]	; 0x30
    GET_UINT32_BE( W[ 7], data, 28 );
 8009970:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    GET_UINT32_BE( W[ 8], data, 32 );
 8009974:	f891 2021 	ldrb.w	r2, [r1, #33]	; 0x21
    GET_UINT32_BE( W[ 7], data, 28 );
 8009978:	9310      	str	r3, [sp, #64]	; 0x40
    GET_UINT32_BE( W[ 8], data, 32 );
 800997a:	f891 3020 	ldrb.w	r3, [r1, #32]
 800997e:	0412      	lsls	r2, r2, #16
 8009980:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8009984:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
 8009988:	431a      	orrs	r2, r3
 800998a:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
 800998e:	ea42 2803 	orr.w	r8, r2, r3, lsl #8
    GET_UINT32_BE( W[ 9], data, 36 );
 8009992:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 8009996:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
 800999a:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
 800999e:	431f      	orrs	r7, r3
 80099a0:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80099a4:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
 80099a8:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_BE( W[10], data, 40 );
 80099aa:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80099ae:	ea4c 6c03 	orr.w	ip, ip, r3, lsl #24
 80099b2:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 80099b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80099ba:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 80099be:	ea4c 2303 	orr.w	r3, ip, r3, lsl #8
 80099c2:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_BE( W[11], data, 44 );
 80099c4:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 80099c8:	f891 c02c 	ldrb.w	ip, [r1, #44]	; 0x2c
 80099cc:	041b      	lsls	r3, r3, #16
 80099ce:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80099d2:	f891 c02f 	ldrb.w	ip, [r1, #47]	; 0x2f
 80099d6:	ea43 0c0c 	orr.w	ip, r3, ip
 80099da:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
 80099de:	ea4c 2303 	orr.w	r3, ip, r3, lsl #8
 80099e2:	930b      	str	r3, [sp, #44]	; 0x2c
    GET_UINT32_BE( W[12], data, 48 );
 80099e4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 80099e8:	041b      	lsls	r3, r3, #16
 80099ea:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 80099ee:	f891 e033 	ldrb.w	lr, [r1, #51]	; 0x33
 80099f2:	ea43 0e0e 	orr.w	lr, r3, lr
 80099f6:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80099fa:	ea4e 2303 	orr.w	r3, lr, r3, lsl #8
 80099fe:	930c      	str	r3, [sp, #48]	; 0x30
    GET_UINT32_BE( W[13], data, 52 );
 8009a00:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8009a04:	f891 e034 	ldrb.w	lr, [r1, #52]	; 0x34
 8009a08:	041b      	lsls	r3, r3, #16
 8009a0a:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8009a0e:	f891 e037 	ldrb.w	lr, [r1, #55]	; 0x37
    GET_UINT32_BE( W[14], data, 56 );
    GET_UINT32_BE( W[15], data, 60 );
 8009a12:	f891 703c 	ldrb.w	r7, [r1, #60]	; 0x3c
    GET_UINT32_BE( W[13], data, 52 );
 8009a16:	ea43 0e0e 	orr.w	lr, r3, lr
 8009a1a:	f891 3036 	ldrb.w	r3, [r1, #54]	; 0x36
 8009a1e:	ea4e 2303 	orr.w	r3, lr, r3, lsl #8
 8009a22:	9300      	str	r3, [sp, #0]
    GET_UINT32_BE( W[14], data, 56 );
 8009a24:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 8009a28:	f891 e038 	ldrb.w	lr, [r1, #56]	; 0x38
 8009a2c:	041b      	lsls	r3, r3, #16
 8009a2e:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8009a32:	f891 e03b 	ldrb.w	lr, [r1, #59]	; 0x3b
 8009a36:	ea43 0e0e 	orr.w	lr, r3, lr
 8009a3a:	f891 303a 	ldrb.w	r3, [r1, #58]	; 0x3a
 8009a3e:	ea4e 2303 	orr.w	r3, lr, r3, lsl #8
 8009a42:	9302      	str	r3, [sp, #8]
    GET_UINT32_BE( W[15], data, 60 );
 8009a44:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 8009a48:	041b      	lsls	r3, r3, #16
 8009a4a:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8009a4e:	f891 703f 	ldrb.w	r7, [r1, #63]	; 0x3f
 8009a52:	431f      	orrs	r7, r3
 8009a54:	f891 303e 	ldrb.w	r3, [r1, #62]	; 0x3e
 8009a58:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
 8009a5c:	9303      	str	r3, [sp, #12]
#define P(a,b,c,d,e,x)                                  \
{                                                       \
    e += S(a,5) + F(b,c,d) + K + x; b = S(b,30);        \
}

    A = ctx->state[0];
 8009a5e:	9b01      	ldr	r3, [sp, #4]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	9312      	str	r3, [sp, #72]	; 0x48
    B = ctx->state[1];
 8009a64:	9b01      	ldr	r3, [sp, #4]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	9314      	str	r3, [sp, #80]	; 0x50
    C = ctx->state[2];
 8009a6a:	9b01      	ldr	r3, [sp, #4]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	9304      	str	r3, [sp, #16]
    D = ctx->state[3];
 8009a70:	9b01      	ldr	r3, [sp, #4]
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	9313      	str	r3, [sp, #76]	; 0x4c
    E = ctx->state[4];
 8009a76:	9b01      	ldr	r3, [sp, #4]

#define F(x,y,z) (z ^ (x & (y ^ z)))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
 8009a78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    E = ctx->state[4];
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	9315      	str	r3, [sp, #84]	; 0x54
    P( A, B, C, D, E, W[0]  );
 8009a7e:	9b04      	ldr	r3, [sp, #16]
 8009a80:	ea83 0c02 	eor.w	ip, r3, r2
 8009a84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a86:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009a88:	ea0c 0c03 	and.w	ip, ip, r3
 8009a8c:	ea8c 0c02 	eor.w	ip, ip, r2
 8009a90:	4bdb      	ldr	r3, [pc, #876]	; (8009e00 <mbedtls_internal_sha1_process+0x558>)
 8009a92:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009a94:	9c04      	ldr	r4, [sp, #16]
 8009a96:	441a      	add	r2, r3
 8009a98:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8009a9c:	4494      	add	ip, r2
 8009a9e:	9a05      	ldr	r2, [sp, #20]
 8009aa0:	441c      	add	r4, r3
 8009aa2:	4494      	add	ip, r2
 8009aa4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009aa6:	442c      	add	r4, r5
 8009aa8:	ea4f 00b2 	mov.w	r0, r2, ror #2
    P( E, A, B, C, D, W[1]  );
 8009aac:	9a04      	ldr	r2, [sp, #16]
 8009aae:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8009ab0:	4042      	eors	r2, r0
 8009ab2:	400a      	ands	r2, r1
 8009ab4:	9904      	ldr	r1, [sp, #16]
 8009ab6:	441f      	add	r7, r3
 8009ab8:	404a      	eors	r2, r1
 8009aba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009abc:	4419      	add	r1, r3
 8009abe:	440a      	add	r2, r1
 8009ac0:	9906      	ldr	r1, [sp, #24]
 8009ac2:	440a      	add	r2, r1
 8009ac4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009ac6:	eb02 62fc 	add.w	r2, r2, ip, ror #27
 8009aca:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, W[2]  );
 8009ace:	ea80 0e01 	eor.w	lr, r0, r1
 8009ad2:	ea0e 0e0c 	and.w	lr, lr, ip
 8009ad6:	ea8e 0e00 	eor.w	lr, lr, r0
 8009ada:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, W[3]  );
 8009ade:	ea81 060c 	eor.w	r6, r1, ip
 8009ae2:	44a6      	add	lr, r4
 8009ae4:	9c08      	ldr	r4, [sp, #32]
 8009ae6:	4016      	ands	r6, r2
 8009ae8:	4418      	add	r0, r3
    P( D, E, A, B, C, W[2]  );
 8009aea:	eb0e 6ef2 	add.w	lr, lr, r2, ror #27
 8009aee:	4420      	add	r0, r4
    P( C, D, E, A, B, W[3]  );
 8009af0:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8009af4:	404e      	eors	r6, r1
    P( B, C, D, E, A, W[4]  );
 8009af6:	ea8c 0402 	eor.w	r4, ip, r2
 8009afa:	4406      	add	r6, r0
 8009afc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009afe:	ea04 040e 	and.w	r4, r4, lr
 8009b02:	4419      	add	r1, r3
 8009b04:	4401      	add	r1, r0
 8009b06:	ea84 040c 	eor.w	r4, r4, ip
    P( C, D, E, A, B, W[3]  );
 8009b0a:	eb06 66fe 	add.w	r6, r6, lr, ror #27
 8009b0e:	440c      	add	r4, r1
    P( B, C, D, E, A, W[4]  );
 8009b10:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8009b14:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( A, B, C, D, E, W[5]  );
 8009b16:	ea82 000e 	eor.w	r0, r2, lr
    P( B, C, D, E, A, W[4]  );
 8009b1a:	eb04 64f6 	add.w	r4, r4, r6, ror #27
 8009b1e:	4419      	add	r1, r3
    P( A, B, C, D, E, W[5]  );
 8009b20:	4030      	ands	r0, r6
 8009b22:	ea4f 06b6 	mov.w	r6, r6, ror #2
 8009b26:	448c      	add	ip, r1
 8009b28:	4050      	eors	r0, r2
    P( E, A, B, C, D, W[6]  );
 8009b2a:	ea8e 0106 	eor.w	r1, lr, r6
 8009b2e:	4460      	add	r0, ip
 8009b30:	4021      	ands	r1, r4
    P( A, B, C, D, E, W[5]  );
 8009b32:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( E, A, B, C, D, W[6]  );
 8009b36:	ea81 010e 	eor.w	r1, r1, lr
 8009b3a:	ea4f 04b4 	mov.w	r4, r4, ror #2
 8009b3e:	443a      	add	r2, r7
 8009b40:	440a      	add	r2, r1
 8009b42:	9f10      	ldr	r7, [sp, #64]	; 0x40
    P( D, E, A, B, C, W[7]  );
 8009b44:	ea86 0104 	eor.w	r1, r6, r4
    P( E, A, B, C, D, W[6]  );
 8009b48:	eb02 62f0 	add.w	r2, r2, r0, ror #27
    P( D, E, A, B, C, W[7]  );
 8009b4c:	4001      	ands	r1, r0
 8009b4e:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8009b52:	441f      	add	r7, r3
    P( C, D, E, A, B, W[8]  );
 8009b54:	ea84 0b00 	eor.w	fp, r4, r0
 8009b58:	44be      	add	lr, r7
    P( D, E, A, B, C, W[7]  );
 8009b5a:	4071      	eors	r1, r6
 8009b5c:	eb08 0703 	add.w	r7, r8, r3
    P( C, D, E, A, B, W[8]  );
 8009b60:	ea0b 0b02 	and.w	fp, fp, r2
 8009b64:	443e      	add	r6, r7
 8009b66:	4471      	add	r1, lr
 8009b68:	ea8b 0b04 	eor.w	fp, fp, r4
    P( D, E, A, B, C, W[7]  );
 8009b6c:	eb01 61f2 	add.w	r1, r1, r2, ror #27
 8009b70:	44b3      	add	fp, r6
    P( C, D, E, A, B, W[8]  );
 8009b72:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8009b76:	9e09      	ldr	r6, [sp, #36]	; 0x24
    P( B, C, D, E, A, W[9]  );
 8009b78:	ea80 0702 	eor.w	r7, r0, r2
 8009b7c:	441e      	add	r6, r3
 8009b7e:	400f      	ands	r7, r1
 8009b80:	4434      	add	r4, r6
 8009b82:	4047      	eors	r7, r0
    P( C, D, E, A, B, W[8]  );
 8009b84:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
 8009b88:	4427      	add	r7, r4
    P( B, C, D, E, A, W[9]  );
 8009b8a:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8009b8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( A, B, C, D, E, W[10] );
 8009b90:	ea82 0a01 	eor.w	sl, r2, r1
 8009b94:	441c      	add	r4, r3
 8009b96:	ea0a 0a0b 	and.w	sl, sl, fp
 8009b9a:	4420      	add	r0, r4
 8009b9c:	ea8a 0a02 	eor.w	sl, sl, r2
    P( B, C, D, E, A, W[9]  );
 8009ba0:	eb07 67fb 	add.w	r7, r7, fp, ror #27
 8009ba4:	4482      	add	sl, r0
    P( A, B, C, D, E, W[10] );
 8009ba6:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 8009baa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    P( E, A, B, C, D, W[11] );
 8009bac:	ea81 090b 	eor.w	r9, r1, fp
 8009bb0:	4418      	add	r0, r3
 8009bb2:	ea09 0907 	and.w	r9, r9, r7
 8009bb6:	4402      	add	r2, r0
 8009bb8:	ea89 0901 	eor.w	r9, r9, r1
 8009bbc:	4491      	add	r9, r2
 8009bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    P( A, B, C, D, E, W[10] );
 8009bc0:	eb0a 6af7 	add.w	sl, sl, r7, ror #27
 8009bc4:	441a      	add	r2, r3
    P( E, A, B, C, D, W[11] );
 8009bc6:	ea4f 07b7 	mov.w	r7, r7, ror #2
 8009bca:	4411      	add	r1, r2
 8009bcc:	9a00      	ldr	r2, [sp, #0]
    P( D, E, A, B, C, W[12] );
 8009bce:	ea8b 0e07 	eor.w	lr, fp, r7
 8009bd2:	441a      	add	r2, r3
 8009bd4:	ea0e 0e0a 	and.w	lr, lr, sl
    P( E, A, B, C, D, W[11] );
 8009bd8:	eb09 69fa 	add.w	r9, r9, sl, ror #27
    P( D, E, A, B, C, W[12] );
 8009bdc:	ea8e 0e0b 	eor.w	lr, lr, fp
 8009be0:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8009be4:	4493      	add	fp, r2
 8009be6:	9a02      	ldr	r2, [sp, #8]
    P( C, D, E, A, B, W[13] );
 8009be8:	ea87 060a 	eor.w	r6, r7, sl
 8009bec:	441a      	add	r2, r3
 8009bee:	448e      	add	lr, r1
 8009bf0:	ea06 0609 	and.w	r6, r6, r9
    P( D, E, A, B, C, W[12] );
 8009bf4:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27
    P( C, D, E, A, B, W[13] );
 8009bf8:	407e      	eors	r6, r7
 8009bfa:	ea4f 09b9 	mov.w	r9, r9, ror #2
 8009bfe:	4417      	add	r7, r2
 8009c00:	9a03      	ldr	r2, [sp, #12]
    P( B, C, D, E, A, W[14] );
 8009c02:	ea8a 0c09 	eor.w	ip, sl, r9
 8009c06:	441a      	add	r2, r3
 8009c08:	ea0c 0c0e 	and.w	ip, ip, lr
 8009c0c:	ea8c 0c0a 	eor.w	ip, ip, sl
 8009c10:	4492      	add	sl, r2
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 8009c12:	9a05      	ldr	r2, [sp, #20]
 8009c14:	44bc      	add	ip, r7
 8009c16:	ea82 0705 	eor.w	r7, r2, r5
 8009c1a:	9a00      	ldr	r2, [sp, #0]
 8009c1c:	445e      	add	r6, fp
 8009c1e:	ea87 0708 	eor.w	r7, r7, r8
    P( C, D, E, A, B, W[13] );
 8009c22:	eb06 66fe 	add.w	r6, r6, lr, ror #27
    P( E, A, B, C, D, R(16) );
 8009c26:	4057      	eors	r7, r2
    P( B, C, D, E, A, W[14] );
 8009c28:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, W[15] );
 8009c2c:	ea89 040e 	eor.w	r4, r9, lr
    P( E, A, B, C, D, R(16) );
 8009c30:	ea4f 72f7 	mov.w	r2, r7, ror #31
 8009c34:	9205      	str	r2, [sp, #20]
    P( A, B, C, D, E, W[15] );
 8009c36:	4034      	ands	r4, r6
 8009c38:	441a      	add	r2, r3
    P( D, E, A, B, C, R(17) );
 8009c3a:	9908      	ldr	r1, [sp, #32]
    P( A, B, C, D, E, W[15] );
 8009c3c:	ea84 0409 	eor.w	r4, r4, r9
 8009c40:	4491      	add	r9, r2
    P( D, E, A, B, C, R(17) );
 8009c42:	9a06      	ldr	r2, [sp, #24]
    P( B, C, D, E, A, W[14] );
 8009c44:	eb0c 6cf6 	add.w	ip, ip, r6, ror #27
    P( D, E, A, B, C, R(17) );
 8009c48:	404a      	eors	r2, r1
 8009c4a:	9909      	ldr	r1, [sp, #36]	; 0x24
    P( A, B, C, D, E, W[15] );
 8009c4c:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( D, E, A, B, C, R(17) );
 8009c50:	404a      	eors	r2, r1
 8009c52:	9902      	ldr	r1, [sp, #8]
    P( E, A, B, C, D, R(16) );
 8009c54:	ea8e 0006 	eor.w	r0, lr, r6
    P( D, E, A, B, C, R(17) );
 8009c58:	404a      	eors	r2, r1
 8009c5a:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8009c5e:	9206      	str	r2, [sp, #24]
    P( E, A, B, C, D, R(16) );
 8009c60:	ea00 000c 	and.w	r0, r0, ip
 8009c64:	441a      	add	r2, r3
 8009c66:	ea80 000e 	eor.w	r0, r0, lr
 8009c6a:	4496      	add	lr, r2
    P( C, D, E, A, B, R(18) );
 8009c6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c6e:	4454      	add	r4, sl
 8009c70:	4055      	eors	r5, r2
 8009c72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( A, B, C, D, E, W[15] );
 8009c74:	eb04 64fc 	add.w	r4, r4, ip, ror #27
    P( C, D, E, A, B, R(18) );
 8009c78:	4055      	eors	r5, r2
 8009c7a:	9a03      	ldr	r2, [sp, #12]
    P( E, A, B, C, D, R(16) );
 8009c7c:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(18) );
 8009c80:	4055      	eors	r5, r2
 8009c82:	ea4f 72f5 	mov.w	r2, r5, ror #31
 8009c86:	9207      	str	r2, [sp, #28]
    P( D, E, A, B, C, R(17) );
 8009c88:	ea86 010c 	eor.w	r1, r6, ip
 8009c8c:	4448      	add	r0, r9
    P( E, A, B, C, D, R(16) );
 8009c8e:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8009c92:	9d07      	ldr	r5, [sp, #28]
    P( D, E, A, B, C, R(17) );
 8009c94:	4021      	ands	r1, r4
 8009c96:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( C, D, E, A, B, R(18) );
 8009c9a:	ea8c 0204 	eor.w	r2, ip, r4
 8009c9e:	441d      	add	r5, r3
 8009ca0:	4002      	ands	r2, r0
    P( D, E, A, B, C, R(17) );
 8009ca2:	4071      	eors	r1, r6
    P( C, D, E, A, B, R(18) );
 8009ca4:	ea82 020c 	eor.w	r2, r2, ip
 8009ca8:	442e      	add	r6, r5
 8009caa:	4432      	add	r2, r6
    P( B, C, D, E, A, R(19) );
 8009cac:	9d08      	ldr	r5, [sp, #32]
 8009cae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009cb0:	4471      	add	r1, lr
 8009cb2:	406e      	eors	r6, r5
 8009cb4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(17) );
 8009cb6:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( B, C, D, E, A, R(19) );
 8009cba:	406e      	eors	r6, r5
 8009cbc:	9d05      	ldr	r5, [sp, #20]
    P( C, D, E, A, B, R(18) );
 8009cbe:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( B, C, D, E, A, R(19) );
 8009cc2:	406e      	eors	r6, r5
 8009cc4:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8009cc8:	ea84 0700 	eor.w	r7, r4, r0
 8009ccc:	400f      	ands	r7, r1
 8009cce:	4433      	add	r3, r6
 8009cd0:	4463      	add	r3, ip
 8009cd2:	4067      	eors	r7, r4
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8009cd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009cd6:	441f      	add	r7, r3
 8009cd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( C, D, E, A, B, R(18) );
 8009cda:	eb02 62f1 	add.w	r2, r2, r1, ror #27
    P( A, B, C, D, E, R(20) );
 8009cde:	405d      	eors	r5, r3
 8009ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( B, C, D, E, A, R(19) );
 8009ce2:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( A, B, C, D, E, R(20) );
 8009ce6:	405d      	eors	r5, r3
 8009ce8:	9b06      	ldr	r3, [sp, #24]
 8009cea:	ea80 0b01 	eor.w	fp, r0, r1
 8009cee:	405d      	eors	r5, r3
 8009cf0:	ea4f 73f5 	mov.w	r3, r5, ror #31
 8009cf4:	9308      	str	r3, [sp, #32]
 8009cf6:	9d08      	ldr	r5, [sp, #32]
 8009cf8:	4b42      	ldr	r3, [pc, #264]	; (8009e04 <mbedtls_internal_sha1_process+0x55c>)
 8009cfa:	ea8b 0b02 	eor.w	fp, fp, r2
 8009cfe:	eb05 0e03 	add.w	lr, r5, r3
 8009d02:	4474      	add	r4, lr
 8009d04:	44a3      	add	fp, r4
    P( E, A, B, C, D, R(21) );
 8009d06:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    P( B, C, D, E, A, R(19) );
 8009d08:	eb07 67f2 	add.w	r7, r7, r2, ror #27
    P( E, A, B, C, D, R(21) );
 8009d0c:	4625      	mov	r5, r4
 8009d0e:	9c10      	ldr	r4, [sp, #64]	; 0x40
    P( A, B, C, D, E, R(20) );
 8009d10:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(21) );
 8009d14:	406c      	eors	r4, r5
 8009d16:	9d00      	ldr	r5, [sp, #0]
 8009d18:	ea81 0a02 	eor.w	sl, r1, r2
 8009d1c:	406c      	eors	r4, r5
 8009d1e:	9d07      	ldr	r5, [sp, #28]
 8009d20:	ea8a 0a07 	eor.w	sl, sl, r7
 8009d24:	406c      	eors	r4, r5
 8009d26:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8009d2a:	eb04 0e03 	add.w	lr, r4, r3
 8009d2e:	4470      	add	r0, lr
 8009d30:	4482      	add	sl, r0
    P( D, E, A, B, C, R(22) );
 8009d32:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009d34:	9d02      	ldr	r5, [sp, #8]
 8009d36:	ea80 0008 	eor.w	r0, r0, r8
 8009d3a:	4068      	eors	r0, r5
 8009d3c:	4070      	eors	r0, r6
 8009d3e:	ea4f 70f0 	mov.w	r0, r0, ror #31
    P( A, B, C, D, E, R(20) );
 8009d42:	eb0b 6bf7 	add.w	fp, fp, r7, ror #27
    P( E, A, B, C, D, R(21) );
 8009d46:	ea4f 07b7 	mov.w	r7, r7, ror #2
 8009d4a:	eb00 0c03 	add.w	ip, r0, r3
    P( D, E, A, B, C, R(22) );
 8009d4e:	ea82 0e07 	eor.w	lr, r2, r7
 8009d52:	4461      	add	r1, ip
 8009d54:	ea8e 0e0b 	eor.w	lr, lr, fp
    P( C, D, E, A, B, R(23) );
 8009d58:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009d5a:	448e      	add	lr, r1
 8009d5c:	9910      	ldr	r1, [sp, #64]	; 0x40
    P( E, A, B, C, D, R(21) );
 8009d5e:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
    P( C, D, E, A, B, R(23) );
 8009d62:	4069      	eors	r1, r5
 8009d64:	9d03      	ldr	r5, [sp, #12]
    P( D, E, A, B, C, R(22) );
 8009d66:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( C, D, E, A, B, R(23) );
 8009d6a:	4069      	eors	r1, r5
 8009d6c:	9d08      	ldr	r5, [sp, #32]
 8009d6e:	ea87 090b 	eor.w	r9, r7, fp
 8009d72:	4069      	eors	r1, r5
 8009d74:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8009d78:	eb01 0c03 	add.w	ip, r1, r3
 8009d7c:	4462      	add	r2, ip
 8009d7e:	ea89 090a 	eor.w	r9, r9, sl
 8009d82:	4491      	add	r9, r2
    P( B, C, D, E, A, R(24) );
 8009d84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d86:	9d05      	ldr	r5, [sp, #20]
 8009d88:	ea88 0202 	eor.w	r2, r8, r2
 8009d8c:	406a      	eors	r2, r5
 8009d8e:	4062      	eors	r2, r4
 8009d90:	ea4f 72f2 	mov.w	r2, r2, ror #31
    P( D, E, A, B, C, R(22) );
 8009d94:	eb0e 6efa 	add.w	lr, lr, sl, ror #27
    P( C, D, E, A, B, R(23) );
 8009d98:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8009d9c:	eb02 0c03 	add.w	ip, r2, r3
    P( B, C, D, E, A, R(24) );
 8009da0:	ea8b 080a 	eor.w	r8, fp, sl
 8009da4:	4467      	add	r7, ip
 8009da6:	ea88 080e 	eor.w	r8, r8, lr
    P( A, B, C, D, E, R(25) );
 8009daa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009dac:	44b8      	add	r8, r7
 8009dae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(23) );
 8009db0:	eb09 69fe 	add.w	r9, r9, lr, ror #27
    P( A, B, C, D, E, R(25) );
 8009db4:	406f      	eors	r7, r5
 8009db6:	9d06      	ldr	r5, [sp, #24]
    P( B, C, D, E, A, R(24) );
 8009db8:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, R(25) );
 8009dbc:	406f      	eors	r7, r5
 8009dbe:	4047      	eors	r7, r0
 8009dc0:	ea4f 75f7 	mov.w	r5, r7, ror #31
 8009dc4:	eb05 0c03 	add.w	ip, r5, r3
 8009dc8:	9509      	str	r5, [sp, #36]	; 0x24
    P( E, A, B, C, D, R(26) );
 8009dca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009dcc:	44e3      	add	fp, ip
 8009dce:	46ac      	mov	ip, r5
 8009dd0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    P( A, B, C, D, E, R(25) );
 8009dd2:	ea8a 070e 	eor.w	r7, sl, lr
    P( E, A, B, C, D, R(26) );
 8009dd6:	ea8c 0c05 	eor.w	ip, ip, r5
 8009dda:	9d07      	ldr	r5, [sp, #28]
    P( B, C, D, E, A, R(24) );
 8009ddc:	eb08 68f9 	add.w	r8, r8, r9, ror #27
    P( E, A, B, C, D, R(26) );
 8009de0:	ea8c 0c05 	eor.w	ip, ip, r5
 8009de4:	ea8c 0c01 	eor.w	ip, ip, r1
 8009de8:	ea4f 75fc 	mov.w	r5, ip, ror #31
 8009dec:	950a      	str	r5, [sp, #40]	; 0x28
 8009dee:	eb05 0c03 	add.w	ip, r5, r3
    P( D, E, A, B, C, R(27) );
 8009df2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009df4:	44e2      	add	sl, ip
 8009df6:	46ac      	mov	ip, r5
 8009df8:	9d00      	ldr	r5, [sp, #0]
    P( A, B, C, D, E, R(25) );
 8009dfa:	ea87 0709 	eor.w	r7, r7, r9
 8009dfe:	e003      	b.n	8009e08 <mbedtls_internal_sha1_process+0x560>
 8009e00:	5a827999 	.word	0x5a827999
 8009e04:	6ed9eba1 	.word	0x6ed9eba1
    P( D, E, A, B, C, R(27) );
 8009e08:	ea8c 0c05 	eor.w	ip, ip, r5
    P( A, B, C, D, E, R(25) );
 8009e0c:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(27) );
 8009e10:	ea8c 0c06 	eor.w	ip, ip, r6
 8009e14:	ea8c 0c02 	eor.w	ip, ip, r2
 8009e18:	445f      	add	r7, fp
    P( E, A, B, C, D, R(26) );
 8009e1a:	ea8e 0b09 	eor.w	fp, lr, r9
    P( A, B, C, D, E, R(25) );
 8009e1e:	eb07 67f8 	add.w	r7, r7, r8, ror #27
    P( D, E, A, B, C, R(27) );
 8009e22:	ea4f 75fc 	mov.w	r5, ip, ror #31
    P( E, A, B, C, D, R(26) );
 8009e26:	ea8b 0b08 	eor.w	fp, fp, r8
 8009e2a:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(27) );
 8009e2e:	950b      	str	r5, [sp, #44]	; 0x2c
 8009e30:	eb05 0c03 	add.w	ip, r5, r3
 8009e34:	44d3      	add	fp, sl
    P( C, D, E, A, B, R(28) );
 8009e36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(27) );
 8009e38:	ea89 0a08 	eor.w	sl, r9, r8
 8009e3c:	44e6      	add	lr, ip
 8009e3e:	ea8a 0a07 	eor.w	sl, sl, r7
 8009e42:	44f2      	add	sl, lr
    P( C, D, E, A, B, R(28) );
 8009e44:	46ae      	mov	lr, r5
 8009e46:	9d02      	ldr	r5, [sp, #8]
    P( E, A, B, C, D, R(26) );
 8009e48:	eb0b 6bf7 	add.w	fp, fp, r7, ror #27
    P( C, D, E, A, B, R(28) );
 8009e4c:	ea8e 0e05 	eor.w	lr, lr, r5
 8009e50:	9d08      	ldr	r5, [sp, #32]
    P( D, E, A, B, C, R(27) );
 8009e52:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( C, D, E, A, B, R(28) );
 8009e56:	ea8e 0e05 	eor.w	lr, lr, r5
 8009e5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(27) );
 8009e5c:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
    P( C, D, E, A, B, R(28) );
 8009e60:	ea8e 0e05 	eor.w	lr, lr, r5
 8009e64:	ea4f 75fe 	mov.w	r5, lr, ror #31
 8009e68:	950c      	str	r5, [sp, #48]	; 0x30
 8009e6a:	eb05 0c03 	add.w	ip, r5, r3
 8009e6e:	ea88 0e07 	eor.w	lr, r8, r7
    P( B, C, D, E, A, R(29) );
 8009e72:	9d00      	ldr	r5, [sp, #0]
    P( C, D, E, A, B, R(28) );
 8009e74:	ea8e 0e0b 	eor.w	lr, lr, fp
 8009e78:	44e1      	add	r9, ip
 8009e7a:	44f1      	add	r9, lr
    P( B, C, D, E, A, R(29) );
 8009e7c:	46ae      	mov	lr, r5
 8009e7e:	9d03      	ldr	r5, [sp, #12]
    P( C, D, E, A, B, R(28) );
 8009e80:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( B, C, D, E, A, R(29) );
 8009e84:	ea8e 0e05 	eor.w	lr, lr, r5
 8009e88:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009e8a:	ea8e 0e04 	eor.w	lr, lr, r4
 8009e8e:	ea8e 0e05 	eor.w	lr, lr, r5
 8009e92:	ea4f 75fe 	mov.w	r5, lr, ror #31
 8009e96:	9500      	str	r5, [sp, #0]
 8009e98:	eb05 0e03 	add.w	lr, r5, r3
    P( A, B, C, D, E, R(30) );
 8009e9c:	9d02      	ldr	r5, [sp, #8]
 8009e9e:	44f0      	add	r8, lr
 8009ea0:	46ae      	mov	lr, r5
 8009ea2:	9d05      	ldr	r5, [sp, #20]
    P( B, C, D, E, A, R(29) );
 8009ea4:	ea87 0c0b 	eor.w	ip, r7, fp
    P( A, B, C, D, E, R(30) );
 8009ea8:	ea8e 0e05 	eor.w	lr, lr, r5
 8009eac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009eae:	ea8e 0e00 	eor.w	lr, lr, r0
 8009eb2:	ea8e 0e05 	eor.w	lr, lr, r5
    P( C, D, E, A, B, R(28) );
 8009eb6:	eb09 69fa 	add.w	r9, r9, sl, ror #27
    P( A, B, C, D, E, R(30) );
 8009eba:	ea4f 75fe 	mov.w	r5, lr, ror #31
    P( B, C, D, E, A, R(29) );
 8009ebe:	ea8c 0c0a 	eor.w	ip, ip, sl
 8009ec2:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8009ec6:	eb05 0e03 	add.w	lr, r5, r3
 8009eca:	44c4      	add	ip, r8
    P( A, B, C, D, E, R(30) );
 8009ecc:	ea8b 080a 	eor.w	r8, fp, sl
 8009ed0:	4477      	add	r7, lr
 8009ed2:	ea88 0809 	eor.w	r8, r8, r9
 8009ed6:	9502      	str	r5, [sp, #8]
 8009ed8:	44b8      	add	r8, r7
    P( E, A, B, C, D, R(31) );
 8009eda:	9d03      	ldr	r5, [sp, #12]
 8009edc:	9f06      	ldr	r7, [sp, #24]
    P( B, C, D, E, A, R(29) );
 8009ede:	eb0c 6cf9 	add.w	ip, ip, r9, ror #27
    P( E, A, B, C, D, R(31) );
 8009ee2:	406f      	eors	r7, r5
 8009ee4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ee6:	404f      	eors	r7, r1
 8009ee8:	406f      	eors	r7, r5
 8009eea:	ea4f 75f7 	mov.w	r5, r7, ror #31
 8009eee:	18ef      	adds	r7, r5, r3
 8009ef0:	9503      	str	r5, [sp, #12]
 8009ef2:	44bb      	add	fp, r7
    P( D, E, A, B, C, R(32) );
 8009ef4:	9d05      	ldr	r5, [sp, #20]
 8009ef6:	9f07      	ldr	r7, [sp, #28]
    P( A, B, C, D, E, R(30) );
 8009ef8:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(32) );
 8009efc:	406f      	eors	r7, r5
 8009efe:	9d00      	ldr	r5, [sp, #0]
 8009f00:	4057      	eors	r7, r2
    P( E, A, B, C, D, R(31) );
 8009f02:	ea8a 0e09 	eor.w	lr, sl, r9
    P( D, E, A, B, C, R(32) );
 8009f06:	406f      	eors	r7, r5
    P( A, B, C, D, E, R(30) );
 8009f08:	eb08 68fc 	add.w	r8, r8, ip, ror #27
    P( D, E, A, B, C, R(32) );
 8009f0c:	ea4f 75f7 	mov.w	r5, r7, ror #31
    P( E, A, B, C, D, R(31) );
 8009f10:	ea8e 0e0c 	eor.w	lr, lr, ip
 8009f14:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( D, E, A, B, C, R(32) );
 8009f18:	ea89 070c 	eor.w	r7, r9, ip
 8009f1c:	44de      	add	lr, fp
 8009f1e:	eb05 0b03 	add.w	fp, r5, r3
 8009f22:	44da      	add	sl, fp
 8009f24:	ea87 0708 	eor.w	r7, r7, r8
    P( E, A, B, C, D, R(31) );
 8009f28:	eb0e 6ef8 	add.w	lr, lr, r8, ror #27
 8009f2c:	4457      	add	r7, sl
    P( D, E, A, B, C, R(32) );
 8009f2e:	9505      	str	r5, [sp, #20]
 8009f30:	eb07 65fe 	add.w	r5, r7, lr, ror #27
 8009f34:	950d      	str	r5, [sp, #52]	; 0x34
    P( C, D, E, A, B, R(33) );
 8009f36:	9d06      	ldr	r5, [sp, #24]
    P( D, E, A, B, C, R(32) );
 8009f38:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(33) );
 8009f3c:	ea85 0a06 	eor.w	sl, r5, r6
 8009f40:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f42:	ea8c 0b08 	eor.w	fp, ip, r8
 8009f46:	ea8a 0a05 	eor.w	sl, sl, r5
 8009f4a:	9d02      	ldr	r5, [sp, #8]
 8009f4c:	ea8b 0b0e 	eor.w	fp, fp, lr
 8009f50:	ea8a 0a05 	eor.w	sl, sl, r5
 8009f54:	ea4f 75fa 	mov.w	r5, sl, ror #31
 8009f58:	eb05 0a03 	add.w	sl, r5, r3
 8009f5c:	9506      	str	r5, [sp, #24]
 8009f5e:	44d1      	add	r9, sl
 8009f60:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009f62:	44cb      	add	fp, r9
 8009f64:	eb0b 6bf5 	add.w	fp, fp, r5, ror #27
    P( B, C, D, E, A, R(34) );
 8009f68:	9d07      	ldr	r5, [sp, #28]
 8009f6a:	9f08      	ldr	r7, [sp, #32]
    P( C, D, E, A, B, R(33) );
 8009f6c:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( B, C, D, E, A, R(34) );
 8009f70:	ea85 0907 	eor.w	r9, r5, r7
 8009f74:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009f76:	ea88 0a0e 	eor.w	sl, r8, lr
 8009f7a:	ea89 0905 	eor.w	r9, r9, r5
 8009f7e:	9d03      	ldr	r5, [sp, #12]
    P( A, B, C, D, E, R(35) );
 8009f80:	4066      	eors	r6, r4
    P( B, C, D, E, A, R(34) );
 8009f82:	ea89 0905 	eor.w	r9, r9, r5
 8009f86:	ea4f 75f9 	mov.w	r5, r9, ror #31
 8009f8a:	9507      	str	r5, [sp, #28]
 8009f8c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
 8009f8e:	404c      	eors	r4, r1
    P( B, C, D, E, A, R(34) );
 8009f90:	ea8a 0a05 	eor.w	sl, sl, r5
 8009f94:	9d07      	ldr	r5, [sp, #28]
 8009f96:	eb05 0903 	add.w	r9, r5, r3
 8009f9a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009f9c:	44cc      	add	ip, r9
 8009f9e:	ea4f 07b5 	mov.w	r7, r5, ror #2
    P( A, B, C, D, E, R(35) );
 8009fa2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009fa4:	44e2      	add	sl, ip
 8009fa6:	406e      	eors	r6, r5
 8009fa8:	9d05      	ldr	r5, [sp, #20]
    P( B, C, D, E, A, R(34) );
 8009faa:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
    P( A, B, C, D, E, R(35) );
 8009fae:	406e      	eors	r6, r5
 8009fb0:	ea4f 79f6 	mov.w	r9, r6, ror #31
 8009fb4:	eb09 0c03 	add.w	ip, r9, r3
 8009fb8:	ea8e 0607 	eor.w	r6, lr, r7
    P( E, A, B, C, D, R(36) );
 8009fbc:	9d08      	ldr	r5, [sp, #32]
    P( A, B, C, D, E, R(35) );
 8009fbe:	ea86 060b 	eor.w	r6, r6, fp
 8009fc2:	44e0      	add	r8, ip
 8009fc4:	44b0      	add	r8, r6
    P( E, A, B, C, D, R(36) );
 8009fc6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009fc8:	4045      	eors	r5, r0
 8009fca:	4075      	eors	r5, r6
 8009fcc:	9e06      	ldr	r6, [sp, #24]
    P( A, B, C, D, E, R(35) );
 8009fce:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( E, A, B, C, D, R(36) );
 8009fd2:	4075      	eors	r5, r6
 8009fd4:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8009fd8:	9508      	str	r5, [sp, #32]
 8009fda:	9e08      	ldr	r6, [sp, #32]
 8009fdc:	ea87 050b 	eor.w	r5, r7, fp
 8009fe0:	eb06 0c03 	add.w	ip, r6, r3
    P( D, E, A, B, C, R(37) );
 8009fe4:	9e00      	ldr	r6, [sp, #0]
    P( E, A, B, C, D, R(36) );
 8009fe6:	ea85 050a 	eor.w	r5, r5, sl
    P( D, E, A, B, C, R(37) );
 8009fea:	4074      	eors	r4, r6
 8009fec:	9e07      	ldr	r6, [sp, #28]
 8009fee:	44e6      	add	lr, ip
 8009ff0:	4074      	eors	r4, r6
 8009ff2:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8009ff6:	940d      	str	r4, [sp, #52]	; 0x34
 8009ff8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    P( A, B, C, D, E, R(35) );
 8009ffa:	eb08 68fa 	add.w	r8, r8, sl, ror #27
 8009ffe:	44ae      	add	lr, r5
    P( E, A, B, C, D, R(36) );
 800a000:	ea4f 0aba 	mov.w	sl, sl, ror #2
 800a004:	eb0e 65f8 	add.w	r5, lr, r8, ror #27
    P( D, E, A, B, C, R(37) );
 800a008:	ea8b 040a 	eor.w	r4, fp, sl
 800a00c:	eb06 0e03 	add.w	lr, r6, r3
 800a010:	ea84 0408 	eor.w	r4, r4, r8
 800a014:	4477      	add	r7, lr
 800a016:	4427      	add	r7, r4
 800a018:	eb07 64f5 	add.w	r4, r7, r5, ror #27
    P( C, D, E, A, B, R(38) );
 800a01c:	9f02      	ldr	r7, [sp, #8]
 800a01e:	4050      	eors	r0, r2
 800a020:	4078      	eors	r0, r7
 800a022:	ea80 0009 	eor.w	r0, r0, r9
 800a026:	ea4f 70f0 	mov.w	r0, r0, ror #31
 800a02a:	900e      	str	r0, [sp, #56]	; 0x38
 800a02c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    P( D, E, A, B, C, R(37) );
 800a02e:	ea4f 06b8 	mov.w	r6, r8, ror #2
 800a032:	441f      	add	r7, r3
 800a034:	44bb      	add	fp, r7
    P( B, C, D, E, A, R(39) );
 800a036:	9f09      	ldr	r7, [sp, #36]	; 0x24
    P( C, D, E, A, B, R(38) );
 800a038:	ea8a 0006 	eor.w	r0, sl, r6
    P( B, C, D, E, A, R(39) );
 800a03c:	4079      	eors	r1, r7
 800a03e:	9f03      	ldr	r7, [sp, #12]
    P( C, D, E, A, B, R(38) );
 800a040:	4068      	eors	r0, r5
    P( B, C, D, E, A, R(39) );
 800a042:	4079      	eors	r1, r7
 800a044:	9f08      	ldr	r7, [sp, #32]
    P( C, D, E, A, B, R(38) );
 800a046:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( B, C, D, E, A, R(39) );
 800a04a:	4079      	eors	r1, r7
 800a04c:	ea4f 71f1 	mov.w	r1, r1, ror #31
 800a050:	910f      	str	r1, [sp, #60]	; 0x3c
 800a052:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a054:	ea86 0105 	eor.w	r1, r6, r5
 800a058:	443b      	add	r3, r7
 800a05a:	449a      	add	sl, r3
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 800a05c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a05e:	4483      	add	fp, r0
 800a060:	405a      	eors	r2, r3
 800a062:	9b05      	ldr	r3, [sp, #20]
    P( C, D, E, A, B, R(38) );
 800a064:	eb0b 60f4 	add.w	r0, fp, r4, ror #27
    P( A, B, C, D, E, R(40) );
 800a068:	405a      	eors	r2, r3
 800a06a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( B, C, D, E, A, R(39) );
 800a06c:	4061      	eors	r1, r4
    P( A, B, C, D, E, R(40) );
 800a06e:	405a      	eors	r2, r3
 800a070:	ea4f 73f2 	mov.w	r3, r2, ror #31
 800a074:	9310      	str	r3, [sp, #64]	; 0x40
 800a076:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a078:	4bd7      	ldr	r3, [pc, #860]	; (800a3d8 <mbedtls_internal_sha1_process+0xb30>)
    P( B, C, D, E, A, R(39) );
 800a07a:	ea4f 04b4 	mov.w	r4, r4, ror #2
 800a07e:	441a      	add	r2, r3
 800a080:	448a      	add	sl, r1
 800a082:	4416      	add	r6, r2
    P( A, B, C, D, E, R(40) );
 800a084:	ea40 0204 	orr.w	r2, r0, r4
    P( B, C, D, E, A, R(39) );
 800a088:	eb0a 61f0 	add.w	r1, sl, r0, ror #27
    P( A, B, C, D, E, R(40) );
 800a08c:	ea00 0704 	and.w	r7, r0, r4
 800a090:	402a      	ands	r2, r5
 800a092:	433a      	orrs	r2, r7
 800a094:	eb06 66f1 	add.w	r6, r6, r1, ror #27
 800a098:	4416      	add	r6, r2
    P( E, A, B, C, D, R(41) );
 800a09a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a09c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( A, B, C, D, E, R(40) );
 800a09e:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( E, A, B, C, D, R(41) );
 800a0a2:	4057      	eors	r7, r2
 800a0a4:	9a06      	ldr	r2, [sp, #24]
 800a0a6:	ea41 0e00 	orr.w	lr, r1, r0
 800a0aa:	4057      	eors	r7, r2
 800a0ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0ae:	4057      	eors	r7, r2
 800a0b0:	ea4f 72f7 	mov.w	r2, r7, ror #31
 800a0b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a0b6:	ea0e 0204 	and.w	r2, lr, r4
 800a0ba:	ea01 0e00 	and.w	lr, r1, r0
 800a0be:	ea42 0e0e 	orr.w	lr, r2, lr
 800a0c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0c4:	ea4f 01b1 	mov.w	r1, r1, ror #2
 800a0c8:	441a      	add	r2, r3
 800a0ca:	4415      	add	r5, r2
 800a0cc:	4475      	add	r5, lr
 800a0ce:	eb05 6ef6 	add.w	lr, r5, r6, ror #27
    P( D, E, A, B, C, R(42) );
 800a0d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0d6:	ea82 0c05 	eor.w	ip, r2, r5
 800a0da:	9a07      	ldr	r2, [sp, #28]
    P( C, D, E, A, B, R(43) );
 800a0dc:	9d00      	ldr	r5, [sp, #0]
    P( D, E, A, B, C, R(42) );
 800a0de:	ea8c 0c02 	eor.w	ip, ip, r2
 800a0e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0e4:	ea8c 0c02 	eor.w	ip, ip, r2
 800a0e8:	ea4f 72fc 	mov.w	r2, ip, ror #31
 800a0ec:	18d7      	adds	r7, r2, r3
 800a0ee:	443c      	add	r4, r7
 800a0f0:	ea46 0701 	orr.w	r7, r6, r1
 800a0f4:	920a      	str	r2, [sp, #40]	; 0x28
 800a0f6:	4007      	ands	r7, r0
 800a0f8:	ea06 0201 	and.w	r2, r6, r1
 800a0fc:	4317      	orrs	r7, r2
    P( C, D, E, A, B, R(43) );
 800a0fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(42) );
 800a100:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( C, D, E, A, B, R(43) );
 800a104:	ea82 0c05 	eor.w	ip, r2, r5
 800a108:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a10a:	ea8c 0c09 	eor.w	ip, ip, r9
 800a10e:	ea8c 0c02 	eor.w	ip, ip, r2
 800a112:	ea4e 0506 	orr.w	r5, lr, r6
 800a116:	ea4f 72fc 	mov.w	r2, ip, ror #31
 800a11a:	920b      	str	r2, [sp, #44]	; 0x2c
 800a11c:	ea05 0201 	and.w	r2, r5, r1
 800a120:	ea0e 0506 	and.w	r5, lr, r6
 800a124:	4315      	orrs	r5, r2
 800a126:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a128:	eb04 64fe 	add.w	r4, r4, lr, ror #27
 800a12c:	441a      	add	r2, r3
 800a12e:	4410      	add	r0, r2
    P( D, E, A, B, C, R(42) );
 800a130:	443c      	add	r4, r7
 800a132:	4428      	add	r0, r5
    P( C, D, E, A, B, R(43) );
 800a134:	eb00 65f4 	add.w	r5, r0, r4, ror #27
    P( B, C, D, E, A, R(44) );
 800a138:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a13a:	9802      	ldr	r0, [sp, #8]
    P( C, D, E, A, B, R(43) );
 800a13c:	ea4f 0cbe 	mov.w	ip, lr, ror #2
    P( B, C, D, E, A, R(44) );
 800a140:	ea82 0e00 	eor.w	lr, r2, r0
 800a144:	9a08      	ldr	r2, [sp, #32]
    P( A, B, C, D, E, R(45) );
 800a146:	9803      	ldr	r0, [sp, #12]
    P( B, C, D, E, A, R(44) );
 800a148:	ea8e 0e02 	eor.w	lr, lr, r2
 800a14c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a14e:	ea8e 0e02 	eor.w	lr, lr, r2
 800a152:	ea4f 72fe 	mov.w	r2, lr, ror #31
 800a156:	18d7      	adds	r7, r2, r3
 800a158:	4439      	add	r1, r7
 800a15a:	ea44 070c 	orr.w	r7, r4, ip
 800a15e:	920c      	str	r2, [sp, #48]	; 0x30
 800a160:	4037      	ands	r7, r6
 800a162:	ea04 020c 	and.w	r2, r4, ip
 800a166:	4317      	orrs	r7, r2
    P( A, B, C, D, E, R(45) );
 800a168:	9a00      	ldr	r2, [sp, #0]
    P( B, C, D, E, A, R(44) );
 800a16a:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(45) );
 800a16e:	4042      	eors	r2, r0
 800a170:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a172:	eb01 61f5 	add.w	r1, r1, r5, ror #27
 800a176:	4042      	eors	r2, r0
 800a178:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(44) );
 800a17a:	4439      	add	r1, r7
    P( A, B, C, D, E, R(45) );
 800a17c:	4042      	eors	r2, r0
 800a17e:	ea4f 72f2 	mov.w	r2, r2, ror #31
 800a182:	ea45 0004 	orr.w	r0, r5, r4
 800a186:	9200      	str	r2, [sp, #0]
 800a188:	ea00 020c 	and.w	r2, r0, ip
 800a18c:	ea05 0004 	and.w	r0, r5, r4
 800a190:	4310      	orrs	r0, r2
 800a192:	9a00      	ldr	r2, [sp, #0]
 800a194:	18d7      	adds	r7, r2, r3
 800a196:	443e      	add	r6, r7
    P( E, A, B, C, D, R(46) );
 800a198:	9a02      	ldr	r2, [sp, #8]
 800a19a:	4406      	add	r6, r0
    P( A, B, C, D, E, R(45) );
 800a19c:	ea4f 00b5 	mov.w	r0, r5, ror #2
    P( E, A, B, C, D, R(46) );
 800a1a0:	9d05      	ldr	r5, [sp, #20]
    P( A, B, C, D, E, R(45) );
 800a1a2:	eb06 66f1 	add.w	r6, r6, r1, ror #27
    P( E, A, B, C, D, R(46) );
 800a1a6:	ea82 0e05 	eor.w	lr, r2, r5
 800a1aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1ac:	ea41 0500 	orr.w	r5, r1, r0
 800a1b0:	ea8e 0e02 	eor.w	lr, lr, r2
 800a1b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1b6:	4025      	ands	r5, r4
 800a1b8:	ea8e 0e02 	eor.w	lr, lr, r2
 800a1bc:	ea4f 72fe 	mov.w	r2, lr, ror #31
 800a1c0:	eb02 0e03 	add.w	lr, r2, r3
 800a1c4:	44e6      	add	lr, ip
 800a1c6:	eb0e 6cf6 	add.w	ip, lr, r6, ror #27
 800a1ca:	ea01 0e00 	and.w	lr, r1, r0
 800a1ce:	ea45 050e 	orr.w	r5, r5, lr
 800a1d2:	eb05 0e0c 	add.w	lr, r5, ip
 800a1d6:	9202      	str	r2, [sp, #8]
    P( D, E, A, B, C, R(47) );
 800a1d8:	9a03      	ldr	r2, [sp, #12]
 800a1da:	9d06      	ldr	r5, [sp, #24]
    P( E, A, B, C, D, R(46) );
 800a1dc:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(47) );
 800a1e0:	406a      	eors	r2, r5
 800a1e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a1e4:	ea46 0a01 	orr.w	sl, r6, r1
 800a1e8:	406a      	eors	r2, r5
 800a1ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1ec:	406a      	eors	r2, r5
 800a1ee:	ea4f 72f2 	mov.w	r2, r2, ror #31
 800a1f2:	9203      	str	r2, [sp, #12]
 800a1f4:	ea0a 0200 	and.w	r2, sl, r0
 800a1f8:	ea06 0a01 	and.w	sl, r6, r1
 800a1fc:	ea42 0a0a 	orr.w	sl, r2, sl
 800a200:	9a03      	ldr	r2, [sp, #12]
    P( C, D, E, A, B, R(48) );
 800a202:	9d07      	ldr	r5, [sp, #28]
 800a204:	441a      	add	r2, r3
 800a206:	4414      	add	r4, r2
 800a208:	9a05      	ldr	r2, [sp, #20]
 800a20a:	4454      	add	r4, sl
 800a20c:	ea82 0705 	eor.w	r7, r2, r5
 800a210:	9a10      	ldr	r2, [sp, #64]	; 0x40
    P( D, E, A, B, C, R(47) );
 800a212:	eb04 64fe 	add.w	r4, r4, lr, ror #27
    P( C, D, E, A, B, R(48) );
 800a216:	4057      	eors	r7, r2
 800a218:	9a00      	ldr	r2, [sp, #0]
    P( D, E, A, B, C, R(47) );
 800a21a:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( C, D, E, A, B, R(48) );
 800a21e:	4057      	eors	r7, r2
 800a220:	ea4f 72f7 	mov.w	r2, r7, ror #31
 800a224:	9205      	str	r2, [sp, #20]
 800a226:	441a      	add	r2, r3
 800a228:	4402      	add	r2, r0
 800a22a:	eb02 60f4 	add.w	r0, r2, r4, ror #27
 800a22e:	ea4e 0206 	orr.w	r2, lr, r6
 800a232:	ea0e 0506 	and.w	r5, lr, r6
 800a236:	400a      	ands	r2, r1
 800a238:	432a      	orrs	r2, r5
 800a23a:	4402      	add	r2, r0
    P( B, C, D, E, A, R(49) );
 800a23c:	9806      	ldr	r0, [sp, #24]
    P( C, D, E, A, B, R(48) );
 800a23e:	ea4f 05be 	mov.w	r5, lr, ror #2
    P( B, C, D, E, A, R(49) );
 800a242:	ea80 0a09 	eor.w	sl, r0, r9
 800a246:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a248:	ea44 0805 	orr.w	r8, r4, r5
 800a24c:	ea8a 0a00 	eor.w	sl, sl, r0
 800a250:	9802      	ldr	r0, [sp, #8]
 800a252:	ea8a 0a00 	eor.w	sl, sl, r0
 800a256:	ea4f 70fa 	mov.w	r0, sl, ror #31
 800a25a:	9006      	str	r0, [sp, #24]
 800a25c:	ea08 0006 	and.w	r0, r8, r6
 800a260:	ea04 0805 	and.w	r8, r4, r5
 800a264:	ea40 0808 	orr.w	r8, r0, r8
 800a268:	9806      	ldr	r0, [sp, #24]
 800a26a:	ea4f 0ab4 	mov.w	sl, r4, ror #2
 800a26e:	4418      	add	r0, r3
 800a270:	4401      	add	r1, r0
 800a272:	4488      	add	r8, r1
    P( A, B, C, D, E, R(50) );
 800a274:	9808      	ldr	r0, [sp, #32]
 800a276:	9907      	ldr	r1, [sp, #28]
    P( B, C, D, E, A, R(49) );
 800a278:	eb08 68f2 	add.w	r8, r8, r2, ror #27
    P( A, B, C, D, E, R(50) );
 800a27c:	ea81 0400 	eor.w	r4, r1, r0
 800a280:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a282:	404c      	eors	r4, r1
 800a284:	9903      	ldr	r1, [sp, #12]
 800a286:	404c      	eors	r4, r1
 800a288:	ea4f 71f4 	mov.w	r1, r4, ror #31
 800a28c:	eb01 0c03 	add.w	ip, r1, r3
 800a290:	44b4      	add	ip, r6
 800a292:	eb0c 66f8 	add.w	r6, ip, r8, ror #27
 800a296:	ea42 0c0a 	orr.w	ip, r2, sl
 800a29a:	9107      	str	r1, [sp, #28]
 800a29c:	ea0c 0c05 	and.w	ip, ip, r5
 800a2a0:	ea02 010a 	and.w	r1, r2, sl
 800a2a4:	ea4c 0c01 	orr.w	ip, ip, r1
    P( E, A, B, C, D, R(51) );
 800a2a8:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( A, B, C, D, E, R(50) );
 800a2aa:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(51) );
 800a2ae:	ea89 0001 	eor.w	r0, r9, r1
 800a2b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2b4:	ea48 0702 	orr.w	r7, r8, r2
 800a2b8:	4048      	eors	r0, r1
 800a2ba:	9905      	ldr	r1, [sp, #20]
    P( D, E, A, B, C, R(52) );
 800a2bc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    P( E, A, B, C, D, R(51) );
 800a2be:	4048      	eors	r0, r1
 800a2c0:	ea4f 71f0 	mov.w	r1, r0, ror #31
 800a2c4:	ea07 000a 	and.w	r0, r7, sl
 800a2c8:	ea08 0702 	and.w	r7, r8, r2
 800a2cc:	9111      	str	r1, [sp, #68]	; 0x44
 800a2ce:	4307      	orrs	r7, r0
 800a2d0:	18c8      	adds	r0, r1, r3
    P( D, E, A, B, C, R(52) );
 800a2d2:	9908      	ldr	r1, [sp, #32]
    P( A, B, C, D, E, R(50) );
 800a2d4:	44b4      	add	ip, r6
    P( D, E, A, B, C, R(52) );
 800a2d6:	ea81 0e04 	eor.w	lr, r1, r4
 800a2da:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( E, A, B, C, D, R(51) );
 800a2dc:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(52) );
 800a2e0:	ea8e 0e01 	eor.w	lr, lr, r1
 800a2e4:	9906      	ldr	r1, [sp, #24]
    P( C, D, E, A, B, R(53) );
 800a2e6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(52) );
 800a2e8:	ea8e 0e01 	eor.w	lr, lr, r1
 800a2ec:	ea4f 7bfe 	mov.w	fp, lr, ror #31
 800a2f0:	eb0b 0e03 	add.w	lr, fp, r3
 800a2f4:	44f2      	add	sl, lr
 800a2f6:	ea4c 0e08 	orr.w	lr, ip, r8
 800a2fa:	ea0c 0108 	and.w	r1, ip, r8
 800a2fe:	ea0e 0e02 	and.w	lr, lr, r2
 800a302:	ea4e 0e01 	orr.w	lr, lr, r1
    P( C, D, E, A, B, R(53) );
 800a306:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a308:	4428      	add	r0, r5
 800a30a:	4438      	add	r0, r7
 800a30c:	ea81 0704 	eor.w	r7, r1, r4
 800a310:	9900      	ldr	r1, [sp, #0]
    P( E, A, B, C, D, R(51) );
 800a312:	eb00 60fc 	add.w	r0, r0, ip, ror #27
    P( C, D, E, A, B, R(53) );
 800a316:	404f      	eors	r7, r1
 800a318:	9907      	ldr	r1, [sp, #28]
    P( D, E, A, B, C, R(52) );
 800a31a:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(53) );
 800a31e:	ea40 090c 	orr.w	r9, r0, ip
 800a322:	eb0a 6af0 	add.w	sl, sl, r0, ror #27
 800a326:	404f      	eors	r7, r1
    P( D, E, A, B, C, R(52) );
 800a328:	44d6      	add	lr, sl
    P( C, D, E, A, B, R(53) );
 800a32a:	ea09 0108 	and.w	r1, r9, r8
 800a32e:	ea4f 7af7 	mov.w	sl, r7, ror #31
 800a332:	ea00 090c 	and.w	r9, r0, ip
 800a336:	ea41 0909 	orr.w	r9, r1, r9
 800a33a:	eb0a 0103 	add.w	r1, sl, r3
 800a33e:	440a      	add	r2, r1
 800a340:	4491      	add	r9, r2
    P( B, C, D, E, A, R(54) );
 800a342:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    P( C, D, E, A, B, R(53) );
 800a346:	ea4f 07b0 	mov.w	r7, r0, ror #2
    P( B, C, D, E, A, R(54) );
 800a34a:	4051      	eors	r1, r2
 800a34c:	9a02      	ldr	r2, [sp, #8]
    P( C, D, E, A, B, R(53) );
 800a34e:	eb09 69fe 	add.w	r9, r9, lr, ror #27
    P( B, C, D, E, A, R(54) );
 800a352:	4051      	eors	r1, r2
 800a354:	9a11      	ldr	r2, [sp, #68]	; 0x44
    P( A, B, C, D, E, R(55) );
 800a356:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(54) );
 800a358:	4051      	eors	r1, r2
 800a35a:	ea4f 72f1 	mov.w	r2, r1, ror #31
 800a35e:	18d1      	adds	r1, r2, r3
 800a360:	4441      	add	r1, r8
 800a362:	eb01 68f9 	add.w	r8, r1, r9, ror #27
 800a366:	ea4e 0107 	orr.w	r1, lr, r7
 800a36a:	9208      	str	r2, [sp, #32]
 800a36c:	ea01 010c 	and.w	r1, r1, ip
 800a370:	ea0e 0207 	and.w	r2, lr, r7
 800a374:	4311      	orrs	r1, r2
    P( A, B, C, D, E, R(55) );
 800a376:	4622      	mov	r2, r4
 800a378:	4042      	eors	r2, r0
 800a37a:	9803      	ldr	r0, [sp, #12]
    P( B, C, D, E, A, R(54) );
 800a37c:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, R(55) );
 800a380:	4042      	eors	r2, r0
 800a382:	ea82 020b 	eor.w	r2, r2, fp
    P( B, C, D, E, A, R(54) );
 800a386:	4441      	add	r1, r8
    P( A, B, C, D, E, R(55) );
 800a388:	ea4f 78f2 	mov.w	r8, r2, ror #31
 800a38c:	ea49 020e 	orr.w	r2, r9, lr
 800a390:	ea02 0007 	and.w	r0, r2, r7
 800a394:	ea09 020e 	and.w	r2, r9, lr
 800a398:	4302      	orrs	r2, r0
 800a39a:	eb08 0003 	add.w	r0, r8, r3
    P( E, A, B, C, D, R(56) );
 800a39e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a3a0:	4484      	add	ip, r0
 800a3a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a3a4:	4462      	add	r2, ip
 800a3a6:	ea80 0604 	eor.w	r6, r0, r4
 800a3aa:	9805      	ldr	r0, [sp, #20]
    P( A, B, C, D, E, R(55) );
 800a3ac:	eb02 62f1 	add.w	r2, r2, r1, ror #27
    P( E, A, B, C, D, R(56) );
 800a3b0:	4046      	eors	r6, r0
 800a3b2:	ea86 060a 	eor.w	r6, r6, sl
 800a3b6:	ea4f 70f6 	mov.w	r0, r6, ror #31
 800a3ba:	18c6      	adds	r6, r0, r3
    P( A, B, C, D, E, R(55) );
 800a3bc:	ea4f 09b9 	mov.w	r9, r9, ror #2
 800a3c0:	443e      	add	r6, r7
    P( E, A, B, C, D, R(56) );
 800a3c2:	900d      	str	r0, [sp, #52]	; 0x34
 800a3c4:	eb06 60f2 	add.w	r0, r6, r2, ror #27
 800a3c8:	ea41 0609 	orr.w	r6, r1, r9
 800a3cc:	ea01 0409 	and.w	r4, r1, r9
 800a3d0:	ea06 060e 	and.w	r6, r6, lr
 800a3d4:	4326      	orrs	r6, r4
 800a3d6:	e001      	b.n	800a3dc <mbedtls_internal_sha1_process+0xb34>
 800a3d8:	8f1bbcdc 	.word	0x8f1bbcdc
 800a3dc:	4406      	add	r6, r0
    P( D, E, A, B, C, R(57) );
 800a3de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a3e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( E, A, B, C, D, R(56) );
 800a3e2:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(57) );
 800a3e6:	ea80 0504 	eor.w	r5, r0, r4
 800a3ea:	9806      	ldr	r0, [sp, #24]
    P( C, D, E, A, B, R(58) );
 800a3ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(57) );
 800a3ee:	4045      	eors	r5, r0
 800a3f0:	9808      	ldr	r0, [sp, #32]
 800a3f2:	4045      	eors	r5, r0
 800a3f4:	ea4f 70f5 	mov.w	r0, r5, ror #31
 800a3f8:	ea42 0501 	orr.w	r5, r2, r1
 800a3fc:	9009      	str	r0, [sp, #36]	; 0x24
 800a3fe:	ea05 0009 	and.w	r0, r5, r9
 800a402:	ea02 0501 	and.w	r5, r2, r1
 800a406:	4305      	orrs	r5, r0
 800a408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a40a:	ea4f 02b2 	mov.w	r2, r2, ror #2
 800a40e:	4418      	add	r0, r3
 800a410:	4486      	add	lr, r0
    P( C, D, E, A, B, R(58) );
 800a412:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a414:	4475      	add	r5, lr
 800a416:	ea80 0704 	eor.w	r7, r0, r4
 800a41a:	9807      	ldr	r0, [sp, #28]
    P( D, E, A, B, C, R(57) );
 800a41c:	eb05 65f6 	add.w	r5, r5, r6, ror #27
    P( C, D, E, A, B, R(58) );
 800a420:	4047      	eors	r7, r0
 800a422:	ea87 0708 	eor.w	r7, r7, r8
 800a426:	ea4f 70f7 	mov.w	r0, r7, ror #31
 800a42a:	900a      	str	r0, [sp, #40]	; 0x28
 800a42c:	4418      	add	r0, r3
 800a42e:	4481      	add	r9, r0
 800a430:	eb09 60f5 	add.w	r0, r9, r5, ror #27
 800a434:	ea46 0902 	orr.w	r9, r6, r2
 800a438:	ea06 0402 	and.w	r4, r6, r2
 800a43c:	ea09 0901 	and.w	r9, r9, r1
 800a440:	ea49 0904 	orr.w	r9, r9, r4
 800a444:	4481      	add	r9, r0
    P( B, C, D, E, A, R(59) );
 800a446:	9c00      	ldr	r4, [sp, #0]
 800a448:	980b      	ldr	r0, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(58) );
 800a44a:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( B, C, D, E, A, R(59) );
 800a44e:	4060      	eors	r0, r4
 800a450:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a452:	ea05 0c06 	and.w	ip, r5, r6
 800a456:	4060      	eors	r0, r4
 800a458:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a45a:	4060      	eors	r0, r4
 800a45c:	ea4f 70f0 	mov.w	r0, r0, ror #31
 800a460:	900b      	str	r0, [sp, #44]	; 0x2c
 800a462:	ea45 0006 	orr.w	r0, r5, r6
 800a466:	4010      	ands	r0, r2
 800a468:	ea40 0c0c 	orr.w	ip, r0, ip
 800a46c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a46e:	ea4f 05b5 	mov.w	r5, r5, ror #2
 800a472:	4403      	add	r3, r0
 800a474:	440b      	add	r3, r1
 800a476:	449c      	add	ip, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 800a478:	9902      	ldr	r1, [sp, #8]
 800a47a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a47c:	ea86 0405 	eor.w	r4, r6, r5
 800a480:	404b      	eors	r3, r1
 800a482:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a484:	ea83 030b 	eor.w	r3, r3, fp
 800a488:	404b      	eors	r3, r1
 800a48a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800a48e:	930c      	str	r3, [sp, #48]	; 0x30
 800a490:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a492:	4bd4      	ldr	r3, [pc, #848]	; (800a7e4 <mbedtls_internal_sha1_process+0xf3c>)
 800a494:	ea84 0409 	eor.w	r4, r4, r9
 800a498:	4419      	add	r1, r3
 800a49a:	440a      	add	r2, r1
 800a49c:	4414      	add	r4, r2
    P( E, A, B, C, D, R(61) );
 800a49e:	9903      	ldr	r1, [sp, #12]
 800a4a0:	9a00      	ldr	r2, [sp, #0]
    P( B, C, D, E, A, R(59) );
 800a4a2:	eb0c 6cf9 	add.w	ip, ip, r9, ror #27
    P( E, A, B, C, D, R(61) );
 800a4a6:	404a      	eors	r2, r1
 800a4a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a4aa:	ea82 020a 	eor.w	r2, r2, sl
 800a4ae:	404a      	eors	r2, r1
 800a4b0:	ea4f 72f2 	mov.w	r2, r2, ror #31
 800a4b4:	920e      	str	r2, [sp, #56]	; 0x38
 800a4b6:	441a      	add	r2, r3
    P( D, E, A, B, C, R(62) );
 800a4b8:	9905      	ldr	r1, [sp, #20]
 800a4ba:	4416      	add	r6, r2
 800a4bc:	9a02      	ldr	r2, [sp, #8]
    P( A, B, C, D, E, R(60) );
 800a4be:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(62) );
 800a4c2:	4051      	eors	r1, r2
 800a4c4:	9a08      	ldr	r2, [sp, #32]
    P( E, A, B, C, D, R(61) );
 800a4c6:	ea85 0009 	eor.w	r0, r5, r9
    P( D, E, A, B, C, R(62) );
 800a4ca:	4051      	eors	r1, r2
 800a4cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( A, B, C, D, E, R(60) );
 800a4ce:	eb04 64fc 	add.w	r4, r4, ip, ror #27
    P( D, E, A, B, C, R(62) );
 800a4d2:	4051      	eors	r1, r2
 800a4d4:	ea4f 72f1 	mov.w	r2, r1, ror #31
 800a4d8:	9202      	str	r2, [sp, #8]
 800a4da:	441a      	add	r2, r3
    P( C, D, E, A, B, R(63) );
 800a4dc:	9906      	ldr	r1, [sp, #24]
 800a4de:	4415      	add	r5, r2
 800a4e0:	9a03      	ldr	r2, [sp, #12]
    P( E, A, B, C, D, R(61) );
 800a4e2:	ea80 000c 	eor.w	r0, r0, ip
    P( C, D, E, A, B, R(63) );
 800a4e6:	404a      	eors	r2, r1
 800a4e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a4ea:	ea82 0208 	eor.w	r2, r2, r8
 800a4ee:	404a      	eors	r2, r1
 800a4f0:	ea4f 72f2 	mov.w	r2, r2, ror #31
 800a4f4:	9203      	str	r2, [sp, #12]
    P( E, A, B, C, D, R(61) );
 800a4f6:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 800a4fa:	441a      	add	r2, r3
    P( D, E, A, B, C, R(62) );
 800a4fc:	ea89 0e0c 	eor.w	lr, r9, ip
    P( B, C, D, E, A, R(64) );
 800a500:	9907      	ldr	r1, [sp, #28]
 800a502:	4491      	add	r9, r2
 800a504:	9a05      	ldr	r2, [sp, #20]
 800a506:	4430      	add	r0, r6
 800a508:	4051      	eors	r1, r2
 800a50a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(61) );
 800a50c:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( B, C, D, E, A, R(64) );
 800a510:	4051      	eors	r1, r2
 800a512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    P( D, E, A, B, C, R(62) );
 800a514:	ea8e 0e04 	eor.w	lr, lr, r4
    P( B, C, D, E, A, R(64) );
 800a518:	4051      	eors	r1, r2
 800a51a:	ea4f 72f1 	mov.w	r2, r1, ror #31
 800a51e:	9205      	str	r2, [sp, #20]
    P( D, E, A, B, C, R(62) );
 800a520:	ea4f 04b4 	mov.w	r4, r4, ror #2
 800a524:	441a      	add	r2, r3
    P( C, D, E, A, B, R(63) );
 800a526:	ea8c 0704 	eor.w	r7, ip, r4
 800a52a:	44ae      	add	lr, r5
 800a52c:	4494      	add	ip, r2
    P( A, B, C, D, E, R(65) );
 800a52e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800a530:	9a06      	ldr	r2, [sp, #24]
    P( D, E, A, B, C, R(62) );
 800a532:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
    P( A, B, C, D, E, R(65) );
 800a536:	406a      	eors	r2, r5
 800a538:	9d09      	ldr	r5, [sp, #36]	; 0x24
    P( C, D, E, A, B, R(63) );
 800a53a:	4047      	eors	r7, r0
    P( A, B, C, D, E, R(65) );
 800a53c:	406a      	eors	r2, r5
 800a53e:	9d02      	ldr	r5, [sp, #8]
    P( C, D, E, A, B, R(63) );
 800a540:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( A, B, C, D, E, R(65) );
 800a544:	406a      	eors	r2, r5
 800a546:	ea4f 72f2 	mov.w	r2, r2, ror #31
 800a54a:	9206      	str	r2, [sp, #24]
    P( B, C, D, E, A, R(64) );
 800a54c:	ea84 0100 	eor.w	r1, r4, r0
 800a550:	9d06      	ldr	r5, [sp, #24]
 800a552:	444f      	add	r7, r9
    P( C, D, E, A, B, R(63) );
 800a554:	eb07 67fe 	add.w	r7, r7, lr, ror #27
    P( B, C, D, E, A, R(64) );
 800a558:	ea81 010e 	eor.w	r1, r1, lr
 800a55c:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, R(65) );
 800a560:	ea80 020e 	eor.w	r2, r0, lr
 800a564:	441d      	add	r5, r3
 800a566:	442c      	add	r4, r5
 800a568:	407a      	eors	r2, r7
 800a56a:	4422      	add	r2, r4
    P( E, A, B, C, D, R(66) );
 800a56c:	9c07      	ldr	r4, [sp, #28]
 800a56e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a570:	ea84 040b 	eor.w	r4, r4, fp
 800a574:	406c      	eors	r4, r5
 800a576:	9d03      	ldr	r5, [sp, #12]
 800a578:	4461      	add	r1, ip
 800a57a:	406c      	eors	r4, r5
    P( B, C, D, E, A, R(64) );
 800a57c:	eb01 61f7 	add.w	r1, r1, r7, ror #27
    P( E, A, B, C, D, R(66) );
 800a580:	ea4f 74f4 	mov.w	r4, r4, ror #31
    P( A, B, C, D, E, R(65) );
 800a584:	ea4f 07b7 	mov.w	r7, r7, ror #2
 800a588:	18e5      	adds	r5, r4, r3
    P( E, A, B, C, D, R(66) );
 800a58a:	ea8e 0607 	eor.w	r6, lr, r7
 800a58e:	4428      	add	r0, r5
 800a590:	404e      	eors	r6, r1
 800a592:	4406      	add	r6, r0
    P( D, E, A, B, C, R(67) );
 800a594:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a596:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a598:	ea80 000a 	eor.w	r0, r0, sl
 800a59c:	4068      	eors	r0, r5
 800a59e:	9d05      	ldr	r5, [sp, #20]
    P( A, B, C, D, E, R(65) );
 800a5a0:	eb02 62f1 	add.w	r2, r2, r1, ror #27
    P( D, E, A, B, C, R(67) );
 800a5a4:	4068      	eors	r0, r5
    P( E, A, B, C, D, R(66) );
 800a5a6:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(67) );
 800a5aa:	ea4f 70f0 	mov.w	r0, r0, ror #31
 800a5ae:	eb00 0c03 	add.w	ip, r0, r3
 800a5b2:	ea87 0501 	eor.w	r5, r7, r1
 800a5b6:	9300      	str	r3, [sp, #0]
    P( C, D, E, A, B, R(68) );
 800a5b8:	9b08      	ldr	r3, [sp, #32]
 800a5ba:	44e6      	add	lr, ip
    P( D, E, A, B, C, R(67) );
 800a5bc:	4055      	eors	r5, r2
 800a5be:	4475      	add	r5, lr
    P( C, D, E, A, B, R(68) );
 800a5c0:	ea8b 0e03 	eor.w	lr, fp, r3
 800a5c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(67) );
 800a5c6:	ea4f 0cb2 	mov.w	ip, r2, ror #2
    P( C, D, E, A, B, R(68) );
 800a5ca:	ea8e 0e03 	eor.w	lr, lr, r3
 800a5ce:	9b06      	ldr	r3, [sp, #24]
    P( E, A, B, C, D, R(66) );
 800a5d0:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    P( C, D, E, A, B, R(68) );
 800a5d4:	ea8e 0e03 	eor.w	lr, lr, r3
 800a5d8:	9a00      	ldr	r2, [sp, #0]
 800a5da:	ea4f 73fe 	mov.w	r3, lr, ror #31
 800a5de:	eb03 0e02 	add.w	lr, r3, r2
 800a5e2:	ea81 0b0c 	eor.w	fp, r1, ip
 800a5e6:	9307      	str	r3, [sp, #28]
 800a5e8:	4477      	add	r7, lr
    P( B, C, D, E, A, R(69) );
 800a5ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( C, D, E, A, B, R(68) );
 800a5ec:	ea8b 0b06 	eor.w	fp, fp, r6
 800a5f0:	44bb      	add	fp, r7
    P( B, C, D, E, A, R(69) );
 800a5f2:	ea8a 0708 	eor.w	r7, sl, r8
 800a5f6:	405f      	eors	r7, r3
 800a5f8:	4067      	eors	r7, r4
    P( D, E, A, B, C, R(67) );
 800a5fa:	eb05 65f6 	add.w	r5, r5, r6, ror #27
    P( B, C, D, E, A, R(69) );
 800a5fe:	ea4f 73f7 	mov.w	r3, r7, ror #31
    P( C, D, E, A, B, R(68) );
 800a602:	ea4f 06b6 	mov.w	r6, r6, ror #2
 800a606:	189f      	adds	r7, r3, r2
    P( B, C, D, E, A, R(69) );
 800a608:	ea8c 0a06 	eor.w	sl, ip, r6
 800a60c:	4439      	add	r1, r7
 800a60e:	ea8a 0a05 	eor.w	sl, sl, r5
 800a612:	930f      	str	r3, [sp, #60]	; 0x3c
 800a614:	448a      	add	sl, r1
    P( A, B, C, D, E, R(70) );
 800a616:	9b08      	ldr	r3, [sp, #32]
 800a618:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( C, D, E, A, B, R(68) );
 800a61a:	eb0b 6bf5 	add.w	fp, fp, r5, ror #27
    P( A, B, C, D, E, R(70) );
 800a61e:	4059      	eors	r1, r3
 800a620:	9b02      	ldr	r3, [sp, #8]
    P( B, C, D, E, A, R(69) );
 800a622:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( A, B, C, D, E, R(70) );
 800a626:	4059      	eors	r1, r3
 800a628:	4041      	eors	r1, r0
 800a62a:	ea4f 71f1 	mov.w	r1, r1, ror #31
    P( E, A, B, C, D, R(71) );
 800a62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    P( A, B, C, D, E, R(70) );
 800a630:	ea86 0905 	eor.w	r9, r6, r5
 800a634:	188f      	adds	r7, r1, r2
 800a636:	eb0c 0207 	add.w	r2, ip, r7
 800a63a:	ea89 090b 	eor.w	r9, r9, fp
 800a63e:	4491      	add	r9, r2
    P( E, A, B, C, D, R(71) );
 800a640:	ea88 0203 	eor.w	r2, r8, r3
 800a644:	9b03      	ldr	r3, [sp, #12]
    P( B, C, D, E, A, R(69) );
 800a646:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
    P( E, A, B, C, D, R(71) );
 800a64a:	405a      	eors	r2, r3
 800a64c:	9b07      	ldr	r3, [sp, #28]
    P( A, B, C, D, E, R(70) );
 800a64e:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( E, A, B, C, D, R(71) );
 800a652:	405a      	eors	r2, r3
 800a654:	9b00      	ldr	r3, [sp, #0]
 800a656:	ea4f 72f2 	mov.w	r2, r2, ror #31
 800a65a:	18d7      	adds	r7, r2, r3
 800a65c:	ea85 080b 	eor.w	r8, r5, fp
 800a660:	443e      	add	r6, r7
 800a662:	ea88 080a 	eor.w	r8, r8, sl
    P( D, E, A, B, C, R(72) );
 800a666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a668:	44b0      	add	r8, r6
 800a66a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(70) );
 800a66c:	eb09 69fa 	add.w	r9, r9, sl, ror #27
    P( D, E, A, B, C, R(72) );
 800a670:	405e      	eors	r6, r3
 800a672:	9b05      	ldr	r3, [sp, #20]
    P( E, A, B, C, D, R(71) );
 800a674:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( D, E, A, B, C, R(72) );
 800a678:	405e      	eors	r6, r3
 800a67a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a67c:	ea8b 0c0a 	eor.w	ip, fp, sl
 800a680:	405e      	eors	r6, r3
 800a682:	9b00      	ldr	r3, [sp, #0]
 800a684:	ea4f 76f6 	mov.w	r6, r6, ror #31
 800a688:	18f7      	adds	r7, r6, r3
 800a68a:	443d      	add	r5, r7
 800a68c:	ea8c 0c09 	eor.w	ip, ip, r9
    P( C, D, E, A, B, R(73) );
 800a690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a692:	44ac      	add	ip, r5
 800a694:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    P( E, A, B, C, D, R(71) );
 800a696:	eb08 68f9 	add.w	r8, r8, r9, ror #27
    P( C, D, E, A, B, R(73) );
 800a69a:	405d      	eors	r5, r3
 800a69c:	9b06      	ldr	r3, [sp, #24]
    P( D, E, A, B, C, R(72) );
 800a69e:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( C, D, E, A, B, R(73) );
 800a6a2:	405d      	eors	r5, r3
 800a6a4:	404d      	eors	r5, r1
 800a6a6:	9b00      	ldr	r3, [sp, #0]
 800a6a8:	ea4f 75f5 	mov.w	r5, r5, ror #31
 800a6ac:	18ef      	adds	r7, r5, r3
 800a6ae:	44bb      	add	fp, r7
    P( B, C, D, E, A, R(74) );
 800a6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    P( C, D, E, A, B, R(73) );
 800a6b4:	ea8a 0e09 	eor.w	lr, sl, r9
    P( B, C, D, E, A, R(74) );
 800a6b8:	405f      	eors	r7, r3
 800a6ba:	407c      	eors	r4, r7
 800a6bc:	9b00      	ldr	r3, [sp, #0]
 800a6be:	4054      	eors	r4, r2
    P( D, E, A, B, C, R(72) );
 800a6c0:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( B, C, D, E, A, R(74) );
 800a6c4:	ea4f 74f4 	mov.w	r4, r4, ror #31
    P( C, D, E, A, B, R(73) );
 800a6c8:	ea8e 0e08 	eor.w	lr, lr, r8
 800a6cc:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( B, C, D, E, A, R(74) );
 800a6d0:	ea89 0708 	eor.w	r7, r9, r8
 800a6d4:	44de      	add	lr, fp
 800a6d6:	eb04 0b03 	add.w	fp, r4, r3
    P( A, B, C, D, E, R(75) );
 800a6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6dc:	44da      	add	sl, fp
    P( B, C, D, E, A, R(74) );
 800a6de:	ea87 070c 	eor.w	r7, r7, ip
 800a6e2:	4457      	add	r7, sl
    P( A, B, C, D, E, R(75) );
 800a6e4:	469a      	mov	sl, r3
 800a6e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( C, D, E, A, B, R(73) );
 800a6e8:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
    P( A, B, C, D, E, R(75) );
 800a6ec:	ea8a 0a03 	eor.w	sl, sl, r3
 800a6f0:	ea8a 0000 	eor.w	r0, sl, r0
 800a6f4:	9b00      	ldr	r3, [sp, #0]
 800a6f6:	4046      	eors	r6, r0
    P( B, C, D, E, A, R(74) );
 800a6f8:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, R(75) );
 800a6fc:	ea4f 76f6 	mov.w	r6, r6, ror #31
 800a700:	eb06 0a03 	add.w	sl, r6, r3
 800a704:	ea88 000c 	eor.w	r0, r8, ip
    P( E, A, B, C, D, R(76) );
 800a708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a70a:	44d1      	add	r9, sl
    P( A, B, C, D, E, R(75) );
 800a70c:	ea80 000e 	eor.w	r0, r0, lr
 800a710:	4448      	add	r0, r9
    P( E, A, B, C, D, R(76) );
 800a712:	4699      	mov	r9, r3
 800a714:	9b02      	ldr	r3, [sp, #8]
    P( B, C, D, E, A, R(74) );
 800a716:	eb07 67fe 	add.w	r7, r7, lr, ror #27
    P( E, A, B, C, D, R(76) );
 800a71a:	ea89 0903 	eor.w	r9, r9, r3
 800a71e:	9b07      	ldr	r3, [sp, #28]
    P( A, B, C, D, E, R(75) );
 800a720:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( E, A, B, C, D, R(76) );
 800a724:	ea89 0903 	eor.w	r9, r9, r3
 800a728:	ea89 0505 	eor.w	r5, r9, r5
 800a72c:	9b00      	ldr	r3, [sp, #0]
 800a72e:	ea4f 75f5 	mov.w	r5, r5, ror #31
 800a732:	eb05 0a03 	add.w	sl, r5, r3
 800a736:	ea8c 090e 	eor.w	r9, ip, lr
    P( D, E, A, B, C, R(77) );
 800a73a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a73c:	44d0      	add	r8, sl
    P( E, A, B, C, D, R(76) );
 800a73e:	ea89 0907 	eor.w	r9, r9, r7
 800a742:	44c1      	add	r9, r8
    P( D, E, A, B, C, R(77) );
 800a744:	4698      	mov	r8, r3
 800a746:	9b03      	ldr	r3, [sp, #12]
    P( A, B, C, D, E, R(75) );
 800a748:	eb00 60f7 	add.w	r0, r0, r7, ror #27
    P( D, E, A, B, C, R(77) );
 800a74c:	ea88 0803 	eor.w	r8, r8, r3
 800a750:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( E, A, B, C, D, R(76) );
 800a752:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( D, E, A, B, C, R(77) );
 800a756:	ea88 0803 	eor.w	r8, r8, r3
 800a75a:	9b00      	ldr	r3, [sp, #0]
 800a75c:	ea88 0804 	eor.w	r8, r8, r4
 800a760:	eb03 78f8 	add.w	r8, r3, r8, ror #31
    P( C, D, E, A, B, R(78) );
 800a764:	9c05      	ldr	r4, [sp, #20]
 800a766:	9b02      	ldr	r3, [sp, #8]
 800a768:	44c4      	add	ip, r8
 800a76a:	405c      	eors	r4, r3
 800a76c:	4061      	eors	r1, r4
 800a76e:	9b00      	ldr	r3, [sp, #0]
    P( D, E, A, B, C, R(77) );
 800a770:	ea8e 0807 	eor.w	r8, lr, r7
    P( C, D, E, A, B, R(78) );
 800a774:	4071      	eors	r1, r6
    P( E, A, B, C, D, R(76) );
 800a776:	eb09 69f0 	add.w	r9, r9, r0, ror #27
    P( D, E, A, B, C, R(77) );
 800a77a:	ea88 0800 	eor.w	r8, r8, r0
 800a77e:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 800a782:	ea4f 00b0 	mov.w	r0, r0, ror #2
 800a786:	448e      	add	lr, r1
    P( C, D, E, A, B, R(78) );
 800a788:	ea87 0100 	eor.w	r1, r7, r0
 800a78c:	ea81 0109 	eor.w	r1, r1, r9
    P( B, C, D, E, A, R(79) );
 800a790:	9b03      	ldr	r3, [sp, #12]
 800a792:	448e      	add	lr, r1
 800a794:	9906      	ldr	r1, [sp, #24]
 800a796:	44c4      	add	ip, r8
 800a798:	4059      	eors	r1, r3
 800a79a:	404a      	eors	r2, r1

#undef K
#undef F

    ctx->state[0] += A;
 800a79c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    P( B, C, D, E, A, R(79) );
 800a79e:	4055      	eors	r5, r2
    ctx->state[0] += A;
 800a7a0:	9a00      	ldr	r2, [sp, #0]
    P( D, E, A, B, C, R(77) );
 800a7a2:	eb0c 6cf9 	add.w	ip, ip, r9, ror #27
    ctx->state[0] += A;
 800a7a6:	441a      	add	r2, r3
    P( C, D, E, A, B, R(78) );
 800a7a8:	ea4f 09b9 	mov.w	r9, r9, ror #2
    ctx->state[0] += A;
 800a7ac:	eb02 75f5 	add.w	r5, r2, r5, ror #31
    P( B, C, D, E, A, R(79) );
 800a7b0:	ea80 0309 	eor.w	r3, r0, r9
 800a7b4:	ea83 030c 	eor.w	r3, r3, ip
    ctx->state[0] += A;
 800a7b8:	442f      	add	r7, r5
    P( C, D, E, A, B, R(78) );
 800a7ba:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
    ctx->state[0] += A;
 800a7be:	441f      	add	r7, r3
 800a7c0:	9b01      	ldr	r3, [sp, #4]
 800a7c2:	eb07 67fe 	add.w	r7, r7, lr, ror #27
 800a7c6:	609f      	str	r7, [r3, #8]
    ctx->state[1] += B;
 800a7c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ctx->state[2] += C;
 800a7ca:	9a01      	ldr	r2, [sp, #4]
    ctx->state[1] += B;
 800a7cc:	eb03 010e 	add.w	r1, r3, lr
 800a7d0:	9b01      	ldr	r3, [sp, #4]
 800a7d2:	60d9      	str	r1, [r3, #12]
    ctx->state[2] += C;
 800a7d4:	9b04      	ldr	r3, [sp, #16]
 800a7d6:	eb03 03bc 	add.w	r3, r3, ip, ror #2
 800a7da:	6113      	str	r3, [r2, #16]
    ctx->state[3] += D;
 800a7dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a7de:	444b      	add	r3, r9
 800a7e0:	e002      	b.n	800a7e8 <mbedtls_internal_sha1_process+0xf40>
 800a7e2:	bf00      	nop
 800a7e4:	ca62c1d6 	.word	0xca62c1d6
 800a7e8:	6153      	str	r3, [r2, #20]
    ctx->state[4] += E;
 800a7ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7ec:	4418      	add	r0, r3
 800a7ee:	6190      	str	r0, [r2, #24]

    return( 0 );
}
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	b017      	add	sp, #92	; 0x5c
 800a7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a7f8 <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 800a7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	460f      	mov	r7, r1
    uint32_t left;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 800a800:	4614      	mov	r4, r2
 800a802:	b912      	cbnz	r2, 800a80a <mbedtls_sha1_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
 800a804:	2000      	movs	r0, #0
}
 800a806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    left = ctx->total[0] & 0x3F;
 800a80a:	6803      	ldr	r3, [r0, #0]
 800a80c:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
 800a810:	4413      	add	r3, r2
    if( ctx->total[0] < (uint32_t) ilen )
 800a812:	429a      	cmp	r2, r3
    ctx->total[0] += (uint32_t) ilen;
 800a814:	602b      	str	r3, [r5, #0]
        ctx->total[1]++;
 800a816:	bf82      	ittt	hi
 800a818:	686b      	ldrhi	r3, [r5, #4]
 800a81a:	3301      	addhi	r3, #1
 800a81c:	606b      	strhi	r3, [r5, #4]
    if( left && ilen >= fill )
 800a81e:	b308      	cbz	r0, 800a864 <mbedtls_sha1_update_ret+0x6c>
    fill = 64 - left;
 800a820:	f1c0 0640 	rsb	r6, r0, #64	; 0x40
    if( left && ilen >= fill )
 800a824:	42b2      	cmp	r2, r6
 800a826:	d316      	bcc.n	800a856 <mbedtls_sha1_update_ret+0x5e>
        memcpy( (void *) (ctx->buffer + left), input, fill );
 800a828:	f105 081c 	add.w	r8, r5, #28
 800a82c:	4632      	mov	r2, r6
 800a82e:	4440      	add	r0, r8
 800a830:	f007 fac5 	bl	8011dbe <memcpy>
        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 800a834:	4641      	mov	r1, r8
 800a836:	4628      	mov	r0, r5
 800a838:	f7ff f836 	bl	80098a8 <mbedtls_internal_sha1_process>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d1e2      	bne.n	800a806 <mbedtls_sha1_update_ret+0xe>
        input += fill;
 800a840:	4437      	add	r7, r6
        ilen  -= fill;
 800a842:	1ba6      	subs	r6, r4, r6
    if( left && ilen >= fill )
 800a844:	4634      	mov	r4, r6
 800a846:	1b31      	subs	r1, r6, r4
    while( ilen >= 64 )
 800a848:	2c3f      	cmp	r4, #63	; 0x3f
 800a84a:	4439      	add	r1, r7
 800a84c:	d80c      	bhi.n	800a868 <mbedtls_sha1_update_ret+0x70>
    if( ilen > 0 )
 800a84e:	2c00      	cmp	r4, #0
 800a850:	d0d8      	beq.n	800a804 <mbedtls_sha1_update_ret+0xc>
 800a852:	460f      	mov	r7, r1
 800a854:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 800a856:	351c      	adds	r5, #28
 800a858:	4622      	mov	r2, r4
 800a85a:	4639      	mov	r1, r7
 800a85c:	4428      	add	r0, r5
 800a85e:	f007 faae 	bl	8011dbe <memcpy>
 800a862:	e7cf      	b.n	800a804 <mbedtls_sha1_update_ret+0xc>
    if( left && ilen >= fill )
 800a864:	4616      	mov	r6, r2
 800a866:	e7ed      	b.n	800a844 <mbedtls_sha1_update_ret+0x4c>
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
 800a868:	4628      	mov	r0, r5
 800a86a:	f7ff f81d 	bl	80098a8 <mbedtls_internal_sha1_process>
 800a86e:	2800      	cmp	r0, #0
 800a870:	d1c9      	bne.n	800a806 <mbedtls_sha1_update_ret+0xe>
        ilen  -= 64;
 800a872:	3c40      	subs	r4, #64	; 0x40
 800a874:	e7e7      	b.n	800a846 <mbedtls_sha1_update_ret+0x4e>

0800a876 <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 800a876:	b570      	push	{r4, r5, r6, lr}
 800a878:	4604      	mov	r4, r0
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 800a87a:	2280      	movs	r2, #128	; 0x80
    used = ctx->total[0] & 0x3F;
 800a87c:	6803      	ldr	r3, [r0, #0]
{
 800a87e:	460d      	mov	r5, r1
    used = ctx->total[0] & 0x3F;
 800a880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
 800a884:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 800a886:	2838      	cmp	r0, #56	; 0x38
    ctx->buffer[used++] = 0x80;
 800a888:	4423      	add	r3, r4
 800a88a:	771a      	strb	r2, [r3, #28]
 800a88c:	f104 061c 	add.w	r6, r4, #28
    if( used <= 56 )
 800a890:	d855      	bhi.n	800a93e <mbedtls_sha1_finish_ret+0xc8>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 800a892:	2100      	movs	r1, #0
 800a894:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 800a898:	4430      	add	r0, r6
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
 800a89a:	f007 fab5 	bl	8011e08 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 800a89e:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 800a8a0:	6861      	ldr	r1, [r4, #4]
    high = ( ctx->total[0] >> 29 )
 800a8a2:	0f5a      	lsrs	r2, r3, #29
 800a8a4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 800a8a8:	0e11      	lsrs	r1, r2, #24
    low  = ( ctx->total[0] <<  3 );
 800a8aa:	00db      	lsls	r3, r3, #3
    PUT_UINT32_BE( high, ctx->buffer, 56 );
 800a8ac:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 800a8b0:	0c11      	lsrs	r1, r2, #16
 800a8b2:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
 800a8b6:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
 800a8ba:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 800a8bc:	0e1a      	lsrs	r2, r3, #24
 800a8be:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 800a8c2:	0c1a      	lsrs	r2, r3, #16
 800a8c4:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 800a8c8:	0a1a      	lsrs	r2, r3, #8
    PUT_UINT32_BE( high, ctx->buffer, 56 );
 800a8ca:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 800a8ce:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
 800a8d2:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 800a8d6:	4631      	mov	r1, r6
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f7fe ffe5 	bl	80098a8 <mbedtls_internal_sha1_process>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	d12c      	bne.n	800a93c <mbedtls_sha1_finish_ret+0xc6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 800a8e2:	7ae3      	ldrb	r3, [r4, #11]
 800a8e4:	702b      	strb	r3, [r5, #0]
 800a8e6:	8963      	ldrh	r3, [r4, #10]
 800a8e8:	706b      	strb	r3, [r5, #1]
 800a8ea:	68a3      	ldr	r3, [r4, #8]
 800a8ec:	0a1b      	lsrs	r3, r3, #8
 800a8ee:	70ab      	strb	r3, [r5, #2]
 800a8f0:	68a3      	ldr	r3, [r4, #8]
 800a8f2:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 800a8f4:	7be3      	ldrb	r3, [r4, #15]
 800a8f6:	712b      	strb	r3, [r5, #4]
 800a8f8:	89e3      	ldrh	r3, [r4, #14]
 800a8fa:	716b      	strb	r3, [r5, #5]
 800a8fc:	68e3      	ldr	r3, [r4, #12]
 800a8fe:	0a1b      	lsrs	r3, r3, #8
 800a900:	71ab      	strb	r3, [r5, #6]
 800a902:	68e3      	ldr	r3, [r4, #12]
 800a904:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 800a906:	7ce3      	ldrb	r3, [r4, #19]
 800a908:	722b      	strb	r3, [r5, #8]
 800a90a:	8a63      	ldrh	r3, [r4, #18]
 800a90c:	726b      	strb	r3, [r5, #9]
 800a90e:	6923      	ldr	r3, [r4, #16]
 800a910:	0a1b      	lsrs	r3, r3, #8
 800a912:	72ab      	strb	r3, [r5, #10]
 800a914:	6923      	ldr	r3, [r4, #16]
 800a916:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 800a918:	7de3      	ldrb	r3, [r4, #23]
 800a91a:	732b      	strb	r3, [r5, #12]
 800a91c:	8ae3      	ldrh	r3, [r4, #22]
 800a91e:	736b      	strb	r3, [r5, #13]
 800a920:	6963      	ldr	r3, [r4, #20]
 800a922:	0a1b      	lsrs	r3, r3, #8
 800a924:	73ab      	strb	r3, [r5, #14]
 800a926:	6963      	ldr	r3, [r4, #20]
 800a928:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 800a92a:	7ee3      	ldrb	r3, [r4, #27]
 800a92c:	742b      	strb	r3, [r5, #16]
 800a92e:	8b63      	ldrh	r3, [r4, #26]
 800a930:	746b      	strb	r3, [r5, #17]
 800a932:	69a3      	ldr	r3, [r4, #24]
 800a934:	0a1b      	lsrs	r3, r3, #8
 800a936:	74ab      	strb	r3, [r5, #18]
 800a938:	69a3      	ldr	r3, [r4, #24]
 800a93a:	74eb      	strb	r3, [r5, #19]

    return( 0 );
}
 800a93c:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
 800a93e:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 800a942:	2100      	movs	r1, #0
 800a944:	4430      	add	r0, r6
 800a946:	f007 fa5f 	bl	8011e08 <memset>
        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 800a94a:	4631      	mov	r1, r6
 800a94c:	4620      	mov	r0, r4
 800a94e:	f7fe ffab 	bl	80098a8 <mbedtls_internal_sha1_process>
 800a952:	2800      	cmp	r0, #0
 800a954:	d1f2      	bne.n	800a93c <mbedtls_sha1_finish_ret+0xc6>
        memset( ctx->buffer, 0, 56 );
 800a956:	4601      	mov	r1, r0
 800a958:	2238      	movs	r2, #56	; 0x38
 800a95a:	4630      	mov	r0, r6
 800a95c:	e79d      	b.n	800a89a <mbedtls_sha1_finish_ret+0x24>

0800a95e <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 800a95e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a960:	b099      	sub	sp, #100	; 0x64
 800a962:	4606      	mov	r6, r0
    mbedtls_sha1_context ctx;

    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha1_init( &ctx );
 800a964:	a801      	add	r0, sp, #4
{
 800a966:	460f      	mov	r7, r1
 800a968:	4615      	mov	r5, r2
    mbedtls_sha1_init( &ctx );
 800a96a:	f7fe ff74 	bl	8009856 <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
 800a96e:	a801      	add	r0, sp, #4
 800a970:	f7fe ff80 	bl	8009874 <mbedtls_sha1_starts_ret>
 800a974:	4604      	mov	r4, r0
 800a976:	b958      	cbnz	r0, 800a990 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
 800a978:	463a      	mov	r2, r7
 800a97a:	4631      	mov	r1, r6
 800a97c:	a801      	add	r0, sp, #4
 800a97e:	f7ff ff3b 	bl	800a7f8 <mbedtls_sha1_update_ret>
 800a982:	4604      	mov	r4, r0
 800a984:	b920      	cbnz	r0, 800a990 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
 800a986:	4629      	mov	r1, r5
 800a988:	a801      	add	r0, sp, #4
 800a98a:	f7ff ff74 	bl	800a876 <mbedtls_sha1_finish_ret>
 800a98e:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
 800a990:	a801      	add	r0, sp, #4
 800a992:	f7fe ff64 	bl	800985e <mbedtls_sha1_free>

    return( ret );
}
 800a996:	4620      	mov	r0, r4
 800a998:	b019      	add	sp, #100	; 0x64
 800a99a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a99c <mbedtls_sha256_init>:

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 800a99c:	226c      	movs	r2, #108	; 0x6c
 800a99e:	2100      	movs	r1, #0
 800a9a0:	f007 ba32 	b.w	8011e08 <memset>

0800a9a4 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 800a9a4:	b110      	cbz	r0, 800a9ac <mbedtls_sha256_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 800a9a6:	216c      	movs	r1, #108	; 0x6c
 800a9a8:	f7fd bdba 	b.w	8008520 <mbedtls_platform_zeroize>
 800a9ac:	4770      	bx	lr

0800a9ae <mbedtls_sha256_clone>:
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 800a9ae:	b508      	push	{r3, lr}
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
 800a9b0:	226c      	movs	r2, #108	; 0x6c
 800a9b2:	f007 fa04 	bl	8011dbe <memcpy>
 800a9b6:	bd08      	pop	{r3, pc}

0800a9b8 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 800a9bc:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
 800a9be:	b9b9      	cbnz	r1, 800a9f0 <mbedtls_sha256_starts_ret+0x38>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 800a9c0:	4b18      	ldr	r3, [pc, #96]	; (800aa24 <mbedtls_sha256_starts_ret+0x6c>)
 800a9c2:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
 800a9c4:	4b18      	ldr	r3, [pc, #96]	; (800aa28 <mbedtls_sha256_starts_ret+0x70>)
 800a9c6:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
 800a9c8:	4b18      	ldr	r3, [pc, #96]	; (800aa2c <mbedtls_sha256_starts_ret+0x74>)
 800a9ca:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
 800a9cc:	4b18      	ldr	r3, [pc, #96]	; (800aa30 <mbedtls_sha256_starts_ret+0x78>)
 800a9ce:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
 800a9d0:	4b18      	ldr	r3, [pc, #96]	; (800aa34 <mbedtls_sha256_starts_ret+0x7c>)
 800a9d2:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
 800a9d4:	4b18      	ldr	r3, [pc, #96]	; (800aa38 <mbedtls_sha256_starts_ret+0x80>)
 800a9d6:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
 800a9d8:	4b18      	ldr	r3, [pc, #96]	; (800aa3c <mbedtls_sha256_starts_ret+0x84>)
 800a9da:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 800a9dc:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 800a9e0:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 800a9e4:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
 800a9e8:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 800a9ea:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
 800a9f0:	4b13      	ldr	r3, [pc, #76]	; (800aa40 <mbedtls_sha256_starts_ret+0x88>)
 800a9f2:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
 800a9f4:	4b13      	ldr	r3, [pc, #76]	; (800aa44 <mbedtls_sha256_starts_ret+0x8c>)
 800a9f6:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
 800a9f8:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 800a9fc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800aa00:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 800aa04:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
 800aa06:	4b10      	ldr	r3, [pc, #64]	; (800aa48 <mbedtls_sha256_starts_ret+0x90>)
 800aa08:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
 800aa0a:	4b10      	ldr	r3, [pc, #64]	; (800aa4c <mbedtls_sha256_starts_ret+0x94>)
 800aa0c:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
 800aa0e:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 800aa12:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 800aa16:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 800aa1a:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 800aa1c:	4b0c      	ldr	r3, [pc, #48]	; (800aa50 <mbedtls_sha256_starts_ret+0x98>)
 800aa1e:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 800aa20:	4b0c      	ldr	r3, [pc, #48]	; (800aa54 <mbedtls_sha256_starts_ret+0x9c>)
 800aa22:	e7e1      	b.n	800a9e8 <mbedtls_sha256_starts_ret+0x30>
 800aa24:	6a09e667 	.word	0x6a09e667
 800aa28:	bb67ae85 	.word	0xbb67ae85
 800aa2c:	3c6ef372 	.word	0x3c6ef372
 800aa30:	a54ff53a 	.word	0xa54ff53a
 800aa34:	510e527f 	.word	0x510e527f
 800aa38:	9b05688c 	.word	0x9b05688c
 800aa3c:	1f83d9ab 	.word	0x1f83d9ab
 800aa40:	c1059ed8 	.word	0xc1059ed8
 800aa44:	367cd507 	.word	0x367cd507
 800aa48:	f70e5939 	.word	0xf70e5939
 800aa4c:	ffc00b31 	.word	0xffc00b31
 800aa50:	64f98fa7 	.word	0x64f98fa7
 800aa54:	befa4fa4 	.word	0xbefa4fa4

0800aa58 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 800aa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5c:	f100 0308 	add.w	r3, r0, #8
 800aa60:	b0cf      	sub	sp, #316	; 0x13c
 800aa62:	9305      	str	r3, [sp, #20]
 800aa64:	461a      	mov	r2, r3
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 800aa66:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
 800aa68:	f852 0b04 	ldr.w	r0, [r2], #4
 800aa6c:	ac06      	add	r4, sp, #24
 800aa6e:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    for( i = 0; i < 8; i++ )
 800aa72:	3301      	adds	r3, #1
 800aa74:	2b08      	cmp	r3, #8
 800aa76:	d1f7      	bne.n	800aa68 <mbedtls_internal_sha256_process+0x10>
 800aa78:	2200      	movs	r2, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 800aa7a:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 800aa7e:	784b      	ldrb	r3, [r1, #1]
 800aa80:	7808      	ldrb	r0, [r1, #0]
 800aa82:	041b      	lsls	r3, r3, #16
 800aa84:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800aa88:	78c8      	ldrb	r0, [r1, #3]
 800aa8a:	3104      	adds	r1, #4
 800aa8c:	4303      	orrs	r3, r0
 800aa8e:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 800aa92:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800aa96:	f84b 3022 	str.w	r3, [fp, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 800aa9a:	3201      	adds	r2, #1
 800aa9c:	2a10      	cmp	r2, #16
 800aa9e:	d1ee      	bne.n	800aa7e <mbedtls_internal_sha256_process+0x26>
 800aaa0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aaa2:	46de      	mov	lr, fp
 800aaa4:	9101      	str	r1, [sp, #4]
 800aaa6:	499b      	ldr	r1, [pc, #620]	; (800ad14 <mbedtls_internal_sha256_process+0x2bc>)
 800aaa8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800aaac:	460d      	mov	r5, r1
 800aaae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aab0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aab4:	9b08      	ldr	r3, [sp, #32]
 800aab6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800aab8:	9e07      	ldr	r6, [sp, #28]
 800aaba:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800aabe:	9102      	str	r1, [sp, #8]

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 800aac0:	9901      	ldr	r1, [sp, #4]
 800aac2:	f8de 0000 	ldr.w	r0, [lr]
 800aac6:	ea4f 24f1 	mov.w	r4, r1, ror #11
 800aaca:	ea84 14b1 	eor.w	r4, r4, r1, ror #6
 800aace:	ea84 6471 	eor.w	r4, r4, r1, ror #25
 800aad2:	6829      	ldr	r1, [r5, #0]
 800aad4:	3520      	adds	r5, #32
 800aad6:	4401      	add	r1, r0
 800aad8:	9801      	ldr	r0, [sp, #4]
 800aada:	440c      	add	r4, r1
 800aadc:	ea87 010a 	eor.w	r1, r7, sl
 800aae0:	4001      	ands	r1, r0
 800aae2:	ea81 010a 	eor.w	r1, r1, sl
 800aae6:	440c      	add	r4, r1
 800aae8:	ea46 0009 	orr.w	r0, r6, r9
 800aaec:	ea4f 3179 	mov.w	r1, r9, ror #13
 800aaf0:	44a0      	add	r8, r4
 800aaf2:	ea81 01b9 	eor.w	r1, r1, r9, ror #2
 800aaf6:	ea06 0409 	and.w	r4, r6, r9
 800aafa:	4018      	ands	r0, r3
 800aafc:	ea81 51b9 	eor.w	r1, r1, r9, ror #22
 800ab00:	4320      	orrs	r0, r4
 800ab02:	4408      	add	r0, r1
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 800ab04:	f855 4c1c 	ldr.w	r4, [r5, #-28]
 800ab08:	f8de 1004 	ldr.w	r1, [lr, #4]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 800ab0c:	4442      	add	r2, r8
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 800ab0e:	440c      	add	r4, r1
 800ab10:	9901      	ldr	r1, [sp, #4]
 800ab12:	44a2      	add	sl, r4
 800ab14:	ea87 0401 	eor.w	r4, r7, r1
 800ab18:	4014      	ands	r4, r2
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 800ab1a:	4480      	add	r8, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 800ab1c:	ea84 0007 	eor.w	r0, r4, r7
 800ab20:	eb0a 0400 	add.w	r4, sl, r0
 800ab24:	ea4f 2af2 	mov.w	sl, r2, ror #11
 800ab28:	ea8a 1ab2 	eor.w	sl, sl, r2, ror #6
 800ab2c:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
 800ab30:	44a2      	add	sl, r4
 800ab32:	ea48 0109 	orr.w	r1, r8, r9
 800ab36:	ea4f 3478 	mov.w	r4, r8, ror #13
 800ab3a:	ea08 0009 	and.w	r0, r8, r9
 800ab3e:	ea84 04b8 	eor.w	r4, r4, r8, ror #2
 800ab42:	4031      	ands	r1, r6
 800ab44:	4301      	orrs	r1, r0
 800ab46:	ea84 54b8 	eor.w	r4, r4, r8, ror #22
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 800ab4a:	f855 0c18 	ldr.w	r0, [r5, #-24]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 800ab4e:	440c      	add	r4, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 800ab50:	f8de 1008 	ldr.w	r1, [lr, #8]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 800ab54:	4453      	add	r3, sl
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 800ab56:	4408      	add	r0, r1
 800ab58:	9901      	ldr	r1, [sp, #4]
 800ab5a:	4407      	add	r7, r0
 800ab5c:	ea82 0001 	eor.w	r0, r2, r1
 800ab60:	4018      	ands	r0, r3
 800ab62:	ea80 0c01 	eor.w	ip, r0, r1
 800ab66:	eb07 000c 	add.w	r0, r7, ip
 800ab6a:	ea4f 27f3 	mov.w	r7, r3, ror #11
 800ab6e:	ea87 17b3 	eor.w	r7, r7, r3, ror #6
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 800ab72:	4454      	add	r4, sl
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 800ab74:	ea87 6773 	eor.w	r7, r7, r3, ror #25
 800ab78:	4407      	add	r7, r0
 800ab7a:	ea48 0104 	orr.w	r1, r8, r4
 800ab7e:	ea4f 3074 	mov.w	r0, r4, ror #13
 800ab82:	eb07 0c06 	add.w	ip, r7, r6
 800ab86:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 800ab8a:	ea08 0604 	and.w	r6, r8, r4
 800ab8e:	ea01 0109 	and.w	r1, r1, r9
 800ab92:	4331      	orrs	r1, r6
 800ab94:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 800ab98:	f8de 600c 	ldr.w	r6, [lr, #12]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 800ab9c:	4408      	add	r0, r1
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 800ab9e:	f855 1c14 	ldr.w	r1, [r5, #-20]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 800aba2:	4438      	add	r0, r7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 800aba4:	4431      	add	r1, r6
 800aba6:	9e01      	ldr	r6, [sp, #4]
 800aba8:	ea82 0703 	eor.w	r7, r2, r3
 800abac:	4431      	add	r1, r6
 800abae:	ea07 070c 	and.w	r7, r7, ip
 800abb2:	ea4f 26fc 	mov.w	r6, ip, ror #11
 800abb6:	4057      	eors	r7, r2
 800abb8:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
 800abbc:	4439      	add	r1, r7
 800abbe:	ea86 667c 	eor.w	r6, r6, ip, ror #25
 800abc2:	440e      	add	r6, r1
 800abc4:	ea44 0700 	orr.w	r7, r4, r0
 800abc8:	ea4f 3170 	mov.w	r1, r0, ror #13
 800abcc:	ea04 0a00 	and.w	sl, r4, r0
 800abd0:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 800abd4:	ea07 0708 	and.w	r7, r7, r8
 800abd8:	ea47 070a 	orr.w	r7, r7, sl
 800abdc:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 800abe0:	4439      	add	r1, r7
 800abe2:	4431      	add	r1, r6
 800abe4:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 800abe6:	f8de 7010 	ldr.w	r7, [lr, #16]
 800abea:	f855 6c10 	ldr.w	r6, [r5, #-16]
 800abee:	ea83 0a0c 	eor.w	sl, r3, ip
 800abf2:	443e      	add	r6, r7
 800abf4:	4432      	add	r2, r6
 800abf6:	ea0a 0a09 	and.w	sl, sl, r9
 800abfa:	ea4f 26f9 	mov.w	r6, r9, ror #11
 800abfe:	ea8a 0a03 	eor.w	sl, sl, r3
 800ac02:	ea86 16b9 	eor.w	r6, r6, r9, ror #6
 800ac06:	4452      	add	r2, sl
 800ac08:	ea86 6679 	eor.w	r6, r6, r9, ror #25
 800ac0c:	4416      	add	r6, r2
 800ac0e:	ea40 0701 	orr.w	r7, r0, r1
 800ac12:	ea4f 3271 	mov.w	r2, r1, ror #13
 800ac16:	ea00 0a01 	and.w	sl, r0, r1
 800ac1a:	ea82 02b1 	eor.w	r2, r2, r1, ror #2
 800ac1e:	4027      	ands	r7, r4
 800ac20:	ea47 070a 	orr.w	r7, r7, sl
 800ac24:	ea82 52b1 	eor.w	r2, r2, r1, ror #22
 800ac28:	443a      	add	r2, r7
 800ac2a:	4432      	add	r2, r6
 800ac2c:	44b0      	add	r8, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 800ac2e:	f8de 7014 	ldr.w	r7, [lr, #20]
 800ac32:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 800ac36:	ea8c 0a09 	eor.w	sl, ip, r9
 800ac3a:	443e      	add	r6, r7
 800ac3c:	4433      	add	r3, r6
 800ac3e:	ea0a 0a08 	and.w	sl, sl, r8
 800ac42:	ea4f 26f8 	mov.w	r6, r8, ror #11
 800ac46:	ea8a 0a0c 	eor.w	sl, sl, ip
 800ac4a:	ea86 16b8 	eor.w	r6, r6, r8, ror #6
 800ac4e:	4453      	add	r3, sl
 800ac50:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 800ac54:	441e      	add	r6, r3
 800ac56:	eb04 0a06 	add.w	sl, r4, r6
 800ac5a:	ea4f 3372 	mov.w	r3, r2, ror #13
 800ac5e:	ea41 0402 	orr.w	r4, r1, r2
 800ac62:	ea01 0702 	and.w	r7, r1, r2
 800ac66:	4004      	ands	r4, r0
 800ac68:	ea83 03b2 	eor.w	r3, r3, r2, ror #2
 800ac6c:	433c      	orrs	r4, r7
 800ac6e:	ea83 53b2 	eor.w	r3, r3, r2, ror #22
 800ac72:	4423      	add	r3, r4
 800ac74:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 800ac76:	f855 4c08 	ldr.w	r4, [r5, #-8]
 800ac7a:	f8de 6018 	ldr.w	r6, [lr, #24]
 800ac7e:	ea89 0708 	eor.w	r7, r9, r8
 800ac82:	4434      	add	r4, r6
 800ac84:	ea07 070a 	and.w	r7, r7, sl
 800ac88:	ea4f 26fa 	mov.w	r6, sl, ror #11
 800ac8c:	ea87 0709 	eor.w	r7, r7, r9
 800ac90:	44a4      	add	ip, r4
 800ac92:	ea86 16ba 	eor.w	r6, r6, sl, ror #6
 800ac96:	44bc      	add	ip, r7
 800ac98:	ea86 667a 	eor.w	r6, r6, sl, ror #25
 800ac9c:	44b4      	add	ip, r6
 800ac9e:	eb00 070c 	add.w	r7, r0, ip
 800aca2:	ea4f 3673 	mov.w	r6, r3, ror #13
 800aca6:	ea42 0003 	orr.w	r0, r2, r3
 800acaa:	4008      	ands	r0, r1
 800acac:	ea02 0403 	and.w	r4, r2, r3
 800acb0:	ea86 06b3 	eor.w	r6, r6, r3, ror #2
 800acb4:	4320      	orrs	r0, r4
 800acb6:	ea86 56b3 	eor.w	r6, r6, r3, ror #22
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 800acba:	f8de 401c 	ldr.w	r4, [lr, #28]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 800acbe:	4406      	add	r6, r0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 800acc0:	f855 0c04 	ldr.w	r0, [r5, #-4]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 800acc4:	4466      	add	r6, ip
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 800acc6:	4420      	add	r0, r4
 800acc8:	ea88 0c0a 	eor.w	ip, r8, sl
 800accc:	4481      	add	r9, r0
 800acce:	ea0c 0c07 	and.w	ip, ip, r7
 800acd2:	ea4f 20f7 	mov.w	r0, r7, ror #11
 800acd6:	ea8c 0c08 	eor.w	ip, ip, r8
 800acda:	ea80 10b7 	eor.w	r0, r0, r7, ror #6
 800acde:	ea80 6077 	eor.w	r0, r0, r7, ror #25
 800ace2:	44e1      	add	r9, ip
 800ace4:	4481      	add	r9, r0
 800ace6:	4449      	add	r1, r9
 800ace8:	9101      	str	r1, [sp, #4]
 800acea:	ea43 0006 	orr.w	r0, r3, r6
 800acee:	ea4f 3176 	mov.w	r1, r6, ror #13
 800acf2:	ea81 01b6 	eor.w	r1, r1, r6, ror #2
 800acf6:	4010      	ands	r0, r2
 800acf8:	ea03 0406 	and.w	r4, r3, r6
 800acfc:	ea81 51b6 	eor.w	r1, r1, r6, ror #22
 800ad00:	4320      	orrs	r0, r4
 800ad02:	4408      	add	r0, r1
    for( i = 0; i < 16; i += 8 )
 800ad04:	4904      	ldr	r1, [pc, #16]	; (800ad18 <mbedtls_internal_sha256_process+0x2c0>)
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 800ad06:	4481      	add	r9, r0
    for( i = 0; i < 16; i += 8 )
 800ad08:	42a9      	cmp	r1, r5
 800ad0a:	f10e 0e20 	add.w	lr, lr, #32
 800ad0e:	f47f aed7 	bne.w	800aac0 <mbedtls_internal_sha256_process+0x68>
 800ad12:	e003      	b.n	800ad1c <mbedtls_internal_sha256_process+0x2c4>
 800ad14:	08016aa4 	.word	0x08016aa4
 800ad18:	08016ae4 	.word	0x08016ae4
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800ad1c:	f8db 1038 	ldr.w	r1, [fp, #56]	; 0x38
 800ad20:	f8db 5004 	ldr.w	r5, [fp, #4]
 800ad24:	ea4f 44f1 	mov.w	r4, r1, ror #19
 800ad28:	ea84 4471 	eor.w	r4, r4, r1, ror #17
 800ad2c:	f8db 0000 	ldr.w	r0, [fp]
 800ad30:	ea84 2491 	eor.w	r4, r4, r1, lsr #10
 800ad34:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
 800ad38:	ea4f 4eb5 	mov.w	lr, r5, ror #18
 800ad3c:	4401      	add	r1, r0
 800ad3e:	ea8e 1ef5 	eor.w	lr, lr, r5, ror #7
 800ad42:	ea8e 0ed5 	eor.w	lr, lr, r5, lsr #3
 800ad46:	440c      	add	r4, r1
 800ad48:	eb04 010e 	add.w	r1, r4, lr
 800ad4c:	9104      	str	r1, [sp, #16]
 800ad4e:	9901      	ldr	r1, [sp, #4]
 800ad50:	9c01      	ldr	r4, [sp, #4]
 800ad52:	ea4f 20f1 	mov.w	r0, r1, ror #11
 800ad56:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
 800ad5a:	ea80 6171 	eor.w	r1, r0, r1, ror #25
 800ad5e:	ea87 000a 	eor.w	r0, r7, sl
 800ad62:	4020      	ands	r0, r4
 800ad64:	ea80 000a 	eor.w	r0, r0, sl
 800ad68:	4408      	add	r0, r1
 800ad6a:	9902      	ldr	r1, [sp, #8]
 800ad6c:	f10b 0b20 	add.w	fp, fp, #32
 800ad70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ad72:	4401      	add	r1, r0
 800ad74:	9804      	ldr	r0, [sp, #16]
 800ad76:	4401      	add	r1, r0
 800ad78:	4488      	add	r8, r1
 800ad7a:	eb08 0c02 	add.w	ip, r8, r2
 800ad7e:	ea46 0109 	orr.w	r1, r6, r9
 800ad82:	ea4f 3279 	mov.w	r2, r9, ror #13
 800ad86:	f8cb 0020 	str.w	r0, [fp, #32]
 800ad8a:	ea82 02b9 	eor.w	r2, r2, r9, ror #2
 800ad8e:	ea06 0009 	and.w	r0, r6, r9
 800ad92:	4019      	ands	r1, r3
 800ad94:	ea82 52b9 	eor.w	r2, r2, r9, ror #22
 800ad98:	4301      	orrs	r1, r0
 800ad9a:	4411      	add	r1, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800ad9c:	f8db 201c 	ldr.w	r2, [fp, #28]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800ada0:	4488      	add	r8, r1
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800ada2:	ea4f 41f2 	mov.w	r1, r2, ror #19
 800ada6:	ea81 4172 	eor.w	r1, r1, r2, ror #17
 800adaa:	ea81 2192 	eor.w	r1, r1, r2, lsr #10
 800adae:	f8db 2008 	ldr.w	r2, [fp, #8]
 800adb2:	f85b 0c18 	ldr.w	r0, [fp, #-24]
 800adb6:	442a      	add	r2, r5
 800adb8:	440a      	add	r2, r1
 800adba:	ea4f 41b0 	mov.w	r1, r0, ror #18
 800adbe:	ea81 11f0 	eor.w	r1, r1, r0, ror #7
 800adc2:	ea81 01d0 	eor.w	r1, r1, r0, lsr #3
 800adc6:	440a      	add	r2, r1
 800adc8:	9902      	ldr	r1, [sp, #8]
 800adca:	ea87 0504 	eor.w	r5, r7, r4
 800adce:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 800add0:	ea05 050c 	and.w	r5, r5, ip
 800add4:	4454      	add	r4, sl
 800add6:	18a1      	adds	r1, r4, r2
 800add8:	ea4f 24fc 	mov.w	r4, ip, ror #11
 800addc:	407d      	eors	r5, r7
 800adde:	ea84 14bc 	eor.w	r4, r4, ip, ror #6
 800ade2:	ea84 647c 	eor.w	r4, r4, ip, ror #25
 800ade6:	440d      	add	r5, r1
 800ade8:	1961      	adds	r1, r4, r5
 800adea:	eb01 0a03 	add.w	sl, r1, r3
 800adee:	ea4f 3478 	mov.w	r4, r8, ror #13
 800adf2:	ea48 0309 	orr.w	r3, r8, r9
 800adf6:	ea08 0509 	and.w	r5, r8, r9
 800adfa:	ea84 04b8 	eor.w	r4, r4, r8, ror #2
 800adfe:	4033      	ands	r3, r6
 800ae00:	432b      	orrs	r3, r5
 800ae02:	ea84 54b8 	eor.w	r4, r4, r8, ror #22
 800ae06:	441c      	add	r4, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800ae08:	9b04      	ldr	r3, [sp, #16]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800ae0a:	440c      	add	r4, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800ae0c:	ea4f 41f3 	mov.w	r1, r3, ror #19
 800ae10:	ea81 4173 	eor.w	r1, r1, r3, ror #17
 800ae14:	f85b 5c14 	ldr.w	r5, [fp, #-20]
 800ae18:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
 800ae1c:	f8db 300c 	ldr.w	r3, [fp, #12]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800ae20:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800ae24:	4403      	add	r3, r0
 800ae26:	ea4f 40b5 	mov.w	r0, r5, ror #18
 800ae2a:	440b      	add	r3, r1
 800ae2c:	ea80 10f5 	eor.w	r0, r0, r5, ror #7
 800ae30:	9902      	ldr	r1, [sp, #8]
 800ae32:	ea80 00d5 	eor.w	r0, r0, r5, lsr #3
 800ae36:	4403      	add	r3, r0
 800ae38:	6c88      	ldr	r0, [r1, #72]	; 0x48
 800ae3a:	9901      	ldr	r1, [sp, #4]
 800ae3c:	4438      	add	r0, r7
 800ae3e:	ea8c 0e01 	eor.w	lr, ip, r1
 800ae42:	ea0e 0e0a 	and.w	lr, lr, sl
 800ae46:	4418      	add	r0, r3
 800ae48:	ea8e 0e01 	eor.w	lr, lr, r1
 800ae4c:	4486      	add	lr, r0
 800ae4e:	ea4f 20fa 	mov.w	r0, sl, ror #11
 800ae52:	ea80 10ba 	eor.w	r0, r0, sl, ror #6
 800ae56:	ea80 607a 	eor.w	r0, r0, sl, ror #25
 800ae5a:	eb00 010e 	add.w	r1, r0, lr
 800ae5e:	1988      	adds	r0, r1, r6
 800ae60:	9003      	str	r0, [sp, #12]
 800ae62:	ea4f 3774 	mov.w	r7, r4, ror #13
 800ae66:	ea48 0004 	orr.w	r0, r8, r4
 800ae6a:	ea08 0604 	and.w	r6, r8, r4
 800ae6e:	ea87 07b4 	eor.w	r7, r7, r4, ror #2
 800ae72:	ea00 0009 	and.w	r0, r0, r9
 800ae76:	ea87 57b4 	eor.w	r7, r7, r4, ror #22
 800ae7a:	4330      	orrs	r0, r6
 800ae7c:	4438      	add	r0, r7
 800ae7e:	4408      	add	r0, r1
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800ae80:	ea4f 41f2 	mov.w	r1, r2, ror #19
 800ae84:	ea81 4172 	eor.w	r1, r1, r2, ror #17
 800ae88:	ea81 2292 	eor.w	r2, r1, r2, lsr #10
 800ae8c:	f8db 1010 	ldr.w	r1, [fp, #16]
 800ae90:	f85b 7c10 	ldr.w	r7, [fp, #-16]
 800ae94:	440d      	add	r5, r1
 800ae96:	442a      	add	r2, r5
 800ae98:	ea4f 45b7 	mov.w	r5, r7, ror #18
 800ae9c:	ea85 15f7 	eor.w	r5, r5, r7, ror #7
 800aea0:	ea85 05d7 	eor.w	r5, r5, r7, lsr #3
 800aea4:	4415      	add	r5, r2
 800aea6:	9a02      	ldr	r2, [sp, #8]
 800aea8:	9903      	ldr	r1, [sp, #12]
 800aeaa:	6cd6      	ldr	r6, [r2, #76]	; 0x4c
 800aeac:	9a01      	ldr	r2, [sp, #4]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800aeae:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 800aeb2:	4416      	add	r6, r2
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800aeb4:	ea8c 020a 	eor.w	r2, ip, sl
 800aeb8:	400a      	ands	r2, r1
 800aeba:	442e      	add	r6, r5
 800aebc:	ea82 020c 	eor.w	r2, r2, ip
 800aec0:	f8cb 502c 	str.w	r5, [fp, #44]	; 0x2c
 800aec4:	4432      	add	r2, r6
 800aec6:	9e03      	ldr	r6, [sp, #12]
 800aec8:	ea4f 21f1 	mov.w	r1, r1, ror #11
 800aecc:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
 800aed0:	ea81 6176 	eor.w	r1, r1, r6, ror #25
 800aed4:	188e      	adds	r6, r1, r2
 800aed6:	ea44 0200 	orr.w	r2, r4, r0
 800aeda:	ea4f 3170 	mov.w	r1, r0, ror #13
 800aede:	ea04 0e00 	and.w	lr, r4, r0
 800aee2:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 800aee6:	ea02 0208 	and.w	r2, r2, r8
 800aeea:	ea42 020e 	orr.w	r2, r2, lr
 800aeee:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 800aef2:	4411      	add	r1, r2
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800aef4:	ea4f 42f3 	mov.w	r2, r3, ror #19
 800aef8:	ea82 4273 	eor.w	r2, r2, r3, ror #17
 800aefc:	ea82 2393 	eor.w	r3, r2, r3, lsr #10
 800af00:	f8db 2014 	ldr.w	r2, [fp, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800af04:	4431      	add	r1, r6
 800af06:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800af08:	f85b 6c0c 	ldr.w	r6, [fp, #-12]
 800af0c:	4417      	add	r7, r2
 800af0e:	443b      	add	r3, r7
 800af10:	ea4f 47b6 	mov.w	r7, r6, ror #18
 800af14:	ea87 17f6 	eor.w	r7, r7, r6, ror #7
 800af18:	ea87 07d6 	eor.w	r7, r7, r6, lsr #3
 800af1c:	441f      	add	r7, r3
 800af1e:	9b03      	ldr	r3, [sp, #12]
 800af20:	ea4f 22f9 	mov.w	r2, r9, ror #11
 800af24:	ea8a 0e03 	eor.w	lr, sl, r3
 800af28:	9b02      	ldr	r3, [sp, #8]
 800af2a:	ea0e 0e09 	and.w	lr, lr, r9
 800af2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af30:	ea8e 0e0a 	eor.w	lr, lr, sl
 800af34:	443b      	add	r3, r7
 800af36:	4463      	add	r3, ip
 800af38:	ea82 12b9 	eor.w	r2, r2, r9, ror #6
 800af3c:	ea82 6279 	eor.w	r2, r2, r9, ror #25
 800af40:	449e      	add	lr, r3
 800af42:	eb02 030e 	add.w	r3, r2, lr
 800af46:	ea40 0e01 	orr.w	lr, r0, r1
 800af4a:	ea4f 3271 	mov.w	r2, r1, ror #13
 800af4e:	ea00 0c01 	and.w	ip, r0, r1
 800af52:	ea82 02b1 	eor.w	r2, r2, r1, ror #2
 800af56:	ea0e 0e04 	and.w	lr, lr, r4
 800af5a:	ea4e 0e0c 	orr.w	lr, lr, ip
 800af5e:	ea82 52b1 	eor.w	r2, r2, r1, ror #22
 800af62:	4472      	add	r2, lr
 800af64:	441a      	add	r2, r3
 800af66:	4498      	add	r8, r3
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800af68:	ea4f 43f5 	mov.w	r3, r5, ror #19
 800af6c:	ea83 4375 	eor.w	r3, r3, r5, ror #17
 800af70:	f85b ec08 	ldr.w	lr, [fp, #-8]
 800af74:	ea83 2595 	eor.w	r5, r3, r5, lsr #10
 800af78:	f8db 3018 	ldr.w	r3, [fp, #24]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800af7c:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800af80:	441e      	add	r6, r3
 800af82:	ea4f 43be 	mov.w	r3, lr, ror #18
 800af86:	ea83 13fe 	eor.w	r3, r3, lr, ror #7
 800af8a:	ea83 03de 	eor.w	r3, r3, lr, lsr #3
 800af8e:	4435      	add	r5, r6
 800af90:	441d      	add	r5, r3
 800af92:	9b03      	ldr	r3, [sp, #12]
 800af94:	f8cb 5034 	str.w	r5, [fp, #52]	; 0x34
 800af98:	ea83 0c09 	eor.w	ip, r3, r9
 800af9c:	ea0c 0c08 	and.w	ip, ip, r8
 800afa0:	ea8c 0c03 	eor.w	ip, ip, r3
 800afa4:	9b02      	ldr	r3, [sp, #8]
 800afa6:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 800afa8:	ea4f 23f8 	mov.w	r3, r8, ror #11
 800afac:	442e      	add	r6, r5
 800afae:	4456      	add	r6, sl
 800afb0:	ea83 13b8 	eor.w	r3, r3, r8, ror #6
 800afb4:	44b4      	add	ip, r6
 800afb6:	ea83 6378 	eor.w	r3, r3, r8, ror #25
 800afba:	eb03 060c 	add.w	r6, r3, ip
 800afbe:	eb04 0a06 	add.w	sl, r4, r6
 800afc2:	ea4f 3372 	mov.w	r3, r2, ror #13
 800afc6:	ea41 0402 	orr.w	r4, r1, r2
 800afca:	ea01 0c02 	and.w	ip, r1, r2
 800afce:	4004      	ands	r4, r0
 800afd0:	ea83 03b2 	eor.w	r3, r3, r2, ror #2
 800afd4:	ea44 040c 	orr.w	r4, r4, ip
 800afd8:	ea83 53b2 	eor.w	r3, r3, r2, ror #22
 800afdc:	4423      	add	r3, r4
 800afde:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800afe0:	ea4f 46f7 	mov.w	r6, r7, ror #19
 800afe4:	ea86 4677 	eor.w	r6, r6, r7, ror #17
 800afe8:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 800afec:	ea86 2797 	eor.w	r7, r6, r7, lsr #10
 800aff0:	f8db 601c 	ldr.w	r6, [fp, #28]
 800aff4:	ea89 0c08 	eor.w	ip, r9, r8
 800aff8:	44b6      	add	lr, r6
 800affa:	ea4f 46b4 	mov.w	r6, r4, ror #18
 800affe:	ea86 16f4 	eor.w	r6, r6, r4, ror #7
 800b002:	ea86 06d4 	eor.w	r6, r6, r4, lsr #3
 800b006:	4477      	add	r7, lr
 800b008:	4437      	add	r7, r6
 800b00a:	9e02      	ldr	r6, [sp, #8]
 800b00c:	ea0c 0c0a 	and.w	ip, ip, sl
 800b010:	6db6      	ldr	r6, [r6, #88]	; 0x58
 800b012:	ea8c 0c09 	eor.w	ip, ip, r9
 800b016:	eb06 0e07 	add.w	lr, r6, r7
 800b01a:	9e03      	ldr	r6, [sp, #12]
 800b01c:	f8cb 7038 	str.w	r7, [fp, #56]	; 0x38
 800b020:	4476      	add	r6, lr
 800b022:	4466      	add	r6, ip
 800b024:	ea4f 2cfa 	mov.w	ip, sl, ror #11
 800b028:	ea8c 1cba 	eor.w	ip, ip, sl, ror #6
 800b02c:	ea8c 6c7a 	eor.w	ip, ip, sl, ror #25
 800b030:	44b4      	add	ip, r6
 800b032:	eb00 070c 	add.w	r7, r0, ip
 800b036:	ea4f 3673 	mov.w	r6, r3, ror #13
 800b03a:	ea42 0003 	orr.w	r0, r2, r3
 800b03e:	4008      	ands	r0, r1
 800b040:	ea02 0e03 	and.w	lr, r2, r3
 800b044:	ea86 06b3 	eor.w	r6, r6, r3, ror #2
 800b048:	ea40 000e 	orr.w	r0, r0, lr
 800b04c:	ea86 56b3 	eor.w	r6, r6, r3, ror #22
 800b050:	4406      	add	r6, r0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800b052:	ea4f 40f5 	mov.w	r0, r5, ror #19
 800b056:	ea80 4075 	eor.w	r0, r0, r5, ror #17
 800b05a:	f8db e000 	ldr.w	lr, [fp]
 800b05e:	ea80 2595 	eor.w	r5, r0, r5, lsr #10
 800b062:	9804      	ldr	r0, [sp, #16]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800b064:	4466      	add	r6, ip
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800b066:	4404      	add	r4, r0
 800b068:	ea4f 40be 	mov.w	r0, lr, ror #18
 800b06c:	ea80 10fe 	eor.w	r0, r0, lr, ror #7
 800b070:	ea80 0ede 	eor.w	lr, r0, lr, lsr #3
 800b074:	9802      	ldr	r0, [sp, #8]
 800b076:	4425      	add	r5, r4
 800b078:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800b07a:	4475      	add	r5, lr
 800b07c:	ea88 040a 	eor.w	r4, r8, sl
 800b080:	4428      	add	r0, r5
 800b082:	403c      	ands	r4, r7
 800b084:	4481      	add	r9, r0
 800b086:	ea84 0408 	eor.w	r4, r4, r8
 800b08a:	444c      	add	r4, r9
 800b08c:	ea4f 29f7 	mov.w	r9, r7, ror #11
 800b090:	ea89 19b7 	eor.w	r9, r9, r7, ror #6
 800b094:	ea89 6977 	eor.w	r9, r9, r7, ror #25
 800b098:	44a1      	add	r9, r4
 800b09a:	4449      	add	r1, r9
 800b09c:	9101      	str	r1, [sp, #4]
 800b09e:	ea43 0006 	orr.w	r0, r3, r6
 800b0a2:	ea4f 3176 	mov.w	r1, r6, ror #13
 800b0a6:	ea81 01b6 	eor.w	r1, r1, r6, ror #2
 800b0aa:	4010      	ands	r0, r2
 800b0ac:	ea03 0406 	and.w	r4, r3, r6
 800b0b0:	ea81 51b6 	eor.w	r1, r1, r6, ror #22
 800b0b4:	4320      	orrs	r0, r4
 800b0b6:	4401      	add	r1, r0
 800b0b8:	4489      	add	r9, r1
 800b0ba:	9902      	ldr	r1, [sp, #8]
 800b0bc:	f8cb 503c 	str.w	r5, [fp, #60]	; 0x3c
 800b0c0:	3120      	adds	r1, #32
 800b0c2:	9102      	str	r1, [sp, #8]
    for( i = 16; i < 64; i += 8 )
 800b0c4:	a93e      	add	r1, sp, #248	; 0xf8
 800b0c6:	4559      	cmp	r1, fp
 800b0c8:	f47f ae28 	bne.w	800ad1c <mbedtls_internal_sha256_process+0x2c4>
 800b0cc:	9308      	str	r3, [sp, #32]
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	9901      	ldr	r1, [sp, #4]
 800b0d2:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800b0d6:	910a      	str	r1, [sp, #40]	; 0x28
 800b0d8:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800b0dc:	970b      	str	r7, [sp, #44]	; 0x2c
 800b0de:	f8cd 9018 	str.w	r9, [sp, #24]
 800b0e2:	9607      	str	r6, [sp, #28]
 800b0e4:	9209      	str	r2, [sp, #36]	; 0x24
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 800b0e6:	9a05      	ldr	r2, [sp, #20]
 800b0e8:	a906      	add	r1, sp, #24
 800b0ea:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b0ee:	6812      	ldr	r2, [r2, #0]
    for( i = 0; i < 8; i++ )
 800b0f0:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
 800b0f2:	440a      	add	r2, r1
 800b0f4:	9905      	ldr	r1, [sp, #20]
    for( i = 0; i < 8; i++ )
 800b0f6:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
 800b0f8:	f841 2b04 	str.w	r2, [r1], #4
 800b0fc:	9105      	str	r1, [sp, #20]
    for( i = 0; i < 8; i++ )
 800b0fe:	d1f2      	bne.n	800b0e6 <mbedtls_internal_sha256_process+0x68e>

    return( 0 );
}
 800b100:	2000      	movs	r0, #0
 800b102:	b04f      	add	sp, #316	; 0x13c
 800b104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b108 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 800b108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b10c:	4605      	mov	r5, r0
 800b10e:	460f      	mov	r7, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 800b110:	4614      	mov	r4, r2
 800b112:	b912      	cbnz	r2, 800b11a <mbedtls_sha256_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
 800b114:	2000      	movs	r0, #0
}
 800b116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    left = ctx->total[0] & 0x3F;
 800b11a:	6803      	ldr	r3, [r0, #0]
 800b11c:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
 800b120:	4413      	add	r3, r2
    if( ctx->total[0] < (uint32_t) ilen )
 800b122:	429a      	cmp	r2, r3
    ctx->total[0] += (uint32_t) ilen;
 800b124:	602b      	str	r3, [r5, #0]
        ctx->total[1]++;
 800b126:	bf82      	ittt	hi
 800b128:	686b      	ldrhi	r3, [r5, #4]
 800b12a:	3301      	addhi	r3, #1
 800b12c:	606b      	strhi	r3, [r5, #4]
    if( left && ilen >= fill )
 800b12e:	b308      	cbz	r0, 800b174 <mbedtls_sha256_update_ret+0x6c>
    fill = 64 - left;
 800b130:	f1c0 0640 	rsb	r6, r0, #64	; 0x40
    if( left && ilen >= fill )
 800b134:	42b2      	cmp	r2, r6
 800b136:	d316      	bcc.n	800b166 <mbedtls_sha256_update_ret+0x5e>
        memcpy( (void *) (ctx->buffer + left), input, fill );
 800b138:	f105 0828 	add.w	r8, r5, #40	; 0x28
 800b13c:	4632      	mov	r2, r6
 800b13e:	4440      	add	r0, r8
 800b140:	f006 fe3d 	bl	8011dbe <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800b144:	4641      	mov	r1, r8
 800b146:	4628      	mov	r0, r5
 800b148:	f7ff fc86 	bl	800aa58 <mbedtls_internal_sha256_process>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d1e2      	bne.n	800b116 <mbedtls_sha256_update_ret+0xe>
        input += fill;
 800b150:	4437      	add	r7, r6
        ilen  -= fill;
 800b152:	1ba6      	subs	r6, r4, r6
    if( left && ilen >= fill )
 800b154:	4634      	mov	r4, r6
 800b156:	1b31      	subs	r1, r6, r4
    while( ilen >= 64 )
 800b158:	2c3f      	cmp	r4, #63	; 0x3f
 800b15a:	4439      	add	r1, r7
 800b15c:	d80c      	bhi.n	800b178 <mbedtls_sha256_update_ret+0x70>
    if( ilen > 0 )
 800b15e:	2c00      	cmp	r4, #0
 800b160:	d0d8      	beq.n	800b114 <mbedtls_sha256_update_ret+0xc>
 800b162:	460f      	mov	r7, r1
 800b164:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 800b166:	3528      	adds	r5, #40	; 0x28
 800b168:	4622      	mov	r2, r4
 800b16a:	4639      	mov	r1, r7
 800b16c:	4428      	add	r0, r5
 800b16e:	f006 fe26 	bl	8011dbe <memcpy>
 800b172:	e7cf      	b.n	800b114 <mbedtls_sha256_update_ret+0xc>
    if( left && ilen >= fill )
 800b174:	4616      	mov	r6, r2
 800b176:	e7ed      	b.n	800b154 <mbedtls_sha256_update_ret+0x4c>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 800b178:	4628      	mov	r0, r5
 800b17a:	f7ff fc6d 	bl	800aa58 <mbedtls_internal_sha256_process>
 800b17e:	2800      	cmp	r0, #0
 800b180:	d1c9      	bne.n	800b116 <mbedtls_sha256_update_ret+0xe>
        ilen  -= 64;
 800b182:	3c40      	subs	r4, #64	; 0x40
 800b184:	e7e7      	b.n	800b156 <mbedtls_sha256_update_ret+0x4e>

0800b186 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 800b186:	b570      	push	{r4, r5, r6, lr}
 800b188:	4604      	mov	r4, r0
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 800b18a:	2280      	movs	r2, #128	; 0x80
    used = ctx->total[0] & 0x3F;
 800b18c:	6803      	ldr	r3, [r0, #0]
{
 800b18e:	460d      	mov	r5, r1
    used = ctx->total[0] & 0x3F;
 800b190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
 800b194:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 800b196:	2838      	cmp	r0, #56	; 0x38
    ctx->buffer[used++] = 0x80;
 800b198:	4423      	add	r3, r4
 800b19a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b19e:	f104 0628 	add.w	r6, r4, #40	; 0x28
    if( used <= 56 )
 800b1a2:	d874      	bhi.n	800b28e <mbedtls_sha256_finish_ret+0x108>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 800b1aa:	4430      	add	r0, r6
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
 800b1ac:	f006 fe2c 	bl	8011e08 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 800b1b0:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 800b1b2:	6861      	ldr	r1, [r4, #4]
    high = ( ctx->total[0] >> 29 )
 800b1b4:	0f5a      	lsrs	r2, r3, #29
 800b1b6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 800b1ba:	0e11      	lsrs	r1, r2, #24
    low  = ( ctx->total[0] <<  3 );
 800b1bc:	00db      	lsls	r3, r3, #3
    PUT_UINT32_BE( high, ctx->buffer, 56 );
 800b1be:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
 800b1c2:	0c11      	lsrs	r1, r2, #16
 800b1c4:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
 800b1c8:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
 800b1cc:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 800b1ce:	0e1a      	lsrs	r2, r3, #24
 800b1d0:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800b1d4:	0c1a      	lsrs	r2, r3, #16
 800b1d6:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800b1da:	0a1a      	lsrs	r2, r3, #8
    PUT_UINT32_BE( high, ctx->buffer, 56 );
 800b1dc:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 800b1e0:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 800b1e4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800b1e8:	4631      	mov	r1, r6
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f7ff fc34 	bl	800aa58 <mbedtls_internal_sha256_process>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d14b      	bne.n	800b28c <mbedtls_sha256_finish_ret+0x106>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 800b1f4:	7ae3      	ldrb	r3, [r4, #11]
 800b1f6:	702b      	strb	r3, [r5, #0]
 800b1f8:	8963      	ldrh	r3, [r4, #10]
 800b1fa:	706b      	strb	r3, [r5, #1]
 800b1fc:	68a3      	ldr	r3, [r4, #8]
 800b1fe:	0a1b      	lsrs	r3, r3, #8
 800b200:	70ab      	strb	r3, [r5, #2]
 800b202:	68a3      	ldr	r3, [r4, #8]
 800b204:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 800b206:	7be3      	ldrb	r3, [r4, #15]
 800b208:	712b      	strb	r3, [r5, #4]
 800b20a:	89e3      	ldrh	r3, [r4, #14]
 800b20c:	716b      	strb	r3, [r5, #5]
 800b20e:	68e3      	ldr	r3, [r4, #12]
 800b210:	0a1b      	lsrs	r3, r3, #8
 800b212:	71ab      	strb	r3, [r5, #6]
 800b214:	68e3      	ldr	r3, [r4, #12]
 800b216:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 800b218:	7ce3      	ldrb	r3, [r4, #19]
 800b21a:	722b      	strb	r3, [r5, #8]
 800b21c:	8a63      	ldrh	r3, [r4, #18]
 800b21e:	726b      	strb	r3, [r5, #9]
 800b220:	6923      	ldr	r3, [r4, #16]
 800b222:	0a1b      	lsrs	r3, r3, #8
 800b224:	72ab      	strb	r3, [r5, #10]
 800b226:	6923      	ldr	r3, [r4, #16]
 800b228:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 800b22a:	7de3      	ldrb	r3, [r4, #23]
 800b22c:	732b      	strb	r3, [r5, #12]
 800b22e:	8ae3      	ldrh	r3, [r4, #22]
 800b230:	736b      	strb	r3, [r5, #13]
 800b232:	6963      	ldr	r3, [r4, #20]
 800b234:	0a1b      	lsrs	r3, r3, #8
 800b236:	73ab      	strb	r3, [r5, #14]
 800b238:	6963      	ldr	r3, [r4, #20]
 800b23a:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 800b23c:	7ee3      	ldrb	r3, [r4, #27]
 800b23e:	742b      	strb	r3, [r5, #16]
 800b240:	8b63      	ldrh	r3, [r4, #26]
 800b242:	746b      	strb	r3, [r5, #17]
 800b244:	69a3      	ldr	r3, [r4, #24]
 800b246:	0a1b      	lsrs	r3, r3, #8
 800b248:	74ab      	strb	r3, [r5, #18]
 800b24a:	69a3      	ldr	r3, [r4, #24]
 800b24c:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 800b24e:	7fe3      	ldrb	r3, [r4, #31]
 800b250:	752b      	strb	r3, [r5, #20]
 800b252:	8be3      	ldrh	r3, [r4, #30]
 800b254:	756b      	strb	r3, [r5, #21]
 800b256:	69e3      	ldr	r3, [r4, #28]
 800b258:	0a1b      	lsrs	r3, r3, #8
 800b25a:	75ab      	strb	r3, [r5, #22]
 800b25c:	69e3      	ldr	r3, [r4, #28]
 800b25e:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 800b260:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800b264:	762b      	strb	r3, [r5, #24]
 800b266:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800b268:	766b      	strb	r3, [r5, #25]
 800b26a:	6a23      	ldr	r3, [r4, #32]
 800b26c:	0a1b      	lsrs	r3, r3, #8
 800b26e:	76ab      	strb	r3, [r5, #26]
 800b270:	6a23      	ldr	r3, [r4, #32]
 800b272:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
 800b274:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b276:	b94b      	cbnz	r3, 800b28c <mbedtls_sha256_finish_ret+0x106>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 800b278:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800b27c:	772b      	strb	r3, [r5, #28]
 800b27e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800b280:	776b      	strb	r3, [r5, #29]
 800b282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b284:	0a1b      	lsrs	r3, r3, #8
 800b286:	77ab      	strb	r3, [r5, #30]
 800b288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b28a:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
 800b28c:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
 800b28e:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 800b292:	2100      	movs	r1, #0
 800b294:	4430      	add	r0, r6
 800b296:	f006 fdb7 	bl	8011e08 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800b29a:	4631      	mov	r1, r6
 800b29c:	4620      	mov	r0, r4
 800b29e:	f7ff fbdb 	bl	800aa58 <mbedtls_internal_sha256_process>
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	d1f2      	bne.n	800b28c <mbedtls_sha256_finish_ret+0x106>
        memset( ctx->buffer, 0, 56 );
 800b2a6:	4601      	mov	r1, r0
 800b2a8:	2238      	movs	r2, #56	; 0x38
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	e77e      	b.n	800b1ac <mbedtls_sha256_finish_ret+0x26>

0800b2ae <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 800b2ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2b0:	461c      	mov	r4, r3
 800b2b2:	b09d      	sub	sp, #116	; 0x74
 800b2b4:	4606      	mov	r6, r0

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
 800b2b6:	a801      	add	r0, sp, #4
{
 800b2b8:	460f      	mov	r7, r1
 800b2ba:	4615      	mov	r5, r2
    mbedtls_sha256_init( &ctx );
 800b2bc:	f7ff fb6e 	bl	800a99c <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 800b2c0:	4621      	mov	r1, r4
 800b2c2:	a801      	add	r0, sp, #4
 800b2c4:	f7ff fb78 	bl	800a9b8 <mbedtls_sha256_starts_ret>
 800b2c8:	4604      	mov	r4, r0
 800b2ca:	b958      	cbnz	r0, 800b2e4 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 800b2cc:	463a      	mov	r2, r7
 800b2ce:	4631      	mov	r1, r6
 800b2d0:	a801      	add	r0, sp, #4
 800b2d2:	f7ff ff19 	bl	800b108 <mbedtls_sha256_update_ret>
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	b920      	cbnz	r0, 800b2e4 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 800b2da:	4629      	mov	r1, r5
 800b2dc:	a801      	add	r0, sp, #4
 800b2de:	f7ff ff52 	bl	800b186 <mbedtls_sha256_finish_ret>
 800b2e2:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 800b2e4:	a801      	add	r0, sp, #4
 800b2e6:	f7ff fb5d 	bl	800a9a4 <mbedtls_sha256_free>

    return( ret );
}
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	b01d      	add	sp, #116	; 0x74
 800b2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b2f0 <mbedtls_sha512_init>:

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 800b2f0:	22d8      	movs	r2, #216	; 0xd8
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	f006 bd88 	b.w	8011e08 <memset>

0800b2f8 <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
 800b2f8:	b110      	cbz	r0, 800b300 <mbedtls_sha512_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
 800b2fa:	21d8      	movs	r1, #216	; 0xd8
 800b2fc:	f7fd b910 	b.w	8008520 <mbedtls_platform_zeroize>
 800b300:	4770      	bx	lr

0800b302 <mbedtls_sha512_clone>:
}

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 800b302:	b508      	push	{r3, lr}
    SHA512_VALIDATE( dst != NULL );
    SHA512_VALIDATE( src != NULL );

    *dst = *src;
 800b304:	22d8      	movs	r2, #216	; 0xd8
 800b306:	f006 fd5a 	bl	8011dbe <memcpy>
 800b30a:	bd08      	pop	{r3, pc}
 800b30c:	0000      	movs	r0, r0
	...

0800b310 <mbedtls_sha512_starts_ret>:
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );

    ctx->total[0] = 0;
 800b310:	2200      	movs	r2, #0
 800b312:	2300      	movs	r3, #0
 800b314:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
 800b318:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
 800b31c:	2900      	cmp	r1, #0
 800b31e:	d12b      	bne.n	800b378 <mbedtls_sha512_starts_ret+0x68>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 800b320:	a329      	add	r3, pc, #164	; (adr r3, 800b3c8 <mbedtls_sha512_starts_ret+0xb8>)
 800b322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b326:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 800b32a:	a329      	add	r3, pc, #164	; (adr r3, 800b3d0 <mbedtls_sha512_starts_ret+0xc0>)
 800b32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b330:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 800b334:	a328      	add	r3, pc, #160	; (adr r3, 800b3d8 <mbedtls_sha512_starts_ret+0xc8>)
 800b336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33a:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 800b33e:	a328      	add	r3, pc, #160	; (adr r3, 800b3e0 <mbedtls_sha512_starts_ret+0xd0>)
 800b340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b344:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 800b348:	a327      	add	r3, pc, #156	; (adr r3, 800b3e8 <mbedtls_sha512_starts_ret+0xd8>)
 800b34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34e:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 800b352:	a327      	add	r3, pc, #156	; (adr r3, 800b3f0 <mbedtls_sha512_starts_ret+0xe0>)
 800b354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b358:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 800b35c:	a326      	add	r3, pc, #152	; (adr r3, 800b3f8 <mbedtls_sha512_starts_ret+0xe8>)
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 800b366:	a326      	add	r3, pc, #152	; (adr r3, 800b400 <mbedtls_sha512_starts_ret+0xf0>)
 800b368:	e9d3 2300 	ldrd	r2, r3, [r3]
        ctx->state[2] = UL64(0x9159015A3070DD17);
        ctx->state[3] = UL64(0x152FECD8F70E5939);
        ctx->state[4] = UL64(0x67332667FFC00B31);
        ctx->state[5] = UL64(0x8EB44A8768581511);
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 800b36c:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
 800b370:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
 800b374:	2000      	movs	r0, #0
 800b376:	4770      	bx	lr
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 800b378:	a323      	add	r3, pc, #140	; (adr r3, 800b408 <mbedtls_sha512_starts_ret+0xf8>)
 800b37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37e:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 800b382:	a323      	add	r3, pc, #140	; (adr r3, 800b410 <mbedtls_sha512_starts_ret+0x100>)
 800b384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b388:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 800b38c:	a322      	add	r3, pc, #136	; (adr r3, 800b418 <mbedtls_sha512_starts_ret+0x108>)
 800b38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b392:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 800b396:	a322      	add	r3, pc, #136	; (adr r3, 800b420 <mbedtls_sha512_starts_ret+0x110>)
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 800b3a0:	a321      	add	r3, pc, #132	; (adr r3, 800b428 <mbedtls_sha512_starts_ret+0x118>)
 800b3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a6:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 800b3aa:	a321      	add	r3, pc, #132	; (adr r3, 800b430 <mbedtls_sha512_starts_ret+0x120>)
 800b3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b0:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 800b3b4:	a320      	add	r3, pc, #128	; (adr r3, 800b438 <mbedtls_sha512_starts_ret+0x128>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 800b3be:	a320      	add	r3, pc, #128	; (adr r3, 800b440 <mbedtls_sha512_starts_ret+0x130>)
 800b3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c4:	e7d2      	b.n	800b36c <mbedtls_sha512_starts_ret+0x5c>
 800b3c6:	bf00      	nop
 800b3c8:	f3bcc908 	.word	0xf3bcc908
 800b3cc:	6a09e667 	.word	0x6a09e667
 800b3d0:	84caa73b 	.word	0x84caa73b
 800b3d4:	bb67ae85 	.word	0xbb67ae85
 800b3d8:	fe94f82b 	.word	0xfe94f82b
 800b3dc:	3c6ef372 	.word	0x3c6ef372
 800b3e0:	5f1d36f1 	.word	0x5f1d36f1
 800b3e4:	a54ff53a 	.word	0xa54ff53a
 800b3e8:	ade682d1 	.word	0xade682d1
 800b3ec:	510e527f 	.word	0x510e527f
 800b3f0:	2b3e6c1f 	.word	0x2b3e6c1f
 800b3f4:	9b05688c 	.word	0x9b05688c
 800b3f8:	fb41bd6b 	.word	0xfb41bd6b
 800b3fc:	1f83d9ab 	.word	0x1f83d9ab
 800b400:	137e2179 	.word	0x137e2179
 800b404:	5be0cd19 	.word	0x5be0cd19
 800b408:	c1059ed8 	.word	0xc1059ed8
 800b40c:	cbbb9d5d 	.word	0xcbbb9d5d
 800b410:	367cd507 	.word	0x367cd507
 800b414:	629a292a 	.word	0x629a292a
 800b418:	3070dd17 	.word	0x3070dd17
 800b41c:	9159015a 	.word	0x9159015a
 800b420:	f70e5939 	.word	0xf70e5939
 800b424:	152fecd8 	.word	0x152fecd8
 800b428:	ffc00b31 	.word	0xffc00b31
 800b42c:	67332667 	.word	0x67332667
 800b430:	68581511 	.word	0x68581511
 800b434:	8eb44a87 	.word	0x8eb44a87
 800b438:	64f98fa7 	.word	0x64f98fa7
 800b43c:	db0c2e0d 	.word	0xdb0c2e0d
 800b440:	befa4fa4 	.word	0xbefa4fa4
 800b444:	47b5481d 	.word	0x47b5481d

0800b448 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 800b448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44c:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
 800b450:	900d      	str	r0, [sp, #52]	; 0x34
 800b452:	f50d 7cfc 	add.w	ip, sp, #504	; 0x1f8
 800b456:	f101 0e80 	add.w	lr, r1, #128	; 0x80
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 800b45a:	2400      	movs	r4, #0
 800b45c:	780a      	ldrb	r2, [r1, #0]
 800b45e:	9406      	str	r4, [sp, #24]
 800b460:	0615      	lsls	r5, r2, #24
 800b462:	784a      	ldrb	r2, [r1, #1]
 800b464:	9408      	str	r4, [sp, #32]
 800b466:	0413      	lsls	r3, r2, #16
 800b468:	9307      	str	r3, [sp, #28]
 800b46a:	2300      	movs	r3, #0
 800b46c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800b470:	79ca      	ldrb	r2, [r1, #7]
 800b472:	4326      	orrs	r6, r4
 800b474:	4332      	orrs	r2, r6
 800b476:	788e      	ldrb	r6, [r1, #2]
 800b478:	432f      	orrs	r7, r5
 800b47a:	0236      	lsls	r6, r6, #8
 800b47c:	9609      	str	r6, [sp, #36]	; 0x24
 800b47e:	433b      	orrs	r3, r7
 800b480:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 800b484:	4316      	orrs	r6, r2
 800b486:	4632      	mov	r2, r6
 800b488:	431f      	orrs	r7, r3
 800b48a:	463b      	mov	r3, r7
 800b48c:	78ce      	ldrb	r6, [r1, #3]
 800b48e:	940a      	str	r4, [sp, #40]	; 0x28
 800b490:	960b      	str	r6, [sp, #44]	; 0x2c
 800b492:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b496:	4316      	orrs	r6, r2
 800b498:	4632      	mov	r2, r6
 800b49a:	790e      	ldrb	r6, [r1, #4]
 800b49c:	431f      	orrs	r7, r3
 800b49e:	0630      	lsls	r0, r6, #24
 800b4a0:	463b      	mov	r3, r7
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	4627      	mov	r7, r4
 800b4a6:	4316      	orrs	r6, r2
 800b4a8:	431f      	orrs	r7, r3
 800b4aa:	4632      	mov	r2, r6
 800b4ac:	463b      	mov	r3, r7
 800b4ae:	794e      	ldrb	r6, [r1, #5]
 800b4b0:	9403      	str	r4, [sp, #12]
 800b4b2:	0430      	lsls	r0, r6, #16
 800b4b4:	9002      	str	r0, [sp, #8]
 800b4b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b4ba:	4316      	orrs	r6, r2
 800b4bc:	431f      	orrs	r7, r3
 800b4be:	4632      	mov	r2, r6
 800b4c0:	463b      	mov	r3, r7
 800b4c2:	798e      	ldrb	r6, [r1, #6]
 800b4c4:	9405      	str	r4, [sp, #20]
 800b4c6:	0230      	lsls	r0, r6, #8
 800b4c8:	9004      	str	r0, [sp, #16]
 800b4ca:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800b4ce:	4316      	orrs	r6, r2
 800b4d0:	431f      	orrs	r7, r3
 800b4d2:	4632      	mov	r2, r6
 800b4d4:	463b      	mov	r3, r7
 800b4d6:	3108      	adds	r1, #8
    for( i = 0; i < 16; i++ )
 800b4d8:	458e      	cmp	lr, r1
        GET_UINT64_BE( W[i], data, i << 3 );
 800b4da:	e9ec 2302 	strd	r2, r3, [ip, #8]!
    for( i = 0; i < 16; i++ )
 800b4de:	d1bc      	bne.n	800b45a <mbedtls_internal_sha512_process+0x12>
 800b4e0:	ab80      	add	r3, sp, #512	; 0x200
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	4611      	mov	r1, r2
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 800b4e6:	6f16      	ldr	r6, [r2, #112]	; 0x70
 800b4e8:	6f50      	ldr	r0, [r2, #116]	; 0x74
 800b4ea:	0cf4      	lsrs	r4, r6, #19
 800b4ec:	ea44 3440 	orr.w	r4, r4, r0, lsl #13
 800b4f0:	940e      	str	r4, [sp, #56]	; 0x38
 800b4f2:	0cc4      	lsrs	r4, r0, #19
 800b4f4:	ea44 3446 	orr.w	r4, r4, r6, lsl #13
 800b4f8:	940f      	str	r4, [sp, #60]	; 0x3c
 800b4fa:	00c4      	lsls	r4, r0, #3
 800b4fc:	ea44 7456 	orr.w	r4, r4, r6, lsr #29
 800b500:	9411      	str	r4, [sp, #68]	; 0x44
 800b502:	00f4      	lsls	r4, r6, #3
 800b504:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800b508:	9410      	str	r4, [sp, #64]	; 0x40
 800b50a:	ea4f 1a96 	mov.w	sl, r6, lsr #6
 800b50e:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
 800b512:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 800b516:	ea4a 6a80 	orr.w	sl, sl, r0, lsl #26
 800b51a:	407c      	eors	r4, r7
               S0(W[i - 15]) + W[i - 16];
 800b51c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b520:	e9d1 6712 	ldrd	r6, r7, [r1, #72]	; 0x48
        W[i] = S1(W[i -  2]) + W[i -  7] +
 800b524:	ea4f 1b90 	mov.w	fp, r0, lsr #6
 800b528:	ea85 0508 	eor.w	r5, r5, r8
               S0(W[i - 15]) + W[i - 16];
 800b52c:	e9d1 0100 	ldrd	r0, r1, [r1]
        W[i] = S1(W[i -  2]) + W[i -  7] +
 800b530:	ea84 040a 	eor.w	r4, r4, sl
               S0(W[i - 15]) + W[i - 16];
 800b534:	1980      	adds	r0, r0, r6
 800b536:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 800b53a:	4179      	adcs	r1, r7
        W[i] = S1(W[i -  2]) + W[i -  7] +
 800b53c:	ea85 050b 	eor.w	r5, r5, fp
               S0(W[i - 15]) + W[i - 16];
 800b540:	1824      	adds	r4, r4, r0
 800b542:	414d      	adcs	r5, r1
 800b544:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800b548:	ea41 71ce 	orr.w	r1, r1, lr, lsl #31
 800b54c:	9112      	str	r1, [sp, #72]	; 0x48
 800b54e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800b552:	ea41 71cc 	orr.w	r1, r1, ip, lsl #31
 800b556:	9113      	str	r1, [sp, #76]	; 0x4c
 800b558:	ea4f 211c 	mov.w	r1, ip, lsr #8
 800b55c:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
 800b560:	9114      	str	r1, [sp, #80]	; 0x50
 800b562:	ea4f 211e 	mov.w	r1, lr, lsr #8
 800b566:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
 800b56a:	9115      	str	r1, [sp, #84]	; 0x54
 800b56c:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 800b570:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800b574:	4070      	eors	r0, r6
 800b576:	ea4f 16dc 	mov.w	r6, ip, lsr #7
 800b57a:	ea46 664e 	orr.w	r6, r6, lr, lsl #25
 800b57e:	9600      	str	r6, [sp, #0]
 800b580:	ea4f 16de 	mov.w	r6, lr, lsr #7
 800b584:	9601      	str	r6, [sp, #4]
 800b586:	4079      	eors	r1, r7
 800b588:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b58c:	4046      	eors	r6, r0
 800b58e:	1930      	adds	r0, r6, r4
 800b590:	ea87 0701 	eor.w	r7, r7, r1
 800b594:	eb47 0105 	adc.w	r1, r7, r5
 800b598:	3208      	adds	r2, #8
        W[i] = S1(W[i -  2]) + W[i -  7] +
 800b59a:	e9c2 011e 	strd	r0, r1, [r2, #120]	; 0x78
    for( ; i < 80; i++ )
 800b59e:	f50d 6180 	add.w	r1, sp, #1024	; 0x400
 800b5a2:	4291      	cmp	r1, r2
 800b5a4:	d19e      	bne.n	800b4e4 <mbedtls_internal_sha512_process+0x9c>
    }

    A = ctx->state[0];
 800b5a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5a8:	f50d 6e90 	add.w	lr, sp, #1152	; 0x480
 800b5ac:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800b5b0:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
    B = ctx->state[1];
 800b5b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5b6:	e9d2 1206 	ldrd	r1, r2, [r2, #24]
 800b5ba:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
    C = ctx->state[2];
 800b5be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5c0:	e9d2 1208 	ldrd	r1, r2, [r2, #32]
 800b5c4:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
    D = ctx->state[3];
 800b5c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5ca:	e9d2 120a 	ldrd	r1, r2, [r2, #40]	; 0x28
 800b5ce:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
    E = ctx->state[4];
 800b5d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5d4:	e9d2 120c 	ldrd	r1, r2, [r2, #48]	; 0x30
 800b5d8:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
    F = ctx->state[5];
 800b5dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5de:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 800b5e2:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
    G = ctx->state[6];
 800b5e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5e8:	e9d2 1210 	ldrd	r1, r2, [r2, #64]	; 0x40
 800b5ec:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
    H = ctx->state[7];
 800b5f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5f2:	e9d2 1212 	ldrd	r1, r2, [r2, #72]	; 0x48
 800b5f6:	e9cd 121c 	strd	r1, r2, [sp, #112]	; 0x70
 800b5fa:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800b5fe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    G = ctx->state[6];
 800b602:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800b606:	e9cd 0108 	strd	r0, r1, [sp, #32]
    F = ctx->state[5];
 800b60a:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800b60e:	e9cd 0106 	strd	r0, r1, [sp, #24]
    E = ctx->state[4];
 800b612:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800b616:	e9cd 0104 	strd	r0, r1, [sp, #16]
    D = ctx->state[3];
 800b61a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    B = ctx->state[1];
 800b61e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b622:	e9cd 0102 	strd	r0, r1, [sp, #8]
    A = ctx->state[0];
 800b626:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    C = ctx->state[2];
 800b62a:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
    A = ctx->state[0];
 800b62e:	e9cd 0100 	strd	r0, r1, [sp]
 800b632:	4a01      	ldr	r2, [pc, #4]	; (800b638 <mbedtls_internal_sha512_process+0x1f0>)
 800b634:	e002      	b.n	800b63c <mbedtls_internal_sha512_process+0x1f4>
 800b636:	bf00      	nop
 800b638:	08016ba8 	.word	0x08016ba8
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 800b63c:	9904      	ldr	r1, [sp, #16]
 800b63e:	9805      	ldr	r0, [sp, #20]
 800b640:	0b89      	lsrs	r1, r1, #14
 800b642:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 800b646:	9120      	str	r1, [sp, #128]	; 0x80
 800b648:	0b81      	lsrs	r1, r0, #14
 800b64a:	9804      	ldr	r0, [sp, #16]
 800b64c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b650:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 800b654:	9121      	str	r1, [sp, #132]	; 0x84
 800b656:	0c81      	lsrs	r1, r0, #18
 800b658:	9805      	ldr	r0, [sp, #20]
 800b65a:	e9dd 6720 	ldrd	r6, r7, [sp, #128]	; 0x80
 800b65e:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 800b662:	9122      	str	r1, [sp, #136]	; 0x88
 800b664:	0c81      	lsrs	r1, r0, #18
 800b666:	9804      	ldr	r0, [sp, #16]
 800b668:	3340      	adds	r3, #64	; 0x40
 800b66a:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 800b66e:	9123      	str	r1, [sp, #140]	; 0x8c
 800b670:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800b674:	404f      	eors	r7, r1
 800b676:	9905      	ldr	r1, [sp, #20]
 800b678:	4046      	eors	r6, r0
 800b67a:	9804      	ldr	r0, [sp, #16]
 800b67c:	05c9      	lsls	r1, r1, #23
 800b67e:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 800b682:	9125      	str	r1, [sp, #148]	; 0x94
 800b684:	05c1      	lsls	r1, r0, #23
 800b686:	9805      	ldr	r0, [sp, #20]
 800b688:	3240      	adds	r2, #64	; 0x40
 800b68a:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 800b68e:	9124      	str	r1, [sp, #144]	; 0x90
 800b690:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800b694:	4070      	eors	r0, r6
 800b696:	4079      	eors	r1, r7
 800b698:	4606      	mov	r6, r0
 800b69a:	460f      	mov	r7, r1
 800b69c:	e952 0110 	ldrd	r0, r1, [r2, #-64]	; 0x40
 800b6a0:	1900      	adds	r0, r0, r4
 800b6a2:	4169      	adcs	r1, r5
 800b6a4:	1836      	adds	r6, r6, r0
 800b6a6:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 800b6aa:	414f      	adcs	r7, r1
 800b6ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6b0:	4060      	eors	r0, r4
 800b6b2:	4069      	eors	r1, r5
 800b6b4:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b6b8:	4004      	ands	r4, r0
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	400d      	ands	r5, r1
 800b6be:	4629      	mov	r1, r5
 800b6c0:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 800b6c4:	4044      	eors	r4, r0
 800b6c6:	1936      	adds	r6, r6, r4
 800b6c8:	ea85 0501 	eor.w	r5, r5, r1
 800b6cc:	416f      	adcs	r7, r5
 800b6ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b6d2:	1980      	adds	r0, r0, r6
 800b6d4:	4179      	adcs	r1, r7
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	460f      	mov	r7, r1
 800b6da:	eb18 0000 	adds.w	r0, r8, r0
 800b6de:	eb49 0101 	adc.w	r1, r9, r1
 800b6e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b6e6:	9900      	ldr	r1, [sp, #0]
 800b6e8:	9801      	ldr	r0, [sp, #4]
 800b6ea:	0f09      	lsrs	r1, r1, #28
 800b6ec:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800b6f0:	9126      	str	r1, [sp, #152]	; 0x98
 800b6f2:	0f01      	lsrs	r1, r0, #28
 800b6f4:	9800      	ldr	r0, [sp, #0]
 800b6f6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800b6fa:	9127      	str	r1, [sp, #156]	; 0x9c
 800b6fc:	9901      	ldr	r1, [sp, #4]
 800b6fe:	0789      	lsls	r1, r1, #30
 800b700:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 800b704:	9129      	str	r1, [sp, #164]	; 0xa4
 800b706:	0781      	lsls	r1, r0, #30
 800b708:	9801      	ldr	r0, [sp, #4]
 800b70a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b70e:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 800b712:	9128      	str	r1, [sp, #160]	; 0xa0
 800b714:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 800b718:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800b71c:	4060      	eors	r0, r4
 800b71e:	9c01      	ldr	r4, [sp, #4]
 800b720:	4069      	eors	r1, r5
 800b722:	9d00      	ldr	r5, [sp, #0]
 800b724:	0664      	lsls	r4, r4, #25
 800b726:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 800b72a:	942b      	str	r4, [sp, #172]	; 0xac
 800b72c:	066c      	lsls	r4, r5, #25
 800b72e:	9d01      	ldr	r5, [sp, #4]
 800b730:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 800b734:	942a      	str	r4, [sp, #168]	; 0xa8
 800b736:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 800b73a:	4044      	eors	r4, r0
 800b73c:	404d      	eors	r5, r1
 800b73e:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 800b742:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b74a:	ea44 0408 	orr.w	r4, r4, r8
 800b74e:	ea45 0509 	orr.w	r5, r5, r9
 800b752:	ea04 040a 	and.w	r4, r4, sl
 800b756:	e9dd 8900 	ldrd	r8, r9, [sp]
 800b75a:	ea08 0800 	and.w	r8, r8, r0
 800b75e:	ea09 0901 	and.w	r9, r9, r1
 800b762:	ea44 0408 	orr.w	r4, r4, r8
 800b766:	ea05 050b 	and.w	r5, r5, fp
 800b76a:	ea45 0509 	orr.w	r5, r5, r9
 800b76e:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800b772:	1900      	adds	r0, r0, r4
 800b774:	4169      	adcs	r1, r5
 800b776:	eb10 0806 	adds.w	r8, r0, r6
 800b77a:	eb41 0907 	adc.w	r9, r1, r7
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 800b77e:	e953 450e 	ldrd	r4, r5, [r3, #-56]	; 0x38
 800b782:	e952 010e 	ldrd	r0, r1, [r2, #-56]	; 0x38
 800b786:	1824      	adds	r4, r4, r0
 800b788:	414d      	adcs	r5, r1
 800b78a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b78e:	1900      	adds	r0, r0, r4
 800b790:	4169      	adcs	r1, r5
 800b792:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800b796:	4604      	mov	r4, r0
 800b798:	460d      	mov	r5, r1
 800b79a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b79e:	4070      	eors	r0, r6
 800b7a0:	4079      	eors	r1, r7
 800b7a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b7a6:	4006      	ands	r6, r0
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	400f      	ands	r7, r1
 800b7ac:	4639      	mov	r1, r7
 800b7ae:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800b7b2:	4046      	eors	r6, r0
 800b7b4:	1930      	adds	r0, r6, r4
 800b7b6:	ea87 0701 	eor.w	r7, r7, r1
 800b7ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b7bc:	eb47 0105 	adc.w	r1, r7, r5
 800b7c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b7c2:	0ba4      	lsrs	r4, r4, #14
 800b7c4:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 800b7c8:	942c      	str	r4, [sp, #176]	; 0xb0
 800b7ca:	0bac      	lsrs	r4, r5, #14
 800b7cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b7ce:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 800b7d2:	942d      	str	r4, [sp, #180]	; 0xb4
 800b7d4:	0cac      	lsrs	r4, r5, #18
 800b7d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b7d8:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 800b7dc:	942e      	str	r4, [sp, #184]	; 0xb8
 800b7de:	0cac      	lsrs	r4, r5, #18
 800b7e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b7e2:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 800b7e6:	942f      	str	r4, [sp, #188]	; 0xbc
 800b7e8:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 800b7ec:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
 800b7f0:	4074      	eors	r4, r6
 800b7f2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b7f4:	407d      	eors	r5, r7
 800b7f6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b7f8:	05f6      	lsls	r6, r6, #23
 800b7fa:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 800b7fe:	9631      	str	r6, [sp, #196]	; 0xc4
 800b800:	05fe      	lsls	r6, r7, #23
 800b802:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b804:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 800b808:	9630      	str	r6, [sp, #192]	; 0xc0
 800b80a:	e9dd 6730 	ldrd	r6, r7, [sp, #192]	; 0xc0
 800b80e:	4066      	eors	r6, r4
 800b810:	1986      	adds	r6, r0, r6
 800b812:	ea87 0705 	eor.w	r7, r7, r5
 800b816:	eb41 0707 	adc.w	r7, r1, r7
 800b81a:	ea4f 7118 	mov.w	r1, r8, lsr #28
 800b81e:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
 800b822:	9132      	str	r1, [sp, #200]	; 0xc8
 800b824:	ea4f 7119 	mov.w	r1, r9, lsr #28
 800b828:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
 800b82c:	9133      	str	r1, [sp, #204]	; 0xcc
 800b82e:	ea4f 7189 	mov.w	r1, r9, lsl #30
 800b832:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
 800b836:	9135      	str	r1, [sp, #212]	; 0xd4
 800b838:	ea4f 7188 	mov.w	r1, r8, lsl #30
 800b83c:	ea41 0199 	orr.w	r1, r1, r9, lsr #2
 800b840:	9134      	str	r1, [sp, #208]	; 0xd0
 800b842:	e9dd 4534 	ldrd	r4, r5, [sp, #208]	; 0xd0
 800b846:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 800b84a:	4060      	eors	r0, r4
 800b84c:	ea4f 6449 	mov.w	r4, r9, lsl #25
 800b850:	ea44 14d8 	orr.w	r4, r4, r8, lsr #7
 800b854:	9437      	str	r4, [sp, #220]	; 0xdc
 800b856:	ea4f 6448 	mov.w	r4, r8, lsl #25
 800b85a:	ea44 14d9 	orr.w	r4, r4, r9, lsr #7
 800b85e:	4069      	eors	r1, r5
 800b860:	9436      	str	r4, [sp, #216]	; 0xd8
 800b862:	e9dd 4536 	ldrd	r4, r5, [sp, #216]	; 0xd8
 800b866:	4044      	eors	r4, r0
 800b868:	404d      	eors	r5, r1
 800b86a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b86e:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b872:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b876:	ea44 0408 	orr.w	r4, r4, r8
 800b87a:	ea45 0509 	orr.w	r5, r5, r9
 800b87e:	4020      	ands	r0, r4
 800b880:	4604      	mov	r4, r0
 800b882:	4029      	ands	r1, r5
 800b884:	460d      	mov	r5, r1
 800b886:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b88a:	ea00 0008 	and.w	r0, r0, r8
 800b88e:	ea01 0109 	and.w	r1, r1, r9
 800b892:	4320      	orrs	r0, r4
 800b894:	4604      	mov	r4, r0
 800b896:	4329      	orrs	r1, r5
 800b898:	460d      	mov	r5, r1
 800b89a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b89e:	eb1a 0a06 	adds.w	sl, sl, r6
 800b8a2:	eb4b 0b07 	adc.w	fp, fp, r7
 800b8a6:	1900      	adds	r0, r0, r4
 800b8a8:	4169      	adcs	r1, r5
 800b8aa:	1980      	adds	r0, r0, r6
 800b8ac:	4179      	adcs	r1, r7
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 800b8ae:	e953 450c 	ldrd	r4, r5, [r3, #-48]	; 0x30
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 800b8b2:	e9cd 0108 	strd	r0, r1, [sp, #32]
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 800b8b6:	e952 010c 	ldrd	r0, r1, [r2, #-48]	; 0x30
 800b8ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b8be:	1824      	adds	r4, r4, r0
 800b8c0:	414d      	adcs	r5, r1
 800b8c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8c6:	1900      	adds	r0, r0, r4
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	4169      	adcs	r1, r5
 800b8cc:	460d      	mov	r5, r1
 800b8ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8d2:	4070      	eors	r0, r6
 800b8d4:	ea00 000a 	and.w	r0, r0, sl
 800b8d8:	4079      	eors	r1, r7
 800b8da:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800b8de:	4046      	eors	r6, r0
 800b8e0:	1930      	adds	r0, r6, r4
 800b8e2:	ea4f 349a 	mov.w	r4, sl, lsr #14
 800b8e6:	ea44 448b 	orr.w	r4, r4, fp, lsl #18
 800b8ea:	9438      	str	r4, [sp, #224]	; 0xe0
 800b8ec:	ea4f 349b 	mov.w	r4, fp, lsr #14
 800b8f0:	ea44 448a 	orr.w	r4, r4, sl, lsl #18
 800b8f4:	9439      	str	r4, [sp, #228]	; 0xe4
 800b8f6:	ea4f 449a 	mov.w	r4, sl, lsr #18
 800b8fa:	ea44 348b 	orr.w	r4, r4, fp, lsl #14
 800b8fe:	ea01 010b 	and.w	r1, r1, fp
 800b902:	943a      	str	r4, [sp, #232]	; 0xe8
 800b904:	ea4f 449b 	mov.w	r4, fp, lsr #18
 800b908:	ea44 348a 	orr.w	r4, r4, sl, lsl #14
 800b90c:	ea87 0701 	eor.w	r7, r7, r1
 800b910:	943b      	str	r4, [sp, #236]	; 0xec
 800b912:	eb47 0105 	adc.w	r1, r7, r5
 800b916:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 800b91a:	e9dd 4538 	ldrd	r4, r5, [sp, #224]	; 0xe0
 800b91e:	4074      	eors	r4, r6
 800b920:	ea4f 56cb 	mov.w	r6, fp, lsl #23
 800b924:	ea46 265a 	orr.w	r6, r6, sl, lsr #9
 800b928:	963d      	str	r6, [sp, #244]	; 0xf4
 800b92a:	ea4f 56ca 	mov.w	r6, sl, lsl #23
 800b92e:	ea46 265b 	orr.w	r6, r6, fp, lsr #9
 800b932:	963c      	str	r6, [sp, #240]	; 0xf0
 800b934:	407d      	eors	r5, r7
 800b936:	e9dd 673c 	ldrd	r6, r7, [sp, #240]	; 0xf0
 800b93a:	4066      	eors	r6, r4
 800b93c:	1986      	adds	r6, r0, r6
 800b93e:	ea87 0705 	eor.w	r7, r7, r5
 800b942:	eb41 0707 	adc.w	r7, r1, r7
 800b946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b94a:	1980      	adds	r0, r0, r6
 800b94c:	4179      	adcs	r1, r7
 800b94e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b952:	9908      	ldr	r1, [sp, #32]
 800b954:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b956:	0f09      	lsrs	r1, r1, #28
 800b958:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800b95c:	913e      	str	r1, [sp, #248]	; 0xf8
 800b95e:	0f01      	lsrs	r1, r0, #28
 800b960:	9808      	ldr	r0, [sp, #32]
 800b962:	ac40      	add	r4, sp, #256	; 0x100
 800b964:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800b968:	913f      	str	r1, [sp, #252]	; 0xfc
 800b96a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b96c:	0789      	lsls	r1, r1, #30
 800b96e:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 800b972:	9141      	str	r1, [sp, #260]	; 0x104
 800b974:	0781      	lsls	r1, r0, #30
 800b976:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b978:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 800b97c:	9140      	str	r1, [sp, #256]	; 0x100
 800b97e:	cc30      	ldmia	r4, {r4, r5}
 800b980:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 800b984:	4060      	eors	r0, r4
 800b986:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b988:	4069      	eors	r1, r5
 800b98a:	9d08      	ldr	r5, [sp, #32]
 800b98c:	0664      	lsls	r4, r4, #25
 800b98e:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 800b992:	9443      	str	r4, [sp, #268]	; 0x10c
 800b994:	066c      	lsls	r4, r5, #25
 800b996:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b998:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 800b99c:	9442      	str	r4, [sp, #264]	; 0x108
 800b99e:	ac42      	add	r4, sp, #264	; 0x108
 800b9a0:	cc30      	ldmia	r4, {r4, r5}
 800b9a2:	4044      	eors	r4, r0
 800b9a4:	404d      	eors	r5, r1
 800b9a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b9aa:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 800b9ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9b2:	ea44 0408 	orr.w	r4, r4, r8
 800b9b6:	ea45 0509 	orr.w	r5, r5, r9
 800b9ba:	4020      	ands	r0, r4
 800b9bc:	4604      	mov	r4, r0
 800b9be:	4029      	ands	r1, r5
 800b9c0:	460d      	mov	r5, r1
 800b9c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9c6:	ea00 0008 	and.w	r0, r0, r8
 800b9ca:	ea01 0109 	and.w	r1, r1, r9
 800b9ce:	4320      	orrs	r0, r4
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	4329      	orrs	r1, r5
 800b9d4:	460d      	mov	r5, r1
 800b9d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9da:	1900      	adds	r0, r0, r4
 800b9dc:	4169      	adcs	r1, r5
 800b9de:	1980      	adds	r0, r0, r6
 800b9e0:	4179      	adcs	r1, r7
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 800b9e2:	e953 450a 	ldrd	r4, r5, [r3, #-40]	; 0x28
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 800b9e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 800b9ea:	e952 010a 	ldrd	r0, r1, [r2, #-40]	; 0x28
 800b9ee:	1824      	adds	r4, r4, r0
 800b9f0:	414d      	adcs	r5, r1
 800b9f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9f6:	1900      	adds	r0, r0, r4
 800b9f8:	4169      	adcs	r1, r5
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800ba00:	460d      	mov	r5, r1
 800ba02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba06:	ea80 000a 	eor.w	r0, r0, sl
 800ba0a:	ea81 010b 	eor.w	r1, r1, fp
 800ba0e:	4006      	ands	r6, r0
 800ba10:	4630      	mov	r0, r6
 800ba12:	400f      	ands	r7, r1
 800ba14:	4639      	mov	r1, r7
 800ba16:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ba1a:	4046      	eors	r6, r0
 800ba1c:	1930      	adds	r0, r6, r4
 800ba1e:	ea87 0701 	eor.w	r7, r7, r1
 800ba22:	9c06      	ldr	r4, [sp, #24]
 800ba24:	eb47 0105 	adc.w	r1, r7, r5
 800ba28:	9d07      	ldr	r5, [sp, #28]
 800ba2a:	0ba4      	lsrs	r4, r4, #14
 800ba2c:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 800ba30:	9444      	str	r4, [sp, #272]	; 0x110
 800ba32:	0bac      	lsrs	r4, r5, #14
 800ba34:	9d06      	ldr	r5, [sp, #24]
 800ba36:	ae46      	add	r6, sp, #280	; 0x118
 800ba38:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 800ba3c:	9445      	str	r4, [sp, #276]	; 0x114
 800ba3e:	0cac      	lsrs	r4, r5, #18
 800ba40:	9d07      	ldr	r5, [sp, #28]
 800ba42:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 800ba46:	9446      	str	r4, [sp, #280]	; 0x118
 800ba48:	0cac      	lsrs	r4, r5, #18
 800ba4a:	9d06      	ldr	r5, [sp, #24]
 800ba4c:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 800ba50:	9447      	str	r4, [sp, #284]	; 0x11c
 800ba52:	ac44      	add	r4, sp, #272	; 0x110
 800ba54:	cec0      	ldmia	r6, {r6, r7}
 800ba56:	cc30      	ldmia	r4, {r4, r5}
 800ba58:	4074      	eors	r4, r6
 800ba5a:	9e07      	ldr	r6, [sp, #28]
 800ba5c:	407d      	eors	r5, r7
 800ba5e:	9f06      	ldr	r7, [sp, #24]
 800ba60:	05f6      	lsls	r6, r6, #23
 800ba62:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 800ba66:	9649      	str	r6, [sp, #292]	; 0x124
 800ba68:	05fe      	lsls	r6, r7, #23
 800ba6a:	9f07      	ldr	r7, [sp, #28]
 800ba6c:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 800ba70:	9648      	str	r6, [sp, #288]	; 0x120
 800ba72:	ae48      	add	r6, sp, #288	; 0x120
 800ba74:	cec0      	ldmia	r6, {r6, r7}
 800ba76:	4066      	eors	r6, r4
 800ba78:	1986      	adds	r6, r0, r6
 800ba7a:	ea87 0705 	eor.w	r7, r7, r5
 800ba7e:	eb41 0707 	adc.w	r7, r1, r7
 800ba82:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
 800ba86:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800ba8a:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ba8e:	1836      	adds	r6, r6, r0
 800ba90:	414f      	adcs	r7, r1
 800ba92:	9902      	ldr	r1, [sp, #8]
 800ba94:	9803      	ldr	r0, [sp, #12]
 800ba96:	0f09      	lsrs	r1, r1, #28
 800ba98:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800ba9c:	914a      	str	r1, [sp, #296]	; 0x128
 800ba9e:	0f01      	lsrs	r1, r0, #28
 800baa0:	9802      	ldr	r0, [sp, #8]
 800baa2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800baa6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800baaa:	914b      	str	r1, [sp, #300]	; 0x12c
 800baac:	9903      	ldr	r1, [sp, #12]
 800baae:	ac4c      	add	r4, sp, #304	; 0x130
 800bab0:	0789      	lsls	r1, r1, #30
 800bab2:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 800bab6:	914d      	str	r1, [sp, #308]	; 0x134
 800bab8:	0781      	lsls	r1, r0, #30
 800baba:	9803      	ldr	r0, [sp, #12]
 800babc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bac0:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 800bac4:	914c      	str	r1, [sp, #304]	; 0x130
 800bac6:	a94a      	add	r1, sp, #296	; 0x128
 800bac8:	cc30      	ldmia	r4, {r4, r5}
 800baca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bace:	4060      	eors	r0, r4
 800bad0:	9c03      	ldr	r4, [sp, #12]
 800bad2:	4069      	eors	r1, r5
 800bad4:	9d02      	ldr	r5, [sp, #8]
 800bad6:	0664      	lsls	r4, r4, #25
 800bad8:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 800badc:	944f      	str	r4, [sp, #316]	; 0x13c
 800bade:	066c      	lsls	r4, r5, #25
 800bae0:	9d03      	ldr	r5, [sp, #12]
 800bae2:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 800bae6:	944e      	str	r4, [sp, #312]	; 0x138
 800bae8:	ac4e      	add	r4, sp, #312	; 0x138
 800baea:	cc30      	ldmia	r4, {r4, r5}
 800baec:	4044      	eors	r4, r0
 800baee:	404d      	eors	r5, r1
 800baf0:	e9cd 4500 	strd	r4, r5, [sp]
 800baf4:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 800baf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bafc:	4334      	orrs	r4, r6
 800bafe:	ea04 0408 	and.w	r4, r4, r8
 800bb02:	433d      	orrs	r5, r7
 800bb04:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 800bb08:	4006      	ands	r6, r0
 800bb0a:	ea05 0509 	and.w	r5, r5, r9
 800bb0e:	4326      	orrs	r6, r4
 800bb10:	400f      	ands	r7, r1
 800bb12:	432f      	orrs	r7, r5
 800bb14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb18:	1980      	adds	r0, r0, r6
 800bb1a:	4179      	adcs	r1, r7
 800bb1c:	4604      	mov	r4, r0
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 800bb1e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 800bb22:	460d      	mov	r5, r1
 800bb24:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800bb28:	1900      	adds	r0, r0, r4
 800bb2a:	4169      	adcs	r1, r5
 800bb2c:	e9cd 0100 	strd	r0, r1, [sp]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 800bb30:	e953 4508 	ldrd	r4, r5, [r3, #-32]
 800bb34:	e952 0108 	ldrd	r0, r1, [r2, #-32]
 800bb38:	1900      	adds	r0, r0, r4
 800bb3a:	4169      	adcs	r1, r5
 800bb3c:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 800bb40:	1824      	adds	r4, r4, r0
 800bb42:	414d      	adcs	r5, r1
 800bb44:	4620      	mov	r0, r4
 800bb46:	4629      	mov	r1, r5
 800bb48:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800bb4c:	ea84 040a 	eor.w	r4, r4, sl
 800bb50:	ea85 050b 	eor.w	r5, r5, fp
 800bb54:	4026      	ands	r6, r4
 800bb56:	ea86 040a 	eor.w	r4, r6, sl
 800bb5a:	402f      	ands	r7, r5
 800bb5c:	1824      	adds	r4, r4, r0
 800bb5e:	ea87 050b 	eor.w	r5, r7, fp
 800bb62:	414d      	adcs	r5, r1
 800bb64:	9904      	ldr	r1, [sp, #16]
 800bb66:	9805      	ldr	r0, [sp, #20]
 800bb68:	0b89      	lsrs	r1, r1, #14
 800bb6a:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 800bb6e:	9150      	str	r1, [sp, #320]	; 0x140
 800bb70:	0b81      	lsrs	r1, r0, #14
 800bb72:	9804      	ldr	r0, [sp, #16]
 800bb74:	ae52      	add	r6, sp, #328	; 0x148
 800bb76:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 800bb7a:	9151      	str	r1, [sp, #324]	; 0x144
 800bb7c:	0c81      	lsrs	r1, r0, #18
 800bb7e:	9805      	ldr	r0, [sp, #20]
 800bb80:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 800bb84:	9152      	str	r1, [sp, #328]	; 0x148
 800bb86:	0c81      	lsrs	r1, r0, #18
 800bb88:	9804      	ldr	r0, [sp, #16]
 800bb8a:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 800bb8e:	9153      	str	r1, [sp, #332]	; 0x14c
 800bb90:	a950      	add	r1, sp, #320	; 0x140
 800bb92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb96:	cec0      	ldmia	r6, {r6, r7}
 800bb98:	4070      	eors	r0, r6
 800bb9a:	9e05      	ldr	r6, [sp, #20]
 800bb9c:	4079      	eors	r1, r7
 800bb9e:	ea4f 5cc6 	mov.w	ip, r6, lsl #23
 800bba2:	9e04      	ldr	r6, [sp, #16]
 800bba4:	ea4c 2656 	orr.w	r6, ip, r6, lsr #9
 800bba8:	9655      	str	r6, [sp, #340]	; 0x154
 800bbaa:	9e04      	ldr	r6, [sp, #16]
 800bbac:	ea4f 5cc6 	mov.w	ip, r6, lsl #23
 800bbb0:	9e05      	ldr	r6, [sp, #20]
 800bbb2:	ea4c 2656 	orr.w	r6, ip, r6, lsr #9
 800bbb6:	9654      	str	r6, [sp, #336]	; 0x150
 800bbb8:	ae54      	add	r6, sp, #336	; 0x150
 800bbba:	cec0      	ldmia	r6, {r6, r7}
 800bbbc:	4046      	eors	r6, r0
 800bbbe:	19a6      	adds	r6, r4, r6
 800bbc0:	ea87 0701 	eor.w	r7, r7, r1
 800bbc4:	eb45 0707 	adc.w	r7, r5, r7
 800bbc8:	eb16 0008 	adds.w	r0, r6, r8
 800bbcc:	eb47 0109 	adc.w	r1, r7, r9
 800bbd0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bbd4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bbd8:	9900      	ldr	r1, [sp, #0]
 800bbda:	9801      	ldr	r0, [sp, #4]
 800bbdc:	0f09      	lsrs	r1, r1, #28
 800bbde:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800bbe2:	9156      	str	r1, [sp, #344]	; 0x158
 800bbe4:	0f01      	lsrs	r1, r0, #28
 800bbe6:	9800      	ldr	r0, [sp, #0]
 800bbe8:	ac58      	add	r4, sp, #352	; 0x160
 800bbea:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800bbee:	9157      	str	r1, [sp, #348]	; 0x15c
 800bbf0:	9901      	ldr	r1, [sp, #4]
 800bbf2:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
 800bbf6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bbfa:	0789      	lsls	r1, r1, #30
 800bbfc:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 800bc00:	9159      	str	r1, [sp, #356]	; 0x164
 800bc02:	0781      	lsls	r1, r0, #30
 800bc04:	9801      	ldr	r0, [sp, #4]
 800bc06:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 800bc0a:	9158      	str	r1, [sp, #352]	; 0x160
 800bc0c:	a956      	add	r1, sp, #344	; 0x158
 800bc0e:	cc30      	ldmia	r4, {r4, r5}
 800bc10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc14:	4060      	eors	r0, r4
 800bc16:	9c01      	ldr	r4, [sp, #4]
 800bc18:	4069      	eors	r1, r5
 800bc1a:	9d00      	ldr	r5, [sp, #0]
 800bc1c:	0664      	lsls	r4, r4, #25
 800bc1e:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 800bc22:	945b      	str	r4, [sp, #364]	; 0x16c
 800bc24:	066c      	lsls	r4, r5, #25
 800bc26:	9d01      	ldr	r5, [sp, #4]
 800bc28:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 800bc2c:	945a      	str	r4, [sp, #360]	; 0x168
 800bc2e:	ac5a      	add	r4, sp, #360	; 0x168
 800bc30:	cc30      	ldmia	r4, {r4, r5}
 800bc32:	4044      	eors	r4, r0
 800bc34:	404d      	eors	r5, r1
 800bc36:	4620      	mov	r0, r4
 800bc38:	4629      	mov	r1, r5
 800bc3a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bc3e:	4334      	orrs	r4, r6
 800bc40:	433d      	orrs	r5, r7
 800bc42:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 800bc46:	4026      	ands	r6, r4
 800bc48:	402f      	ands	r7, r5
 800bc4a:	4634      	mov	r4, r6
 800bc4c:	463d      	mov	r5, r7
 800bc4e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bc52:	ea08 0806 	and.w	r8, r8, r6
 800bc56:	ea09 0907 	and.w	r9, r9, r7
 800bc5a:	ea44 0408 	orr.w	r4, r4, r8
 800bc5e:	1824      	adds	r4, r4, r0
 800bc60:	ea45 0509 	orr.w	r5, r5, r9
 800bc64:	414d      	adcs	r5, r1
 800bc66:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800bc6a:	eb18 0804 	adds.w	r8, r8, r4
 800bc6e:	eb49 0905 	adc.w	r9, r9, r5
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 800bc72:	e952 0106 	ldrd	r0, r1, [r2, #-24]
 800bc76:	e953 4506 	ldrd	r4, r5, [r3, #-24]
 800bc7a:	1900      	adds	r0, r0, r4
 800bc7c:	4169      	adcs	r1, r5
 800bc7e:	eb10 000a 	adds.w	r0, r0, sl
 800bc82:	eb41 010b 	adc.w	r1, r1, fp
 800bc86:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bc8a:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800bc8e:	ea84 040a 	eor.w	r4, r4, sl
 800bc92:	46a2      	mov	sl, r4
 800bc94:	ea85 050b 	eor.w	r5, r5, fp
 800bc98:	46ab      	mov	fp, r5
 800bc9a:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 800bc9e:	ea04 040a 	and.w	r4, r4, sl
 800bca2:	46a2      	mov	sl, r4
 800bca4:	ea05 050b 	and.w	r5, r5, fp
 800bca8:	46ab      	mov	fp, r5
 800bcaa:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800bcae:	ea84 040a 	eor.w	r4, r4, sl
 800bcb2:	eb14 0a00 	adds.w	sl, r4, r0
 800bcb6:	ea85 050b 	eor.w	r5, r5, fp
 800bcba:	eb45 0b01 	adc.w	fp, r5, r1
 800bcbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bcc0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bcc2:	0b89      	lsrs	r1, r1, #14
 800bcc4:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 800bcc8:	915c      	str	r1, [sp, #368]	; 0x170
 800bcca:	0b81      	lsrs	r1, r0, #14
 800bccc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bcce:	ac5e      	add	r4, sp, #376	; 0x178
 800bcd0:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 800bcd4:	915d      	str	r1, [sp, #372]	; 0x174
 800bcd6:	0c81      	lsrs	r1, r0, #18
 800bcd8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bcda:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 800bcde:	915e      	str	r1, [sp, #376]	; 0x178
 800bce0:	0c81      	lsrs	r1, r0, #18
 800bce2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bce4:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 800bce8:	915f      	str	r1, [sp, #380]	; 0x17c
 800bcea:	a95c      	add	r1, sp, #368	; 0x170
 800bcec:	cc30      	ldmia	r4, {r4, r5}
 800bcee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcf2:	4060      	eors	r0, r4
 800bcf4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bcf6:	4069      	eors	r1, r5
 800bcf8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bcfa:	05e4      	lsls	r4, r4, #23
 800bcfc:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 800bd00:	9461      	str	r4, [sp, #388]	; 0x184
 800bd02:	05ec      	lsls	r4, r5, #23
 800bd04:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800bd06:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 800bd0a:	9460      	str	r4, [sp, #384]	; 0x180
 800bd0c:	ac60      	add	r4, sp, #384	; 0x180
 800bd0e:	cc30      	ldmia	r4, {r4, r5}
 800bd10:	4044      	eors	r4, r0
 800bd12:	eb1a 0a04 	adds.w	sl, sl, r4
 800bd16:	ea85 0501 	eor.w	r5, r5, r1
 800bd1a:	eb4b 0b05 	adc.w	fp, fp, r5
 800bd1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd22:	eb10 000a 	adds.w	r0, r0, sl
 800bd26:	eb41 010b 	adc.w	r1, r1, fp
 800bd2a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bd2e:	ea4f 7118 	mov.w	r1, r8, lsr #28
 800bd32:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
 800bd36:	9162      	str	r1, [sp, #392]	; 0x188
 800bd38:	ea4f 7119 	mov.w	r1, r9, lsr #28
 800bd3c:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
 800bd40:	9163      	str	r1, [sp, #396]	; 0x18c
 800bd42:	ea4f 7189 	mov.w	r1, r9, lsl #30
 800bd46:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
 800bd4a:	9165      	str	r1, [sp, #404]	; 0x194
 800bd4c:	ea4f 7188 	mov.w	r1, r8, lsl #30
 800bd50:	ea41 0199 	orr.w	r1, r1, r9, lsr #2
 800bd54:	9164      	str	r1, [sp, #400]	; 0x190
 800bd56:	ac64      	add	r4, sp, #400	; 0x190
 800bd58:	a962      	add	r1, sp, #392	; 0x188
 800bd5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd5e:	cc30      	ldmia	r4, {r4, r5}
 800bd60:	4060      	eors	r0, r4
 800bd62:	ea4f 6449 	mov.w	r4, r9, lsl #25
 800bd66:	ea44 14d8 	orr.w	r4, r4, r8, lsr #7
 800bd6a:	9467      	str	r4, [sp, #412]	; 0x19c
 800bd6c:	ea4f 6448 	mov.w	r4, r8, lsl #25
 800bd70:	ea44 14d9 	orr.w	r4, r4, r9, lsr #7
 800bd74:	9466      	str	r4, [sp, #408]	; 0x198
 800bd76:	ac66      	add	r4, sp, #408	; 0x198
 800bd78:	4069      	eors	r1, r5
 800bd7a:	cc30      	ldmia	r4, {r4, r5}
 800bd7c:	4044      	eors	r4, r0
 800bd7e:	4620      	mov	r0, r4
 800bd80:	404d      	eors	r5, r1
 800bd82:	ea46 0408 	orr.w	r4, r6, r8
 800bd86:	4629      	mov	r1, r5
 800bd88:	ea47 0509 	orr.w	r5, r7, r9
 800bd8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bd90:	4026      	ands	r6, r4
 800bd92:	4634      	mov	r4, r6
 800bd94:	402f      	ands	r7, r5
 800bd96:	463d      	mov	r5, r7
 800bd98:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bd9c:	ea06 0608 	and.w	r6, r6, r8
 800bda0:	4326      	orrs	r6, r4
 800bda2:	ea07 0709 	and.w	r7, r7, r9
 800bda6:	1834      	adds	r4, r6, r0
 800bda8:	ea47 0705 	orr.w	r7, r7, r5
 800bdac:	eb47 0501 	adc.w	r5, r7, r1
 800bdb0:	eb1a 0a04 	adds.w	sl, sl, r4
 800bdb4:	eb4b 0b05 	adc.w	fp, fp, r5
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 800bdb8:	e952 0104 	ldrd	r0, r1, [r2, #-16]
 800bdbc:	e953 4504 	ldrd	r4, r5, [r3, #-16]
 800bdc0:	1824      	adds	r4, r4, r0
 800bdc2:	414d      	adcs	r5, r1
 800bdc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdc8:	1900      	adds	r0, r0, r4
 800bdca:	4169      	adcs	r1, r5
 800bdcc:	4604      	mov	r4, r0
 800bdce:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800bdd2:	460d      	mov	r5, r1
 800bdd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bdd8:	4046      	eors	r6, r0
 800bdda:	4630      	mov	r0, r6
 800bddc:	404f      	eors	r7, r1
 800bdde:	4639      	mov	r1, r7
 800bde0:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 800bde4:	4006      	ands	r6, r0
 800bde6:	4630      	mov	r0, r6
 800bde8:	400f      	ands	r7, r1
 800bdea:	4639      	mov	r1, r7
 800bdec:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800bdf0:	4046      	eors	r6, r0
 800bdf2:	1930      	adds	r0, r6, r4
 800bdf4:	ea87 0701 	eor.w	r7, r7, r1
 800bdf8:	9c08      	ldr	r4, [sp, #32]
 800bdfa:	eb47 0105 	adc.w	r1, r7, r5
 800bdfe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800be00:	0ba4      	lsrs	r4, r4, #14
 800be02:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 800be06:	9468      	str	r4, [sp, #416]	; 0x1a0
 800be08:	0bac      	lsrs	r4, r5, #14
 800be0a:	9d08      	ldr	r5, [sp, #32]
 800be0c:	ae6a      	add	r6, sp, #424	; 0x1a8
 800be0e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 800be12:	9469      	str	r4, [sp, #420]	; 0x1a4
 800be14:	0cac      	lsrs	r4, r5, #18
 800be16:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800be18:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 800be1c:	946a      	str	r4, [sp, #424]	; 0x1a8
 800be1e:	0cac      	lsrs	r4, r5, #18
 800be20:	9d08      	ldr	r5, [sp, #32]
 800be22:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 800be26:	946b      	str	r4, [sp, #428]	; 0x1ac
 800be28:	ac68      	add	r4, sp, #416	; 0x1a0
 800be2a:	cec0      	ldmia	r6, {r6, r7}
 800be2c:	cc30      	ldmia	r4, {r4, r5}
 800be2e:	4074      	eors	r4, r6
 800be30:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800be32:	407d      	eors	r5, r7
 800be34:	ea4f 5cc6 	mov.w	ip, r6, lsl #23
 800be38:	9e08      	ldr	r6, [sp, #32]
 800be3a:	ea4c 2656 	orr.w	r6, ip, r6, lsr #9
 800be3e:	966d      	str	r6, [sp, #436]	; 0x1b4
 800be40:	9e08      	ldr	r6, [sp, #32]
 800be42:	ea4f 5cc6 	mov.w	ip, r6, lsl #23
 800be46:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800be48:	ea4c 2656 	orr.w	r6, ip, r6, lsr #9
 800be4c:	966c      	str	r6, [sp, #432]	; 0x1b0
 800be4e:	ae6c      	add	r6, sp, #432	; 0x1b0
 800be50:	cec0      	ldmia	r6, {r6, r7}
 800be52:	4066      	eors	r6, r4
 800be54:	1986      	adds	r6, r0, r6
 800be56:	ea87 0705 	eor.w	r7, r7, r5
 800be5a:	eb41 0707 	adc.w	r7, r1, r7
 800be5e:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
 800be62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be66:	1980      	adds	r0, r0, r6
 800be68:	4179      	adcs	r1, r7
 800be6a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be6e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800be72:	ea4f 711a 	mov.w	r1, sl, lsr #28
 800be76:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 800be7a:	916e      	str	r1, [sp, #440]	; 0x1b8
 800be7c:	ea4f 711b 	mov.w	r1, fp, lsr #28
 800be80:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 800be84:	916f      	str	r1, [sp, #444]	; 0x1bc
 800be86:	ea4f 718b 	mov.w	r1, fp, lsl #30
 800be8a:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 800be8e:	9171      	str	r1, [sp, #452]	; 0x1c4
 800be90:	ea4f 718a 	mov.w	r1, sl, lsl #30
 800be94:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 800be98:	9170      	str	r1, [sp, #448]	; 0x1c0
 800be9a:	ac70      	add	r4, sp, #448	; 0x1c0
 800be9c:	a96e      	add	r1, sp, #440	; 0x1b8
 800be9e:	cc30      	ldmia	r4, {r4, r5}
 800bea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bea4:	4060      	eors	r0, r4
 800bea6:	ea4f 644b 	mov.w	r4, fp, lsl #25
 800beaa:	ea44 14da 	orr.w	r4, r4, sl, lsr #7
 800beae:	9473      	str	r4, [sp, #460]	; 0x1cc
 800beb0:	ea4f 644a 	mov.w	r4, sl, lsl #25
 800beb4:	ea44 14db 	orr.w	r4, r4, fp, lsr #7
 800beb8:	9472      	str	r4, [sp, #456]	; 0x1c8
 800beba:	ac72      	add	r4, sp, #456	; 0x1c8
 800bebc:	4069      	eors	r1, r5
 800bebe:	cc30      	ldmia	r4, {r4, r5}
 800bec0:	4044      	eors	r4, r0
 800bec2:	4620      	mov	r0, r4
 800bec4:	404d      	eors	r5, r1
 800bec6:	ea48 040a 	orr.w	r4, r8, sl
 800beca:	4629      	mov	r1, r5
 800becc:	4026      	ands	r6, r4
 800bece:	ea49 050b 	orr.w	r5, r9, fp
 800bed2:	4634      	mov	r4, r6
 800bed4:	402f      	ands	r7, r5
 800bed6:	463d      	mov	r5, r7
 800bed8:	ea08 060a 	and.w	r6, r8, sl
 800bedc:	4326      	orrs	r6, r4
 800bede:	ea09 070b 	and.w	r7, r9, fp
 800bee2:	1834      	adds	r4, r6, r0
 800bee4:	ea47 0705 	orr.w	r7, r7, r5
 800bee8:	eb47 0501 	adc.w	r5, r7, r1
 800beec:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800bef0:	1900      	adds	r0, r0, r4
 800bef2:	4169      	adcs	r1, r5
 800bef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 800bef8:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 800befc:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 800bf00:	1824      	adds	r4, r4, r0
 800bf02:	414d      	adcs	r5, r1
 800bf04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf08:	1900      	adds	r0, r0, r4
 800bf0a:	4169      	adcs	r1, r5
 800bf0c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 800bf10:	4604      	mov	r4, r0
 800bf12:	460d      	mov	r5, r1
 800bf14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bf18:	4070      	eors	r0, r6
 800bf1a:	4079      	eors	r1, r7
 800bf1c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800bf20:	4006      	ands	r6, r0
 800bf22:	4630      	mov	r0, r6
 800bf24:	400f      	ands	r7, r1
 800bf26:	4639      	mov	r1, r7
 800bf28:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800bf2c:	4046      	eors	r6, r0
 800bf2e:	1930      	adds	r0, r6, r4
 800bf30:	ea87 0701 	eor.w	r7, r7, r1
 800bf34:	9c06      	ldr	r4, [sp, #24]
 800bf36:	eb47 0105 	adc.w	r1, r7, r5
 800bf3a:	9d07      	ldr	r5, [sp, #28]
 800bf3c:	0ba4      	lsrs	r4, r4, #14
 800bf3e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 800bf42:	9474      	str	r4, [sp, #464]	; 0x1d0
 800bf44:	0bac      	lsrs	r4, r5, #14
 800bf46:	9d06      	ldr	r5, [sp, #24]
 800bf48:	ae76      	add	r6, sp, #472	; 0x1d8
 800bf4a:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 800bf4e:	9475      	str	r4, [sp, #468]	; 0x1d4
 800bf50:	0cac      	lsrs	r4, r5, #18
 800bf52:	9d07      	ldr	r5, [sp, #28]
 800bf54:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 800bf58:	9476      	str	r4, [sp, #472]	; 0x1d8
 800bf5a:	0cac      	lsrs	r4, r5, #18
 800bf5c:	9d06      	ldr	r5, [sp, #24]
 800bf5e:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 800bf62:	9477      	str	r4, [sp, #476]	; 0x1dc
 800bf64:	ac74      	add	r4, sp, #464	; 0x1d0
 800bf66:	cec0      	ldmia	r6, {r6, r7}
 800bf68:	cc30      	ldmia	r4, {r4, r5}
 800bf6a:	4074      	eors	r4, r6
 800bf6c:	9e07      	ldr	r6, [sp, #28]
 800bf6e:	407d      	eors	r5, r7
 800bf70:	9f06      	ldr	r7, [sp, #24]
 800bf72:	05f6      	lsls	r6, r6, #23
 800bf74:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 800bf78:	9679      	str	r6, [sp, #484]	; 0x1e4
 800bf7a:	05fe      	lsls	r6, r7, #23
 800bf7c:	9f07      	ldr	r7, [sp, #28]
 800bf7e:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 800bf82:	9678      	str	r6, [sp, #480]	; 0x1e0
 800bf84:	ae78      	add	r6, sp, #480	; 0x1e0
 800bf86:	cec0      	ldmia	r6, {r6, r7}
 800bf88:	4066      	eors	r6, r4
 800bf8a:	1986      	adds	r6, r0, r6
 800bf8c:	ea87 0705 	eor.w	r7, r7, r5
 800bf90:	eb41 0707 	adc.w	r7, r1, r7
 800bf94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf98:	1980      	adds	r0, r0, r6
 800bf9a:	4179      	adcs	r1, r7
 800bf9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfa0:	9902      	ldr	r1, [sp, #8]
 800bfa2:	9803      	ldr	r0, [sp, #12]
 800bfa4:	0f09      	lsrs	r1, r1, #28
 800bfa6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800bfaa:	917a      	str	r1, [sp, #488]	; 0x1e8
 800bfac:	0f01      	lsrs	r1, r0, #28
 800bfae:	9802      	ldr	r0, [sp, #8]
 800bfb0:	ac7c      	add	r4, sp, #496	; 0x1f0
 800bfb2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800bfb6:	917b      	str	r1, [sp, #492]	; 0x1ec
 800bfb8:	9903      	ldr	r1, [sp, #12]
 800bfba:	0789      	lsls	r1, r1, #30
 800bfbc:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 800bfc0:	917d      	str	r1, [sp, #500]	; 0x1f4
 800bfc2:	0781      	lsls	r1, r0, #30
 800bfc4:	9803      	ldr	r0, [sp, #12]
 800bfc6:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 800bfca:	917c      	str	r1, [sp, #496]	; 0x1f0
 800bfcc:	a97a      	add	r1, sp, #488	; 0x1e8
 800bfce:	cc30      	ldmia	r4, {r4, r5}
 800bfd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfd4:	4060      	eors	r0, r4
 800bfd6:	9c03      	ldr	r4, [sp, #12]
 800bfd8:	4069      	eors	r1, r5
 800bfda:	9d02      	ldr	r5, [sp, #8]
 800bfdc:	0664      	lsls	r4, r4, #25
 800bfde:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 800bfe2:	947f      	str	r4, [sp, #508]	; 0x1fc
 800bfe4:	066c      	lsls	r4, r5, #25
 800bfe6:	9d03      	ldr	r5, [sp, #12]
 800bfe8:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 800bfec:	947e      	str	r4, [sp, #504]	; 0x1f8
 800bfee:	ac7e      	add	r4, sp, #504	; 0x1f8
 800bff0:	cc30      	ldmia	r4, {r4, r5}
 800bff2:	4044      	eors	r4, r0
 800bff4:	404d      	eors	r5, r1
 800bff6:	e9cd 4500 	strd	r4, r5, [sp]
 800bffa:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bffe:	ea44 040a 	orr.w	r4, r4, sl
 800c002:	ea45 050b 	orr.w	r5, r5, fp
 800c006:	ea04 0008 	and.w	r0, r4, r8
 800c00a:	ea05 0109 	and.w	r1, r5, r9
 800c00e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c012:	ea04 040a 	and.w	r4, r4, sl
 800c016:	ea05 050b 	and.w	r5, r5, fp
 800c01a:	4320      	orrs	r0, r4
 800c01c:	4329      	orrs	r1, r5
 800c01e:	4604      	mov	r4, r0
 800c020:	460d      	mov	r5, r1
 800c022:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c026:	1900      	adds	r0, r0, r4
 800c028:	4169      	adcs	r1, r5
 800c02a:	1980      	adds	r0, r0, r6
 800c02c:	4179      	adcs	r1, r7
    }
    while( i < 80 );
 800c02e:	459e      	cmp	lr, r3
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 800c030:	e9cd 0100 	strd	r0, r1, [sp]
    while( i < 80 );
 800c034:	f47f ab02 	bne.w	800b63c <mbedtls_internal_sha512_process+0x1f4>

    ctx->state[0] += A;
 800c038:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 800c03c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c03e:	1824      	adds	r4, r4, r0
 800c040:	414d      	adcs	r5, r1
 800c042:	e9c3 4504 	strd	r4, r5, [r3, #16]
    ctx->state[1] += B;
 800c046:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c04a:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 800c04e:	18a4      	adds	r4, r4, r2
 800c050:	415d      	adcs	r5, r3
 800c052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;

    return( 0 );
}
 800c054:	2000      	movs	r0, #0
    ctx->state[1] += B;
 800c056:	e9c3 4506 	strd	r4, r5, [r3, #24]
    ctx->state[2] += C;
 800c05a:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
 800c05e:	eb13 030a 	adds.w	r3, r3, sl
 800c062:	eb44 040b 	adc.w	r4, r4, fp
 800c066:	469a      	mov	sl, r3
 800c068:	46a3      	mov	fp, r4
    ctx->state[3] += D;
 800c06a:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
    ctx->state[2] += C;
 800c06e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ctx->state[3] += D;
 800c070:	eb14 0408 	adds.w	r4, r4, r8
 800c074:	eb45 0509 	adc.w	r5, r5, r9
 800c078:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    ctx->state[4] += E;
 800c07c:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
    ctx->state[2] += C;
 800c080:	e9c3 ab08 	strd	sl, fp, [r3, #32]
    ctx->state[4] += E;
 800c084:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c088:	18a4      	adds	r4, r4, r2
 800c08a:	415d      	adcs	r5, r3
 800c08c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c08e:	e9c3 450c 	strd	r4, r5, [r3, #48]	; 0x30
    ctx->state[5] += F;
 800c092:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c096:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 800c09a:	18a4      	adds	r4, r4, r2
 800c09c:	415d      	adcs	r5, r3
 800c09e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0a0:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
    ctx->state[6] += G;
 800c0a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c0a8:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 800c0ac:	18a4      	adds	r4, r4, r2
 800c0ae:	415d      	adcs	r5, r3
 800c0b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0b2:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
    ctx->state[7] += H;
 800c0b6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c0ba:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 800c0be:	18a4      	adds	r4, r4, r2
 800c0c0:	415d      	adcs	r5, r3
 800c0c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0c4:	e9c3 4512 	strd	r4, r5, [r3, #72]	; 0x48
}
 800c0c8:	f20d 4d84 	addw	sp, sp, #1156	; 0x484
 800c0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0d0 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 800c0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d4:	4605      	mov	r5, r0
 800c0d6:	460f      	mov	r7, r1
    unsigned int left;

    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 800c0d8:	4614      	mov	r4, r2
 800c0da:	b912      	cbnz	r2, 800c0e2 <mbedtls_sha512_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
 800c0dc:	2000      	movs	r0, #0
}
 800c0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ctx->total[0] += (uint64_t) ilen;
 800c0e2:	f04f 0900 	mov.w	r9, #0
    left = (unsigned int) (ctx->total[0] & 0x7F);
 800c0e6:	e9d0 2300 	ldrd	r2, r3, [r0]
 800c0ea:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    ctx->total[0] += (uint64_t) ilen;
 800c0ee:	1912      	adds	r2, r2, r4
 800c0f0:	eb43 0309 	adc.w	r3, r3, r9
    if( ctx->total[0] < (uint64_t) ilen )
 800c0f4:	454b      	cmp	r3, r9
 800c0f6:	bf08      	it	eq
 800c0f8:	42a2      	cmpeq	r2, r4
    ctx->total[0] += (uint64_t) ilen;
 800c0fa:	e9c5 2300 	strd	r2, r3, [r5]
    if( ctx->total[0] < (uint64_t) ilen )
 800c0fe:	d206      	bcs.n	800c10e <mbedtls_sha512_update_ret+0x3e>
        ctx->total[1]++;
 800c100:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800c104:	3201      	adds	r2, #1
 800c106:	f143 0300 	adc.w	r3, r3, #0
 800c10a:	e9c5 2302 	strd	r2, r3, [r5, #8]
    if( left && ilen >= fill )
 800c10e:	b310      	cbz	r0, 800c156 <mbedtls_sha512_update_ret+0x86>
    fill = 128 - left;
 800c110:	f1c0 0680 	rsb	r6, r0, #128	; 0x80
    if( left && ilen >= fill )
 800c114:	42b4      	cmp	r4, r6
 800c116:	d317      	bcc.n	800c148 <mbedtls_sha512_update_ret+0x78>
        memcpy( (void *) (ctx->buffer + left), input, fill );
 800c118:	f105 0850 	add.w	r8, r5, #80	; 0x50
 800c11c:	4639      	mov	r1, r7
 800c11e:	4632      	mov	r2, r6
 800c120:	4440      	add	r0, r8
 800c122:	f005 fe4c 	bl	8011dbe <memcpy>
        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 800c126:	4641      	mov	r1, r8
 800c128:	4628      	mov	r0, r5
 800c12a:	f7ff f98d 	bl	800b448 <mbedtls_internal_sha512_process>
 800c12e:	2800      	cmp	r0, #0
 800c130:	d1d5      	bne.n	800c0de <mbedtls_sha512_update_ret+0xe>
        input += fill;
 800c132:	4437      	add	r7, r6
        ilen  -= fill;
 800c134:	1ba6      	subs	r6, r4, r6
    if( left && ilen >= fill )
 800c136:	4634      	mov	r4, r6
 800c138:	1b31      	subs	r1, r6, r4
    while( ilen >= 128 )
 800c13a:	2c7f      	cmp	r4, #127	; 0x7f
 800c13c:	4439      	add	r1, r7
 800c13e:	d80c      	bhi.n	800c15a <mbedtls_sha512_update_ret+0x8a>
    if( ilen > 0 )
 800c140:	2c00      	cmp	r4, #0
 800c142:	d0cb      	beq.n	800c0dc <mbedtls_sha512_update_ret+0xc>
 800c144:	460f      	mov	r7, r1
 800c146:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 800c148:	3550      	adds	r5, #80	; 0x50
 800c14a:	4622      	mov	r2, r4
 800c14c:	4639      	mov	r1, r7
 800c14e:	4428      	add	r0, r5
 800c150:	f005 fe35 	bl	8011dbe <memcpy>
 800c154:	e7c2      	b.n	800c0dc <mbedtls_sha512_update_ret+0xc>
    if( left && ilen >= fill )
 800c156:	4626      	mov	r6, r4
 800c158:	e7ed      	b.n	800c136 <mbedtls_sha512_update_ret+0x66>
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 800c15a:	4628      	mov	r0, r5
 800c15c:	f7ff f974 	bl	800b448 <mbedtls_internal_sha512_process>
 800c160:	2800      	cmp	r0, #0
 800c162:	d1bc      	bne.n	800c0de <mbedtls_sha512_update_ret+0xe>
        ilen  -= 128;
 800c164:	3c80      	subs	r4, #128	; 0x80
 800c166:	e7e7      	b.n	800c138 <mbedtls_sha512_update_ret+0x68>

0800c168 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 800c168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c16c:	4604      	mov	r4, r0
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 800c16e:	2280      	movs	r2, #128	; 0x80
    used = ctx->total[0] & 0x7F;
 800c170:	6803      	ldr	r3, [r0, #0]
{
 800c172:	460d      	mov	r5, r1
    used = ctx->total[0] & 0x7F;
 800c174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ctx->buffer[used++] = 0x80;
 800c178:	1c58      	adds	r0, r3, #1

    if( used <= 112 )
 800c17a:	2870      	cmp	r0, #112	; 0x70
    ctx->buffer[used++] = 0x80;
 800c17c:	4423      	add	r3, r4
 800c17e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800c182:	f104 0650 	add.w	r6, r4, #80	; 0x50
    if( used <= 112 )
 800c186:	f200 8113 	bhi.w	800c3b0 <mbedtls_sha512_finish_ret+0x248>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 800c18a:	2100      	movs	r1, #0
 800c18c:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
 800c190:	4430      	add	r0, r6
        memset( ctx->buffer + used, 0, 128 - used );

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 112 );
 800c192:	f005 fe39 	bl	8011e08 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 800c196:	e894 000c 	ldmia.w	r4, {r2, r3}
         | ( ctx->total[1] <<  3 );
 800c19a:	68e1      	ldr	r1, [r4, #12]
 800c19c:	68a0      	ldr	r0, [r4, #8]
 800c19e:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    high = ( ctx->total[0] >> 61 )
 800c1a2:	2100      	movs	r1, #0
         | ( ctx->total[1] <<  3 );
 800c1a4:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
    high = ( ctx->total[0] >> 61 )
 800c1a8:	ea41 0109 	orr.w	r1, r1, r9
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 800c1ac:	0e0f      	lsrs	r7, r1, #24
         | ( ctx->total[1] <<  3 );
 800c1ae:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    high = ( ctx->total[0] >> 61 )
 800c1b2:	0f58      	lsrs	r0, r3, #29
 800c1b4:	ea40 0008 	orr.w	r0, r0, r8
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 800c1b8:	f884 70c0 	strb.w	r7, [r4, #192]	; 0xc0
 800c1bc:	0c0f      	lsrs	r7, r1, #16
 800c1be:	f884 70c1 	strb.w	r7, [r4, #193]	; 0xc1
 800c1c2:	f884 10c3 	strb.w	r1, [r4, #195]	; 0xc3
 800c1c6:	0a0f      	lsrs	r7, r1, #8
 800c1c8:	0e01      	lsrs	r1, r0, #24
    low  = ( ctx->total[0] <<  3 );
 800c1ca:	00db      	lsls	r3, r3, #3
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 800c1cc:	f884 10c4 	strb.w	r1, [r4, #196]	; 0xc4
 800c1d0:	0c01      	lsrs	r1, r0, #16
    low  = ( ctx->total[0] <<  3 );
 800c1d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 800c1d6:	f884 10c5 	strb.w	r1, [r4, #197]	; 0xc5
 800c1da:	0a01      	lsrs	r1, r0, #8
 800c1dc:	f884 10c6 	strb.w	r1, [r4, #198]	; 0xc6
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 800c1e0:	0e19      	lsrs	r1, r3, #24
    low  = ( ctx->total[0] <<  3 );
 800c1e2:	00d2      	lsls	r2, r2, #3
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 800c1e4:	f884 10c8 	strb.w	r1, [r4, #200]	; 0xc8
 800c1e8:	0c19      	lsrs	r1, r3, #16
 800c1ea:	f884 10c9 	strb.w	r1, [r4, #201]	; 0xc9
 800c1ee:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
 800c1f2:	0a19      	lsrs	r1, r3, #8
 800c1f4:	0e13      	lsrs	r3, r2, #24
 800c1f6:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 800c1fa:	0c13      	lsrs	r3, r2, #16
 800c1fc:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
 800c200:	0a13      	lsrs	r3, r2, #8
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 800c202:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 800c206:	f884 10ca 	strb.w	r1, [r4, #202]	; 0xca
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 800c20a:	f884 70c2 	strb.w	r7, [r4, #194]	; 0xc2
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 800c20e:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
 800c212:	f884 20cf 	strb.w	r2, [r4, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 800c216:	4631      	mov	r1, r6
 800c218:	4620      	mov	r0, r4
 800c21a:	f7ff f915 	bl	800b448 <mbedtls_internal_sha512_process>
 800c21e:	2800      	cmp	r0, #0
 800c220:	f040 80c4 	bne.w	800c3ac <mbedtls_sha512_finish_ret+0x244>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 800c224:	7de3      	ldrb	r3, [r4, #23]
 800c226:	702b      	strb	r3, [r5, #0]
 800c228:	8ae3      	ldrh	r3, [r4, #22]
 800c22a:	706b      	strb	r3, [r5, #1]
 800c22c:	6963      	ldr	r3, [r4, #20]
 800c22e:	0a1b      	lsrs	r3, r3, #8
 800c230:	70ab      	strb	r3, [r5, #2]
 800c232:	6963      	ldr	r3, [r4, #20]
 800c234:	70eb      	strb	r3, [r5, #3]
 800c236:	7ce3      	ldrb	r3, [r4, #19]
 800c238:	712b      	strb	r3, [r5, #4]
 800c23a:	8a63      	ldrh	r3, [r4, #18]
 800c23c:	716b      	strb	r3, [r5, #5]
 800c23e:	6923      	ldr	r3, [r4, #16]
 800c240:	0a1b      	lsrs	r3, r3, #8
 800c242:	71ab      	strb	r3, [r5, #6]
 800c244:	6923      	ldr	r3, [r4, #16]
 800c246:	71eb      	strb	r3, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 800c248:	7fe3      	ldrb	r3, [r4, #31]
 800c24a:	722b      	strb	r3, [r5, #8]
 800c24c:	8be3      	ldrh	r3, [r4, #30]
 800c24e:	726b      	strb	r3, [r5, #9]
 800c250:	69e3      	ldr	r3, [r4, #28]
 800c252:	0a1b      	lsrs	r3, r3, #8
 800c254:	72ab      	strb	r3, [r5, #10]
 800c256:	69e3      	ldr	r3, [r4, #28]
 800c258:	72eb      	strb	r3, [r5, #11]
 800c25a:	7ee3      	ldrb	r3, [r4, #27]
 800c25c:	732b      	strb	r3, [r5, #12]
 800c25e:	8b63      	ldrh	r3, [r4, #26]
 800c260:	736b      	strb	r3, [r5, #13]
 800c262:	69a3      	ldr	r3, [r4, #24]
 800c264:	0a1b      	lsrs	r3, r3, #8
 800c266:	73ab      	strb	r3, [r5, #14]
 800c268:	69a3      	ldr	r3, [r4, #24]
 800c26a:	73eb      	strb	r3, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 800c26c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800c270:	742b      	strb	r3, [r5, #16]
 800c272:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800c274:	746b      	strb	r3, [r5, #17]
 800c276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c278:	0a1b      	lsrs	r3, r3, #8
 800c27a:	74ab      	strb	r3, [r5, #18]
 800c27c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c27e:	74eb      	strb	r3, [r5, #19]
 800c280:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800c284:	752b      	strb	r3, [r5, #20]
 800c286:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800c288:	756b      	strb	r3, [r5, #21]
 800c28a:	6a23      	ldr	r3, [r4, #32]
 800c28c:	0a1b      	lsrs	r3, r3, #8
 800c28e:	75ab      	strb	r3, [r5, #22]
 800c290:	6a23      	ldr	r3, [r4, #32]
 800c292:	75eb      	strb	r3, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 800c294:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800c298:	762b      	strb	r3, [r5, #24]
 800c29a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800c29c:	766b      	strb	r3, [r5, #25]
 800c29e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c2a0:	0a1b      	lsrs	r3, r3, #8
 800c2a2:	76ab      	strb	r3, [r5, #26]
 800c2a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c2a6:	76eb      	strb	r3, [r5, #27]
 800c2a8:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800c2ac:	772b      	strb	r3, [r5, #28]
 800c2ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c2b0:	776b      	strb	r3, [r5, #29]
 800c2b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c2b4:	0a1b      	lsrs	r3, r3, #8
 800c2b6:	77ab      	strb	r3, [r5, #30]
 800c2b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c2ba:	77eb      	strb	r3, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 800c2bc:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800c2c0:	f885 3020 	strb.w	r3, [r5, #32]
 800c2c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c2c6:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 800c2ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2cc:	0a1b      	lsrs	r3, r3, #8
 800c2ce:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 800c2d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2d4:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
 800c2d8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800c2dc:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 800c2e0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800c2e2:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800c2e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c2e8:	0a1b      	lsrs	r3, r3, #8
 800c2ea:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
 800c2ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c2f0:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 800c2f4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800c2f8:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 800c2fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c2fe:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
 800c302:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c304:	0a1b      	lsrs	r3, r3, #8
 800c306:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
 800c30a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c30c:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
 800c310:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 800c314:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800c318:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800c31a:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
 800c31e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c320:	0a1b      	lsrs	r3, r3, #8
 800c322:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
 800c326:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c328:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
 800c32c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 800c330:	2b00      	cmp	r3, #0
 800c332:	d13b      	bne.n	800c3ac <mbedtls_sha512_finish_ret+0x244>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 800c334:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 800c338:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800c33c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800c340:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 800c344:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c346:	0a1b      	lsrs	r3, r3, #8
 800c348:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 800c34c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c34e:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
 800c352:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c356:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 800c35a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800c35e:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 800c362:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c364:	0a1b      	lsrs	r3, r3, #8
 800c366:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 800c36a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c36c:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 800c370:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 800c374:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 800c378:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 800c37c:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 800c380:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c382:	0a1b      	lsrs	r3, r3, #8
 800c384:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
 800c388:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c38a:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
 800c38e:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800c392:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 800c396:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800c39a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 800c39e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c3a0:	0a1b      	lsrs	r3, r3, #8
 800c3a2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 800c3a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c3a8:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
    }

    return( 0 );
}
 800c3ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memset( ctx->buffer + used, 0, 128 - used );
 800c3b0:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	4430      	add	r0, r6
 800c3b8:	f005 fd26 	bl	8011e08 <memset>
        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 800c3bc:	4631      	mov	r1, r6
 800c3be:	4620      	mov	r0, r4
 800c3c0:	f7ff f842 	bl	800b448 <mbedtls_internal_sha512_process>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d1f1      	bne.n	800c3ac <mbedtls_sha512_finish_ret+0x244>
        memset( ctx->buffer, 0, 112 );
 800c3c8:	4601      	mov	r1, r0
 800c3ca:	2270      	movs	r2, #112	; 0x70
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	e6e0      	b.n	800c192 <mbedtls_sha512_finish_ret+0x2a>

0800c3d0 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 800c3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3d2:	461c      	mov	r4, r3
 800c3d4:	b0b7      	sub	sp, #220	; 0xdc
 800c3d6:	4606      	mov	r6, r0

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
 800c3d8:	4668      	mov	r0, sp
{
 800c3da:	460f      	mov	r7, r1
 800c3dc:	4615      	mov	r5, r2
    mbedtls_sha512_init( &ctx );
 800c3de:	f7fe ff87 	bl	800b2f0 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 800c3e2:	4621      	mov	r1, r4
 800c3e4:	4668      	mov	r0, sp
 800c3e6:	f7fe ff93 	bl	800b310 <mbedtls_sha512_starts_ret>
 800c3ea:	4604      	mov	r4, r0
 800c3ec:	b958      	cbnz	r0, 800c406 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 800c3ee:	463a      	mov	r2, r7
 800c3f0:	4631      	mov	r1, r6
 800c3f2:	4668      	mov	r0, sp
 800c3f4:	f7ff fe6c 	bl	800c0d0 <mbedtls_sha512_update_ret>
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	b920      	cbnz	r0, 800c406 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 800c3fc:	4629      	mov	r1, r5
 800c3fe:	4668      	mov	r0, sp
 800c400:	f7ff feb2 	bl	800c168 <mbedtls_sha512_finish_ret>
 800c404:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
 800c406:	4668      	mov	r0, sp
 800c408:	f7fe ff76 	bl	800b2f8 <mbedtls_sha512_free>

    return( ret );
}
 800c40c:	4620      	mov	r0, r4
 800c40e:	b037      	add	sp, #220	; 0xdc
 800c410:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800c414 <mbedtls_ssl_list_ciphersuites>:

#if defined(MBEDTLS_SSL_CIPHERSUITES)
const int *mbedtls_ssl_list_ciphersuites( void )
{
    return( ciphersuite_preference );
}
 800c414:	4800      	ldr	r0, [pc, #0]	; (800c418 <mbedtls_ssl_list_ciphersuites+0x4>)
 800c416:	4770      	bx	lr
 800c418:	08016f08 	.word	0x08016f08

0800c41c <mbedtls_ssl_ciphersuite_from_id>:
    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 800c41c:	4b04      	ldr	r3, [pc, #16]	; (800c430 <mbedtls_ssl_ciphersuite_from_id+0x14>)

    while( cur->id != 0 )
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	b912      	cbnz	r2, 800c428 <mbedtls_ssl_ciphersuite_from_id+0xc>
            return( cur );

        cur++;
    }

    return( NULL );
 800c422:	4613      	mov	r3, r2
}
 800c424:	4618      	mov	r0, r3
 800c426:	4770      	bx	lr
        if( cur->id == ciphersuite )
 800c428:	4282      	cmp	r2, r0
 800c42a:	d0fb      	beq.n	800c424 <mbedtls_ssl_ciphersuite_from_id+0x8>
        cur++;
 800c42c:	3320      	adds	r3, #32
 800c42e:	e7f6      	b.n	800c41e <mbedtls_ssl_ciphersuite_from_id+0x2>
 800c430:	08016e28 	.word	0x08016e28

0800c434 <mbedtls_ssl_get_ciphersuite_name>:

const char *mbedtls_ssl_get_ciphersuite_name( const int ciphersuite_id )
{
 800c434:	b508      	push	{r3, lr}
    const mbedtls_ssl_ciphersuite_t *cur;

    cur = mbedtls_ssl_ciphersuite_from_id( ciphersuite_id );
 800c436:	f7ff fff1 	bl	800c41c <mbedtls_ssl_ciphersuite_from_id>

    if( cur == NULL )
 800c43a:	b108      	cbz	r0, 800c440 <mbedtls_ssl_get_ciphersuite_name+0xc>
        return( "unknown" );

    return( cur->name );
 800c43c:	6840      	ldr	r0, [r0, #4]
 800c43e:	bd08      	pop	{r3, pc}
        return( "unknown" );
 800c440:	4800      	ldr	r0, [pc, #0]	; (800c444 <mbedtls_ssl_get_ciphersuite_name+0x10>)
}
 800c442:	bd08      	pop	{r3, pc}
 800c444:	08015383 	.word	0x08015383

0800c448 <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 800c448:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c44a:	b10b      	cbz	r3, 800c450 <mbedtls_ssl_own_key+0x8>
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	b913      	cbnz	r3, 800c456 <mbedtls_ssl_own_key+0xe>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 800c450:	6803      	ldr	r3, [r0, #0]
 800c452:	6b9b      	ldr	r3, [r3, #56]	; 0x38

    return( key_cert == NULL ? NULL : key_cert->key );
 800c454:	b10b      	cbz	r3, 800c45a <mbedtls_ssl_own_key+0x12>
 800c456:	6858      	ldr	r0, [r3, #4]
 800c458:	4770      	bx	lr
 800c45a:	4618      	mov	r0, r3
}
 800c45c:	4770      	bx	lr
	...

0800c460 <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 800c460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 800c464:	6843      	ldr	r3, [r0, #4]
{
 800c466:	b099      	sub	sp, #100	; 0x64
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 800c468:	2b10      	cmp	r3, #16
{
 800c46a:	4604      	mov	r4, r0
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 800c46c:	d056      	beq.n	800c51c <mbedtls_ssl_handshake_client_step+0xbc>
 800c46e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800c470:	2a00      	cmp	r2, #0
 800c472:	d053      	beq.n	800c51c <mbedtls_ssl_handshake_client_step+0xbc>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );
 800c474:	9301      	str	r3, [sp, #4]
 800c476:	4b9c      	ldr	r3, [pc, #624]	; (800c6e8 <mbedtls_ssl_handshake_client_step+0x288>)
 800c478:	4a9c      	ldr	r2, [pc, #624]	; (800c6ec <mbedtls_ssl_handshake_client_step+0x28c>)
 800c47a:	9300      	str	r3, [sp, #0]
 800c47c:	2102      	movs	r1, #2
 800c47e:	f640 53b6 	movw	r3, #3510	; 0xdb6
 800c482:	f7f9 fec5 	bl	8006210 <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 800c486:	4620      	mov	r0, r4
 800c488:	f001 fd5a 	bl	800df40 <mbedtls_ssl_flush_output>
 800c48c:	4605      	mov	r5, r0
 800c48e:	b9c0      	cbnz	r0, 800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
    }
#endif

    switch( ssl->state )
 800c490:	6863      	ldr	r3, [r4, #4]
 800c492:	2b0f      	cmp	r3, #15
 800c494:	f200 8671 	bhi.w	800d17a <mbedtls_ssl_handshake_client_step+0xd1a>
 800c498:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c49c:	00170010 	.word	0x00170010
 800c4a0:	034f00e8 	.word	0x034f00e8
 800c4a4:	03b40354 	.word	0x03b40354
 800c4a8:	04d0048e 	.word	0x04d0048e
 800c4ac:	057804d4 	.word	0x057804d4
 800c4b0:	0651064d 	.word	0x0651064d
 800c4b4:	06590655 	.word	0x06590655
 800c4b8:	066a065d 	.word	0x066a065d
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 800c4bc:	2201      	movs	r2, #1
            break;
 800c4be:	461d      	mov	r5, r3
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 800c4c0:	6062      	str	r2, [r4, #4]
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	b019      	add	sp, #100	; 0x64
 800c4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );
 800c4ca:	4b89      	ldr	r3, [pc, #548]	; (800c6f0 <mbedtls_ssl_handshake_client_step+0x290>)
 800c4cc:	2102      	movs	r1, #2
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	4a86      	ldr	r2, [pc, #536]	; (800c6ec <mbedtls_ssl_handshake_client_step+0x28c>)
 800c4d2:	f240 3306 	movw	r3, #774	; 0x306
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	f7f9 fe9a 	bl	8006210 <mbedtls_debug_print_msg>
    if( ssl->conf->f_rng == NULL )
 800c4dc:	6821      	ldr	r1, [r4, #0]
 800c4de:	698b      	ldr	r3, [r1, #24]
 800c4e0:	b953      	cbnz	r3, 800c4f8 <mbedtls_ssl_handshake_client_step+0x98>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 800c4e2:	4b84      	ldr	r3, [pc, #528]	; (800c6f4 <mbedtls_ssl_handshake_client_step+0x294>)
 800c4e4:	4a81      	ldr	r2, [pc, #516]	; (800c6ec <mbedtls_ssl_handshake_client_step+0x28c>)
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	2101      	movs	r1, #1
 800c4ea:	f240 330a 	movw	r3, #778	; 0x30a
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	f7f9 fe8e 	bl	8006210 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_NO_RNG );
 800c4f4:	4d80      	ldr	r5, [pc, #512]	; (800c6f8 <mbedtls_ssl_handshake_client_step+0x298>)
 800c4f6:	e7e4      	b.n	800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
        ssl->major_ver = ssl->conf->min_major_ver;
 800c4f8:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
 800c4fc:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 800c4fe:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
 800c502:	60e3      	str	r3, [r4, #12]
    if( ssl->conf->max_major_ver == 0 )
 800c504:	f891 004c 	ldrb.w	r0, [r1, #76]	; 0x4c
 800c508:	b950      	cbnz	r0, 800c520 <mbedtls_ssl_handshake_client_step+0xc0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "configured max major version is invalid, "
 800c50a:	4b7c      	ldr	r3, [pc, #496]	; (800c6fc <mbedtls_ssl_handshake_client_step+0x29c>)
 800c50c:	4a77      	ldr	r2, [pc, #476]	; (800c6ec <mbedtls_ssl_handshake_client_step+0x28c>)
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	2101      	movs	r1, #1
 800c512:	f240 3319 	movw	r3, #793	; 0x319
 800c516:	4620      	mov	r0, r4
 800c518:	f7f9 fe7a 	bl	8006210 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800c51c:	4d78      	ldr	r5, [pc, #480]	; (800c700 <mbedtls_ssl_handshake_client_step+0x2a0>)
 800c51e:	e7d0      	b.n	800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
    buf = ssl->out_msg;
 800c520:	f8d4 8098 	ldr.w	r8, [r4, #152]	; 0x98
                       ssl->conf->transport, p );
 800c524:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 800c528:	f108 0304 	add.w	r3, r8, #4
 800c52c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800c530:	f891 104d 	ldrb.w	r1, [r1, #77]	; 0x4d
 800c534:	f003 ff0a 	bl	801034c <mbedtls_ssl_write_version>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, max version: [%d:%d]",
 800c538:	f898 3005 	ldrb.w	r3, [r8, #5]
 800c53c:	4a6b      	ldr	r2, [pc, #428]	; (800c6ec <mbedtls_ssl_handshake_client_step+0x28c>)
 800c53e:	9302      	str	r3, [sp, #8]
 800c540:	f898 3004 	ldrb.w	r3, [r8, #4]
 800c544:	2103      	movs	r1, #3
 800c546:	9301      	str	r3, [sp, #4]
 800c548:	4b6e      	ldr	r3, [pc, #440]	; (800c704 <mbedtls_ssl_handshake_client_step+0x2a4>)
 800c54a:	4620      	mov	r0, r4
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	f44f 734b 	mov.w	r3, #812	; 0x32c
 800c552:	f7f9 fe5d 	bl	8006210 <mbedtls_debug_print_msg>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 800c556:	6823      	ldr	r3, [r4, #0]
    unsigned char *p = ssl->handshake->randbytes;
 800c558:	6b26      	ldr	r6, [r4, #48]	; 0x30
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 800c55a:	699d      	ldr	r5, [r3, #24]
 800c55c:	2204      	movs	r2, #4
 800c55e:	f506 71b2 	add.w	r1, r6, #356	; 0x164
 800c562:	69d8      	ldr	r0, [r3, #28]
 800c564:	47a8      	blx	r5
 800c566:	4605      	mov	r5, r0
 800c568:	b950      	cbnz	r0, 800c580 <mbedtls_ssl_handshake_client_step+0x120>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 800c56a:	6823      	ldr	r3, [r4, #0]
 800c56c:	221c      	movs	r2, #28
 800c56e:	699d      	ldr	r5, [r3, #24]
 800c570:	f506 71b4 	add.w	r1, r6, #360	; 0x168
 800c574:	69d8      	ldr	r0, [r3, #28]
 800c576:	47a8      	blx	r5
 800c578:	4605      	mov	r5, r0
 800c57a:	2800      	cmp	r0, #0
 800c57c:	f000 8609 	beq.w	800d192 <mbedtls_ssl_handshake_client_step+0xd32>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
 800c580:	4b61      	ldr	r3, [pc, #388]	; (800c708 <mbedtls_ssl_handshake_client_step+0x2a8>)
 800c582:	9501      	str	r5, [sp, #4]
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	f44f 734c 	mov.w	r3, #816	; 0x330
 800c58a:	e04d      	b.n	800c628 <mbedtls_ssl_handshake_client_step+0x1c8>
        n = 0;
 800c58c:	2600      	movs	r6, #0
 800c58e:	f000 be27 	b.w	800d1e0 <mbedtls_ssl_handshake_client_step+0xd80>
        *p++ = ssl->session_negotiate->id[i];
 800c592:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c594:	441a      	add	r2, r3
 800c596:	7b12      	ldrb	r2, [r2, #12]
 800c598:	54ea      	strb	r2, [r5, r3]
    for( i = 0; i < n; i++ )
 800c59a:	3301      	adds	r3, #1
 800c59c:	f000 be25 	b.w	800d1ea <mbedtls_ssl_handshake_client_step+0xd8a>
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 800c5a0:	4628      	mov	r0, r5
 800c5a2:	f7ff ff3b 	bl	800c41c <mbedtls_ssl_ciphersuite_from_id>
                                      ssl->conf->min_minor_ver,
 800c5a6:	6823      	ldr	r3, [r4, #0]
        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
 800c5a8:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
    if( suite_info == NULL )
 800c5ac:	b140      	cbz	r0, 800c5c0 <mbedtls_ssl_handshake_client_step+0x160>
    if( suite_info->min_minor_ver > max_minor_ver ||
 800c5ae:	6902      	ldr	r2, [r0, #16]
 800c5b0:	4291      	cmp	r1, r2
 800c5b2:	db05      	blt.n	800c5c0 <mbedtls_ssl_handshake_client_step+0x160>
        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
 800c5b4:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
    if( suite_info->min_minor_ver > max_minor_ver ||
 800c5b8:	6983      	ldr	r3, [r0, #24]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	f340 86ae 	ble.w	800d31c <mbedtls_ssl_handshake_client_step+0xebc>
 800c5c0:	f109 0904 	add.w	r9, r9, #4
 800c5c4:	f000 be34 	b.w	800d230 <mbedtls_ssl_handshake_client_step+0xdd0>
        sig_alg_len += 2;
 800c5c8:	3302      	adds	r3, #2
 800c5ca:	f000 be7e 	b.w	800d2ca <mbedtls_ssl_handshake_client_step+0xe6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 800c5ce:	4b4f      	ldr	r3, [pc, #316]	; (800c70c <mbedtls_ssl_handshake_client_step+0x2ac>)
 800c5d0:	4a46      	ldr	r2, [pc, #280]	; (800c6ec <mbedtls_ssl_handshake_client_step+0x28c>)
 800c5d2:	9300      	str	r3, [sp, #0]
 800c5d4:	2101      	movs	r1, #1
 800c5d6:	23c8      	movs	r3, #200	; 0xc8
 800c5d8:	4620      	mov	r0, r4
 800c5da:	f7f9 fe19 	bl	8006210 <mbedtls_debug_print_msg>
    *olen = 0;
 800c5de:	2500      	movs	r5, #0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
 800c5e0:	4b4b      	ldr	r3, [pc, #300]	; (800c710 <mbedtls_ssl_handshake_client_step+0x2b0>)
 800c5e2:	9501      	str	r5, [sp, #4]
 800c5e4:	9300      	str	r3, [sp, #0]
 800c5e6:	4a41      	ldr	r2, [pc, #260]	; (800c6ec <mbedtls_ssl_handshake_client_step+0x28c>)
 800c5e8:	f240 432f 	movw	r3, #1071	; 0x42f
 800c5ec:	2103      	movs	r1, #3
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f7f9 fe0e 	bl	8006210 <mbedtls_debug_print_msg>
    if( ext_len > 0 )
 800c5f4:	bb5d      	cbnz	r5, 800c64e <mbedtls_ssl_handshake_client_step+0x1ee>
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 800c5f6:	1d35      	adds	r5, r6, #4
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 800c5f8:	2316      	movs	r3, #22
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 800c5fa:	2601      	movs	r6, #1
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 800c5fc:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 800c600:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl->out_msglen  = p - buf;
 800c604:	eba5 0508 	sub.w	r5, r5, r8
 800c608:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 800c60c:	701e      	strb	r6, [r3, #0]
    ssl->state++;
 800c60e:	6863      	ldr	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 800c610:	4620      	mov	r0, r4
    ssl->state++;
 800c612:	4433      	add	r3, r6
 800c614:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 800c616:	f001 ffd9 	bl	800e5cc <mbedtls_ssl_write_handshake_msg>
 800c61a:	4605      	mov	r5, r0
 800c61c:	b1e0      	cbz	r0, 800c658 <mbedtls_ssl_handshake_client_step+0x1f8>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
 800c61e:	4b3d      	ldr	r3, [pc, #244]	; (800c714 <mbedtls_ssl_handshake_client_step+0x2b4>)
 800c620:	9001      	str	r0, [sp, #4]
 800c622:	9300      	str	r3, [sp, #0]
 800c624:	f240 4345 	movw	r3, #1093	; 0x445
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800c628:	4a30      	ldr	r2, [pc, #192]	; (800c6ec <mbedtls_ssl_handshake_client_step+0x28c>)
 800c62a:	2101      	movs	r1, #1
 800c62c:	4620      	mov	r0, r4
 800c62e:	f7f9 fe1f 	bl	8006270 <mbedtls_debug_print_ret>
 800c632:	e746      	b.n	800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
 800c634:	9308      	str	r3, [sp, #32]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 800c636:	f003 fe7f 	bl	8010338 <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 800c63a:	9b08      	ldr	r3, [sp, #32]
 800c63c:	eb0b 0209 	add.w	r2, fp, r9
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 800c640:	f80b 0005 	strb.w	r0, [fp, r5]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 800c644:	464d      	mov	r5, r9
 800c646:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c64a:	f000 be50 	b.w	800d2ee <mbedtls_ssl_handshake_client_step+0xe8e>
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 800c64e:	0a2b      	lsrs	r3, r5, #8
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 800c650:	7175      	strb	r5, [r6, #5]
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 800c652:	7133      	strb	r3, [r6, #4]
        p += ext_len;
 800c654:	443d      	add	r5, r7
 800c656:	e7cf      	b.n	800c5f8 <mbedtls_ssl_handshake_client_step+0x198>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client hello" ) );
 800c658:	4b2f      	ldr	r3, [pc, #188]	; (800c718 <mbedtls_ssl_handshake_client_step+0x2b8>)
 800c65a:	9300      	str	r3, [sp, #0]
 800c65c:	f240 4352 	movw	r3, #1106	; 0x452
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello" ) );
 800c660:	4a22      	ldr	r2, [pc, #136]	; (800c6ec <mbedtls_ssl_handshake_client_step+0x28c>)
 800c662:	2102      	movs	r1, #2
 800c664:	4620      	mov	r0, r4
 800c666:	f7f9 fdd3 	bl	8006210 <mbedtls_debug_print_msg>
 800c66a:	e72a      	b.n	800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );
 800c66c:	4b2b      	ldr	r3, [pc, #172]	; (800c71c <mbedtls_ssl_handshake_client_step+0x2bc>)
 800c66e:	4a1f      	ldr	r2, [pc, #124]	; (800c6ec <mbedtls_ssl_handshake_client_step+0x28c>)
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	2102      	movs	r1, #2
 800c674:	f240 53db 	movw	r3, #1499	; 0x5db
 800c678:	4620      	mov	r0, r4
 800c67a:	f7f9 fdc9 	bl	8006210 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 800c67e:	2101      	movs	r1, #1
 800c680:	4620      	mov	r0, r4
    buf = ssl->in_msg;
 800c682:	6e67      	ldr	r7, [r4, #100]	; 0x64
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 800c684:	f002 f954 	bl	800e930 <mbedtls_ssl_read_record>
 800c688:	4605      	mov	r5, r0
 800c68a:	b128      	cbz	r0, 800c698 <mbedtls_ssl_handshake_client_step+0x238>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800c68c:	4b24      	ldr	r3, [pc, #144]	; (800c720 <mbedtls_ssl_handshake_client_step+0x2c0>)
 800c68e:	9001      	str	r0, [sp, #4]
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	f240 53e2 	movw	r3, #1506	; 0x5e2
 800c696:	e7c7      	b.n	800c628 <mbedtls_ssl_handshake_client_step+0x1c8>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 800c698:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c69a:	2b16      	cmp	r3, #22
 800c69c:	d00f      	beq.n	800c6be <mbedtls_ssl_handshake_client_step+0x25e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 800c69e:	4b21      	ldr	r3, [pc, #132]	; (800c724 <mbedtls_ssl_handshake_client_step+0x2c4>)
 800c6a0:	9300      	str	r3, [sp, #0]
 800c6a2:	f240 53fc 	movw	r3, #1532	; 0x5fc
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 800c6a6:	4a11      	ldr	r2, [pc, #68]	; (800c6ec <mbedtls_ssl_handshake_client_step+0x28c>)
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	f7f9 fdb0 	bl	8006210 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800c6b0:	220a      	movs	r2, #10
 800c6b2:	2102      	movs	r1, #2
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f002 f8e7 	bl	800e888 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800c6ba:	4d1b      	ldr	r5, [pc, #108]	; (800c728 <mbedtls_ssl_handshake_client_step+0x2c8>)
 800c6bc:	e701      	b.n	800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 800c6be:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c6c0:	2b29      	cmp	r3, #41	; 0x29
 800c6c2:	d902      	bls.n	800c6ca <mbedtls_ssl_handshake_client_step+0x26a>
 800c6c4:	783b      	ldrb	r3, [r7, #0]
 800c6c6:	2b02      	cmp	r3, #2
 800c6c8:	d030      	beq.n	800c72c <mbedtls_ssl_handshake_client_step+0x2cc>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 800c6ca:	4b16      	ldr	r3, [pc, #88]	; (800c724 <mbedtls_ssl_handshake_client_step+0x2c4>)
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	f44f 63c3 	mov.w	r3, #1560	; 0x618
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 800c6d2:	4a06      	ldr	r2, [pc, #24]	; (800c6ec <mbedtls_ssl_handshake_client_step+0x28c>)
 800c6d4:	2101      	movs	r1, #1
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	f7f9 fd9a 	bl	8006210 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800c6dc:	2232      	movs	r2, #50	; 0x32
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800c6de:	2102      	movs	r1, #2
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f002 f8d1 	bl	800e888 <mbedtls_ssl_send_alert_message>
 800c6e6:	e21b      	b.n	800cb20 <mbedtls_ssl_handshake_client_step+0x6c0>
 800c6e8:	0801700c 	.word	0x0801700c
 800c6ec:	08016fd5 	.word	0x08016fd5
 800c6f0:	0801701d 	.word	0x0801701d
 800c6f4:	08017033 	.word	0x08017033
 800c6f8:	ffff8c00 	.word	0xffff8c00
 800c6fc:	08017043 	.word	0x08017043
 800c700:	ffff8f00 	.word	0xffff8f00
 800c704:	08017099 	.word	0x08017099
 800c708:	08017786 	.word	0x08017786
 800c70c:	0801593e 	.word	0x0801593e
 800c710:	080171c4 	.word	0x080171c4
 800c714:	080171ed 	.word	0x080171ed
 800c718:	0801720d 	.word	0x0801720d
 800c71c:	08017223 	.word	0x08017223
 800c720:	08017239 	.word	0x08017239
 800c724:	08017251 	.word	0x08017251
 800c728:	ffff8900 	.word	0xffff8900
    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
 800c72c:	9302      	str	r3, [sp, #8]
 800c72e:	4bbd      	ldr	r3, [pc, #756]	; (800ca24 <mbedtls_ssl_handshake_client_step+0x5c4>)
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 800c730:	f107 0a04 	add.w	sl, r7, #4
    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	4abc      	ldr	r2, [pc, #752]	; (800ca28 <mbedtls_ssl_handshake_client_step+0x5c8>)
 800c738:	f240 632b 	movw	r3, #1579	; 0x62b
 800c73c:	2103      	movs	r1, #3
 800c73e:	4620      	mov	r0, r4
 800c740:	f8cd a004 	str.w	sl, [sp, #4]
 800c744:	f7f9 fdc2 	bl	80062cc <mbedtls_debug_print_buf>
                      ssl->conf->transport, buf + 0 );
 800c748:	4621      	mov	r1, r4
 800c74a:	f851 3b0c 	ldr.w	r3, [r1], #12
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 800c74e:	f104 0008 	add.w	r0, r4, #8
                      ssl->conf->transport, buf + 0 );
 800c752:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 800c756:	4653      	mov	r3, sl
 800c758:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800c75c:	f003 fdf9 	bl	8010352 <mbedtls_ssl_read_version>
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 800c760:	6823      	ldr	r3, [r4, #0]
 800c762:	68a2      	ldr	r2, [r4, #8]
 800c764:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
 800c768:	68e1      	ldr	r1, [r4, #12]
 800c76a:	4282      	cmp	r2, r0
 800c76c:	f893 604d 	ldrb.w	r6, [r3, #77]	; 0x4d
 800c770:	db09      	blt.n	800c786 <mbedtls_ssl_handshake_client_step+0x326>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 800c772:	f893 e04f 	ldrb.w	lr, [r3, #79]	; 0x4f
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 800c776:	4571      	cmp	r1, lr
 800c778:	db05      	blt.n	800c786 <mbedtls_ssl_handshake_client_step+0x326>
        ssl->major_ver > ssl->conf->max_major_ver ||
 800c77a:	f893 e04c 	ldrb.w	lr, [r3, #76]	; 0x4c
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 800c77e:	4572      	cmp	r2, lr
 800c780:	dc01      	bgt.n	800c786 <mbedtls_ssl_handshake_client_step+0x326>
        ssl->major_ver > ssl->conf->max_major_ver ||
 800c782:	42b1      	cmp	r1, r6
 800c784:	dd19      	ble.n	800c7ba <mbedtls_ssl_handshake_client_step+0x35a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server version out of bounds - "
 800c786:	9606      	str	r6, [sp, #24]
 800c788:	f893 504c 	ldrb.w	r5, [r3, #76]	; 0x4c
 800c78c:	9104      	str	r1, [sp, #16]
 800c78e:	9505      	str	r5, [sp, #20]
 800c790:	9203      	str	r2, [sp, #12]
 800c792:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800c796:	4aa4      	ldr	r2, [pc, #656]	; (800ca28 <mbedtls_ssl_handshake_client_step+0x5c8>)
 800c798:	9302      	str	r3, [sp, #8]
 800c79a:	4ba4      	ldr	r3, [pc, #656]	; (800ca2c <mbedtls_ssl_handshake_client_step+0x5cc>)
 800c79c:	9001      	str	r0, [sp, #4]
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	2101      	movs	r1, #1
 800c7a2:	f44f 63c7 	mov.w	r3, #1592	; 0x638
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f7f9 fd32 	bl	8006210 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800c7ac:	2246      	movs	r2, #70	; 0x46
 800c7ae:	2102      	movs	r1, #2
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	f002 f869 	bl	800e888 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 800c7b6:	4d9e      	ldr	r5, [pc, #632]	; (800ca30 <mbedtls_ssl_handshake_client_step+0x5d0>)
 800c7b8:	e683      	b.n	800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, current time: %lu",
 800c7ba:	79fb      	ldrb	r3, [r7, #7]
 800c7bc:	79ba      	ldrb	r2, [r7, #6]
 800c7be:	041b      	lsls	r3, r3, #16
 800c7c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c7c4:	7a7a      	ldrb	r2, [r7, #9]
 800c7c6:	2103      	movs	r1, #3
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	7a3a      	ldrb	r2, [r7, #8]
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c7d2:	9301      	str	r3, [sp, #4]
 800c7d4:	4b97      	ldr	r3, [pc, #604]	; (800ca34 <mbedtls_ssl_handshake_client_step+0x5d4>)
 800c7d6:	4a94      	ldr	r2, [pc, #592]	; (800ca28 <mbedtls_ssl_handshake_client_step+0x5c8>)
 800c7d8:	9300      	str	r3, [sp, #0]
 800c7da:	f240 6344 	movw	r3, #1604	; 0x644
 800c7de:	f7f9 fd17 	bl	8006210 <mbedtls_debug_print_msg>
    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 800c7e2:	1db9      	adds	r1, r7, #6
 800c7e4:	460a      	mov	r2, r1
 800c7e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c7e8:	f107 0026 	add.w	r0, r7, #38	; 0x26
 800c7ec:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800c7f0:	f852 6b04 	ldr.w	r6, [r2], #4
 800c7f4:	4282      	cmp	r2, r0
 800c7f6:	f843 6b04 	str.w	r6, [r3], #4
 800c7fa:	d1f9      	bne.n	800c7f0 <mbedtls_ssl_handshake_client_step+0x390>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 800c7fc:	2320      	movs	r3, #32
    n = buf[34];
 800c7fe:	f897 6026 	ldrb.w	r6, [r7, #38]	; 0x26
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 800c802:	9302      	str	r3, [sp, #8]
 800c804:	4b8c      	ldr	r3, [pc, #560]	; (800ca38 <mbedtls_ssl_handshake_client_step+0x5d8>)
 800c806:	9101      	str	r1, [sp, #4]
 800c808:	9300      	str	r3, [sp, #0]
 800c80a:	4a87      	ldr	r2, [pc, #540]	; (800ca28 <mbedtls_ssl_handshake_client_step+0x5c8>)
 800c80c:	f240 634a 	movw	r3, #1610	; 0x64a
 800c810:	2103      	movs	r1, #3
 800c812:	4620      	mov	r0, r4
 800c814:	f7f9 fd5a 	bl	80062cc <mbedtls_debug_print_buf>
    if( n > 32 )
 800c818:	2e20      	cmp	r6, #32
 800c81a:	d904      	bls.n	800c826 <mbedtls_ssl_handshake_client_step+0x3c6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 800c81c:	4b87      	ldr	r3, [pc, #540]	; (800ca3c <mbedtls_ssl_handshake_client_step+0x5dc>)
 800c81e:	9300      	str	r3, [sp, #0]
 800c820:	f240 634e 	movw	r3, #1614	; 0x64e
 800c824:	e755      	b.n	800c6d2 <mbedtls_ssl_handshake_client_step+0x272>
    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 800c826:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800c828:	f106 032b 	add.w	r3, r6, #43	; 0x2b
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d915      	bls.n	800c85c <mbedtls_ssl_handshake_client_step+0x3fc>
        ext_len = ( ( buf[38 + n] <<  8 )
 800c830:	eb0a 0306 	add.w	r3, sl, r6
 800c834:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
                  | ( buf[39 + n]       ) );
 800c838:	f893 8027 	ldrb.w	r8, [r3, #39]	; 0x27
 800c83c:	ea48 2801 	orr.w	r8, r8, r1, lsl #8
        if( ( ext_len > 0 && ext_len < 4 ) ||
 800c840:	f108 33ff 	add.w	r3, r8, #4294967295
 800c844:	2b02      	cmp	r3, #2
 800c846:	d904      	bls.n	800c852 <mbedtls_ssl_handshake_client_step+0x3f2>
            ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 40 + n + ext_len )
 800c848:	f106 032c 	add.w	r3, r6, #44	; 0x2c
 800c84c:	4443      	add	r3, r8
        if( ( ext_len > 0 && ext_len < 4 ) ||
 800c84e:	429a      	cmp	r2, r3
 800c850:	d00f      	beq.n	800c872 <mbedtls_ssl_handshake_client_step+0x412>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 800c852:	4b7a      	ldr	r3, [pc, #488]	; (800ca3c <mbedtls_ssl_handshake_client_step+0x5dc>)
 800c854:	9300      	str	r3, [sp, #0]
 800c856:	f240 635c 	movw	r3, #1628	; 0x65c
 800c85a:	e73a      	b.n	800c6d2 <mbedtls_ssl_handshake_client_step+0x272>
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 800c85c:	f106 032a 	add.w	r3, r6, #42	; 0x2a
 800c860:	429a      	cmp	r2, r3
 800c862:	d004      	beq.n	800c86e <mbedtls_ssl_handshake_client_step+0x40e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 800c864:	4b75      	ldr	r3, [pc, #468]	; (800ca3c <mbedtls_ssl_handshake_client_step+0x5dc>)
 800c866:	9300      	str	r3, [sp, #0]
 800c868:	f44f 63cd 	mov.w	r3, #1640	; 0x668
 800c86c:	e731      	b.n	800c6d2 <mbedtls_ssl_handshake_client_step+0x272>
        ext_len = 0;
 800c86e:	f04f 0800 	mov.w	r8, #0
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 800c872:	eb0a 0306 	add.w	r3, sl, r6
 800c876:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800c87a:	f893 b024 	ldrb.w	fp, [r3, #36]	; 0x24
    comp = buf[37 + n];
 800c87e:	f106 0325 	add.w	r3, r6, #37	; 0x25
 800c882:	9308      	str	r3, [sp, #32]
 800c884:	f81a 3003 	ldrb.w	r3, [sl, r3]
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 800c888:	ea4b 2b02 	orr.w	fp, fp, r2, lsl #8
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 800c88c:	b183      	cbz	r3, 800c8b0 <mbedtls_ssl_handshake_client_step+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
 800c88e:	9301      	str	r3, [sp, #4]
 800c890:	4b6b      	ldr	r3, [pc, #428]	; (800ca40 <mbedtls_ssl_handshake_client_step+0x5e0>)
 800c892:	4a65      	ldr	r2, [pc, #404]	; (800ca28 <mbedtls_ssl_handshake_client_step+0x5c8>)
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	2101      	movs	r1, #1
 800c898:	f240 6385 	movw	r3, #1669	; 0x685
 800c89c:	4620      	mov	r0, r4
 800c89e:	f7f9 fcb7 	bl	8006210 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800c8a2:	222f      	movs	r2, #47	; 0x2f
 800c8a4:	2102      	movs	r1, #2
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f001 ffee 	bl	800e888 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 800c8ac:	4d65      	ldr	r5, [pc, #404]	; (800ca44 <mbedtls_ssl_handshake_client_step+0x5e4>)
 800c8ae:	e608      	b.n	800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 800c8b0:	4658      	mov	r0, fp
 800c8b2:	f8d4 9040 	ldr.w	r9, [r4, #64]	; 0x40
 800c8b6:	f7ff fdb1 	bl	800c41c <mbedtls_ssl_ciphersuite_from_id>
    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 800c8ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 800c8bc:	f8c9 0000 	str.w	r0, [r9]
    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 800c8c0:	6819      	ldr	r1, [r3, #0]
 800c8c2:	b981      	cbnz	r1, 800c8e6 <mbedtls_ssl_handshake_client_step+0x486>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
 800c8c4:	4b60      	ldr	r3, [pc, #384]	; (800ca48 <mbedtls_ssl_handshake_client_step+0x5e8>)
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	9300      	str	r3, [sp, #0]
 800c8ca:	f8cd b004 	str.w	fp, [sp, #4]
 800c8ce:	f240 6392 	movw	r3, #1682	; 0x692
 800c8d2:	4a55      	ldr	r2, [pc, #340]	; (800ca28 <mbedtls_ssl_handshake_client_step+0x5c8>)
 800c8d4:	2101      	movs	r1, #1
 800c8d6:	f7f9 fc9b 	bl	8006210 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800c8da:	2250      	movs	r2, #80	; 0x50
 800c8dc:	2102      	movs	r1, #2
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f001 ffd2 	bl	800e888 <mbedtls_ssl_send_alert_message>
 800c8e4:	e61a      	b.n	800c51c <mbedtls_ssl_handshake_client_step+0xbc>
    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	f002 ff7c 	bl	800f7e4 <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, session id len.: %d", n ) );
 800c8ec:	4b57      	ldr	r3, [pc, #348]	; (800ca4c <mbedtls_ssl_handshake_client_step+0x5ec>)
 800c8ee:	4a4e      	ldr	r2, [pc, #312]	; (800ca28 <mbedtls_ssl_handshake_client_step+0x5c8>)
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	2103      	movs	r1, #3
 800c8f4:	f240 639a 	movw	r3, #1690	; 0x69a
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	9601      	str	r6, [sp, #4]
 800c8fc:	f7f9 fc88 	bl	8006210 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );
 800c900:	4b53      	ldr	r3, [pc, #332]	; (800ca50 <mbedtls_ssl_handshake_client_step+0x5f0>)
 800c902:	3727      	adds	r7, #39	; 0x27
 800c904:	9300      	str	r3, [sp, #0]
 800c906:	4a48      	ldr	r2, [pc, #288]	; (800ca28 <mbedtls_ssl_handshake_client_step+0x5c8>)
 800c908:	f240 639b 	movw	r3, #1691	; 0x69b
 800c90c:	9602      	str	r6, [sp, #8]
 800c90e:	9701      	str	r7, [sp, #4]
 800c910:	2103      	movs	r1, #3
 800c912:	4620      	mov	r0, r4
 800c914:	f7f9 fcda 	bl	80062cc <mbedtls_debug_print_buf>
    if( ssl->handshake->resume == 0 || n == 0 ||
 800c918:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c91a:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
 800c91e:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 800c922:	b1aa      	cbz	r2, 800c950 <mbedtls_ssl_handshake_client_step+0x4f0>
 800c924:	b1a6      	cbz	r6, 800c950 <mbedtls_ssl_handshake_client_step+0x4f0>
 800c926:	f8d9 2000 	ldr.w	r2, [r9]
 800c92a:	4593      	cmp	fp, r2
 800c92c:	d110      	bne.n	800c950 <mbedtls_ssl_handshake_client_step+0x4f0>
        ssl->session_negotiate->ciphersuite != i ||
 800c92e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c932:	b96a      	cbnz	r2, 800c950 <mbedtls_ssl_handshake_client_step+0x4f0>
        ssl->session_negotiate->compression != comp ||
 800c934:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800c938:	4296      	cmp	r6, r2
 800c93a:	d109      	bne.n	800c950 <mbedtls_ssl_handshake_client_step+0x4f0>
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 800c93c:	4632      	mov	r2, r6
 800c93e:	4639      	mov	r1, r7
 800c940:	f109 000c 	add.w	r0, r9, #12
 800c944:	9309      	str	r3, [sp, #36]	; 0x24
 800c946:	f005 fa2b 	bl	8011da0 <memcmp>
        ssl->session_negotiate->id_len != n ||
 800c94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c94c:	2800      	cmp	r0, #0
 800c94e:	d04f      	beq.n	800c9f0 <mbedtls_ssl_handshake_client_step+0x590>
        ssl->state++;
 800c950:	6862      	ldr	r2, [r4, #4]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 800c952:	4639      	mov	r1, r7
        ssl->state++;
 800c954:	3201      	adds	r2, #1
 800c956:	6062      	str	r2, [r4, #4]
        ssl->handshake->resume = 0;
 800c958:	2200      	movs	r2, #0
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 800c95a:	f109 000c 	add.w	r0, r9, #12
        ssl->handshake->resume = 0;
 800c95e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        ssl->session_negotiate->compression = comp;
 800c962:	f8c9 2004 	str.w	r2, [r9, #4]
        ssl->session_negotiate->ciphersuite = i;
 800c966:	f8c9 b000 	str.w	fp, [r9]
        ssl->session_negotiate->id_len = n;
 800c96a:	f8c9 6008 	str.w	r6, [r9, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 800c96e:	4632      	mov	r2, r6
 800c970:	f005 fa25 	bl	8011dbe <memcpy>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "%s session has been resumed",
 800c974:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c976:	4a37      	ldr	r2, [pc, #220]	; (800ca54 <mbedtls_ssl_handshake_client_step+0x5f4>)
 800c978:	f8d3 11d4 	ldr.w	r1, [r3, #468]	; 0x1d4
 800c97c:	4b36      	ldr	r3, [pc, #216]	; (800ca58 <mbedtls_ssl_handshake_client_step+0x5f8>)
 800c97e:	4620      	mov	r0, r4
 800c980:	2900      	cmp	r1, #0
 800c982:	bf18      	it	ne
 800c984:	4613      	movne	r3, r2
 800c986:	9301      	str	r3, [sp, #4]
 800c988:	4b34      	ldr	r3, [pc, #208]	; (800ca5c <mbedtls_ssl_handshake_client_step+0x5fc>)
 800c98a:	4a27      	ldr	r2, [pc, #156]	; (800ca28 <mbedtls_ssl_handshake_client_step+0x5c8>)
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	2103      	movs	r1, #3
 800c990:	f240 63c1 	movw	r3, #1729	; 0x6c1
 800c994:	f7f9 fc3c 	bl	8006210 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %04x", i ) );
 800c998:	4b31      	ldr	r3, [pc, #196]	; (800ca60 <mbedtls_ssl_handshake_client_step+0x600>)
 800c99a:	4a23      	ldr	r2, [pc, #140]	; (800ca28 <mbedtls_ssl_handshake_client_step+0x5c8>)
 800c99c:	9300      	str	r3, [sp, #0]
 800c99e:	2103      	movs	r1, #3
 800c9a0:	f240 63c3 	movw	r3, #1731	; 0x6c3
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	f8cd b004 	str.w	fp, [sp, #4]
 800c9aa:	f7f9 fc31 	bl	8006210 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, compress alg.: %d", buf[37 + n] ) );
 800c9ae:	9b08      	ldr	r3, [sp, #32]
 800c9b0:	4a1d      	ldr	r2, [pc, #116]	; (800ca28 <mbedtls_ssl_handshake_client_step+0x5c8>)
 800c9b2:	f81a 3003 	ldrb.w	r3, [sl, r3]
 800c9b6:	2103      	movs	r1, #3
 800c9b8:	9301      	str	r3, [sp, #4]
 800c9ba:	4b2a      	ldr	r3, [pc, #168]	; (800ca64 <mbedtls_ssl_handshake_client_step+0x604>)
 800c9bc:	4620      	mov	r0, r4
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	f240 63c4 	movw	r3, #1732	; 0x6c4
 800c9c4:	f7f9 fc24 	bl	8006210 <mbedtls_debug_print_msg>
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 800c9c8:	6823      	ldr	r3, [r4, #0]
 800c9ca:	68e2      	ldr	r2, [r4, #12]
 800c9cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9d0:	3b04      	subs	r3, #4
 800c9d2:	f853 0f04 	ldr.w	r0, [r3, #4]!
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	d148      	bne.n	800ca6c <mbedtls_ssl_handshake_client_step+0x60c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 800c9da:	4b18      	ldr	r3, [pc, #96]	; (800ca3c <mbedtls_ssl_handshake_client_step+0x5dc>)
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	f240 63ce 	movw	r3, #1742	; 0x6ce
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 800c9e2:	4a11      	ldr	r2, [pc, #68]	; (800ca28 <mbedtls_ssl_handshake_client_step+0x5c8>)
 800c9e4:	2101      	movs	r1, #1
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f7f9 fc12 	bl	8006210 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800c9ec:	222f      	movs	r2, #47	; 0x2f
 800c9ee:	e676      	b.n	800c6de <mbedtls_ssl_handshake_client_step+0x27e>
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 800c9f0:	230c      	movs	r3, #12
        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 800c9f2:	4620      	mov	r0, r4
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 800c9f4:	6063      	str	r3, [r4, #4]
        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 800c9f6:	f000 ff7b 	bl	800d8f0 <mbedtls_ssl_derive_keys>
 800c9fa:	4607      	mov	r7, r0
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	d0b9      	beq.n	800c974 <mbedtls_ssl_handshake_client_step+0x514>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 800ca00:	4b19      	ldr	r3, [pc, #100]	; (800ca68 <mbedtls_ssl_handshake_client_step+0x608>)
 800ca02:	9001      	str	r0, [sp, #4]
 800ca04:	9300      	str	r3, [sp, #0]
 800ca06:	4a08      	ldr	r2, [pc, #32]	; (800ca28 <mbedtls_ssl_handshake_client_step+0x5c8>)
 800ca08:	f240 63b9 	movw	r3, #1721	; 0x6b9
 800ca0c:	2101      	movs	r1, #1
 800ca0e:	4620      	mov	r0, r4
 800ca10:	f7f9 fc2e 	bl	8006270 <mbedtls_debug_print_ret>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800ca14:	2250      	movs	r2, #80	; 0x50
 800ca16:	2102      	movs	r1, #2
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f001 ff35 	bl	800e888 <mbedtls_ssl_send_alert_message>
 800ca1e:	463d      	mov	r5, r7
 800ca20:	e54f      	b.n	800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
 800ca22:	bf00      	nop
 800ca24:	0801726a 	.word	0x0801726a
 800ca28:	08016fd5 	.word	0x08016fd5
 800ca2c:	08017280 	.word	0x08017280
 800ca30:	ffff9180 	.word	0xffff9180
 800ca34:	080172cc 	.word	0x080172cc
 800ca38:	080172ec 	.word	0x080172ec
 800ca3c:	08017251 	.word	0x08017251
 800ca40:	08017307 	.word	0x08017307
 800ca44:	ffff8f80 	.word	0xffff8f80
 800ca48:	08017329 	.word	0x08017329
 800ca4c:	0801734d 	.word	0x0801734d
 800ca50:	0801736f 	.word	0x0801736f
 800ca54:	08017e63 	.word	0x08017e63
 800ca58:	08016fd2 	.word	0x08016fd2
 800ca5c:	080173a0 	.word	0x080173a0
 800ca60:	080173bc 	.word	0x080173bc
 800ca64:	080173e3 	.word	0x080173e3
 800ca68:	08017388 	.word	0x08017388
            ssl->session_negotiate->ciphersuite )
 800ca6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 800ca6e:	6812      	ldr	r2, [r2, #0]
 800ca70:	4290      	cmp	r0, r2
 800ca72:	d1ae      	bne.n	800c9d2 <mbedtls_ssl_handshake_client_step+0x572>
    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 800ca74:	f7ff fcd2 	bl	800c41c <mbedtls_ssl_ciphersuite_from_id>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )
 800ca78:	68e3      	ldr	r3, [r4, #12]
    if( suite_info == NULL )
 800ca7a:	b130      	cbz	r0, 800ca8a <mbedtls_ssl_handshake_client_step+0x62a>
    if( suite_info->min_minor_ver > max_minor_ver ||
 800ca7c:	6902      	ldr	r2, [r0, #16]
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	db03      	blt.n	800ca8a <mbedtls_ssl_handshake_client_step+0x62a>
 800ca82:	6982      	ldr	r2, [r0, #24]
 800ca84:	4293      	cmp	r3, r2
 800ca86:	f340 8462 	ble.w	800d34e <mbedtls_ssl_handshake_client_step+0xeee>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 800ca8a:	4bb5      	ldr	r3, [pc, #724]	; (800cd60 <mbedtls_ssl_handshake_client_step+0x900>)
 800ca8c:	9300      	str	r3, [sp, #0]
 800ca8e:	f240 63de 	movw	r3, #1758	; 0x6de
 800ca92:	e7a6      	b.n	800c9e2 <mbedtls_ssl_handshake_client_step+0x582>
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 800ca94:	f89a 2000 	ldrb.w	r2, [sl]
                                | ( ext[1]       ) );
 800ca98:	f89a 3001 	ldrb.w	r3, [sl, #1]
                                | ( ext[3]       ) );
 800ca9c:	f89a 6003 	ldrb.w	r6, [sl, #3]
                                | ( ext[1]       ) );
 800caa0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        unsigned int ext_size = ( ( ext[2] <<  8 )
 800caa4:	f89a 2002 	ldrb.w	r2, [sl, #2]
                                | ( ext[3]       ) );
 800caa8:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
        if( ext_size + 4 > ext_len )
 800caac:	f106 0904 	add.w	r9, r6, #4
 800cab0:	45c1      	cmp	r9, r8
 800cab2:	d904      	bls.n	800cabe <mbedtls_ssl_handshake_client_step+0x65e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 800cab4:	4baa      	ldr	r3, [pc, #680]	; (800cd60 <mbedtls_ssl_handshake_client_step+0x900>)
 800cab6:	9300      	str	r3, [sp, #0]
 800cab8:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800cabc:	e609      	b.n	800c6d2 <mbedtls_ssl_handshake_client_step+0x272>
        switch( ext_id )
 800cabe:	f64f 7201 	movw	r2, #65281	; 0xff01
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d12e      	bne.n	800cb24 <mbedtls_ssl_handshake_client_step+0x6c4>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found renegotiation extension" ) );
 800cac6:	4ba7      	ldr	r3, [pc, #668]	; (800cd64 <mbedtls_ssl_handshake_client_step+0x904>)
 800cac8:	463a      	mov	r2, r7
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	2103      	movs	r1, #3
 800cace:	f240 7311 	movw	r3, #1809	; 0x711
 800cad2:	4620      	mov	r0, r4
 800cad4:	f7f9 fb9c 	bl	8006210 <mbedtls_debug_print_msg>
        if( len != 1 || buf[0] != 0x00 )
 800cad8:	2e01      	cmp	r6, #1
 800cada:	d102      	bne.n	800cae2 <mbedtls_ssl_handshake_client_step+0x682>
 800cadc:	f89a 3004 	ldrb.w	r3, [sl, #4]
 800cae0:	b153      	cbz	r3, 800caf8 <mbedtls_ssl_handshake_client_step+0x698>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
 800cae2:	4ba1      	ldr	r3, [pc, #644]	; (800cd68 <mbedtls_ssl_handshake_client_step+0x908>)
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	f240 4371 	movw	r3, #1137	; 0x471
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 800caea:	4aa0      	ldr	r2, [pc, #640]	; (800cd6c <mbedtls_ssl_handshake_client_step+0x90c>)
 800caec:	2101      	movs	r1, #1
 800caee:	4620      	mov	r0, r4
 800caf0:	f7f9 fb8e 	bl	8006210 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800caf4:	2228      	movs	r2, #40	; 0x28
 800caf6:	e5f2      	b.n	800c6de <mbedtls_ssl_handshake_client_step+0x27e>
        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 800caf8:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
        ext_len -= 4 + ext_size;
 800cafc:	eba8 0606 	sub.w	r6, r8, r6
 800cb00:	f1a6 0804 	sub.w	r8, r6, #4
        if( ext_len > 0 && ext_len < 4 )
 800cb04:	3e05      	subs	r6, #5
 800cb06:	2e02      	cmp	r6, #2
        ext += 4 + ext_size;
 800cb08:	44ca      	add	sl, r9
        if( ext_len > 0 && ext_len < 4 )
 800cb0a:	f200 843e 	bhi.w	800d38a <mbedtls_ssl_handshake_client_step+0xf2a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 800cb0e:	4b94      	ldr	r3, [pc, #592]	; (800cd60 <mbedtls_ssl_handshake_client_step+0x900>)
 800cb10:	4a96      	ldr	r2, [pc, #600]	; (800cd6c <mbedtls_ssl_handshake_client_step+0x90c>)
 800cb12:	9300      	str	r3, [sp, #0]
 800cb14:	2101      	movs	r1, #1
 800cb16:	f240 738d 	movw	r3, #1933	; 0x78d
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	f7f9 fb78 	bl	8006210 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 800cb20:	4d93      	ldr	r5, [pc, #588]	; (800cd70 <mbedtls_ssl_handshake_client_step+0x910>)
 800cb22:	e4ce      	b.n	800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 800cb24:	9301      	str	r3, [sp, #4]
 800cb26:	f8cd b000 	str.w	fp, [sp]
 800cb2a:	f240 7385 	movw	r3, #1925	; 0x785
 800cb2e:	463a      	mov	r2, r7
 800cb30:	2103      	movs	r1, #3
 800cb32:	4620      	mov	r0, r4
 800cb34:	f7f9 fb6c 	bl	8006210 <mbedtls_debug_print_msg>
 800cb38:	e7e0      	b.n	800cafc <mbedtls_ssl_handshake_client_step+0x69c>
           ret = mbedtls_ssl_parse_certificate( ssl );
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	f002 fc04 	bl	800f348 <mbedtls_ssl_parse_certificate>
           ret = mbedtls_ssl_parse_finished( ssl );
 800cb40:	4605      	mov	r5, r0
           break;
 800cb42:	e4be      	b.n	800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 800cb44:	6c23      	ldr	r3, [r4, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 800cb46:	4a89      	ldr	r2, [pc, #548]	; (800cd6c <mbedtls_ssl_handshake_client_step+0x90c>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 800cb48:	681e      	ldr	r6, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 800cb4a:	4b8a      	ldr	r3, [pc, #552]	; (800cd74 <mbedtls_ssl_handshake_client_step+0x914>)
 800cb4c:	2102      	movs	r1, #2
 800cb4e:	9300      	str	r3, [sp, #0]
 800cb50:	4620      	mov	r0, r4
 800cb52:	f44f 6312 	mov.w	r3, #2336	; 0x920
 800cb56:	f7f9 fb5b 	bl	8006210 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 800cb5a:	7ab3      	ldrb	r3, [r6, #10]
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d10b      	bne.n	800cb78 <mbedtls_ssl_handshake_client_step+0x718>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
 800cb60:	4b85      	ldr	r3, [pc, #532]	; (800cd78 <mbedtls_ssl_handshake_client_step+0x918>)
 800cb62:	9300      	str	r3, [sp, #0]
 800cb64:	f640 1325 	movw	r3, #2341	; 0x925
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
 800cb68:	4a80      	ldr	r2, [pc, #512]	; (800cd6c <mbedtls_ssl_handshake_client_step+0x90c>)
 800cb6a:	2102      	movs	r1, #2
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	f7f9 fb4f 	bl	8006210 <mbedtls_debug_print_msg>
        ssl->state++;
 800cb72:	6863      	ldr	r3, [r4, #4]
 800cb74:	3301      	adds	r3, #1
 800cb76:	e2f8      	b.n	800d16a <mbedtls_ssl_handshake_client_step+0xd0a>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 800cb78:	2101      	movs	r1, #1
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f001 fed8 	bl	800e930 <mbedtls_ssl_read_record>
 800cb80:	4605      	mov	r5, r0
 800cb82:	b128      	cbz	r0, 800cb90 <mbedtls_ssl_handshake_client_step+0x730>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800cb84:	4b7d      	ldr	r3, [pc, #500]	; (800cd7c <mbedtls_ssl_handshake_client_step+0x91c>)
 800cb86:	9001      	str	r0, [sp, #4]
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	f640 134d 	movw	r3, #2381	; 0x94d
 800cb8e:	e54b      	b.n	800c628 <mbedtls_ssl_handshake_client_step+0x1c8>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 800cb90:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cb92:	2b16      	cmp	r3, #22
 800cb94:	d004      	beq.n	800cba0 <mbedtls_ssl_handshake_client_step+0x740>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 800cb96:	4b7a      	ldr	r3, [pc, #488]	; (800cd80 <mbedtls_ssl_handshake_client_step+0x920>)
 800cb98:	9300      	str	r3, [sp, #0]
 800cb9a:	f640 1353 	movw	r3, #2387	; 0x953
 800cb9e:	e582      	b.n	800c6a6 <mbedtls_ssl_handshake_client_step+0x246>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 800cba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cba2:	781a      	ldrb	r2, [r3, #0]
 800cba4:	2a0c      	cmp	r2, #12
 800cba6:	d014      	beq.n	800cbd2 <mbedtls_ssl_handshake_client_step+0x772>
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 800cba8:	7ab3      	ldrb	r3, [r6, #10]
 800cbaa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800cbae:	2b05      	cmp	r3, #5
 800cbb0:	d10a      	bne.n	800cbc8 <mbedtls_ssl_handshake_client_step+0x768>
            ssl->keep_current_message = 1;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    ssl->state++;
 800cbb8:	6863      	ldr	r3, [r4, #4]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server key exchange" ) );
 800cbbe:	4b71      	ldr	r3, [pc, #452]	; (800cd84 <mbedtls_ssl_handshake_client_step+0x924>)
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	f640 2368 	movw	r3, #2664	; 0xa68
 800cbc6:	e54b      	b.n	800c660 <mbedtls_ssl_handshake_client_step+0x200>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server key exchange message must "
 800cbc8:	4b6f      	ldr	r3, [pc, #444]	; (800cd88 <mbedtls_ssl_handshake_client_step+0x928>)
 800cbca:	9300      	str	r3, [sp, #0]
 800cbcc:	f640 1369 	movw	r3, #2409	; 0x969
 800cbd0:	e569      	b.n	800c6a6 <mbedtls_ssl_handshake_client_step+0x246>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 800cbd2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 800cbd4:	3304      	adds	r3, #4
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 800cbd6:	9301      	str	r3, [sp, #4]
 800cbd8:	4b6c      	ldr	r3, [pc, #432]	; (800cd8c <mbedtls_ssl_handshake_client_step+0x92c>)
 800cbda:	3a04      	subs	r2, #4
 800cbdc:	9202      	str	r2, [sp, #8]
 800cbde:	9300      	str	r3, [sp, #0]
 800cbe0:	4a62      	ldr	r2, [pc, #392]	; (800cd6c <mbedtls_ssl_handshake_client_step+0x90c>)
 800cbe2:	f640 1378 	movw	r3, #2424	; 0x978
 800cbe6:	2103      	movs	r1, #3
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f7f9 fb6f 	bl	80062cc <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800cbee:	4b68      	ldr	r3, [pc, #416]	; (800cd90 <mbedtls_ssl_handshake_client_step+0x930>)
 800cbf0:	9300      	str	r3, [sp, #0]
 800cbf2:	f640 13c5 	movw	r3, #2501	; 0x9c5
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800cbf6:	4a5d      	ldr	r2, [pc, #372]	; (800cd6c <mbedtls_ssl_handshake_client_step+0x90c>)
 800cbf8:	2101      	movs	r1, #1
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f7f9 fb08 	bl	8006210 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800cc00:	4d64      	ldr	r5, [pc, #400]	; (800cd94 <mbedtls_ssl_handshake_client_step+0x934>)
 800cc02:	e45e      	b.n	800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 800cc04:	6c23      	ldr	r3, [r4, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 800cc06:	4a59      	ldr	r2, [pc, #356]	; (800cd6c <mbedtls_ssl_handshake_client_step+0x90c>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 800cc08:	681e      	ldr	r6, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 800cc0a:	4b63      	ldr	r3, [pc, #396]	; (800cd98 <mbedtls_ssl_handshake_client_step+0x938>)
 800cc0c:	2102      	movs	r1, #2
 800cc0e:	9300      	str	r3, [sp, #0]
 800cc10:	4620      	mov	r0, r4
 800cc12:	f640 2389 	movw	r3, #2697	; 0xa89
 800cc16:	f7f9 fafb 	bl	8006210 <mbedtls_debug_print_msg>
 800cc1a:	7ab3      	ldrb	r3, [r6, #10]
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	2b09      	cmp	r3, #9
 800cc22:	f200 83cc 	bhi.w	800d3be <mbedtls_ssl_handshake_client_step+0xf5e>
 800cc26:	f04f 0901 	mov.w	r9, #1
 800cc2a:	f240 320f 	movw	r2, #783	; 0x30f
 800cc2e:	fa09 f303 	lsl.w	r3, r9, r3
 800cc32:	4213      	tst	r3, r2
 800cc34:	f000 83c3 	beq.w	800d3be <mbedtls_ssl_handshake_client_step+0xf5e>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 800cc38:	4649      	mov	r1, r9
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f001 fe78 	bl	800e930 <mbedtls_ssl_read_record>
 800cc40:	4605      	mov	r5, r0
 800cc42:	b128      	cbz	r0, 800cc50 <mbedtls_ssl_handshake_client_step+0x7f0>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800cc44:	4b4d      	ldr	r3, [pc, #308]	; (800cd7c <mbedtls_ssl_handshake_client_step+0x91c>)
 800cc46:	9501      	str	r5, [sp, #4]
 800cc48:	9300      	str	r3, [sp, #0]
 800cc4a:	f640 2394 	movw	r3, #2708	; 0xa94
 800cc4e:	e4eb      	b.n	800c628 <mbedtls_ssl_handshake_client_step+0x1c8>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 800cc50:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cc52:	2b16      	cmp	r3, #22
 800cc54:	d004      	beq.n	800cc60 <mbedtls_ssl_handshake_client_step+0x800>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 800cc56:	4b51      	ldr	r3, [pc, #324]	; (800cd9c <mbedtls_ssl_handshake_client_step+0x93c>)
 800cc58:	9300      	str	r3, [sp, #0]
 800cc5a:	f640 239a 	movw	r3, #2714	; 0xa9a
 800cc5e:	e522      	b.n	800c6a6 <mbedtls_ssl_handshake_client_step+0x246>
    ssl->state++;
 800cc60:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 800cc62:	4a4f      	ldr	r2, [pc, #316]	; (800cda0 <mbedtls_ssl_handshake_client_step+0x940>)
    ssl->state++;
 800cc64:	3301      	adds	r3, #1
 800cc66:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 800cc68:	6e63      	ldr	r3, [r4, #100]	; 0x64
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 800cc6a:	2103      	movs	r1, #3
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 800cc6c:	781b      	ldrb	r3, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 800cc6e:	4620      	mov	r0, r4
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 800cc70:	2b0d      	cmp	r3, #13
 800cc72:	bf0c      	ite	eq
 800cc74:	2301      	moveq	r3, #1
 800cc76:	2300      	movne	r3, #0
 800cc78:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 800cc7c:	4b49      	ldr	r3, [pc, #292]	; (800cda4 <mbedtls_ssl_handshake_client_step+0x944>)
 800cc7e:	bf08      	it	eq
 800cc80:	4613      	moveq	r3, r2
 800cc82:	9301      	str	r3, [sp, #4]
 800cc84:	4b48      	ldr	r3, [pc, #288]	; (800cda8 <mbedtls_ssl_handshake_client_step+0x948>)
 800cc86:	4a39      	ldr	r2, [pc, #228]	; (800cd6c <mbedtls_ssl_handshake_client_step+0x90c>)
 800cc88:	9300      	str	r3, [sp, #0]
 800cc8a:	f640 23a4 	movw	r3, #2724	; 0xaa4
 800cc8e:	f7f9 fabf 	bl	8006210 <mbedtls_debug_print_msg>
    if( ssl->client_auth == 0 )
 800cc92:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800cc96:	b933      	cbnz	r3, 800cca6 <mbedtls_ssl_handshake_client_step+0x846>
        ssl->keep_current_message = 1;
 800cc98:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate request" ) );
 800cc9c:	4b43      	ldr	r3, [pc, #268]	; (800cdac <mbedtls_ssl_handshake_client_step+0x94c>)
 800cc9e:	9300      	str	r3, [sp, #0]
 800cca0:	f640 331e 	movw	r3, #2846	; 0xb1e
 800cca4:	e4dc      	b.n	800c660 <mbedtls_ssl_handshake_client_step+0x200>
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
 800cca6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    buf = ssl->in_msg;
 800cca8:	6e67      	ldr	r7, [r4, #100]	; 0x64
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
 800ccaa:	2b04      	cmp	r3, #4
 800ccac:	d810      	bhi.n	800ccd0 <mbedtls_ssl_handshake_client_step+0x870>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 800ccae:	4b3b      	ldr	r3, [pc, #236]	; (800cd9c <mbedtls_ssl_handshake_client_step+0x93c>)
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	f640 23ca 	movw	r3, #2762	; 0xaca
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 800ccb6:	4a2d      	ldr	r2, [pc, #180]	; (800cd6c <mbedtls_ssl_handshake_client_step+0x90c>)
 800ccb8:	2101      	movs	r1, #1
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f7f9 faa8 	bl	8006210 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800ccc0:	2232      	movs	r2, #50	; 0x32
 800ccc2:	2102      	movs	r1, #2
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f001 fddf 	bl	800e888 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 800ccca:	4d39      	ldr	r5, [pc, #228]	; (800cdb0 <mbedtls_ssl_handshake_client_step+0x950>)
 800cccc:	f7ff bbf9 	b.w	800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 800ccd0:	793e      	ldrb	r6, [r7, #4]
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 800ccd2:	1db2      	adds	r2, r6, #6
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d804      	bhi.n	800cce2 <mbedtls_ssl_handshake_client_step+0x882>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 800ccd8:	4b30      	ldr	r3, [pc, #192]	; (800cd9c <mbedtls_ssl_handshake_client_step+0x93c>)
 800ccda:	9300      	str	r3, [sp, #0]
 800ccdc:	f640 23de 	movw	r3, #2782	; 0xade
 800cce0:	e7e9      	b.n	800ccb6 <mbedtls_ssl_handshake_client_step+0x856>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 800cce2:	68e1      	ldr	r1, [r4, #12]
 800cce4:	2903      	cmp	r1, #3
 800cce6:	d118      	bne.n	800cd1a <mbedtls_ssl_handshake_client_step+0x8ba>
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 800cce8:	19b9      	adds	r1, r7, r6
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 800ccea:	f817 8002 	ldrb.w	r8, [r7, r2]
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 800ccee:	7949      	ldrb	r1, [r1, #5]
 800ccf0:	f106 0a07 	add.w	sl, r6, #7
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 800ccf4:	ea48 2801 	orr.w	r8, r8, r1, lsl #8
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
 800ccf8:	eb08 020a 	add.w	r2, r8, sl
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d804      	bhi.n	800cd0a <mbedtls_ssl_handshake_client_step+0x8aa>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 800cd00:	4b26      	ldr	r3, [pc, #152]	; (800cd9c <mbedtls_ssl_handshake_client_step+0x93c>)
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	f640 23fd 	movw	r3, #2813	; 0xafd
 800cd08:	e7d5      	b.n	800ccb6 <mbedtls_ssl_handshake_client_step+0x856>
        for( i = 0; i < sig_alg_len; i += 2 )
 800cd0a:	46a9      	mov	r9, r5
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 800cd0c:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800cd6c <mbedtls_ssl_handshake_client_step+0x90c>
        sig_alg = buf + mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n;
 800cd10:	44ba      	add	sl, r7
        for( i = 0; i < sig_alg_len; i += 2 )
 800cd12:	45c8      	cmp	r8, r9
 800cd14:	d810      	bhi.n	800cd38 <mbedtls_ssl_handshake_client_step+0x8d8>
        n += 2 + sig_alg_len;
 800cd16:	3602      	adds	r6, #2
 800cd18:	4446      	add	r6, r8
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 800cd1a:	4437      	add	r7, r6
 800cd1c:	797a      	ldrb	r2, [r7, #5]
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 800cd1e:	79bb      	ldrb	r3, [r7, #6]
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 800cd20:	3607      	adds	r6, #7
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 800cd22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 800cd26:	441e      	add	r6, r3
 800cd28:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800cd2a:	42b3      	cmp	r3, r6
 800cd2c:	d0b6      	beq.n	800cc9c <mbedtls_ssl_handshake_client_step+0x83c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 800cd2e:	4b1b      	ldr	r3, [pc, #108]	; (800cd9c <mbedtls_ssl_handshake_client_step+0x93c>)
 800cd30:	9300      	str	r3, [sp, #0]
 800cd32:	f640 3317 	movw	r3, #2839	; 0xb17
 800cd36:	e7be      	b.n	800ccb6 <mbedtls_ssl_handshake_client_step+0x856>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 800cd38:	eb0a 0309 	add.w	r3, sl, r9
 800cd3c:	785b      	ldrb	r3, [r3, #1]
 800cd3e:	465a      	mov	r2, fp
 800cd40:	9302      	str	r3, [sp, #8]
 800cd42:	f81a 3009 	ldrb.w	r3, [sl, r9]
 800cd46:	2103      	movs	r1, #3
 800cd48:	9301      	str	r3, [sp, #4]
 800cd4a:	4b1a      	ldr	r3, [pc, #104]	; (800cdb4 <mbedtls_ssl_handshake_client_step+0x954>)
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	9300      	str	r3, [sp, #0]
 800cd50:	f640 3308 	movw	r3, #2824	; 0xb08
 800cd54:	f7f9 fa5c 	bl	8006210 <mbedtls_debug_print_msg>
        for( i = 0; i < sig_alg_len; i += 2 )
 800cd58:	f109 0902 	add.w	r9, r9, #2
 800cd5c:	e7d9      	b.n	800cd12 <mbedtls_ssl_handshake_client_step+0x8b2>
 800cd5e:	bf00      	nop
 800cd60:	08017251 	.word	0x08017251
 800cd64:	08017403 	.word	0x08017403
 800cd68:	08017421 	.word	0x08017421
 800cd6c:	08016fd5 	.word	0x08016fd5
 800cd70:	ffff8680 	.word	0xffff8680
 800cd74:	08017498 	.word	0x08017498
 800cd78:	080174b5 	.word	0x080174b5
 800cd7c:	08017239 	.word	0x08017239
 800cd80:	080174d7 	.word	0x080174d7
 800cd84:	080174f7 	.word	0x080174f7
 800cd88:	08017514 	.word	0x08017514
 800cd8c:	08017500 	.word	0x08017500
 800cd90:	08017544 	.word	0x08017544
 800cd94:	ffff9400 	.word	0xffff9400
 800cd98:	08017558 	.word	0x08017558
 800cd9c:	08017575 	.word	0x08017575
 800cda0:	08017e63 	.word	0x08017e63
 800cda4:	08016fd2 	.word	0x08016fd2
 800cda8:	08017595 	.word	0x08017595
 800cdac:	080175db 	.word	0x080175db
 800cdb0:	ffff8580 	.word	0xffff8580
 800cdb4:	080175b0 	.word	0x080175b0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );
 800cdb8:	4b97      	ldr	r3, [pc, #604]	; (800d018 <mbedtls_ssl_handshake_client_step+0xbb8>)
 800cdba:	4a98      	ldr	r2, [pc, #608]	; (800d01c <mbedtls_ssl_handshake_client_step+0xbbc>)
 800cdbc:	9300      	str	r3, [sp, #0]
 800cdbe:	2102      	movs	r1, #2
 800cdc0:	f640 3328 	movw	r3, #2856	; 0xb28
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f7f9 fa23 	bl	8006210 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 800cdca:	2101      	movs	r1, #1
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f001 fdaf 	bl	800e930 <mbedtls_ssl_read_record>
 800cdd2:	4605      	mov	r5, r0
 800cdd4:	b128      	cbz	r0, 800cde2 <mbedtls_ssl_handshake_client_step+0x982>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800cdd6:	4b92      	ldr	r3, [pc, #584]	; (800d020 <mbedtls_ssl_handshake_client_step+0xbc0>)
 800cdd8:	9001      	str	r0, [sp, #4]
 800cdda:	9300      	str	r3, [sp, #0]
 800cddc:	f640 332c 	movw	r3, #2860	; 0xb2c
 800cde0:	e422      	b.n	800c628 <mbedtls_ssl_handshake_client_step+0x1c8>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 800cde2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cde4:	2b16      	cmp	r3, #22
 800cde6:	d009      	beq.n	800cdfc <mbedtls_ssl_handshake_client_step+0x99c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 800cde8:	4b8e      	ldr	r3, [pc, #568]	; (800d024 <mbedtls_ssl_handshake_client_step+0xbc4>)
 800cdea:	2101      	movs	r1, #1
 800cdec:	9300      	str	r3, [sp, #0]
 800cdee:	f640 3332 	movw	r3, #2866	; 0xb32
 800cdf2:	4a8a      	ldr	r2, [pc, #552]	; (800d01c <mbedtls_ssl_handshake_client_step+0xbbc>)
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	f7f9 fa0b 	bl	8006210 <mbedtls_debug_print_msg>
 800cdfa:	e45e      	b.n	800c6ba <mbedtls_ssl_handshake_client_step+0x25a>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 800cdfc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800cdfe:	2b04      	cmp	r3, #4
 800ce00:	d103      	bne.n	800ce0a <mbedtls_ssl_handshake_client_step+0x9aa>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 800ce02:	6e63      	ldr	r3, [r4, #100]	; 0x64
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	2b0e      	cmp	r3, #14
 800ce08:	d010      	beq.n	800ce2c <mbedtls_ssl_handshake_client_step+0x9cc>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 800ce0a:	4b86      	ldr	r3, [pc, #536]	; (800d024 <mbedtls_ssl_handshake_client_step+0xbc4>)
 800ce0c:	4a83      	ldr	r2, [pc, #524]	; (800d01c <mbedtls_ssl_handshake_client_step+0xbbc>)
 800ce0e:	9300      	str	r3, [sp, #0]
 800ce10:	2101      	movs	r1, #1
 800ce12:	f640 3339 	movw	r3, #2873	; 0xb39
 800ce16:	4620      	mov	r0, r4
 800ce18:	f7f9 f9fa 	bl	8006210 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800ce1c:	2232      	movs	r2, #50	; 0x32
 800ce1e:	2102      	movs	r1, #2
 800ce20:	4620      	mov	r0, r4
 800ce22:	f001 fd31 	bl	800e888 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 800ce26:	4d80      	ldr	r5, [pc, #512]	; (800d028 <mbedtls_ssl_handshake_client_step+0xbc8>)
 800ce28:	f7ff bb4b 	b.w	800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
    ssl->state++;
 800ce2c:	6863      	ldr	r3, [r4, #4]
 800ce2e:	3301      	adds	r3, #1
 800ce30:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello done" ) );
 800ce32:	4b7e      	ldr	r3, [pc, #504]	; (800d02c <mbedtls_ssl_handshake_client_step+0xbcc>)
 800ce34:	9300      	str	r3, [sp, #0]
 800ce36:	f640 3346 	movw	r3, #2886	; 0xb46
 800ce3a:	e411      	b.n	800c660 <mbedtls_ssl_handshake_client_step+0x200>
           ret = mbedtls_ssl_write_certificate( ssl );
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	f002 f9bb 	bl	800f1b8 <mbedtls_ssl_write_certificate>
 800ce42:	e67d      	b.n	800cb40 <mbedtls_ssl_handshake_client_step+0x6e0>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 800ce44:	6c23      	ldr	r3, [r4, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 800ce46:	4a75      	ldr	r2, [pc, #468]	; (800d01c <mbedtls_ssl_handshake_client_step+0xbbc>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 800ce48:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 800ce4a:	4b79      	ldr	r3, [pc, #484]	; (800d030 <mbedtls_ssl_handshake_client_step+0xbd0>)
 800ce4c:	2102      	movs	r1, #2
 800ce4e:	9300      	str	r3, [sp, #0]
 800ce50:	4620      	mov	r0, r4
 800ce52:	f640 3352 	movw	r3, #2898	; 0xb52
 800ce56:	f7f9 f9db 	bl	8006210 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 800ce5a:	7aae      	ldrb	r6, [r5, #10]
 800ce5c:	2e01      	cmp	r6, #1
 800ce5e:	f040 808a 	bne.w	800cf76 <mbedtls_ssl_handshake_client_step+0xb16>
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 800ce62:	6820      	ldr	r0, [r4, #0]
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 800ce64:	6b25      	ldr	r5, [r4, #48]	; 0x30
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 800ce66:	68e3      	ldr	r3, [r4, #12]
                       ssl->conf->transport, p );
 800ce68:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 800ce6c:	f505 78d2 	add.w	r8, r5, #420	; 0x1a4
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 800ce70:	2b00      	cmp	r3, #0
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 800ce72:	f890 104d 	ldrb.w	r1, [r0, #77]	; 0x4d
 800ce76:	4643      	mov	r3, r8
 800ce78:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800ce7c:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 800ce80:	bf14      	ite	ne
 800ce82:	2702      	movne	r7, #2
 800ce84:	2700      	moveq	r7, #0
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 800ce86:	f003 fa61 	bl	801034c <mbedtls_ssl_write_version>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	f505 71d3 	add.w	r1, r5, #422	; 0x1a6
 800ce90:	f8d3 9018 	ldr.w	r9, [r3, #24]
 800ce94:	222e      	movs	r2, #46	; 0x2e
 800ce96:	69d8      	ldr	r0, [r3, #28]
 800ce98:	47c8      	blx	r9
 800ce9a:	4605      	mov	r5, r0
 800ce9c:	b130      	cbz	r0, 800ceac <mbedtls_ssl_handshake_client_step+0xa4c>
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
 800ce9e:	4b65      	ldr	r3, [pc, #404]	; (800d034 <mbedtls_ssl_handshake_client_step+0xbd4>)
 800cea0:	9001      	str	r0, [sp, #4]
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	f640 0382 	movw	r3, #2178	; 0x882
 800cea8:	f7ff bbbe 	b.w	800c628 <mbedtls_ssl_handshake_client_step+0x1c8>
    ssl->handshake->pmslen = 48;
 800ceac:	2230      	movs	r2, #48	; 0x30
 800ceae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ceb0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    if( ssl->session_negotiate->peer_cert == NULL )
 800ceb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ceb6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800ceb8:	b930      	cbnz	r0, 800cec8 <mbedtls_ssl_handshake_client_step+0xa68>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 800ceba:	4b5f      	ldr	r3, [pc, #380]	; (800d038 <mbedtls_ssl_handshake_client_step+0xbd8>)
 800cebc:	4a57      	ldr	r2, [pc, #348]	; (800d01c <mbedtls_ssl_handshake_client_step+0xbbc>)
 800cebe:	9300      	str	r3, [sp, #0]
 800cec0:	2102      	movs	r1, #2
 800cec2:	f640 038a 	movw	r3, #2186	; 0x88a
 800cec6:	e795      	b.n	800cdf4 <mbedtls_ssl_handshake_client_step+0x994>
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 800cec8:	4631      	mov	r1, r6
 800ceca:	30bc      	adds	r0, #188	; 0xbc
 800cecc:	f7fb f89e 	bl	800800c <mbedtls_pk_can_do>
 800ced0:	b958      	cbnz	r0, 800ceea <mbedtls_ssl_handshake_client_step+0xa8a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
 800ced2:	4b5a      	ldr	r3, [pc, #360]	; (800d03c <mbedtls_ssl_handshake_client_step+0xbdc>)
 800ced4:	4a51      	ldr	r2, [pc, #324]	; (800d01c <mbedtls_ssl_handshake_client_step+0xbbc>)
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	4631      	mov	r1, r6
 800ceda:	f640 0394 	movw	r3, #2196	; 0x894
 800cede:	4620      	mov	r0, r4
 800cee0:	f7f9 f996 	bl	8006210 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 800cee4:	4d56      	ldr	r5, [pc, #344]	; (800d040 <mbedtls_ssl_handshake_client_step+0xbe0>)
 800cee6:	f7ff baec 	b.w	800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 800ceea:	6822      	ldr	r2, [r4, #0]
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 800ceec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ceee:	69d5      	ldr	r5, [r2, #28]
 800cef0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800cef2:	9503      	str	r5, [sp, #12]
 800cef4:	6995      	ldr	r5, [r2, #24]
 800cef6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800cefa:	9502      	str	r5, [sp, #8]
 800cefc:	f5c7 657f 	rsb	r5, r7, #4080	; 0xff0
 800cf00:	350c      	adds	r5, #12
 800cf02:	9501      	str	r5, [sp, #4]
 800cf04:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800cf06:	ad0c      	add	r5, sp, #48	; 0x30
 800cf08:	9500      	str	r5, [sp, #0]
    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
 800cf0a:	1d3b      	adds	r3, r7, #4
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 800cf0c:	440b      	add	r3, r1
 800cf0e:	f8d2 2160 	ldr.w	r2, [r2, #352]	; 0x160
 800cf12:	4641      	mov	r1, r8
 800cf14:	30bc      	adds	r0, #188	; 0xbc
 800cf16:	f7fb f91b 	bl	8008150 <mbedtls_pk_encrypt>
 800cf1a:	4605      	mov	r5, r0
 800cf1c:	b130      	cbz	r0, 800cf2c <mbedtls_ssl_handshake_client_step+0xacc>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_rsa_pkcs1_encrypt", ret );
 800cf1e:	4b49      	ldr	r3, [pc, #292]	; (800d044 <mbedtls_ssl_handshake_client_step+0xbe4>)
 800cf20:	9001      	str	r0, [sp, #4]
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	f640 039e 	movw	r3, #2206	; 0x89e
 800cf28:	f7ff bb7e 	b.w	800c628 <mbedtls_ssl_handshake_client_step+0x1c8>
    if( len_bytes == 2 )
 800cf2c:	b14f      	cbz	r7, 800cf42 <mbedtls_ssl_handshake_client_step+0xae2>
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 800cf2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf30:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800cf34:	0a19      	lsrs	r1, r3, #8
 800cf36:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 800cf38:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800cf3c:	7153      	strb	r3, [r2, #5]
        *olen += 2;
 800cf3e:	3302      	adds	r3, #2
 800cf40:	930c      	str	r3, [sp, #48]	; 0x30
    ssl->out_msglen  = i + n;
 800cf42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 800cf44:	2210      	movs	r2, #16
    ssl->out_msglen  = i + n;
 800cf46:	3304      	adds	r3, #4
 800cf48:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 800cf4c:	2316      	movs	r3, #22
 800cf4e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 800cf52:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 800cf56:	4620      	mov	r0, r4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 800cf58:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 800cf5a:	6863      	ldr	r3, [r4, #4]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 800cf60:	f001 fb34 	bl	800e5cc <mbedtls_ssl_write_handshake_msg>
 800cf64:	4605      	mov	r5, r0
 800cf66:	b158      	cbz	r0, 800cf80 <mbedtls_ssl_handshake_client_step+0xb20>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
 800cf68:	4b37      	ldr	r3, [pc, #220]	; (800d048 <mbedtls_ssl_handshake_client_step+0xbe8>)
 800cf6a:	9501      	str	r5, [sp, #4]
 800cf6c:	9300      	str	r3, [sp, #0]
 800cf6e:	f44f 6346 	mov.w	r3, #3168	; 0xc60
 800cf72:	f7ff bb59 	b.w	800c628 <mbedtls_ssl_handshake_client_step+0x1c8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800cf76:	4b35      	ldr	r3, [pc, #212]	; (800d04c <mbedtls_ssl_handshake_client_step+0xbec>)
 800cf78:	9300      	str	r3, [sp, #0]
 800cf7a:	f640 4354 	movw	r3, #3156	; 0xc54
 800cf7e:	e63a      	b.n	800cbf6 <mbedtls_ssl_handshake_client_step+0x796>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client key exchange" ) );
 800cf80:	4b33      	ldr	r3, [pc, #204]	; (800d050 <mbedtls_ssl_handshake_client_step+0xbf0>)
 800cf82:	9300      	str	r3, [sp, #0]
 800cf84:	f640 4364 	movw	r3, #3172	; 0xc64
 800cf88:	f7ff bb6a 	b.w	800c660 <mbedtls_ssl_handshake_client_step+0x200>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 800cf8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 800cf8e:	4a23      	ldr	r2, [pc, #140]	; (800d01c <mbedtls_ssl_handshake_client_step+0xbbc>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 800cf90:	681e      	ldr	r6, [r3, #0]
    size_t n = 0, offset = 0;
 800cf92:	2300      	movs	r3, #0
 800cf94:	930b      	str	r3, [sp, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 800cf96:	4b2f      	ldr	r3, [pc, #188]	; (800d054 <mbedtls_ssl_handshake_client_step+0xbf4>)
 800cf98:	2102      	movs	r1, #2
 800cf9a:	9300      	str	r3, [sp, #0]
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f640 4398 	movw	r3, #3224	; 0xc98
 800cfa2:	f7f9 f935 	bl	8006210 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	f000 fca2 	bl	800d8f0 <mbedtls_ssl_derive_keys>
 800cfac:	4605      	mov	r5, r0
 800cfae:	b130      	cbz	r0, 800cfbe <mbedtls_ssl_handshake_client_step+0xb5e>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 800cfb0:	4b29      	ldr	r3, [pc, #164]	; (800d058 <mbedtls_ssl_handshake_client_step+0xbf8>)
 800cfb2:	9001      	str	r0, [sp, #4]
 800cfb4:	9300      	str	r3, [sp, #0]
 800cfb6:	f640 43a4 	movw	r3, #3236	; 0xca4
 800cfba:	f7ff bb35 	b.w	800c628 <mbedtls_ssl_handshake_client_step+0x1c8>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 800cfbe:	7ab3      	ldrb	r3, [r6, #10]
 800cfc0:	1f5a      	subs	r2, r3, #5
 800cfc2:	2a03      	cmp	r2, #3
 800cfc4:	d901      	bls.n	800cfca <mbedtls_ssl_handshake_client_step+0xb6a>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 800cfc6:	2b0b      	cmp	r3, #11
 800cfc8:	d104      	bne.n	800cfd4 <mbedtls_ssl_handshake_client_step+0xb74>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 800cfca:	4b24      	ldr	r3, [pc, #144]	; (800d05c <mbedtls_ssl_handshake_client_step+0xbfc>)
 800cfcc:	9300      	str	r3, [sp, #0]
 800cfce:	f640 43ae 	movw	r3, #3246	; 0xcae
 800cfd2:	e5c9      	b.n	800cb68 <mbedtls_ssl_handshake_client_step+0x708>
    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 800cfd4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800cfd8:	b143      	cbz	r3, 800cfec <mbedtls_ssl_handshake_client_step+0xb8c>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 800cfda:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800cfdc:	b10e      	cbz	r6, 800cfe2 <mbedtls_ssl_handshake_client_step+0xb82>
 800cfde:	6873      	ldr	r3, [r6, #4]
 800cfe0:	b913      	cbnz	r3, 800cfe8 <mbedtls_ssl_handshake_client_step+0xb88>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 800cfe2:	6823      	ldr	r3, [r4, #0]
 800cfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38

    return( key_cert == NULL ? NULL : key_cert->cert );
 800cfe6:	b10b      	cbz	r3, 800cfec <mbedtls_ssl_handshake_client_step+0xb8c>
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	b923      	cbnz	r3, 800cff6 <mbedtls_ssl_handshake_client_step+0xb96>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 800cfec:	4b1b      	ldr	r3, [pc, #108]	; (800d05c <mbedtls_ssl_handshake_client_step+0xbfc>)
 800cfee:	9300      	str	r3, [sp, #0]
 800cff0:	f640 43b5 	movw	r3, #3253	; 0xcb5
 800cff4:	e5b8      	b.n	800cb68 <mbedtls_ssl_handshake_client_step+0x708>
    if( mbedtls_ssl_own_key( ssl ) == NULL )
 800cff6:	4620      	mov	r0, r4
 800cff8:	f7ff fa26 	bl	800c448 <mbedtls_ssl_own_key>
 800cffc:	bba0      	cbnz	r0, 800d068 <mbedtls_ssl_handshake_client_step+0xc08>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
 800cffe:	4b18      	ldr	r3, [pc, #96]	; (800d060 <mbedtls_ssl_handshake_client_step+0xc00>)
 800d000:	4a06      	ldr	r2, [pc, #24]	; (800d01c <mbedtls_ssl_handshake_client_step+0xbbc>)
 800d002:	9300      	str	r3, [sp, #0]
 800d004:	2101      	movs	r1, #1
 800d006:	f640 43bc 	movw	r3, #3260	; 0xcbc
 800d00a:	4620      	mov	r0, r4
 800d00c:	f7f9 f900 	bl	8006210 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 800d010:	4d14      	ldr	r5, [pc, #80]	; (800d064 <mbedtls_ssl_handshake_client_step+0xc04>)
 800d012:	f7ff ba56 	b.w	800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
 800d016:	bf00      	nop
 800d018:	080175f8 	.word	0x080175f8
 800d01c:	08016fd5 	.word	0x08016fd5
 800d020:	08017239 	.word	0x08017239
 800d024:	08017613 	.word	0x08017613
 800d028:	ffff8480 	.word	0xffff8480
 800d02c:	08017631 	.word	0x08017631
 800d030:	0801764c 	.word	0x0801764c
 800d034:	08017669 	.word	0x08017669
 800d038:	0801766f 	.word	0x0801766f
 800d03c:	08017684 	.word	0x08017684
 800d040:	ffff9300 	.word	0xffff9300
 800d044:	080176a2 	.word	0x080176a2
 800d048:	080171ed 	.word	0x080171ed
 800d04c:	08017544 	.word	0x08017544
 800d050:	080176bc 	.word	0x080176bc
 800d054:	080176d9 	.word	0x080176d9
 800d058:	08017388 	.word	0x08017388
 800d05c:	080176f5 	.word	0x080176f5
 800d060:	08017716 	.word	0x08017716
 800d064:	ffff8a00 	.word	0xffff8a00
    ssl->handshake->calc_verify( ssl, hash );
 800d068:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
 800d06c:	a90c      	add	r1, sp, #48	; 0x30
 800d06e:	4620      	mov	r0, r4
 800d070:	4798      	blx	r3
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 800d072:	68e3      	ldr	r3, [r4, #12]
 800d074:	2b03      	cmp	r3, #3
 800d076:	d132      	bne.n	800d0de <mbedtls_ssl_handshake_client_step+0xc7e>
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 800d078:	6c23      	ldr	r3, [r4, #64]	; 0x40
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 800d07a:	4620      	mov	r0, r4
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	7a59      	ldrb	r1, [r3, #9]
 800d080:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800d084:	2907      	cmp	r1, #7
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 800d086:	bf0b      	itete	eq
 800d088:	2205      	moveq	r2, #5
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 800d08a:	2204      	movne	r2, #4
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 800d08c:	711a      	strbeq	r2, [r3, #4]
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 800d08e:	711a      	strbne	r2, [r3, #4]
            md_alg = MBEDTLS_MD_SHA384;
 800d090:	bf0c      	ite	eq
 800d092:	460d      	moveq	r5, r1
            md_alg = MBEDTLS_MD_SHA256;
 800d094:	2506      	movne	r5, #6
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 800d096:	f7ff f9d7 	bl	800c448 <mbedtls_ssl_own_key>
 800d09a:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 800d09e:	f003 f942 	bl	8010326 <mbedtls_ssl_sig_from_pk>
 800d0a2:	7170      	strb	r0, [r6, #5]
    if( ( ret = mbedtls_pk_sign_restartable( mbedtls_ssl_own_key( ssl ),
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f7ff f9cf 	bl	800c448 <mbedtls_ssl_own_key>
 800d0aa:	2300      	movs	r3, #0
                         ssl->conf->f_rng, ssl->conf->p_rng, rs_ctx ) ) != 0 )
 800d0ac:	6822      	ldr	r2, [r4, #0]
    if( ( ret = mbedtls_pk_sign_restartable( mbedtls_ssl_own_key( ssl ),
 800d0ae:	9304      	str	r3, [sp, #16]
 800d0b0:	69d1      	ldr	r1, [r2, #28]
 800d0b2:	9103      	str	r1, [sp, #12]
 800d0b4:	6992      	ldr	r2, [r2, #24]
 800d0b6:	4629      	mov	r1, r5
 800d0b8:	9202      	str	r2, [sp, #8]
 800d0ba:	aa0b      	add	r2, sp, #44	; 0x2c
 800d0bc:	9201      	str	r2, [sp, #4]
 800d0be:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800d0c2:	3208      	adds	r2, #8
 800d0c4:	9200      	str	r2, [sp, #0]
 800d0c6:	aa0c      	add	r2, sp, #48	; 0x30
 800d0c8:	f7fb f810 	bl	80080ec <mbedtls_pk_sign_restartable>
 800d0cc:	4605      	mov	r5, r0
 800d0ce:	b158      	cbz	r0, 800d0e8 <mbedtls_ssl_handshake_client_step+0xc88>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
 800d0d0:	4bbe      	ldr	r3, [pc, #760]	; (800d3cc <mbedtls_ssl_handshake_client_step+0xf6c>)
 800d0d2:	9001      	str	r0, [sp, #4]
 800d0d4:	9300      	str	r3, [sp, #0]
 800d0d6:	f44f 6352 	mov.w	r3, #3360	; 0xd20
 800d0da:	f7ff baa5 	b.w	800c628 <mbedtls_ssl_handshake_client_step+0x1c8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800d0de:	4bbc      	ldr	r3, [pc, #752]	; (800d3d0 <mbedtls_ssl_handshake_client_step+0xf70>)
 800d0e0:	9300      	str	r3, [sp, #0]
 800d0e2:	f640 5312 	movw	r3, #3346	; 0xd12
 800d0e6:	e586      	b.n	800cbf6 <mbedtls_ssl_handshake_client_step+0x796>
    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 800d0e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0ea:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800d0ee:	0a19      	lsrs	r1, r3, #8
 800d0f0:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 800d0f2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 800d0f6:	4620      	mov	r0, r4
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 800d0f8:	71d3      	strb	r3, [r2, #7]
    ssl->out_msglen  = 6 + n + offset;
 800d0fa:	3308      	adds	r3, #8
 800d0fc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 800d100:	2316      	movs	r3, #22
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 800d102:	220f      	movs	r2, #15
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 800d104:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 800d108:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800d10c:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 800d10e:	6863      	ldr	r3, [r4, #4]
 800d110:	3301      	adds	r3, #1
 800d112:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 800d114:	f001 fa5a 	bl	800e5cc <mbedtls_ssl_write_handshake_msg>
 800d118:	4605      	mov	r5, r0
 800d11a:	b130      	cbz	r0, 800d12a <mbedtls_ssl_handshake_client_step+0xcca>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
 800d11c:	4bad      	ldr	r3, [pc, #692]	; (800d3d4 <mbedtls_ssl_handshake_client_step+0xf74>)
 800d11e:	9001      	str	r0, [sp, #4]
 800d120:	9300      	str	r3, [sp, #0]
 800d122:	f640 5333 	movw	r3, #3379	; 0xd33
 800d126:	f7ff ba7f 	b.w	800c628 <mbedtls_ssl_handshake_client_step+0x1c8>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate verify" ) );
 800d12a:	4bab      	ldr	r3, [pc, #684]	; (800d3d8 <mbedtls_ssl_handshake_client_step+0xf78>)
 800d12c:	9300      	str	r3, [sp, #0]
 800d12e:	f640 5337 	movw	r3, #3383	; 0xd37
 800d132:	f7ff ba95 	b.w	800c660 <mbedtls_ssl_handshake_client_step+0x200>
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 800d136:	4620      	mov	r0, r4
 800d138:	f002 faac 	bl	800f694 <mbedtls_ssl_write_change_cipher_spec>
 800d13c:	e500      	b.n	800cb40 <mbedtls_ssl_handshake_client_step+0x6e0>
           ret = mbedtls_ssl_write_finished( ssl );
 800d13e:	4620      	mov	r0, r4
 800d140:	f002 fb5e 	bl	800f800 <mbedtls_ssl_write_finished>
 800d144:	e4fc      	b.n	800cb40 <mbedtls_ssl_handshake_client_step+0x6e0>
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 800d146:	4620      	mov	r0, r4
 800d148:	f002 fade 	bl	800f708 <mbedtls_ssl_parse_change_cipher_spec>
 800d14c:	e4f8      	b.n	800cb40 <mbedtls_ssl_handshake_client_step+0x6e0>
           ret = mbedtls_ssl_parse_finished( ssl );
 800d14e:	4620      	mov	r0, r4
 800d150:	f002 fbc6 	bl	800f8e0 <mbedtls_ssl_parse_finished>
 800d154:	e4f4      	b.n	800cb40 <mbedtls_ssl_handshake_client_step+0x6e0>
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
 800d156:	4ba1      	ldr	r3, [pc, #644]	; (800d3dc <mbedtls_ssl_handshake_client_step+0xf7c>)
 800d158:	4aa1      	ldr	r2, [pc, #644]	; (800d3e0 <mbedtls_ssl_handshake_client_step+0xf80>)
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	2102      	movs	r1, #2
 800d15e:	f640 6325 	movw	r3, #3621	; 0xe25
 800d162:	4620      	mov	r0, r4
 800d164:	f7f9 f854 	bl	8006210 <mbedtls_debug_print_msg>
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 800d168:	230f      	movs	r3, #15
        ssl->state++;
 800d16a:	6063      	str	r3, [r4, #4]
 800d16c:	f7ff b9a9 	b.w	800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
           mbedtls_ssl_handshake_wrapup( ssl );
 800d170:	4620      	mov	r0, r4
 800d172:	f002 fedb 	bl	800ff2c <mbedtls_ssl_handshake_wrapup>
           break;
 800d176:	f7ff b9a4 	b.w	800c4c2 <mbedtls_ssl_handshake_client_step+0x62>
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
 800d17a:	9301      	str	r3, [sp, #4]
 800d17c:	4b99      	ldr	r3, [pc, #612]	; (800d3e4 <mbedtls_ssl_handshake_client_step+0xf84>)
 800d17e:	4a98      	ldr	r2, [pc, #608]	; (800d3e0 <mbedtls_ssl_handshake_client_step+0xf80>)
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	2101      	movs	r1, #1
 800d184:	f640 632e 	movw	r3, #3630	; 0xe2e
 800d188:	4620      	mov	r0, r4
 800d18a:	f7f9 f841 	bl	8006210 <mbedtls_debug_print_msg>
 800d18e:	f7ff b9c5 	b.w	800c51c <mbedtls_ssl_handshake_client_step+0xbc>
    p += 2;
 800d192:	f108 0106 	add.w	r1, r8, #6
    memcpy( p, ssl->handshake->randbytes, 32 );
 800d196:	4608      	mov	r0, r1
 800d198:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d19a:	f503 72b2 	add.w	r2, r3, #356	; 0x164
 800d19e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800d1a2:	f852 5b04 	ldr.w	r5, [r2], #4
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	f840 5b04 	str.w	r5, [r0], #4
 800d1ac:	d1f9      	bne.n	800d1a2 <mbedtls_ssl_handshake_client_step+0xd42>
    MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, random bytes", p, 32 );
 800d1ae:	2320      	movs	r3, #32
 800d1b0:	9302      	str	r3, [sp, #8]
 800d1b2:	4b8d      	ldr	r3, [pc, #564]	; (800d3e8 <mbedtls_ssl_handshake_client_step+0xf88>)
 800d1b4:	9101      	str	r1, [sp, #4]
 800d1b6:	9300      	str	r3, [sp, #0]
 800d1b8:	4a89      	ldr	r2, [pc, #548]	; (800d3e0 <mbedtls_ssl_handshake_client_step+0xf80>)
 800d1ba:	f240 3335 	movw	r3, #821	; 0x335
 800d1be:	2103      	movs	r1, #3
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	f7f9 f883 	bl	80062cc <mbedtls_debug_print_buf>
    n = ssl->session_negotiate->id_len;
 800d1c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d1c8:	689e      	ldr	r6, [r3, #8]
    if( n < 16 || n > 32 ||
 800d1ca:	f1a6 0310 	sub.w	r3, r6, #16
 800d1ce:	2b10      	cmp	r3, #16
 800d1d0:	f63f a9dc 	bhi.w	800c58c <mbedtls_ssl_handshake_client_step+0x12c>
        ssl->handshake->resume == 0 )
 800d1d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if( n < 16 || n > 32 ||
 800d1d6:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
        n = 0;
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	bf08      	it	eq
 800d1de:	2600      	moveq	r6, #0
    for( i = 0; i < n; i++ )
 800d1e0:	2300      	movs	r3, #0
    *p++ = (unsigned char) n;
 800d1e2:	f108 0527 	add.w	r5, r8, #39	; 0x27
 800d1e6:	f888 6026 	strb.w	r6, [r8, #38]	; 0x26
    for( i = 0; i < n; i++ )
 800d1ea:	429e      	cmp	r6, r3
 800d1ec:	f47f a9d1 	bne.w	800c592 <mbedtls_ssl_handshake_client_step+0x132>
    n = 0;
 800d1f0:	2700      	movs	r7, #0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, session id len.: %d", n ) );
 800d1f2:	4b7e      	ldr	r3, [pc, #504]	; (800d3ec <mbedtls_ssl_handshake_client_step+0xf8c>)
 800d1f4:	9601      	str	r6, [sp, #4]
 800d1f6:	9300      	str	r3, [sp, #0]
 800d1f8:	4a79      	ldr	r2, [pc, #484]	; (800d3e0 <mbedtls_ssl_handshake_client_step+0xf80>)
 800d1fa:	f240 336a 	movw	r3, #874	; 0x36a
 800d1fe:	2103      	movs	r1, #3
 800d200:	4620      	mov	r0, r4
 800d202:	f7f9 f805 	bl	8006210 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "client hello, session id", buf + 39, n );
 800d206:	4b7a      	ldr	r3, [pc, #488]	; (800d3f0 <mbedtls_ssl_handshake_client_step+0xf90>)
 800d208:	9602      	str	r6, [sp, #8]
 800d20a:	9300      	str	r3, [sp, #0]
 800d20c:	4a74      	ldr	r2, [pc, #464]	; (800d3e0 <mbedtls_ssl_handshake_client_step+0xf80>)
 800d20e:	f240 336b 	movw	r3, #875	; 0x36b
 800d212:	9501      	str	r5, [sp, #4]
 800d214:	2103      	movs	r1, #3
 800d216:	4620      	mov	r0, r4
 800d218:	f7f9 f858 	bl	80062cc <mbedtls_debug_print_buf>
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 800d21c:	6823      	ldr	r3, [r4, #0]
 800d21e:	68e2      	ldr	r2, [r4, #12]
 800d220:	eb05 0a06 	add.w	sl, r5, r6
 800d224:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 800d228:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 800d3e0 <mbedtls_ssl_handshake_client_step+0xf80>
    p += 2;
 800d22c:	f10a 0602 	add.w	r6, sl, #2
    for( i = 0; ciphersuites[i] != 0; i++ )
 800d230:	f8d9 5000 	ldr.w	r5, [r9]
 800d234:	2d00      	cmp	r5, #0
 800d236:	f47f a9b3 	bne.w	800c5a0 <mbedtls_ssl_handshake_client_step+0x140>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, got %d ciphersuites (excluding SCSVs)", n ) );
 800d23a:	4b6e      	ldr	r3, [pc, #440]	; (800d3f4 <mbedtls_ssl_handshake_client_step+0xf94>)
 800d23c:	9701      	str	r7, [sp, #4]
 800d23e:	9300      	str	r3, [sp, #0]
 800d240:	4a67      	ldr	r2, [pc, #412]	; (800d3e0 <mbedtls_ssl_handshake_client_step+0xf80>)
 800d242:	f240 33a6 	movw	r3, #934	; 0x3a6
 800d246:	2103      	movs	r1, #3
 800d248:	4620      	mov	r0, r4
 800d24a:	f7f8 ffe1 	bl	8006210 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
 800d24e:	4b6a      	ldr	r3, [pc, #424]	; (800d3f8 <mbedtls_ssl_handshake_client_step+0xf98>)
 800d250:	4a63      	ldr	r2, [pc, #396]	; (800d3e0 <mbedtls_ssl_handshake_client_step+0xf80>)
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	2103      	movs	r1, #3
 800d256:	f240 33af 	movw	r3, #943	; 0x3af
 800d25a:	4620      	mov	r0, r4
 800d25c:	f7f8 ffd8 	bl	8006210 <mbedtls_debug_print_msg>
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 800d260:	23ff      	movs	r3, #255	; 0xff
        n++;
 800d262:	3701      	adds	r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 800d264:	7073      	strb	r3, [r6, #1]
    *q++ = (unsigned char)( n >> 7 );
 800d266:	09fb      	lsrs	r3, r7, #7
    *q++ = (unsigned char)( n << 1 );
 800d268:	007f      	lsls	r7, r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 800d26a:	7035      	strb	r5, [r6, #0]
    *q++ = (unsigned char)( n << 1 );
 800d26c:	f88a 7001 	strb.w	r7, [sl, #1]
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
 800d270:	2701      	movs	r7, #1
    *q++ = (unsigned char)( n >> 7 );
 800d272:	f88a 3000 	strb.w	r3, [sl]
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
 800d276:	4b61      	ldr	r3, [pc, #388]	; (800d3fc <mbedtls_ssl_handshake_client_step+0xf9c>)
 800d278:	9701      	str	r7, [sp, #4]
 800d27a:	9300      	str	r3, [sp, #0]
 800d27c:	4a58      	ldr	r2, [pc, #352]	; (800d3e0 <mbedtls_ssl_handshake_client_step+0xf80>)
 800d27e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800d282:	2103      	movs	r1, #3
 800d284:	4620      	mov	r0, r4
 800d286:	f7f8 ffc3 	bl	8006210 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
 800d28a:	4b5d      	ldr	r3, [pc, #372]	; (800d400 <mbedtls_ssl_handshake_client_step+0xfa0>)
 800d28c:	2103      	movs	r1, #3
 800d28e:	9300      	str	r3, [sp, #0]
 800d290:	9501      	str	r5, [sp, #4]
 800d292:	f240 33e2 	movw	r3, #994	; 0x3e2
 800d296:	4a52      	ldr	r2, [pc, #328]	; (800d3e0 <mbedtls_ssl_handshake_client_step+0xf80>)
 800d298:	4620      	mov	r0, r4
 800d29a:	f7f8 ffb9 	bl	8006210 <mbedtls_debug_print_msg>
        *p++ = 1;
 800d29e:	70b7      	strb	r7, [r6, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 800d2a0:	70f5      	strb	r5, [r6, #3]
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 800d2a2:	6823      	ldr	r3, [r4, #0]
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 800d2a4:	1db7      	adds	r7, r6, #6
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 800d2a6:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 800d2aa:	2903      	cmp	r1, #3
 800d2ac:	f47f a998 	bne.w	800c5e0 <mbedtls_ssl_handshake_client_step+0x180>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 800d2b0:	4b54      	ldr	r3, [pc, #336]	; (800d404 <mbedtls_ssl_handshake_client_step+0xfa4>)
 800d2b2:	4a4b      	ldr	r2, [pc, #300]	; (800d3e0 <mbedtls_ssl_handshake_client_step+0xf80>)
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	23ba      	movs	r3, #186	; 0xba
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 800d2ba:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 800d2be:	f7f8 ffa7 	bl	8006210 <mbedtls_debug_print_msg>
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 800d2c2:	6823      	ldr	r3, [r4, #0]
 800d2c4:	f8d3 a044 	ldr.w	sl, [r3, #68]	; 0x44
    size_t sig_alg_len = 0;
 800d2c8:	462b      	mov	r3, r5
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 800d2ca:	f85a 5013 	ldr.w	r5, [sl, r3, lsl #1]
 800d2ce:	2d00      	cmp	r5, #0
 800d2d0:	f47f a97a 	bne.w	800c5c8 <mbedtls_ssl_handshake_client_step+0x168>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 800d2d4:	f509 5280 	add.w	r2, r9, #4096	; 0x1000
    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 800d2d8:	4297      	cmp	r7, r2
 800d2da:	f63f a978 	bhi.w	800c5ce <mbedtls_ssl_handshake_client_step+0x16e>
 800d2de:	1bd2      	subs	r2, r2, r7
 800d2e0:	3306      	adds	r3, #6
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	f4ff a973 	bcc.w	800c5ce <mbedtls_ssl_handshake_client_step+0x16e>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 800d2e8:	2301      	movs	r3, #1
    unsigned char *sig_alg_list = buf + 6;
 800d2ea:	f106 0b0c 	add.w	fp, r6, #12
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 800d2ee:	f85a 0015 	ldr.w	r0, [sl, r5, lsl #1]
 800d2f2:	f105 0902 	add.w	r9, r5, #2
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	f47f a99c 	bne.w	800c634 <mbedtls_ssl_handshake_client_step+0x1d4>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 800d2fc:	230d      	movs	r3, #13
 800d2fe:	71f3      	strb	r3, [r6, #7]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 800d300:	b2eb      	uxtb	r3, r5
 800d302:	1c9a      	adds	r2, r3, #2
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 800d304:	ea4f 2919 	mov.w	r9, r9, lsr #8
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 800d308:	7272      	strb	r2, [r6, #9]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 800d30a:	0a2a      	lsrs	r2, r5, #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 800d30c:	71b0      	strb	r0, [r6, #6]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 800d30e:	f886 9008 	strb.w	r9, [r6, #8]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 800d312:	72b2      	strb	r2, [r6, #10]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 800d314:	72f3      	strb	r3, [r6, #11]
    *olen = 6 + sig_alg_len;
 800d316:	3506      	adds	r5, #6
 800d318:	f7ff b962 	b.w	800c5e0 <mbedtls_ssl_handshake_client_step+0x180>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 800d31c:	f8d9 3000 	ldr.w	r3, [r9]
 800d320:	465a      	mov	r2, fp
 800d322:	9301      	str	r3, [sp, #4]
 800d324:	4b38      	ldr	r3, [pc, #224]	; (800d408 <mbedtls_ssl_handshake_client_step+0xfa8>)
 800d326:	2103      	movs	r1, #3
 800d328:	9300      	str	r3, [sp, #0]
 800d32a:	4620      	mov	r0, r4
 800d32c:	f240 339a 	movw	r3, #922	; 0x39a
 800d330:	f7f8 ff6e 	bl	8006210 <mbedtls_debug_print_msg>
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 800d334:	f8d9 3000 	ldr.w	r3, [r9]
        n++;
 800d338:	3701      	adds	r7, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 800d33a:	121a      	asrs	r2, r3, #8
 800d33c:	4633      	mov	r3, r6
 800d33e:	f803 2b02 	strb.w	r2, [r3], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
 800d342:	f8d9 2000 	ldr.w	r2, [r9]
 800d346:	7072      	strb	r2, [r6, #1]
 800d348:	461e      	mov	r6, r3
 800d34a:	f7ff b939 	b.w	800c5c0 <mbedtls_ssl_handshake_client_step+0x160>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %s", suite_info->name ) );
 800d34e:	6843      	ldr	r3, [r0, #4]
 800d350:	4a23      	ldr	r2, [pc, #140]	; (800d3e0 <mbedtls_ssl_handshake_client_step+0xf80>)
 800d352:	9301      	str	r3, [sp, #4]
 800d354:	4b2d      	ldr	r3, [pc, #180]	; (800d40c <mbedtls_ssl_handshake_client_step+0xfac>)
 800d356:	2103      	movs	r1, #3
 800d358:	9300      	str	r3, [sp, #0]
 800d35a:	4620      	mov	r0, r4
 800d35c:	f240 63e4 	movw	r3, #1764	; 0x6e4
 800d360:	f7f8 ff56 	bl	8006210 <mbedtls_debug_print_msg>
    ssl->session_negotiate->compression = comp;
 800d364:	2200      	movs	r2, #0
 800d366:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 800d368:	2102      	movs	r1, #2
    ssl->session_negotiate->compression = comp;
 800d36a:	605a      	str	r2, [r3, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 800d36c:	4b28      	ldr	r3, [pc, #160]	; (800d410 <mbedtls_ssl_handshake_client_step+0xfb0>)
 800d36e:	f8cd 8004 	str.w	r8, [sp, #4]
 800d372:	9300      	str	r3, [sp, #0]
 800d374:	4a1a      	ldr	r2, [pc, #104]	; (800d3e0 <mbedtls_ssl_handshake_client_step+0xf80>)
 800d376:	f240 63fd 	movw	r3, #1789	; 0x6fd
 800d37a:	4620      	mov	r0, r4
 800d37c:	f7f8 ff48 	bl	8006210 <mbedtls_debug_print_msg>
    ext = buf + 40 + n;
 800d380:	3628      	adds	r6, #40	; 0x28
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 800d382:	f8df b09c 	ldr.w	fp, [pc, #156]	; 800d420 <mbedtls_ssl_handshake_client_step+0xfc0>
 800d386:	4f16      	ldr	r7, [pc, #88]	; (800d3e0 <mbedtls_ssl_handshake_client_step+0xf80>)
    ext = buf + 40 + n;
 800d388:	44b2      	add	sl, r6
    while( ext_len )
 800d38a:	f1b8 0f00 	cmp.w	r8, #0
 800d38e:	f47f ab81 	bne.w	800ca94 <mbedtls_ssl_handshake_client_step+0x634>
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 800d392:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800d396:	b963      	cbnz	r3, 800d3b2 <mbedtls_ssl_handshake_client_step+0xf52>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 800d398:	6823      	ldr	r3, [r4, #0]
 800d39a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 800d39e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d3a2:	2b20      	cmp	r3, #32
 800d3a4:	d105      	bne.n	800d3b2 <mbedtls_ssl_handshake_client_step+0xf52>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 800d3a6:	4b1b      	ldr	r3, [pc, #108]	; (800d414 <mbedtls_ssl_handshake_client_step+0xfb4>)
 800d3a8:	9300      	str	r3, [sp, #0]
 800d3aa:	f44f 63f3 	mov.w	r3, #1944	; 0x798
 800d3ae:	f7ff bb9c 	b.w	800caea <mbedtls_ssl_handshake_client_step+0x68a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello" ) );
 800d3b2:	4b19      	ldr	r3, [pc, #100]	; (800d418 <mbedtls_ssl_handshake_client_step+0xfb8>)
 800d3b4:	9300      	str	r3, [sp, #0]
 800d3b6:	f240 73ba 	movw	r3, #1978	; 0x7ba
 800d3ba:	f7ff b951 	b.w	800c660 <mbedtls_ssl_handshake_client_step+0x200>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
 800d3be:	4b17      	ldr	r3, [pc, #92]	; (800d41c <mbedtls_ssl_handshake_client_step+0xfbc>)
 800d3c0:	9300      	str	r3, [sp, #0]
 800d3c2:	f640 238d 	movw	r3, #2701	; 0xa8d
 800d3c6:	f7ff bbcf 	b.w	800cb68 <mbedtls_ssl_handshake_client_step+0x708>
 800d3ca:	bf00      	nop
 800d3cc:	08017739 	.word	0x08017739
 800d3d0:	08017544 	.word	0x08017544
 800d3d4:	080171ed 	.word	0x080171ed
 800d3d8:	08017749 	.word	0x08017749
 800d3dc:	08017765 	.word	0x08017765
 800d3e0:	08016fd5 	.word	0x08016fd5
 800d3e4:	08017775 	.word	0x08017775
 800d3e8:	0801779a 	.word	0x0801779a
 800d3ec:	080170bc 	.word	0x080170bc
 800d3f0:	080170de 	.word	0x080170de
 800d3f4:	080170f7 	.word	0x080170f7
 800d3f8:	0801712b 	.word	0x0801712b
 800d3fc:	08017150 	.word	0x08017150
 800d400:	08017170 	.word	0x08017170
 800d404:	08017190 	.word	0x08017190
 800d408:	080177b5 	.word	0x080177b5
 800d40c:	080177d9 	.word	0x080177d9
 800d410:	080177fe 	.word	0x080177fe
 800d414:	0801746b 	.word	0x0801746b
 800d418:	08017827 	.word	0x08017827
 800d41c:	0801783d 	.word	0x0801783d
 800d420:	08017444 	.word	0x08017444

0800d424 <ssl_update_out_pointers>:
        ssl->out_iv  = ssl->out_hdr + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_hdr - 8;
 800d424:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800d428:	f1a3 0208 	sub.w	r2, r3, #8
 800d42c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
        ssl->out_len = ssl->out_hdr + 3;
 800d430:	1cda      	adds	r2, r3, #3
        ssl->out_iv  = ssl->out_hdr + 5;
 800d432:	3305      	adds	r3, #5
        ssl->out_len = ssl->out_hdr + 3;
 800d434:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
        ssl->out_iv  = ssl->out_hdr + 5;
 800d438:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    }

    /* Adjust out_msg to make space for explicit IV, if used. */
    if( transform != NULL &&
 800d43c:	b131      	cbz	r1, 800d44c <ssl_update_out_pointers+0x28>
 800d43e:	68c2      	ldr	r2, [r0, #12]
 800d440:	2a01      	cmp	r2, #1
        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->out_msg = ssl->out_iv + transform->ivlen - transform->fixed_ivlen;
 800d442:	bfc1      	itttt	gt
 800d444:	68ca      	ldrgt	r2, [r1, #12]
 800d446:	6909      	ldrgt	r1, [r1, #16]
 800d448:	1a52      	subgt	r2, r2, r1
 800d44a:	189b      	addgt	r3, r3, r2
    }
    else
        ssl->out_msg = ssl->out_iv;
 800d44c:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 800d450:	4770      	bx	lr
	...

0800d454 <ssl_set_timer>:
    if( ssl->f_set_timer == NULL )
 800d454:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
 800d456:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d458:	4604      	mov	r4, r0
 800d45a:	460d      	mov	r5, r1
    if( ssl->f_set_timer == NULL )
 800d45c:	b17b      	cbz	r3, 800d47e <ssl_set_timer+0x2a>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
 800d45e:	4b09      	ldr	r3, [pc, #36]	; (800d484 <ssl_set_timer+0x30>)
 800d460:	9101      	str	r1, [sp, #4]
 800d462:	9300      	str	r3, [sp, #0]
 800d464:	4a08      	ldr	r2, [pc, #32]	; (800d488 <ssl_set_timer+0x34>)
 800d466:	2351      	movs	r3, #81	; 0x51
 800d468:	2103      	movs	r1, #3
 800d46a:	f7f8 fed1 	bl	8006210 <mbedtls_debug_print_msg>
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 800d46e:	462a      	mov	r2, r5
 800d470:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d472:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800d474:	08a9      	lsrs	r1, r5, #2
}
 800d476:	b003      	add	sp, #12
 800d478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 800d47c:	4718      	bx	r3
}
 800d47e:	b003      	add	sp, #12
 800d480:	bd30      	pop	{r4, r5, pc}
 800d482:	bf00      	nop
 800d484:	0801885f 	.word	0x0801885f
 800d488:	08018828 	.word	0x08018828

0800d48c <ssl_calc_finished_tls_sha256>:
{
 800d48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mbedtls_ssl_session *session = ssl->session_negotiate;
 800d490:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
{
 800d492:	b0a8      	sub	sp, #160	; 0xa0
 800d494:	4604      	mov	r4, r0
 800d496:	4688      	mov	r8, r1
 800d498:	4691      	mov	r9, r2
    if( !session )
 800d49a:	b906      	cbnz	r6, 800d49e <ssl_calc_finished_tls_sha256+0x12>
        session = ssl->session;
 800d49c:	6a86      	ldr	r6, [r0, #40]	; 0x28
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
 800d49e:	2520      	movs	r5, #32
    mbedtls_sha256_init( &sha256 );
 800d4a0:	a80d      	add	r0, sp, #52	; 0x34
 800d4a2:	f7fd fa7b 	bl	800a99c <mbedtls_sha256_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );
 800d4a6:	4b28      	ldr	r3, [pc, #160]	; (800d548 <ssl_calc_finished_tls_sha256+0xbc>)
 800d4a8:	4a28      	ldr	r2, [pc, #160]	; (800d54c <ssl_calc_finished_tls_sha256+0xc0>)
 800d4aa:	9300      	str	r3, [sp, #0]
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	f641 034f 	movw	r3, #6223	; 0x184f
 800d4b2:	2102      	movs	r1, #2
 800d4b4:	f7f8 feac 	bl	8006210 <mbedtls_debug_print_msg>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 800d4b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d4ba:	a80d      	add	r0, sp, #52	; 0x34
 800d4bc:	3108      	adds	r1, #8
 800d4be:	f7fd fa76 	bl	800a9ae <mbedtls_sha256_clone>
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
 800d4c2:	ab0f      	add	r3, sp, #60	; 0x3c
 800d4c4:	9301      	str	r3, [sp, #4]
 800d4c6:	4b22      	ldr	r3, [pc, #136]	; (800d550 <ssl_calc_finished_tls_sha256+0xc4>)
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	9300      	str	r3, [sp, #0]
 800d4cc:	9502      	str	r5, [sp, #8]
 800d4ce:	f641 035b 	movw	r3, #6235	; 0x185b
 800d4d2:	4a1e      	ldr	r2, [pc, #120]	; (800d54c <ssl_calc_finished_tls_sha256+0xc0>)
 800d4d4:	2104      	movs	r1, #4
 800d4d6:	f7f8 fef9 	bl	80062cc <mbedtls_debug_print_buf>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 800d4da:	4f1e      	ldr	r7, [pc, #120]	; (800d554 <ssl_calc_finished_tls_sha256+0xc8>)
 800d4dc:	4a1e      	ldr	r2, [pc, #120]	; (800d558 <ssl_calc_finished_tls_sha256+0xcc>)
    mbedtls_sha256_finish_ret( &sha256, padbuf );
 800d4de:	a905      	add	r1, sp, #20
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 800d4e0:	f1b9 0f00 	cmp.w	r9, #0
 800d4e4:	bf18      	it	ne
 800d4e6:	4617      	movne	r7, r2
    ssl->handshake->tls_prf( session->master, 48, sender,
 800d4e8:	f04f 090c 	mov.w	r9, #12
    mbedtls_sha256_finish_ret( &sha256, padbuf );
 800d4ec:	a80d      	add	r0, sp, #52	; 0x34
 800d4ee:	f7fd fe4a 	bl	800b186 <mbedtls_sha256_finish_ret>
    ssl->handshake->tls_prf( session->master, 48, sender,
 800d4f2:	e88d 0320 	stmia.w	sp, {r5, r8, r9}
 800d4f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d4f8:	463a      	mov	r2, r7
 800d4fa:	f8d3 a15c 	ldr.w	sl, [r3, #348]	; 0x15c
 800d4fe:	2130      	movs	r1, #48	; 0x30
 800d500:	ab05      	add	r3, sp, #20
 800d502:	f106 002c 	add.w	r0, r6, #44	; 0x2c
 800d506:	47d0      	blx	sl
    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
 800d508:	4b14      	ldr	r3, [pc, #80]	; (800d55c <ssl_calc_finished_tls_sha256+0xd0>)
 800d50a:	4a10      	ldr	r2, [pc, #64]	; (800d54c <ssl_calc_finished_tls_sha256+0xc0>)
 800d50c:	9300      	str	r3, [sp, #0]
 800d50e:	2103      	movs	r1, #3
 800d510:	f641 0367 	movw	r3, #6247	; 0x1867
 800d514:	4620      	mov	r0, r4
 800d516:	f8cd 9008 	str.w	r9, [sp, #8]
 800d51a:	f8cd 8004 	str.w	r8, [sp, #4]
 800d51e:	f7f8 fed5 	bl	80062cc <mbedtls_debug_print_buf>
    mbedtls_sha256_free( &sha256 );
 800d522:	a80d      	add	r0, sp, #52	; 0x34
 800d524:	f7fd fa3e 	bl	800a9a4 <mbedtls_sha256_free>
    mbedtls_platform_zeroize(  padbuf, sizeof(  padbuf ) );
 800d528:	4629      	mov	r1, r5
 800d52a:	a805      	add	r0, sp, #20
 800d52c:	f7fa fff8 	bl	8008520 <mbedtls_platform_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
 800d530:	4b0b      	ldr	r3, [pc, #44]	; (800d560 <ssl_calc_finished_tls_sha256+0xd4>)
 800d532:	4a06      	ldr	r2, [pc, #24]	; (800d54c <ssl_calc_finished_tls_sha256+0xc0>)
 800d534:	9300      	str	r3, [sp, #0]
 800d536:	2102      	movs	r1, #2
 800d538:	f641 036d 	movw	r3, #6253	; 0x186d
 800d53c:	4620      	mov	r0, r4
 800d53e:	f7f8 fe67 	bl	8006210 <mbedtls_debug_print_msg>
}
 800d542:	b028      	add	sp, #160	; 0xa0
 800d544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d548:	08018726 	.word	0x08018726
 800d54c:	08018828 	.word	0x08018828
 800d550:	08018743 	.word	0x08018743
 800d554:	08018706 	.word	0x08018706
 800d558:	08018716 	.word	0x08018716
 800d55c:	08018757 	.word	0x08018757
 800d560:	0801876c 	.word	0x0801876c

0800d564 <ssl_calc_verify_tls_sha256>:
{
 800d564:	b570      	push	{r4, r5, r6, lr}
 800d566:	4604      	mov	r4, r0
 800d568:	460e      	mov	r6, r1
 800d56a:	b0a0      	sub	sp, #128	; 0x80
    mbedtls_sha256_init( &sha256 );
 800d56c:	a805      	add	r0, sp, #20
 800d56e:	f7fd fa15 	bl	800a99c <mbedtls_sha256_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );
 800d572:	4d16      	ldr	r5, [pc, #88]	; (800d5cc <ssl_calc_verify_tls_sha256+0x68>)
 800d574:	4b16      	ldr	r3, [pc, #88]	; (800d5d0 <ssl_calc_verify_tls_sha256+0x6c>)
 800d576:	462a      	mov	r2, r5
 800d578:	9300      	str	r3, [sp, #0]
 800d57a:	4620      	mov	r0, r4
 800d57c:	f240 43b5 	movw	r3, #1205	; 0x4b5
 800d580:	2102      	movs	r1, #2
 800d582:	f7f8 fe45 	bl	8006210 <mbedtls_debug_print_msg>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 800d586:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d588:	a805      	add	r0, sp, #20
 800d58a:	3108      	adds	r1, #8
 800d58c:	f7fd fa0f 	bl	800a9ae <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
 800d590:	4631      	mov	r1, r6
 800d592:	a805      	add	r0, sp, #20
 800d594:	f7fd fdf7 	bl	800b186 <mbedtls_sha256_finish_ret>
    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
 800d598:	2320      	movs	r3, #32
 800d59a:	9302      	str	r3, [sp, #8]
 800d59c:	4b0d      	ldr	r3, [pc, #52]	; (800d5d4 <ssl_calc_verify_tls_sha256+0x70>)
 800d59e:	462a      	mov	r2, r5
 800d5a0:	9300      	str	r3, [sp, #0]
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	9601      	str	r6, [sp, #4]
 800d5a6:	f240 43ba 	movw	r3, #1210	; 0x4ba
 800d5aa:	2103      	movs	r1, #3
 800d5ac:	f7f8 fe8e 	bl	80062cc <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
 800d5b0:	4b09      	ldr	r3, [pc, #36]	; (800d5d8 <ssl_calc_verify_tls_sha256+0x74>)
 800d5b2:	462a      	mov	r2, r5
 800d5b4:	9300      	str	r3, [sp, #0]
 800d5b6:	2102      	movs	r1, #2
 800d5b8:	f240 43bb 	movw	r3, #1211	; 0x4bb
 800d5bc:	4620      	mov	r0, r4
 800d5be:	f7f8 fe27 	bl	8006210 <mbedtls_debug_print_msg>
    mbedtls_sha256_free( &sha256 );
 800d5c2:	a805      	add	r0, sp, #20
 800d5c4:	f7fd f9ee 	bl	800a9a4 <mbedtls_sha256_free>
}
 800d5c8:	b020      	add	sp, #128	; 0x80
 800d5ca:	bd70      	pop	{r4, r5, r6, pc}
 800d5cc:	08018828 	.word	0x08018828
 800d5d0:	080187b1 	.word	0x080187b1
 800d5d4:	080187c7 	.word	0x080187c7
 800d5d8:	080187e0 	.word	0x080187e0

0800d5dc <tls_prf_generic>:
{
 800d5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e0:	4604      	mov	r4, r0
 800d5e2:	b0b7      	sub	sp, #220	; 0xdc
    mbedtls_md_init( &md_ctx );
 800d5e4:	a803      	add	r0, sp, #12
{
 800d5e6:	468a      	mov	sl, r1
 800d5e8:	4693      	mov	fp, r2
 800d5ea:	4699      	mov	r9, r3
 800d5ec:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    mbedtls_md_init( &md_ctx );
 800d5ee:	f7fa fa03 	bl	80079f8 <mbedtls_md_init>
    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f7fa f9f4 	bl	80079e0 <mbedtls_md_info_from_type>
 800d5f8:	4607      	mov	r7, r0
 800d5fa:	2800      	cmp	r0, #0
 800d5fc:	d076      	beq.n	800d6ec <tls_prf_generic+0x110>
    md_len = mbedtls_md_get_size( md_info );
 800d5fe:	f7fa fb13 	bl	8007c28 <mbedtls_md_get_size>
 800d602:	4604      	mov	r4, r0
    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 800d604:	4648      	mov	r0, r9
 800d606:	f7f2 fe0f 	bl	8000228 <strlen>
 800d60a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d60c:	1823      	adds	r3, r4, r0
 800d60e:	189a      	adds	r2, r3, r2
 800d610:	2a80      	cmp	r2, #128	; 0x80
 800d612:	4605      	mov	r5, r0
 800d614:	9301      	str	r3, [sp, #4]
 800d616:	d86b      	bhi.n	800d6f0 <tls_prf_generic+0x114>
    memcpy( tmp + md_len, label, nb );
 800d618:	ab16      	add	r3, sp, #88	; 0x58
 800d61a:	eb03 0804 	add.w	r8, r3, r4
 800d61e:	4602      	mov	r2, r0
 800d620:	4649      	mov	r1, r9
 800d622:	4640      	mov	r0, r8
 800d624:	f004 fbcb 	bl	8011dbe <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 800d628:	9b01      	ldr	r3, [sp, #4]
 800d62a:	a816      	add	r0, sp, #88	; 0x58
 800d62c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d62e:	9940      	ldr	r1, [sp, #256]	; 0x100
 800d630:	4418      	add	r0, r3
 800d632:	f004 fbc4 	bl	8011dbe <memcpy>
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 800d636:	4639      	mov	r1, r7
 800d638:	2201      	movs	r2, #1
 800d63a:	a803      	add	r0, sp, #12
 800d63c:	f7fa f9fc 	bl	8007a38 <mbedtls_md_setup>
 800d640:	4607      	mov	r7, r0
 800d642:	bb00      	cbnz	r0, 800d686 <tls_prf_generic+0xaa>
    nb += rlen;
 800d644:	9b41      	ldr	r3, [sp, #260]	; 0x104
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 800d646:	4651      	mov	r1, sl
    nb += rlen;
 800d648:	441d      	add	r5, r3
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 800d64a:	465a      	mov	r2, fp
 800d64c:	a803      	add	r0, sp, #12
 800d64e:	f7fa fa23 	bl	8007a98 <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 800d652:	462a      	mov	r2, r5
 800d654:	4641      	mov	r1, r8
 800d656:	a803      	add	r0, sp, #12
 800d658:	f7fa fa82 	bl	8007b60 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 800d65c:	a916      	add	r1, sp, #88	; 0x58
 800d65e:	a803      	add	r0, sp, #12
 800d660:	f7fa fa8e 	bl	8007b80 <mbedtls_md_hmac_finish>
    for( i = 0; i < dlen; i += md_len )
 800d664:	46b8      	mov	r8, r7
 800d666:	f10d 0a18 	add.w	sl, sp, #24
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 800d66a:	4425      	add	r5, r4
    for( i = 0; i < dlen; i += md_len )
 800d66c:	45b0      	cmp	r8, r6
        mbedtls_md_hmac_reset ( &md_ctx );
 800d66e:	a803      	add	r0, sp, #12
    for( i = 0; i < dlen; i += md_len )
 800d670:	d30d      	bcc.n	800d68e <tls_prf_generic+0xb2>
    mbedtls_md_free( &md_ctx );
 800d672:	f7fa f9c6 	bl	8007a02 <mbedtls_md_free>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 800d676:	2180      	movs	r1, #128	; 0x80
 800d678:	a816      	add	r0, sp, #88	; 0x58
 800d67a:	f7fa ff51 	bl	8008520 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( h_i, sizeof( h_i ) );
 800d67e:	2140      	movs	r1, #64	; 0x40
 800d680:	4650      	mov	r0, sl
 800d682:	f7fa ff4d 	bl	8008520 <mbedtls_platform_zeroize>
}
 800d686:	4638      	mov	r0, r7
 800d688:	b037      	add	sp, #220	; 0xdc
 800d68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_md_hmac_reset ( &md_ctx );
 800d68e:	f7fa faa9 	bl	8007be4 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 800d692:	462a      	mov	r2, r5
 800d694:	a916      	add	r1, sp, #88	; 0x58
 800d696:	a803      	add	r0, sp, #12
 800d698:	f7fa fa62 	bl	8007b60 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 800d69c:	4651      	mov	r1, sl
 800d69e:	a803      	add	r0, sp, #12
 800d6a0:	f7fa fa6e 	bl	8007b80 <mbedtls_md_hmac_finish>
        mbedtls_md_hmac_reset ( &md_ctx );
 800d6a4:	a803      	add	r0, sp, #12
 800d6a6:	f7fa fa9d 	bl	8007be4 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 800d6aa:	4622      	mov	r2, r4
 800d6ac:	a916      	add	r1, sp, #88	; 0x58
 800d6ae:	a803      	add	r0, sp, #12
 800d6b0:	f7fa fa56 	bl	8007b60 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 800d6b4:	a916      	add	r1, sp, #88	; 0x58
 800d6b6:	a803      	add	r0, sp, #12
 800d6b8:	f7fa fa62 	bl	8007b80 <mbedtls_md_hmac_finish>
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 800d6bc:	eb08 0104 	add.w	r1, r8, r4
 800d6c0:	428e      	cmp	r6, r1
 800d6c2:	bf34      	ite	cc
 800d6c4:	fbb6 f2f4 	udivcc	r2, r6, r4
 800d6c8:	4622      	movcs	r2, r4
        for( j = 0; j < k; j++ )
 800d6ca:	f04f 0300 	mov.w	r3, #0
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 800d6ce:	bf38      	it	cc
 800d6d0:	fb04 6212 	mlscc	r2, r4, r2, r6
            dstbuf[i + j]  = h_i[j];
 800d6d4:	9842      	ldr	r0, [sp, #264]	; 0x108
 800d6d6:	4480      	add	r8, r0
        for( j = 0; j < k; j++ )
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d101      	bne.n	800d6e0 <tls_prf_generic+0x104>
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 800d6dc:	4688      	mov	r8, r1
 800d6de:	e7c5      	b.n	800d66c <tls_prf_generic+0x90>
            dstbuf[i + j]  = h_i[j];
 800d6e0:	f81a 0003 	ldrb.w	r0, [sl, r3]
 800d6e4:	f808 0003 	strb.w	r0, [r8, r3]
        for( j = 0; j < k; j++ )
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	e7f5      	b.n	800d6d8 <tls_prf_generic+0xfc>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800d6ec:	4f01      	ldr	r7, [pc, #4]	; (800d6f4 <tls_prf_generic+0x118>)
 800d6ee:	e7ca      	b.n	800d686 <tls_prf_generic+0xaa>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800d6f0:	4f01      	ldr	r7, [pc, #4]	; (800d6f8 <tls_prf_generic+0x11c>)
 800d6f2:	e7c8      	b.n	800d686 <tls_prf_generic+0xaa>
 800d6f4:	ffff9400 	.word	0xffff9400
 800d6f8:	ffff8f00 	.word	0xffff8f00

0800d6fc <tls_prf_sha256>:
{
 800d6fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
 800d6fe:	9c08      	ldr	r4, [sp, #32]
 800d700:	9403      	str	r4, [sp, #12]
 800d702:	9c07      	ldr	r4, [sp, #28]
 800d704:	9402      	str	r4, [sp, #8]
 800d706:	9c06      	ldr	r4, [sp, #24]
 800d708:	e88d 0018 	stmia.w	sp, {r3, r4}
 800d70c:	4613      	mov	r3, r2
 800d70e:	460a      	mov	r2, r1
 800d710:	4601      	mov	r1, r0
 800d712:	2006      	movs	r0, #6
 800d714:	f7ff ff62 	bl	800d5dc <tls_prf_generic>
}
 800d718:	b004      	add	sp, #16
 800d71a:	bd10      	pop	{r4, pc}

0800d71c <tls_prf_sha384>:
{
 800d71c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
 800d71e:	9c08      	ldr	r4, [sp, #32]
 800d720:	9403      	str	r4, [sp, #12]
 800d722:	9c07      	ldr	r4, [sp, #28]
 800d724:	9402      	str	r4, [sp, #8]
 800d726:	9c06      	ldr	r4, [sp, #24]
 800d728:	e88d 0018 	stmia.w	sp, {r3, r4}
 800d72c:	4613      	mov	r3, r2
 800d72e:	460a      	mov	r2, r1
 800d730:	4601      	mov	r1, r0
 800d732:	2007      	movs	r0, #7
 800d734:	f7ff ff52 	bl	800d5dc <tls_prf_generic>
}
 800d738:	b004      	add	sp, #16
 800d73a:	bd10      	pop	{r4, pc}

0800d73c <ssl_calc_finished_tls_sha384>:
{
 800d73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mbedtls_ssl_session *session = ssl->session_negotiate;
 800d740:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
{
 800d742:	b0c6      	sub	sp, #280	; 0x118
 800d744:	4604      	mov	r4, r0
 800d746:	4688      	mov	r8, r1
 800d748:	4615      	mov	r5, r2
    if( !session )
 800d74a:	b906      	cbnz	r6, 800d74e <ssl_calc_finished_tls_sha384+0x12>
        session = ssl->session;
 800d74c:	6a86      	ldr	r6, [r0, #40]	; 0x28
    mbedtls_sha512_init( &sha512 );
 800d74e:	a810      	add	r0, sp, #64	; 0x40
 800d750:	f7fd fdce 	bl	800b2f0 <mbedtls_sha512_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );
 800d754:	4b2a      	ldr	r3, [pc, #168]	; (800d800 <ssl_calc_finished_tls_sha384+0xc4>)
 800d756:	4a2b      	ldr	r2, [pc, #172]	; (800d804 <ssl_calc_finished_tls_sha384+0xc8>)
 800d758:	9300      	str	r3, [sp, #0]
 800d75a:	4620      	mov	r0, r4
 800d75c:	f44f 53c4 	mov.w	r3, #6272	; 0x1880
 800d760:	2102      	movs	r1, #2
 800d762:	f7f8 fd55 	bl	8006210 <mbedtls_debug_print_msg>
    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 800d766:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d768:	a810      	add	r0, sp, #64	; 0x40
 800d76a:	3178      	adds	r1, #120	; 0x78
 800d76c:	f7fd fdc9 	bl	800b302 <mbedtls_sha512_clone>
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha512 state", (unsigned char *)
 800d770:	2340      	movs	r3, #64	; 0x40
 800d772:	9302      	str	r3, [sp, #8]
 800d774:	ab14      	add	r3, sp, #80	; 0x50
 800d776:	9301      	str	r3, [sp, #4]
 800d778:	4b23      	ldr	r3, [pc, #140]	; (800d808 <ssl_calc_finished_tls_sha384+0xcc>)
 800d77a:	4620      	mov	r0, r4
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	4a21      	ldr	r2, [pc, #132]	; (800d804 <ssl_calc_finished_tls_sha384+0xc8>)
 800d780:	f641 038c 	movw	r3, #6284	; 0x188c
 800d784:	2104      	movs	r1, #4
 800d786:	f7f8 fda1 	bl	80062cc <mbedtls_debug_print_buf>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 800d78a:	4f20      	ldr	r7, [pc, #128]	; (800d80c <ssl_calc_finished_tls_sha384+0xd0>)
 800d78c:	4a20      	ldr	r2, [pc, #128]	; (800d810 <ssl_calc_finished_tls_sha384+0xd4>)
    ssl->handshake->tls_prf( session->master, 48, sender,
 800d78e:	f04f 090c 	mov.w	r9, #12
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 800d792:	2d00      	cmp	r5, #0
 800d794:	bf18      	it	ne
 800d796:	4617      	movne	r7, r2
    ssl->handshake->tls_prf( session->master, 48, sender,
 800d798:	2530      	movs	r5, #48	; 0x30
    mbedtls_sha512_finish_ret( &sha512, padbuf );
 800d79a:	a904      	add	r1, sp, #16
 800d79c:	a810      	add	r0, sp, #64	; 0x40
 800d79e:	f7fe fce3 	bl	800c168 <mbedtls_sha512_finish_ret>
    ssl->handshake->tls_prf( session->master, 48, sender,
 800d7a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d7a4:	f8cd 9008 	str.w	r9, [sp, #8]
 800d7a8:	f8cd 8004 	str.w	r8, [sp, #4]
 800d7ac:	9500      	str	r5, [sp, #0]
 800d7ae:	f8d3 a15c 	ldr.w	sl, [r3, #348]	; 0x15c
 800d7b2:	463a      	mov	r2, r7
 800d7b4:	ab04      	add	r3, sp, #16
 800d7b6:	4629      	mov	r1, r5
 800d7b8:	f106 002c 	add.w	r0, r6, #44	; 0x2c
 800d7bc:	47d0      	blx	sl
    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
 800d7be:	4b15      	ldr	r3, [pc, #84]	; (800d814 <ssl_calc_finished_tls_sha384+0xd8>)
 800d7c0:	4a10      	ldr	r2, [pc, #64]	; (800d804 <ssl_calc_finished_tls_sha384+0xc8>)
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	2103      	movs	r1, #3
 800d7c6:	f641 0398 	movw	r3, #6296	; 0x1898
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	f8cd 9008 	str.w	r9, [sp, #8]
 800d7d0:	f8cd 8004 	str.w	r8, [sp, #4]
 800d7d4:	f7f8 fd7a 	bl	80062cc <mbedtls_debug_print_buf>
    mbedtls_sha512_free( &sha512 );
 800d7d8:	a810      	add	r0, sp, #64	; 0x40
 800d7da:	f7fd fd8d 	bl	800b2f8 <mbedtls_sha512_free>
    mbedtls_platform_zeroize(  padbuf, sizeof( padbuf ) );
 800d7de:	4629      	mov	r1, r5
 800d7e0:	a804      	add	r0, sp, #16
 800d7e2:	f7fa fe9d 	bl	8008520 <mbedtls_platform_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
 800d7e6:	4b0c      	ldr	r3, [pc, #48]	; (800d818 <ssl_calc_finished_tls_sha384+0xdc>)
 800d7e8:	4a06      	ldr	r2, [pc, #24]	; (800d804 <ssl_calc_finished_tls_sha384+0xc8>)
 800d7ea:	9300      	str	r3, [sp, #0]
 800d7ec:	2102      	movs	r1, #2
 800d7ee:	f641 039e 	movw	r3, #6302	; 0x189e
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	f7f8 fd0c 	bl	8006210 <mbedtls_debug_print_msg>
}
 800d7f8:	b046      	add	sp, #280	; 0x118
 800d7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7fe:	bf00      	nop
 800d800:	0801877e 	.word	0x0801877e
 800d804:	08018828 	.word	0x08018828
 800d808:	0801879b 	.word	0x0801879b
 800d80c:	08018706 	.word	0x08018706
 800d810:	08018716 	.word	0x08018716
 800d814:	08018757 	.word	0x08018757
 800d818:	0801876c 	.word	0x0801876c

0800d81c <ssl_calc_verify_tls_sha384>:
{
 800d81c:	b570      	push	{r4, r5, r6, lr}
 800d81e:	4604      	mov	r4, r0
 800d820:	460e      	mov	r6, r1
 800d822:	b0ba      	sub	sp, #232	; 0xe8
    mbedtls_sha512_init( &sha512 );
 800d824:	a804      	add	r0, sp, #16
 800d826:	f7fd fd63 	bl	800b2f0 <mbedtls_sha512_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );
 800d82a:	4d16      	ldr	r5, [pc, #88]	; (800d884 <ssl_calc_verify_tls_sha384+0x68>)
 800d82c:	4b16      	ldr	r3, [pc, #88]	; (800d888 <ssl_calc_verify_tls_sha384+0x6c>)
 800d82e:	462a      	mov	r2, r5
 800d830:	9300      	str	r3, [sp, #0]
 800d832:	4620      	mov	r0, r4
 800d834:	f240 43ca 	movw	r3, #1226	; 0x4ca
 800d838:	2102      	movs	r1, #2
 800d83a:	f7f8 fce9 	bl	8006210 <mbedtls_debug_print_msg>
    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 800d83e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d840:	a804      	add	r0, sp, #16
 800d842:	3178      	adds	r1, #120	; 0x78
 800d844:	f7fd fd5d 	bl	800b302 <mbedtls_sha512_clone>
    mbedtls_sha512_finish_ret( &sha512, hash );
 800d848:	4631      	mov	r1, r6
 800d84a:	a804      	add	r0, sp, #16
 800d84c:	f7fe fc8c 	bl	800c168 <mbedtls_sha512_finish_ret>
    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
 800d850:	2330      	movs	r3, #48	; 0x30
 800d852:	9302      	str	r3, [sp, #8]
 800d854:	4b0d      	ldr	r3, [pc, #52]	; (800d88c <ssl_calc_verify_tls_sha384+0x70>)
 800d856:	462a      	mov	r2, r5
 800d858:	9300      	str	r3, [sp, #0]
 800d85a:	4620      	mov	r0, r4
 800d85c:	9601      	str	r6, [sp, #4]
 800d85e:	f240 43cf 	movw	r3, #1231	; 0x4cf
 800d862:	2103      	movs	r1, #3
 800d864:	f7f8 fd32 	bl	80062cc <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
 800d868:	4b09      	ldr	r3, [pc, #36]	; (800d890 <ssl_calc_verify_tls_sha384+0x74>)
 800d86a:	462a      	mov	r2, r5
 800d86c:	9300      	str	r3, [sp, #0]
 800d86e:	2102      	movs	r1, #2
 800d870:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800d874:	4620      	mov	r0, r4
 800d876:	f7f8 fccb 	bl	8006210 <mbedtls_debug_print_msg>
    mbedtls_sha512_free( &sha512 );
 800d87a:	a804      	add	r0, sp, #16
 800d87c:	f7fd fd3c 	bl	800b2f8 <mbedtls_sha512_free>
}
 800d880:	b03a      	add	sp, #232	; 0xe8
 800d882:	bd70      	pop	{r4, r5, r6, pc}
 800d884:	08018828 	.word	0x08018828
 800d888:	080187ef 	.word	0x080187ef
 800d88c:	080187c7 	.word	0x080187c7
 800d890:	080187e0 	.word	0x080187e0

0800d894 <ssl_update_checksum_sha256>:
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 800d894:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d896:	3008      	adds	r0, #8
 800d898:	f7fd bc36 	b.w	800b108 <mbedtls_sha256_update_ret>

0800d89c <ssl_update_checksum_sha384>:
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 800d89c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d89e:	3078      	adds	r0, #120	; 0x78
 800d8a0:	f7fe bc16 	b.w	800c0d0 <mbedtls_sha512_update_ret>

0800d8a4 <ssl_update_checksum_start>:
{
 800d8a4:	b570      	push	{r4, r5, r6, lr}
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	460d      	mov	r5, r1
 800d8aa:	4616      	mov	r6, r2
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 800d8ac:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d8ae:	3008      	adds	r0, #8
 800d8b0:	f7fd fc2a 	bl	800b108 <mbedtls_sha256_update_ret>
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 800d8b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d8b6:	4632      	mov	r2, r6
 800d8b8:	4629      	mov	r1, r5
}
 800d8ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 800d8be:	3078      	adds	r0, #120	; 0x78
 800d8c0:	f7fe bc06 	b.w	800c0d0 <mbedtls_sha512_update_ret>

0800d8c4 <ssl_reset_in_out_pointers>:
        ssl->in_hdr  = ssl->in_buf;
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    {
        ssl->out_hdr = ssl->out_buf + 8;
 800d8c4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800d8c8:	b510      	push	{r4, lr}
        ssl->out_hdr = ssl->out_buf + 8;
 800d8ca:	3308      	adds	r3, #8
 800d8cc:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
        ssl->in_hdr  = ssl->in_buf  + 8;
 800d8d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
    }

    /* Derive other internal pointers. */
    ssl_update_out_pointers( ssl, NULL /* no transform enabled */ );
 800d8d2:	2100      	movs	r1, #0
        ssl->in_hdr  = ssl->in_buf  + 8;
 800d8d4:	3308      	adds	r3, #8
 800d8d6:	6583      	str	r3, [r0, #88]	; 0x58
    ssl_update_out_pointers( ssl, NULL /* no transform enabled */ );
 800d8d8:	f7ff fda4 	bl	800d424 <ssl_update_out_pointers>
        ssl->in_ctr = ssl->in_hdr - 8;
 800d8dc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800d8de:	f1a3 0208 	sub.w	r2, r3, #8
 800d8e2:	6542      	str	r2, [r0, #84]	; 0x54
        ssl->in_len = ssl->in_hdr + 3;
 800d8e4:	1cda      	adds	r2, r3, #3
        ssl->in_iv  = ssl->in_hdr + 5;
 800d8e6:	3305      	adds	r3, #5
        ssl->in_len = ssl->in_hdr + 3;
 800d8e8:	65c2      	str	r2, [r0, #92]	; 0x5c
        ssl->in_iv  = ssl->in_hdr + 5;
 800d8ea:	6603      	str	r3, [r0, #96]	; 0x60
        ssl->in_msg = ssl->in_iv;
 800d8ec:	6643      	str	r3, [r0, #100]	; 0x64
 800d8ee:	bd10      	pop	{r4, pc}

0800d8f0 <mbedtls_ssl_derive_keys>:
{
 800d8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_ssl_session *session = ssl->session_negotiate;
 800d8f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 800d8f6:	b0d9      	sub	sp, #356	; 0x164
    mbedtls_ssl_session *session = ssl->session_negotiate;
 800d8f8:	9306      	str	r3, [sp, #24]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 800d8fa:	4b6b      	ldr	r3, [pc, #428]	; (800daa8 <mbedtls_ssl_derive_keys+0x1b8>)
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 800d8fc:	6c04      	ldr	r4, [r0, #64]	; 0x40
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 800d8fe:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 800d902:	4a6a      	ldr	r2, [pc, #424]	; (800daac <mbedtls_ssl_derive_keys+0x1bc>)
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	2102      	movs	r1, #2
 800d908:	f44f 731d 	mov.w	r3, #628	; 0x274
{
 800d90c:	4606      	mov	r6, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 800d90e:	f7f8 fc7f 	bl	8006210 <mbedtls_debug_print_msg>
    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 800d912:	6823      	ldr	r3, [r4, #0]
 800d914:	7a18      	ldrb	r0, [r3, #8]
 800d916:	f7f8 f93d 	bl	8005b94 <mbedtls_cipher_info_from_type>
 800d91a:	6823      	ldr	r3, [r4, #0]
    if( cipher_info == NULL )
 800d91c:	4681      	mov	r9, r0
 800d91e:	b978      	cbnz	r0, 800d940 <mbedtls_ssl_derive_keys+0x50>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
 800d920:	7a1b      	ldrb	r3, [r3, #8]
 800d922:	9301      	str	r3, [sp, #4]
 800d924:	4b62      	ldr	r3, [pc, #392]	; (800dab0 <mbedtls_ssl_derive_keys+0x1c0>)
 800d926:	9300      	str	r3, [sp, #0]
 800d928:	f240 237a 	movw	r3, #634	; 0x27a
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 800d92c:	4a5f      	ldr	r2, [pc, #380]	; (800daac <mbedtls_ssl_derive_keys+0x1bc>)
 800d92e:	2101      	movs	r1, #1
 800d930:	4630      	mov	r0, r6
 800d932:	f7f8 fc6d 	bl	8006210 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800d936:	4d5f      	ldr	r5, [pc, #380]	; (800dab4 <mbedtls_ssl_derive_keys+0x1c4>)
}
 800d938:	4628      	mov	r0, r5
 800d93a:	b059      	add	sp, #356	; 0x164
 800d93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 800d940:	7a58      	ldrb	r0, [r3, #9]
 800d942:	f7fa f84d 	bl	80079e0 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 800d946:	4683      	mov	fp, r0
 800d948:	b938      	cbnz	r0, 800d95a <mbedtls_ssl_derive_keys+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 800d94a:	6823      	ldr	r3, [r4, #0]
 800d94c:	7a5b      	ldrb	r3, [r3, #9]
 800d94e:	9301      	str	r3, [sp, #4]
 800d950:	4b59      	ldr	r3, [pc, #356]	; (800dab8 <mbedtls_ssl_derive_keys+0x1c8>)
 800d952:	9300      	str	r3, [sp, #0]
 800d954:	f240 2382 	movw	r3, #642	; 0x282
 800d958:	e7e8      	b.n	800d92c <mbedtls_ssl_derive_keys+0x3c>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 800d95a:	68f3      	ldr	r3, [r6, #12]
 800d95c:	2b03      	cmp	r3, #3
 800d95e:	d147      	bne.n	800d9f0 <mbedtls_ssl_derive_keys+0x100>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 800d960:	6823      	ldr	r3, [r4, #0]
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 800d962:	7a5b      	ldrb	r3, [r3, #9]
 800d964:	2b07      	cmp	r3, #7
 800d966:	d13b      	bne.n	800d9e0 <mbedtls_ssl_derive_keys+0xf0>
        handshake->tls_prf = tls_prf_sha384;
 800d968:	4b54      	ldr	r3, [pc, #336]	; (800dabc <mbedtls_ssl_derive_keys+0x1cc>)
 800d96a:	f8c8 315c 	str.w	r3, [r8, #348]	; 0x15c
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
 800d96e:	4b54      	ldr	r3, [pc, #336]	; (800dac0 <mbedtls_ssl_derive_keys+0x1d0>)
 800d970:	f8c8 3154 	str.w	r3, [r8, #340]	; 0x154
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
 800d974:	4b53      	ldr	r3, [pc, #332]	; (800dac4 <mbedtls_ssl_derive_keys+0x1d4>)
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 800d976:	f8c8 3158 	str.w	r3, [r8, #344]	; 0x158
    if( handshake->resume == 0 )
 800d97a:	f8d8 31d4 	ldr.w	r3, [r8, #468]	; 0x1d4
 800d97e:	f508 77d2 	add.w	r7, r8, #420	; 0x1a4
 800d982:	2b00      	cmp	r3, #0
 800d984:	f040 8085 	bne.w	800da92 <mbedtls_ssl_derive_keys+0x1a2>
        MBEDTLS_SSL_DEBUG_BUF( 3, "premaster secret", handshake->premaster,
 800d988:	f8d8 3160 	ldr.w	r3, [r8, #352]	; 0x160
 800d98c:	4a47      	ldr	r2, [pc, #284]	; (800daac <mbedtls_ssl_derive_keys+0x1bc>)
 800d98e:	9302      	str	r3, [sp, #8]
 800d990:	4b4d      	ldr	r3, [pc, #308]	; (800dac8 <mbedtls_ssl_derive_keys+0x1d8>)
 800d992:	2103      	movs	r1, #3
 800d994:	9300      	str	r3, [sp, #0]
 800d996:	4630      	mov	r0, r6
 800d998:	f240 23c2 	movw	r3, #706	; 0x2c2
 800d99c:	9701      	str	r7, [sp, #4]
 800d99e:	f7f8 fc95 	bl	80062cc <mbedtls_debug_print_buf>
                                  session->master, 48 );
 800d9a2:	9b06      	ldr	r3, [sp, #24]
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 800d9a4:	f04f 0a30 	mov.w	sl, #48	; 0x30
                                  session->master, 48 );
 800d9a8:	332c      	adds	r3, #44	; 0x2c
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 800d9aa:	9301      	str	r3, [sp, #4]
 800d9ac:	2340      	movs	r3, #64	; 0x40
 800d9ae:	f8cd a008 	str.w	sl, [sp, #8]
 800d9b2:	9300      	str	r3, [sp, #0]
 800d9b4:	f8d8 515c 	ldr.w	r5, [r8, #348]	; 0x15c
 800d9b8:	f508 73b2 	add.w	r3, r8, #356	; 0x164
 800d9bc:	4a43      	ldr	r2, [pc, #268]	; (800dacc <mbedtls_ssl_derive_keys+0x1dc>)
 800d9be:	f8d8 1160 	ldr.w	r1, [r8, #352]	; 0x160
 800d9c2:	4638      	mov	r0, r7
 800d9c4:	47a8      	blx	r5
        if( ret != 0 )
 800d9c6:	4605      	mov	r5, r0
 800d9c8:	b1e8      	cbz	r0, 800da06 <mbedtls_ssl_derive_keys+0x116>
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 800d9ca:	4b41      	ldr	r3, [pc, #260]	; (800dad0 <mbedtls_ssl_derive_keys+0x1e0>)
 800d9cc:	9001      	str	r0, [sp, #4]
 800d9ce:	9300      	str	r3, [sp, #0]
 800d9d0:	f44f 733d 	mov.w	r3, #756	; 0x2f4
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 800d9d4:	4a35      	ldr	r2, [pc, #212]	; (800daac <mbedtls_ssl_derive_keys+0x1bc>)
 800d9d6:	2101      	movs	r1, #1
 800d9d8:	4630      	mov	r0, r6
 800d9da:	f7f8 fc49 	bl	8006270 <mbedtls_debug_print_ret>
        return( ret );
 800d9de:	e7ab      	b.n	800d938 <mbedtls_ssl_derive_keys+0x48>
        handshake->tls_prf = tls_prf_sha256;
 800d9e0:	4b3c      	ldr	r3, [pc, #240]	; (800dad4 <mbedtls_ssl_derive_keys+0x1e4>)
 800d9e2:	f8c8 315c 	str.w	r3, [r8, #348]	; 0x15c
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 800d9e6:	4b3c      	ldr	r3, [pc, #240]	; (800dad8 <mbedtls_ssl_derive_keys+0x1e8>)
 800d9e8:	f8c8 3154 	str.w	r3, [r8, #340]	; 0x154
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 800d9ec:	4b3b      	ldr	r3, [pc, #236]	; (800dadc <mbedtls_ssl_derive_keys+0x1ec>)
 800d9ee:	e7c2      	b.n	800d976 <mbedtls_ssl_derive_keys+0x86>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800d9f0:	4b3b      	ldr	r3, [pc, #236]	; (800dae0 <mbedtls_ssl_derive_keys+0x1f0>)
 800d9f2:	9300      	str	r3, [sp, #0]
 800d9f4:	f240 23b1 	movw	r3, #689	; 0x2b1
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800d9f8:	4a2c      	ldr	r2, [pc, #176]	; (800daac <mbedtls_ssl_derive_keys+0x1bc>)
 800d9fa:	2101      	movs	r1, #1
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	f7f8 fc07 	bl	8006210 <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800da02:	4d38      	ldr	r5, [pc, #224]	; (800dae4 <mbedtls_ssl_derive_keys+0x1f4>)
 800da04:	e798      	b.n	800d938 <mbedtls_ssl_derive_keys+0x48>
        mbedtls_platform_zeroize( handshake->premaster,
 800da06:	4651      	mov	r1, sl
 800da08:	4638      	mov	r0, r7
 800da0a:	f7fa fd89 	bl	8008520 <mbedtls_platform_zeroize>
    memcpy( tmp, handshake->randbytes, 64 );
 800da0e:	f508 73b2 	add.w	r3, r8, #356	; 0x164
 800da12:	469a      	mov	sl, r3
 800da14:	ad08      	add	r5, sp, #32
 800da16:	462a      	mov	r2, r5
 800da18:	6818      	ldr	r0, [r3, #0]
 800da1a:	6859      	ldr	r1, [r3, #4]
 800da1c:	3308      	adds	r3, #8
 800da1e:	c203      	stmia	r2!, {r0, r1}
 800da20:	42bb      	cmp	r3, r7
 800da22:	4615      	mov	r5, r2
 800da24:	d1f7      	bne.n	800da16 <mbedtls_ssl_derive_keys+0x126>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 800da26:	4652      	mov	r2, sl
 800da28:	ad10      	add	r5, sp, #64	; 0x40
 800da2a:	af18      	add	r7, sp, #96	; 0x60
 800da2c:	462b      	mov	r3, r5
 800da2e:	cb03      	ldmia	r3!, {r0, r1}
 800da30:	42bb      	cmp	r3, r7
 800da32:	6010      	str	r0, [r2, #0]
 800da34:	6051      	str	r1, [r2, #4]
 800da36:	461d      	mov	r5, r3
 800da38:	f102 0208 	add.w	r2, r2, #8
 800da3c:	d1f6      	bne.n	800da2c <mbedtls_ssl_derive_keys+0x13c>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 800da3e:	ad08      	add	r5, sp, #32
 800da40:	f508 72c2 	add.w	r2, r8, #388	; 0x184
 800da44:	af10      	add	r7, sp, #64	; 0x40
 800da46:	462b      	mov	r3, r5
 800da48:	cb03      	ldmia	r3!, {r0, r1}
 800da4a:	42bb      	cmp	r3, r7
 800da4c:	6010      	str	r0, [r2, #0]
 800da4e:	6051      	str	r1, [r2, #4]
 800da50:	461d      	mov	r5, r3
 800da52:	f102 0208 	add.w	r2, r2, #8
 800da56:	d1f6      	bne.n	800da46 <mbedtls_ssl_derive_keys+0x156>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 800da58:	2140      	movs	r1, #64	; 0x40
 800da5a:	a808      	add	r0, sp, #32
 800da5c:	f7fa fd60 	bl	8008520 <mbedtls_platform_zeroize>
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 800da60:	9b06      	ldr	r3, [sp, #24]
 800da62:	2740      	movs	r7, #64	; 0x40
 800da64:	332c      	adds	r3, #44	; 0x2c
 800da66:	9307      	str	r3, [sp, #28]
 800da68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da6c:	9302      	str	r3, [sp, #8]
 800da6e:	ab18      	add	r3, sp, #96	; 0x60
 800da70:	9301      	str	r3, [sp, #4]
 800da72:	9700      	str	r7, [sp, #0]
 800da74:	f8d8 515c 	ldr.w	r5, [r8, #348]	; 0x15c
 800da78:	4653      	mov	r3, sl
 800da7a:	4a1b      	ldr	r2, [pc, #108]	; (800dae8 <mbedtls_ssl_derive_keys+0x1f8>)
 800da7c:	2130      	movs	r1, #48	; 0x30
 800da7e:	9807      	ldr	r0, [sp, #28]
 800da80:	47a8      	blx	r5
    if( ret != 0 )
 800da82:	4605      	mov	r5, r0
 800da84:	b3a0      	cbz	r0, 800daf0 <mbedtls_ssl_derive_keys+0x200>
        MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 800da86:	4b12      	ldr	r3, [pc, #72]	; (800dad0 <mbedtls_ssl_derive_keys+0x1e0>)
 800da88:	9001      	str	r0, [sp, #4]
 800da8a:	9300      	str	r3, [sp, #0]
 800da8c:	f240 3316 	movw	r3, #790	; 0x316
 800da90:	e7a0      	b.n	800d9d4 <mbedtls_ssl_derive_keys+0xe4>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );
 800da92:	4b16      	ldr	r3, [pc, #88]	; (800daec <mbedtls_ssl_derive_keys+0x1fc>)
 800da94:	4a05      	ldr	r2, [pc, #20]	; (800daac <mbedtls_ssl_derive_keys+0x1bc>)
 800da96:	9300      	str	r3, [sp, #0]
 800da98:	2103      	movs	r1, #3
 800da9a:	f44f 733f 	mov.w	r3, #764	; 0x2fc
 800da9e:	4630      	mov	r0, r6
 800daa0:	f7f8 fbb6 	bl	8006210 <mbedtls_debug_print_msg>
 800daa4:	e7b3      	b.n	800da0e <mbedtls_ssl_derive_keys+0x11e>
 800daa6:	bf00      	nop
 800daa8:	080178af 	.word	0x080178af
 800daac:	08018828 	.word	0x08018828
 800dab0:	080178be 	.word	0x080178be
 800dab4:	ffff8f00 	.word	0xffff8f00
 800dab8:	080178db 	.word	0x080178db
 800dabc:	0800d71d 	.word	0x0800d71d
 800dac0:	0800d81d 	.word	0x0800d81d
 800dac4:	0800d73d 	.word	0x0800d73d
 800dac8:	080178fc 	.word	0x080178fc
 800dacc:	080178ff 	.word	0x080178ff
 800dad0:	0801790d 	.word	0x0801790d
 800dad4:	0800d6fd 	.word	0x0800d6fd
 800dad8:	0800d565 	.word	0x0800d565
 800dadc:	0800d48d 	.word	0x0800d48d
 800dae0:	08017544 	.word	0x08017544
 800dae4:	ffff9400 	.word	0xffff9400
 800dae8:	08017930 	.word	0x08017930
 800daec:	08017911 	.word	0x08017911
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite = %s",
 800daf0:	9b06      	ldr	r3, [sp, #24]
 800daf2:	6818      	ldr	r0, [r3, #0]
 800daf4:	f7fe fc9e 	bl	800c434 <mbedtls_ssl_get_ciphersuite_name>
 800daf8:	4ba8      	ldr	r3, [pc, #672]	; (800dd9c <mbedtls_ssl_derive_keys+0x4ac>)
 800dafa:	9001      	str	r0, [sp, #4]
 800dafc:	9300      	str	r3, [sp, #0]
 800dafe:	4aa8      	ldr	r2, [pc, #672]	; (800dda0 <mbedtls_ssl_derive_keys+0x4b0>)
 800db00:	f240 331b 	movw	r3, #795	; 0x31b
 800db04:	2103      	movs	r1, #3
 800db06:	4630      	mov	r0, r6
 800db08:	f7f8 fb82 	bl	8006210 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
 800db0c:	2330      	movs	r3, #48	; 0x30
 800db0e:	9302      	str	r3, [sp, #8]
 800db10:	9b07      	ldr	r3, [sp, #28]
 800db12:	4aa3      	ldr	r2, [pc, #652]	; (800dda0 <mbedtls_ssl_derive_keys+0x4b0>)
 800db14:	9301      	str	r3, [sp, #4]
 800db16:	4ba3      	ldr	r3, [pc, #652]	; (800dda4 <mbedtls_ssl_derive_keys+0x4b4>)
 800db18:	2103      	movs	r1, #3
 800db1a:	9300      	str	r3, [sp, #0]
 800db1c:	4630      	mov	r0, r6
 800db1e:	f44f 7347 	mov.w	r3, #796	; 0x31c
 800db22:	f7f8 fbd3 	bl	80062cc <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
 800db26:	4ba0      	ldr	r3, [pc, #640]	; (800dda8 <mbedtls_ssl_derive_keys+0x4b8>)
 800db28:	4a9d      	ldr	r2, [pc, #628]	; (800dda0 <mbedtls_ssl_derive_keys+0x4b0>)
 800db2a:	9300      	str	r3, [sp, #0]
 800db2c:	2104      	movs	r1, #4
 800db2e:	f240 331d 	movw	r3, #797	; 0x31d
 800db32:	4630      	mov	r0, r6
 800db34:	9702      	str	r7, [sp, #8]
 800db36:	f8cd a004 	str.w	sl, [sp, #4]
 800db3a:	f7f8 fbc7 	bl	80062cc <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );
 800db3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db42:	9302      	str	r3, [sp, #8]
 800db44:	ab18      	add	r3, sp, #96	; 0x60
 800db46:	9301      	str	r3, [sp, #4]
 800db48:	4b98      	ldr	r3, [pc, #608]	; (800ddac <mbedtls_ssl_derive_keys+0x4bc>)
 800db4a:	4a95      	ldr	r2, [pc, #596]	; (800dda0 <mbedtls_ssl_derive_keys+0x4b0>)
 800db4c:	9300      	str	r3, [sp, #0]
 800db4e:	2104      	movs	r1, #4
 800db50:	f240 331e 	movw	r3, #798	; 0x31e
 800db54:	4630      	mov	r0, r6
 800db56:	f7f8 fbb9 	bl	80062cc <mbedtls_debug_print_buf>
    mbedtls_platform_zeroize( handshake->randbytes,
 800db5a:	4639      	mov	r1, r7
 800db5c:	4650      	mov	r0, sl
 800db5e:	f7fa fcdf 	bl	8008520 <mbedtls_platform_zeroize>
    transform->keylen = cipher_info->key_bitlen / 8;
 800db62:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800db66:	08db      	lsrs	r3, r3, #3
 800db68:	6063      	str	r3, [r4, #4]
    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 800db6a:	f899 3001 	ldrb.w	r3, [r9, #1]
 800db6e:	2b06      	cmp	r3, #6
 800db70:	d003      	beq.n	800db7a <mbedtls_ssl_derive_keys+0x28a>
 800db72:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800db76:	2a08      	cmp	r2, #8
 800db78:	d154      	bne.n	800dc24 <mbedtls_ssl_derive_keys+0x334>
        transform->maclen = 0;
 800db7a:	2200      	movs	r2, #0
        if( cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
 800db7c:	2b0a      	cmp	r3, #10
            transform->fixed_ivlen = 4;
 800db7e:	bf18      	it	ne
 800db80:	2304      	movne	r3, #4
        transform->maclen = 0;
 800db82:	6162      	str	r2, [r4, #20]
        transform->ivlen = 12;
 800db84:	f04f 020c 	mov.w	r2, #12
            transform->fixed_ivlen = 4;
 800db88:	bf18      	it	ne
 800db8a:	6123      	strne	r3, [r4, #16]
        taglen = transform->ciphersuite_info->flags &
 800db8c:	6823      	ldr	r3, [r4, #0]
            transform->fixed_ivlen = 12;
 800db8e:	bf08      	it	eq
 800db90:	6122      	streq	r2, [r4, #16]
        transform->ivlen = 12;
 800db92:	60e2      	str	r2, [r4, #12]
                  MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 800db94:	7f1b      	ldrb	r3, [r3, #28]
        mac_key_len = 0;
 800db96:	2500      	movs	r5, #0
                  MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 800db98:	f013 0f02 	tst.w	r3, #2
 800db9c:	bf14      	ite	ne
 800db9e:	2208      	movne	r2, #8
 800dba0:	2210      	moveq	r2, #16
        explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
 800dba2:	6923      	ldr	r3, [r4, #16]
 800dba4:	f1c3 030c 	rsb	r3, r3, #12
        transform->minlen = explicit_ivlen + taglen;
 800dba8:	4413      	add	r3, r2
 800dbaa:	60a3      	str	r3, [r4, #8]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "keylen: %d, minlen: %d, ivlen: %d, maclen: %d",
 800dbac:	6963      	ldr	r3, [r4, #20]
 800dbae:	4a7c      	ldr	r2, [pc, #496]	; (800dda0 <mbedtls_ssl_derive_keys+0x4b0>)
 800dbb0:	9304      	str	r3, [sp, #16]
 800dbb2:	68e3      	ldr	r3, [r4, #12]
 800dbb4:	2103      	movs	r1, #3
 800dbb6:	9303      	str	r3, [sp, #12]
 800dbb8:	68a3      	ldr	r3, [r4, #8]
 800dbba:	4630      	mov	r0, r6
 800dbbc:	9302      	str	r3, [sp, #8]
 800dbbe:	6863      	ldr	r3, [r4, #4]
 800dbc0:	9301      	str	r3, [sp, #4]
 800dbc2:	4b7b      	ldr	r3, [pc, #492]	; (800ddb0 <mbedtls_ssl_derive_keys+0x4c0>)
 800dbc4:	9300      	str	r3, [sp, #0]
 800dbc6:	f240 3399 	movw	r3, #921	; 0x399
 800dbca:	f7f8 fb21 	bl	8006210 <mbedtls_debug_print_msg>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 800dbce:	6833      	ldr	r3, [r6, #0]
 800dbd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dbd4:	07db      	lsls	r3, r3, #31
 800dbd6:	d45c      	bmi.n	800dc92 <mbedtls_ssl_derive_keys+0x3a2>
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 800dbd8:	f8d4 8004 	ldr.w	r8, [r4, #4]
        key1 = keyblk + mac_key_len * 2;
 800dbdc:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        iv_copy_len = ( transform->fixed_ivlen ) ?
 800dbe0:	f8d4 b010 	ldr.w	fp, [r4, #16]
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 800dbe4:	eb0a 0708 	add.w	r7, sl, r8
 800dbe8:	ab18      	add	r3, sp, #96	; 0x60
 800dbea:	441f      	add	r7, r3
                            transform->fixed_ivlen : transform->ivlen;
 800dbec:	f1bb 0f00 	cmp.w	fp, #0
 800dbf0:	d101      	bne.n	800dbf6 <mbedtls_ssl_derive_keys+0x306>
 800dbf2:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 800dbf6:	465a      	mov	r2, fp
 800dbf8:	eb07 0108 	add.w	r1, r7, r8
 800dbfc:	f104 0018 	add.w	r0, r4, #24
 800dc00:	f004 f8dd 	bl	8011dbe <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
 800dc04:	eb0b 0108 	add.w	r1, fp, r8
 800dc08:	465a      	mov	r2, fp
 800dc0a:	4439      	add	r1, r7
 800dc0c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800dc10:	f004 f8d5 	bl	8011dbe <memcpy>
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 800dc14:	68f3      	ldr	r3, [r6, #12]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	dc40      	bgt.n	800dc9c <mbedtls_ssl_derive_keys+0x3ac>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800dc1a:	4b66      	ldr	r3, [pc, #408]	; (800ddb4 <mbedtls_ssl_derive_keys+0x4c4>)
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dc22:	e6e9      	b.n	800d9f8 <mbedtls_ssl_derive_keys+0x108>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 800dc24:	2201      	movs	r2, #1
 800dc26:	4659      	mov	r1, fp
 800dc28:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800dc2c:	f7f9 ff04 	bl	8007a38 <mbedtls_md_setup>
 800dc30:	4605      	mov	r5, r0
 800dc32:	b938      	cbnz	r0, 800dc44 <mbedtls_ssl_derive_keys+0x354>
 800dc34:	2201      	movs	r2, #1
 800dc36:	4659      	mov	r1, fp
 800dc38:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800dc3c:	f7f9 fefc 	bl	8007a38 <mbedtls_md_setup>
 800dc40:	4605      	mov	r5, r0
 800dc42:	b128      	cbz	r0, 800dc50 <mbedtls_ssl_derive_keys+0x360>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
 800dc44:	4b5c      	ldr	r3, [pc, #368]	; (800ddb8 <mbedtls_ssl_derive_keys+0x4c8>)
 800dc46:	9501      	str	r5, [sp, #4]
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	f240 334b 	movw	r3, #843	; 0x34b
 800dc4e:	e6c1      	b.n	800d9d4 <mbedtls_ssl_derive_keys+0xe4>
        mac_key_len = mbedtls_md_get_size( md_info );
 800dc50:	4658      	mov	r0, fp
 800dc52:	f7f9 ffe9 	bl	8007c28 <mbedtls_md_get_size>
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 800dc56:	f899 3001 	ldrb.w	r3, [r9, #1]
        transform->ivlen = cipher_info->iv_size;
 800dc5a:	f8d9 200c 	ldr.w	r2, [r9, #12]
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 800dc5e:	2b07      	cmp	r3, #7
        mac_key_len = mbedtls_md_get_size( md_info );
 800dc60:	4605      	mov	r5, r0
        transform->maclen = mac_key_len;
 800dc62:	6160      	str	r0, [r4, #20]
        transform->ivlen = cipher_info->iv_size;
 800dc64:	60e2      	str	r2, [r4, #12]
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 800dc66:	d101      	bne.n	800dc6c <mbedtls_ssl_derive_keys+0x37c>
            transform->minlen = transform->maclen;
 800dc68:	60a0      	str	r0, [r4, #8]
 800dc6a:	e79f      	b.n	800dbac <mbedtls_ssl_derive_keys+0x2bc>
                                  + cipher_info->block_size
 800dc6c:	f8d9 3014 	ldr.w	r3, [r9, #20]
                                  - transform->maclen % cipher_info->block_size;
 800dc70:	fbb0 f1f3 	udiv	r1, r0, r3
 800dc74:	fb03 3301 	mla	r3, r3, r1, r3
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 800dc78:	68f1      	ldr	r1, [r6, #12]
                transform->minlen = transform->maclen
 800dc7a:	60a3      	str	r3, [r4, #8]
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 800dc7c:	3902      	subs	r1, #2
 800dc7e:	2901      	cmp	r1, #1
 800dc80:	d802      	bhi.n	800dc88 <mbedtls_ssl_derive_keys+0x398>
                transform->minlen += transform->ivlen;
 800dc82:	4413      	add	r3, r2
 800dc84:	60a3      	str	r3, [r4, #8]
 800dc86:	e791      	b.n	800dbac <mbedtls_ssl_derive_keys+0x2bc>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800dc88:	4b4a      	ldr	r3, [pc, #296]	; (800ddb4 <mbedtls_ssl_derive_keys+0x4c4>)
 800dc8a:	9300      	str	r3, [sp, #0]
 800dc8c:	f240 3391 	movw	r3, #913	; 0x391
 800dc90:	e6b2      	b.n	800d9f8 <mbedtls_ssl_derive_keys+0x108>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800dc92:	4b48      	ldr	r3, [pc, #288]	; (800ddb4 <mbedtls_ssl_derive_keys+0x4c4>)
 800dc94:	9300      	str	r3, [sp, #0]
 800dc96:	f240 33c7 	movw	r3, #967	; 0x3c7
 800dc9a:	e6ad      	b.n	800d9f8 <mbedtls_ssl_derive_keys+0x108>
        if( mac_key_len != 0 )
 800dc9c:	b165      	cbz	r5, 800dcb8 <mbedtls_ssl_derive_keys+0x3c8>
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
 800dc9e:	462a      	mov	r2, r5
 800dca0:	a918      	add	r1, sp, #96	; 0x60
 800dca2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800dca6:	f7f9 fef7 	bl	8007a98 <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
 800dcaa:	ab18      	add	r3, sp, #96	; 0x60
 800dcac:	462a      	mov	r2, r5
 800dcae:	1959      	adds	r1, r3, r5
 800dcb0:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800dcb4:	f7f9 fef0 	bl	8007a98 <mbedtls_md_hmac_starts>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 800dcb8:	f104 0850 	add.w	r8, r4, #80	; 0x50
 800dcbc:	4649      	mov	r1, r9
 800dcbe:	4640      	mov	r0, r8
 800dcc0:	f7f8 f91a 	bl	8005ef8 <mbedtls_cipher_setup>
 800dcc4:	4605      	mov	r5, r0
 800dcc6:	b128      	cbz	r0, 800dcd4 <mbedtls_ssl_derive_keys+0x3e4>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 800dcc8:	4b3c      	ldr	r3, [pc, #240]	; (800ddbc <mbedtls_ssl_derive_keys+0x4cc>)
 800dcca:	9001      	str	r0, [sp, #4]
 800dccc:	9300      	str	r3, [sp, #0]
 800dcce:	f240 430c 	movw	r3, #1036	; 0x40c
 800dcd2:	e67f      	b.n	800d9d4 <mbedtls_ssl_derive_keys+0xe4>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 800dcd4:	3490      	adds	r4, #144	; 0x90
 800dcd6:	4649      	mov	r1, r9
 800dcd8:	4620      	mov	r0, r4
 800dcda:	f7f8 f90d 	bl	8005ef8 <mbedtls_cipher_setup>
 800dcde:	4605      	mov	r5, r0
 800dce0:	b128      	cbz	r0, 800dcee <mbedtls_ssl_derive_keys+0x3fe>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 800dce2:	4b36      	ldr	r3, [pc, #216]	; (800ddbc <mbedtls_ssl_derive_keys+0x4cc>)
 800dce4:	9001      	str	r0, [sp, #4]
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	f240 4313 	movw	r3, #1043	; 0x413
 800dcec:	e672      	b.n	800d9d4 <mbedtls_ssl_derive_keys+0xe4>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 800dcee:	a918      	add	r1, sp, #96	; 0x60
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800dcf6:	4451      	add	r1, sl
 800dcf8:	4640      	mov	r0, r8
 800dcfa:	f7f7 ff81 	bl	8005c00 <mbedtls_cipher_setkey>
 800dcfe:	4605      	mov	r5, r0
 800dd00:	b128      	cbz	r0, 800dd0e <mbedtls_ssl_derive_keys+0x41e>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 800dd02:	4b2f      	ldr	r3, [pc, #188]	; (800ddc0 <mbedtls_ssl_derive_keys+0x4d0>)
 800dd04:	9001      	str	r0, [sp, #4]
 800dd06:	9300      	str	r3, [sp, #0]
 800dd08:	f240 431b 	movw	r3, #1051	; 0x41b
 800dd0c:	e662      	b.n	800d9d4 <mbedtls_ssl_derive_keys+0xe4>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 800dd0e:	4603      	mov	r3, r0
 800dd10:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800dd14:	4639      	mov	r1, r7
 800dd16:	4620      	mov	r0, r4
 800dd18:	f7f7 ff72 	bl	8005c00 <mbedtls_cipher_setkey>
 800dd1c:	4605      	mov	r5, r0
 800dd1e:	b128      	cbz	r0, 800dd2c <mbedtls_ssl_derive_keys+0x43c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 800dd20:	4b27      	ldr	r3, [pc, #156]	; (800ddc0 <mbedtls_ssl_derive_keys+0x4d0>)
 800dd22:	9001      	str	r0, [sp, #4]
 800dd24:	9300      	str	r3, [sp, #0]
 800dd26:	f240 4323 	movw	r3, #1059	; 0x423
 800dd2a:	e653      	b.n	800d9d4 <mbedtls_ssl_derive_keys+0xe4>
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 800dd2c:	f899 3001 	ldrb.w	r3, [r9, #1]
 800dd30:	2b02      	cmp	r3, #2
 800dd32:	d123      	bne.n	800dd7c <mbedtls_ssl_derive_keys+0x48c>
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 800dd34:	2104      	movs	r1, #4
 800dd36:	4640      	mov	r0, r8
 800dd38:	f7f8 f8c6 	bl	8005ec8 <mbedtls_cipher_set_padding_mode>
 800dd3c:	4607      	mov	r7, r0
 800dd3e:	b158      	cbz	r0, 800dd58 <mbedtls_ssl_derive_keys+0x468>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 800dd40:	4b20      	ldr	r3, [pc, #128]	; (800ddc4 <mbedtls_ssl_derive_keys+0x4d4>)
 800dd42:	9001      	str	r0, [sp, #4]
 800dd44:	9300      	str	r3, [sp, #0]
 800dd46:	4a16      	ldr	r2, [pc, #88]	; (800dda0 <mbedtls_ssl_derive_keys+0x4b0>)
 800dd48:	f240 432d 	movw	r3, #1069	; 0x42d
 800dd4c:	2101      	movs	r1, #1
 800dd4e:	4630      	mov	r0, r6
 800dd50:	f7f8 fa8e 	bl	8006270 <mbedtls_debug_print_ret>
            return( ret );
 800dd54:	463d      	mov	r5, r7
 800dd56:	e5ef      	b.n	800d938 <mbedtls_ssl_derive_keys+0x48>
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 800dd58:	4620      	mov	r0, r4
 800dd5a:	2104      	movs	r1, #4
 800dd5c:	f7f8 f8b4 	bl	8005ec8 <mbedtls_cipher_set_padding_mode>
 800dd60:	4604      	mov	r4, r0
 800dd62:	b158      	cbz	r0, 800dd7c <mbedtls_ssl_derive_keys+0x48c>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 800dd64:	4b17      	ldr	r3, [pc, #92]	; (800ddc4 <mbedtls_ssl_derive_keys+0x4d4>)
 800dd66:	9001      	str	r0, [sp, #4]
 800dd68:	9300      	str	r3, [sp, #0]
 800dd6a:	4a0d      	ldr	r2, [pc, #52]	; (800dda0 <mbedtls_ssl_derive_keys+0x4b0>)
 800dd6c:	f240 4334 	movw	r3, #1076	; 0x434
 800dd70:	2101      	movs	r1, #1
 800dd72:	4630      	mov	r0, r6
 800dd74:	f7f8 fa7c 	bl	8006270 <mbedtls_debug_print_ret>
            return( ret );
 800dd78:	4625      	mov	r5, r4
 800dd7a:	e5dd      	b.n	800d938 <mbedtls_ssl_derive_keys+0x48>
    mbedtls_platform_zeroize( keyblk, sizeof( keyblk ) );
 800dd7c:	a818      	add	r0, sp, #96	; 0x60
 800dd7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dd82:	f7fa fbcd 	bl	8008520 <mbedtls_platform_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );
 800dd86:	4b10      	ldr	r3, [pc, #64]	; (800ddc8 <mbedtls_ssl_derive_keys+0x4d8>)
 800dd88:	4a05      	ldr	r2, [pc, #20]	; (800dda0 <mbedtls_ssl_derive_keys+0x4b0>)
 800dd8a:	9300      	str	r3, [sp, #0]
 800dd8c:	2102      	movs	r1, #2
 800dd8e:	f240 435c 	movw	r3, #1116	; 0x45c
 800dd92:	4630      	mov	r0, r6
 800dd94:	f7f8 fa3c 	bl	8006210 <mbedtls_debug_print_msg>
    return( 0 );
 800dd98:	e5ce      	b.n	800d938 <mbedtls_ssl_derive_keys+0x48>
 800dd9a:	bf00      	nop
 800dd9c:	0801793e 	.word	0x0801793e
 800dda0:	08018828 	.word	0x08018828
 800dda4:	080178ff 	.word	0x080178ff
 800dda8:	080172fa 	.word	0x080172fa
 800ddac:	0801794f 	.word	0x0801794f
 800ddb0:	0801796a 	.word	0x0801796a
 800ddb4:	08017544 	.word	0x08017544
 800ddb8:	08017959 	.word	0x08017959
 800ddbc:	08017998 	.word	0x08017998
 800ddc0:	080179ad 	.word	0x080179ad
 800ddc4:	080179c3 	.word	0x080179c3
 800ddc8:	080179e3 	.word	0x080179e3

0800ddcc <mbedtls_ssl_fetch_input>:
{
 800ddcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd0:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 800ddd2:	4b4e      	ldr	r3, [pc, #312]	; (800df0c <mbedtls_ssl_fetch_input+0x140>)
{
 800ddd4:	b085      	sub	sp, #20
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 800ddd6:	9300      	str	r3, [sp, #0]
{
 800ddd8:	460f      	mov	r7, r1
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 800ddda:	f640 13e8 	movw	r3, #2536	; 0x9e8
 800ddde:	4a4c      	ldr	r2, [pc, #304]	; (800df10 <mbedtls_ssl_fetch_input+0x144>)
 800dde0:	2102      	movs	r1, #2
 800dde2:	f7f8 fa15 	bl	8006210 <mbedtls_debug_print_msg>
    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 800dde6:	6963      	ldr	r3, [r4, #20]
 800dde8:	b97b      	cbnz	r3, 800de0a <mbedtls_ssl_fetch_input+0x3e>
 800ddea:	69a3      	ldr	r3, [r4, #24]
 800ddec:	b96b      	cbnz	r3, 800de0a <mbedtls_ssl_fetch_input+0x3e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 800ddee:	4b49      	ldr	r3, [pc, #292]	; (800df14 <mbedtls_ssl_fetch_input+0x148>)
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	f640 13ed 	movw	r3, #2541	; 0x9ed
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 800ddf6:	4a46      	ldr	r2, [pc, #280]	; (800df10 <mbedtls_ssl_fetch_input+0x144>)
 800ddf8:	2101      	movs	r1, #1
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	f7f8 fa08 	bl	8006210 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800de00:	4d45      	ldr	r5, [pc, #276]	; (800df18 <mbedtls_ssl_fetch_input+0x14c>)
}
 800de02:	4628      	mov	r0, r5
 800de04:	b005      	add	sp, #20
 800de06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( nb_want > MBEDTLS_SSL_IN_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 800de0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de0c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800de0e:	1a9b      	subs	r3, r3, r2
 800de10:	f5c3 538a 	rsb	r3, r3, #4416	; 0x1140
 800de14:	330d      	adds	r3, #13
 800de16:	42bb      	cmp	r3, r7
 800de18:	d204      	bcs.n	800de24 <mbedtls_ssl_fetch_input+0x58>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 800de1a:	4b40      	ldr	r3, [pc, #256]	; (800df1c <mbedtls_ssl_fetch_input+0x150>)
 800de1c:	9300      	str	r3, [sp, #0]
 800de1e:	f640 13f3 	movw	r3, #2547	; 0x9f3
 800de22:	e7e8      	b.n	800ddf6 <mbedtls_ssl_fetch_input+0x2a>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 800de24:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800de26:	4d3e      	ldr	r5, [pc, #248]	; (800df20 <mbedtls_ssl_fetch_input+0x154>)
 800de28:	9301      	str	r3, [sp, #4]
 800de2a:	9702      	str	r7, [sp, #8]
 800de2c:	9500      	str	r5, [sp, #0]
 800de2e:	f640 2389 	movw	r3, #2697	; 0xa89
 800de32:	4a37      	ldr	r2, [pc, #220]	; (800df10 <mbedtls_ssl_fetch_input+0x144>)
 800de34:	2102      	movs	r1, #2
 800de36:	4620      	mov	r0, r4
 800de38:	f7f8 f9ea 	bl	8006210 <mbedtls_debug_print_msg>
 800de3c:	46a8      	mov	r8, r5
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 800de3e:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 800df38 <mbedtls_ssl_fetch_input+0x16c>
 800de42:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800df10 <mbedtls_ssl_fetch_input+0x144>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 800de46:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 800df3c <mbedtls_ssl_fetch_input+0x170>
        while( ssl->in_left < nb_want )
 800de4a:	6f66      	ldr	r6, [r4, #116]	; 0x74
 800de4c:	42b7      	cmp	r7, r6
 800de4e:	d80a      	bhi.n	800de66 <mbedtls_ssl_fetch_input+0x9a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );
 800de50:	4b34      	ldr	r3, [pc, #208]	; (800df24 <mbedtls_ssl_fetch_input+0x158>)
 800de52:	4a2f      	ldr	r2, [pc, #188]	; (800df10 <mbedtls_ssl_fetch_input+0x144>)
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	2102      	movs	r1, #2
 800de58:	f640 23b6 	movw	r3, #2742	; 0xab6
 800de5c:	4620      	mov	r0, r4
 800de5e:	f7f8 f9d7 	bl	8006210 <mbedtls_debug_print_msg>
    return( 0 );
 800de62:	2500      	movs	r5, #0
 800de64:	e7cd      	b.n	800de02 <mbedtls_ssl_fetch_input+0x36>
    if( ssl->f_get_timer == NULL )
 800de66:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            len = nb_want - ssl->in_left;
 800de68:	1bbe      	subs	r6, r7, r6
    if( ssl->f_get_timer == NULL )
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d042      	beq.n	800def4 <mbedtls_ssl_fetch_input+0x128>
    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 800de6e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800de70:	4798      	blx	r3
 800de72:	2802      	cmp	r0, #2
 800de74:	d13e      	bne.n	800def4 <mbedtls_ssl_fetch_input+0x128>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 800de76:	f8cd a000 	str.w	sl, [sp]
 800de7a:	235f      	movs	r3, #95	; 0x5f
 800de7c:	464a      	mov	r2, r9
 800de7e:	2103      	movs	r1, #3
 800de80:	4620      	mov	r0, r4
 800de82:	f7f8 f9c5 	bl	8006210 <mbedtls_debug_print_msg>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 800de86:	465d      	mov	r5, fp
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 800de88:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800de8a:	464a      	mov	r2, r9
 800de8c:	9301      	str	r3, [sp, #4]
 800de8e:	2102      	movs	r1, #2
 800de90:	f640 23a1 	movw	r3, #2721	; 0xaa1
 800de94:	4620      	mov	r0, r4
 800de96:	9702      	str	r7, [sp, #8]
 800de98:	f8cd 8000 	str.w	r8, [sp]
 800de9c:	f7f8 f9b8 	bl	8006210 <mbedtls_debug_print_msg>
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
 800dea0:	4b21      	ldr	r3, [pc, #132]	; (800df28 <mbedtls_ssl_fetch_input+0x15c>)
 800dea2:	9501      	str	r5, [sp, #4]
 800dea4:	9300      	str	r3, [sp, #0]
 800dea6:	464a      	mov	r2, r9
 800dea8:	f640 23a2 	movw	r3, #2722	; 0xaa2
 800deac:	2102      	movs	r1, #2
 800deae:	4620      	mov	r0, r4
 800deb0:	f7f8 f9de 	bl	8006270 <mbedtls_debug_print_ret>
            if( ret == 0 )
 800deb4:	2d00      	cmp	r5, #0
 800deb6:	d01b      	beq.n	800def0 <mbedtls_ssl_fetch_input+0x124>
            if( ret < 0 )
 800deb8:	dba3      	blt.n	800de02 <mbedtls_ssl_fetch_input+0x36>
            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 800deba:	42ae      	cmp	r6, r5
 800debc:	d214      	bcs.n	800dee8 <mbedtls_ssl_fetch_input+0x11c>
                MBEDTLS_SSL_DEBUG_MSG( 1,
 800debe:	4b1b      	ldr	r3, [pc, #108]	; (800df2c <mbedtls_ssl_fetch_input+0x160>)
 800dec0:	9501      	str	r5, [sp, #4]
 800dec2:	9300      	str	r3, [sp, #0]
 800dec4:	9602      	str	r6, [sp, #8]
 800dec6:	f640 23ae 	movw	r3, #2734	; 0xaae
 800deca:	4a11      	ldr	r2, [pc, #68]	; (800df10 <mbedtls_ssl_fetch_input+0x144>)
 800decc:	2101      	movs	r1, #1
 800dece:	4620      	mov	r0, r4
 800ded0:	f7f8 f99e 	bl	8006210 <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800ded4:	4d16      	ldr	r5, [pc, #88]	; (800df30 <mbedtls_ssl_fetch_input+0x164>)
 800ded6:	e794      	b.n	800de02 <mbedtls_ssl_fetch_input+0x36>
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 800ded8:	6823      	ldr	r3, [r4, #0]
 800deda:	4401      	add	r1, r0
 800dedc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dede:	4632      	mov	r2, r6
 800dee0:	69e0      	ldr	r0, [r4, #28]
 800dee2:	47a8      	blx	r5
                    ret = ssl->f_recv( ssl->p_bio,
 800dee4:	4605      	mov	r5, r0
 800dee6:	e7cf      	b.n	800de88 <mbedtls_ssl_fetch_input+0xbc>
            ssl->in_left += ret;
 800dee8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800deea:	441d      	add	r5, r3
 800deec:	6765      	str	r5, [r4, #116]	; 0x74
 800deee:	e7ac      	b.n	800de4a <mbedtls_ssl_fetch_input+0x7e>
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 800def0:	4d10      	ldr	r5, [pc, #64]	; (800df34 <mbedtls_ssl_fetch_input+0x168>)
 800def2:	e786      	b.n	800de02 <mbedtls_ssl_fetch_input+0x36>
                if( ssl->f_recv_timeout != NULL )
 800def4:	69a5      	ldr	r5, [r4, #24]
 800def6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800def8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800defa:	2d00      	cmp	r5, #0
 800defc:	d1ec      	bne.n	800ded8 <mbedtls_ssl_fetch_input+0x10c>
                    ret = ssl->f_recv( ssl->p_bio,
 800defe:	4401      	add	r1, r0
 800df00:	6963      	ldr	r3, [r4, #20]
 800df02:	4632      	mov	r2, r6
 800df04:	69e0      	ldr	r0, [r4, #28]
 800df06:	4798      	blx	r3
 800df08:	e7ec      	b.n	800dee4 <mbedtls_ssl_fetch_input+0x118>
 800df0a:	bf00      	nop
 800df0c:	080179f2 	.word	0x080179f2
 800df10:	08018828 	.word	0x08018828
 800df14:	08017a01 	.word	0x08017a01
 800df18:	ffff8f00 	.word	0xffff8f00
 800df1c:	08017a3d 	.word	0x08017a3d
 800df20:	08017a5c 	.word	0x08017a5c
 800df24:	08017ace 	.word	0x08017ace
 800df28:	08017a83 	.word	0x08017a83
 800df2c:	08017a99 	.word	0x08017a99
 800df30:	ffff9400 	.word	0xffff9400
 800df34:	ffff8d80 	.word	0xffff8d80
 800df38:	08017a75 	.word	0x08017a75
 800df3c:	ffff9800 	.word	0xffff9800

0800df40 <mbedtls_ssl_flush_output>:
{
 800df40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800df44:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );
 800df46:	4b39      	ldr	r3, [pc, #228]	; (800e02c <mbedtls_ssl_flush_output+0xec>)
 800df48:	4a39      	ldr	r2, [pc, #228]	; (800e030 <mbedtls_ssl_flush_output+0xf0>)
 800df4a:	9300      	str	r3, [sp, #0]
 800df4c:	2102      	movs	r1, #2
 800df4e:	f640 23c3 	movw	r3, #2755	; 0xac3
 800df52:	f7f8 f95d 	bl	8006210 <mbedtls_debug_print_msg>
    if( ssl->f_send == NULL )
 800df56:	6923      	ldr	r3, [r4, #16]
 800df58:	b96b      	cbnz	r3, 800df76 <mbedtls_ssl_flush_output+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 800df5a:	4b36      	ldr	r3, [pc, #216]	; (800e034 <mbedtls_ssl_flush_output+0xf4>)
 800df5c:	4a34      	ldr	r2, [pc, #208]	; (800e030 <mbedtls_ssl_flush_output+0xf0>)
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	2101      	movs	r1, #1
 800df62:	f640 23c8 	movw	r3, #2760	; 0xac8
 800df66:	4620      	mov	r0, r4
 800df68:	f7f8 f952 	bl	8006210 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800df6c:	4d32      	ldr	r5, [pc, #200]	; (800e038 <mbedtls_ssl_flush_output+0xf8>)
}
 800df6e:	4628      	mov	r0, r5
 800df70:	b004      	add	sp, #16
 800df72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ssl->out_left == 0 )
 800df76:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 800df7a:	2d00      	cmp	r5, #0
 800df7c:	d050      	beq.n	800e020 <mbedtls_ssl_flush_output+0xe0>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 800df7e:	4f2f      	ldr	r7, [pc, #188]	; (800e03c <mbedtls_ssl_flush_output+0xfc>)
 800df80:	4e2b      	ldr	r6, [pc, #172]	; (800e030 <mbedtls_ssl_flush_output+0xf0>)
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 800df82:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800e04c <mbedtls_ssl_flush_output+0x10c>
    while( ssl->out_left > 0 )
 800df86:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 800df8a:	b995      	cbnz	r5, 800dfb2 <mbedtls_ssl_flush_output+0x72>
        ssl->out_hdr = ssl->out_buf + 8;
 800df8c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    ssl_update_out_pointers( ssl, ssl->transform_out );
 800df90:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        ssl->out_hdr = ssl->out_buf + 8;
 800df92:	3308      	adds	r3, #8
 800df94:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    ssl_update_out_pointers( ssl, ssl->transform_out );
 800df98:	4620      	mov	r0, r4
 800df9a:	f7ff fa43 	bl	800d424 <ssl_update_out_pointers>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 800df9e:	4b28      	ldr	r3, [pc, #160]	; (800e040 <mbedtls_ssl_flush_output+0x100>)
 800dfa0:	9300      	str	r3, [sp, #0]
 800dfa2:	f640 23f7 	movw	r3, #2807	; 0xaf7
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 800dfa6:	4a22      	ldr	r2, [pc, #136]	; (800e030 <mbedtls_ssl_flush_output+0xf0>)
 800dfa8:	2102      	movs	r1, #2
 800dfaa:	4620      	mov	r0, r4
 800dfac:	f7f8 f930 	bl	8006210 <mbedtls_debug_print_msg>
        return( 0 );
 800dfb0:	e7dd      	b.n	800df6e <mbedtls_ssl_flush_output+0x2e>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 800dfb2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800dfb6:	9502      	str	r5, [sp, #8]
 800dfb8:	3305      	adds	r3, #5
 800dfba:	9301      	str	r3, [sp, #4]
 800dfbc:	4632      	mov	r2, r6
 800dfbe:	f640 23d6 	movw	r3, #2774	; 0xad6
 800dfc2:	2102      	movs	r1, #2
 800dfc4:	4620      	mov	r0, r4
 800dfc6:	9700      	str	r7, [sp, #0]
 800dfc8:	f7f8 f922 	bl	8006210 <mbedtls_debug_print_msg>
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 800dfcc:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
        buf = ssl->out_hdr - ssl->out_left;
 800dfd0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 800dfd4:	6923      	ldr	r3, [r4, #16]
 800dfd6:	1a89      	subs	r1, r1, r2
 800dfd8:	69e0      	ldr	r0, [r4, #28]
 800dfda:	4798      	blx	r3
 800dfdc:	4605      	mov	r5, r0
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 800dfde:	9001      	str	r0, [sp, #4]
 800dfe0:	f8cd 8000 	str.w	r8, [sp]
 800dfe4:	f640 23db 	movw	r3, #2779	; 0xadb
 800dfe8:	4632      	mov	r2, r6
 800dfea:	2102      	movs	r1, #2
 800dfec:	4620      	mov	r0, r4
 800dfee:	f7f8 f93f 	bl	8006270 <mbedtls_debug_print_ret>
        if( ret <= 0 )
 800dff2:	2d00      	cmp	r5, #0
 800dff4:	ddbb      	ble.n	800df6e <mbedtls_ssl_flush_output+0x2e>
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 800dff6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800dffa:	42ab      	cmp	r3, r5
 800dffc:	d20c      	bcs.n	800e018 <mbedtls_ssl_flush_output+0xd8>
            MBEDTLS_SSL_DEBUG_MSG( 1,
 800dffe:	9302      	str	r3, [sp, #8]
 800e000:	4b10      	ldr	r3, [pc, #64]	; (800e044 <mbedtls_ssl_flush_output+0x104>)
 800e002:	9501      	str	r5, [sp, #4]
 800e004:	9300      	str	r3, [sp, #0]
 800e006:	4a0a      	ldr	r2, [pc, #40]	; (800e030 <mbedtls_ssl_flush_output+0xf0>)
 800e008:	f640 23e4 	movw	r3, #2788	; 0xae4
 800e00c:	2101      	movs	r1, #1
 800e00e:	4620      	mov	r0, r4
 800e010:	f7f8 f8fe 	bl	8006210 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800e014:	4d0c      	ldr	r5, [pc, #48]	; (800e048 <mbedtls_ssl_flush_output+0x108>)
 800e016:	e7aa      	b.n	800df6e <mbedtls_ssl_flush_output+0x2e>
        ssl->out_left -= ret;
 800e018:	1b5d      	subs	r5, r3, r5
 800e01a:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 800e01e:	e7b2      	b.n	800df86 <mbedtls_ssl_flush_output+0x46>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 800e020:	4b07      	ldr	r3, [pc, #28]	; (800e040 <mbedtls_ssl_flush_output+0x100>)
 800e022:	9300      	str	r3, [sp, #0]
 800e024:	f640 23cf 	movw	r3, #2767	; 0xacf
 800e028:	e7bd      	b.n	800dfa6 <mbedtls_ssl_flush_output+0x66>
 800e02a:	bf00      	nop
 800e02c:	08017add 	.word	0x08017add
 800e030:	08018828 	.word	0x08018828
 800e034:	08017a01 	.word	0x08017a01
 800e038:	ffff8f00 	.word	0xffff8f00
 800e03c:	08017aed 	.word	0x08017aed
 800e040:	08017b50 	.word	0x08017b50
 800e044:	08017b1a 	.word	0x08017b1a
 800e048:	ffff9400 	.word	0xffff9400
 800e04c:	08017b0e 	.word	0x08017b0e

0800e050 <mbedtls_ssl_write_record>:
{
 800e050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e054:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 800e056:	4bbe      	ldr	r3, [pc, #760]	; (800e350 <mbedtls_ssl_write_record+0x300>)
{
 800e058:	b09b      	sub	sp, #108	; 0x6c
    size_t len = ssl->out_msglen;
 800e05a:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
{
 800e05e:	9109      	str	r1, [sp, #36]	; 0x24
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 800e060:	9300      	str	r3, [sp, #0]
 800e062:	4abc      	ldr	r2, [pc, #752]	; (800e354 <mbedtls_ssl_write_record+0x304>)
 800e064:	f640 530f 	movw	r3, #3343	; 0xd0f
 800e068:	2102      	movs	r1, #2
 800e06a:	f7f8 f8d1 	bl	8006210 <mbedtls_debug_print_msg>
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 800e06e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800e072:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800e076:	701a      	strb	r2, [r3, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 800e078:	68e2      	ldr	r2, [r4, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 800e07a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 800e07e:	68a1      	ldr	r1, [r4, #8]
        ver[1] = (unsigned char) minor;
 800e080:	709a      	strb	r2, [r3, #2]
        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
 800e082:	4622      	mov	r2, r4
        ver[0] = (unsigned char) major;
 800e084:	7059      	strb	r1, [r3, #1]
        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
 800e086:	f852 3fa8 	ldr.w	r3, [r2, #168]!
 800e08a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800e08e:	600b      	str	r3, [r1, #0]
 800e090:	6853      	ldr	r3, [r2, #4]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
 800e092:	0a2a      	lsrs	r2, r5, #8
        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
 800e094:	604b      	str	r3, [r1, #4]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
 800e096:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800e09a:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 800e09c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800e0a0:	705d      	strb	r5, [r3, #1]
        if( ssl->transform_out != NULL )
 800e0a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f000 820d 	beq.w	800e4c4 <mbedtls_ssl_write_record+0x474>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );
 800e0aa:	4bab      	ldr	r3, [pc, #684]	; (800e358 <mbedtls_ssl_write_record+0x308>)
 800e0ac:	4aa9      	ldr	r2, [pc, #676]	; (800e354 <mbedtls_ssl_write_record+0x304>)
 800e0ae:	9300      	str	r3, [sp, #0]
 800e0b0:	2102      	movs	r1, #2
 800e0b2:	f240 53a5 	movw	r3, #1445	; 0x5a5
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	f7f8 f8aa 	bl	8006210 <mbedtls_debug_print_msg>
    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 800e0bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0be:	b10b      	cbz	r3, 800e0c4 <mbedtls_ssl_write_record+0x74>
 800e0c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e0c2:	b953      	cbnz	r3, 800e0da <mbedtls_ssl_write_record+0x8a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800e0c4:	4ba5      	ldr	r3, [pc, #660]	; (800e35c <mbedtls_ssl_write_record+0x30c>)
 800e0c6:	9300      	str	r3, [sp, #0]
 800e0c8:	f240 53a9 	movw	r3, #1449	; 0x5a9
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800e0cc:	4aa1      	ldr	r2, [pc, #644]	; (800e354 <mbedtls_ssl_write_record+0x304>)
 800e0ce:	2101      	movs	r1, #1
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	f7f8 f89d 	bl	8006210 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800e0d6:	4da2      	ldr	r5, [pc, #648]	; (800e360 <mbedtls_ssl_write_record+0x310>)
 800e0d8:	e106      	b.n	800e2e8 <mbedtls_ssl_write_record+0x298>
 800e0da:	6d1d      	ldr	r5, [r3, #80]	; 0x50
    if( ctx->cipher_info == NULL )
 800e0dc:	b105      	cbz	r5, 800e0e0 <mbedtls_ssl_write_record+0x90>
    return ctx->cipher_info->mode;
 800e0de:	786d      	ldrb	r5, [r5, #1]
    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
 800e0e0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800e0e4:	4a9b      	ldr	r2, [pc, #620]	; (800e354 <mbedtls_ssl_write_record+0x304>)
 800e0e6:	9302      	str	r3, [sp, #8]
 800e0e8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800e0ec:	2104      	movs	r1, #4
 800e0ee:	9301      	str	r3, [sp, #4]
 800e0f0:	4b9c      	ldr	r3, [pc, #624]	; (800e364 <mbedtls_ssl_write_record+0x314>)
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	9300      	str	r3, [sp, #0]
 800e0f6:	f44f 63b6 	mov.w	r3, #1456	; 0x5b0
 800e0fa:	f7f8 f8e7 	bl	80062cc <mbedtls_debug_print_buf>
    if( mode == MBEDTLS_MODE_STREAM ||
 800e0fe:	2d07      	cmp	r5, #7
 800e100:	d002      	beq.n	800e108 <mbedtls_ssl_write_record+0xb8>
 800e102:	2d02      	cmp	r5, #2
 800e104:	f040 80fb 	bne.w	800e2fe <mbedtls_ssl_write_record+0x2ae>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 800e108:	68e3      	ldr	r3, [r4, #12]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	f340 80f2 	ble.w	800e2f4 <mbedtls_ssl_write_record+0x2a4>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
 800e110:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800e112:	2208      	movs	r2, #8
 800e114:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800e118:	3038      	adds	r0, #56	; 0x38
 800e11a:	f7f9 fd21 	bl	8007b60 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 800e11e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800e120:	2203      	movs	r2, #3
 800e122:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800e126:	3038      	adds	r0, #56	; 0x38
        auth_done++;
 800e128:	2701      	movs	r7, #1
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 800e12a:	f7f9 fd19 	bl	8007b60 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
 800e12e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800e130:	2202      	movs	r2, #2
 800e132:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800e136:	3038      	adds	r0, #56	; 0x38
 800e138:	f7f9 fd12 	bl	8007b60 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 800e13c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800e13e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 800e142:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800e146:	3038      	adds	r0, #56	; 0x38
 800e148:	f7f9 fd0a 	bl	8007b60 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
 800e14c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800e14e:	a90e      	add	r1, sp, #56	; 0x38
 800e150:	3038      	adds	r0, #56	; 0x38
 800e152:	f7f9 fd15 	bl	8007b80 <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 800e156:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800e158:	3038      	adds	r0, #56	; 0x38
 800e15a:	f7f9 fd43 	bl	8007be4 <mbedtls_md_hmac_reset>
            memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );
 800e15e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800e162:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800e166:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e168:	a90e      	add	r1, sp, #56	; 0x38
 800e16a:	6952      	ldr	r2, [r2, #20]
 800e16c:	4418      	add	r0, r3
 800e16e:	f003 fe26 	bl	8011dbe <memcpy>
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
 800e172:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e174:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 800e178:	695b      	ldr	r3, [r3, #20]
 800e17a:	2104      	movs	r1, #4
 800e17c:	9302      	str	r3, [sp, #8]
 800e17e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800e182:	4620      	mov	r0, r4
 800e184:	4413      	add	r3, r2
 800e186:	9301      	str	r3, [sp, #4]
 800e188:	4b77      	ldr	r3, [pc, #476]	; (800e368 <mbedtls_ssl_write_record+0x318>)
 800e18a:	4a72      	ldr	r2, [pc, #456]	; (800e354 <mbedtls_ssl_write_record+0x304>)
 800e18c:	9300      	str	r3, [sp, #0]
 800e18e:	f240 53e5 	movw	r3, #1509	; 0x5e5
 800e192:	f7f8 f89b 	bl	80062cc <mbedtls_debug_print_buf>
        ssl->out_msglen += ssl->transform_out->maclen;
 800e196:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e198:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800e19c:	6952      	ldr	r2, [r2, #20]
 800e19e:	4413      	add	r3, r2
 800e1a0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    if( mode == MBEDTLS_MODE_GCM ||
 800e1a4:	2d06      	cmp	r5, #6
 800e1a6:	d004      	beq.n	800e1b2 <mbedtls_ssl_write_record+0x162>
 800e1a8:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 800e1ac:	2b08      	cmp	r3, #8
 800e1ae:	f040 8102 	bne.w	800e3b6 <mbedtls_ssl_write_record+0x366>
        mbedtls_ssl_transform *transform = ssl->transform_out;
 800e1b2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
        memcpy( add_data, ssl->out_ctr, 8 );
 800e1b4:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
        unsigned char taglen = transform->ciphersuite_info->flags &
 800e1b8:	682b      	ldr	r3, [r5, #0]
        memcpy( add_data, ssl->out_ctr, 8 );
 800e1ba:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
        unsigned char taglen = transform->ciphersuite_info->flags &
 800e1be:	7f1b      	ldrb	r3, [r3, #28]
        memcpy( add_data, ssl->out_ctr, 8 );
 800e1c0:	6810      	ldr	r0, [r2, #0]
        unsigned char taglen = transform->ciphersuite_info->flags &
 800e1c2:	f013 0f02 	tst.w	r3, #2
        memcpy( add_data, ssl->out_ctr, 8 );
 800e1c6:	4653      	mov	r3, sl
 800e1c8:	6851      	ldr	r1, [r2, #4]
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
 800e1ca:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800e1ce:	692e      	ldr	r6, [r5, #16]
        memcpy( add_data, ssl->out_ctr, 8 );
 800e1d0:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
 800e1d2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
        ver[0] = (unsigned char) major;
 800e1d6:	68a2      	ldr	r2, [r4, #8]
        add_data[8]  = ssl->out_msgtype;
 800e1d8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 800e1dc:	68e3      	ldr	r3, [r4, #12]
        ver[0] = (unsigned char) major;
 800e1de:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
        ver[1] = (unsigned char) minor;
 800e1e2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 800e1e6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );
 800e1ea:	f8cd a004 	str.w	sl, [sp, #4]
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 800e1ee:	ea4f 2213 	mov.w	r2, r3, lsr #8
        add_data[12] = ssl->out_msglen & 0xFF;
 800e1f2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );
 800e1f6:	f04f 030d 	mov.w	r3, #13
 800e1fa:	9302      	str	r3, [sp, #8]
 800e1fc:	4b5b      	ldr	r3, [pc, #364]	; (800e36c <mbedtls_ssl_write_record+0x31c>)
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 800e1fe:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	4a53      	ldr	r2, [pc, #332]	; (800e354 <mbedtls_ssl_write_record+0x304>)
 800e206:	f240 6326 	movw	r3, #1574	; 0x626
 800e20a:	f04f 0104 	mov.w	r1, #4
 800e20e:	4620      	mov	r0, r4
        unsigned char taglen = transform->ciphersuite_info->flags &
 800e210:	bf0c      	ite	eq
 800e212:	f04f 0910 	moveq.w	r9, #16
 800e216:	f04f 0908 	movne.w	r9, #8
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );
 800e21a:	f7f8 f857 	bl	80062cc <mbedtls_debug_print_buf>
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
 800e21e:	68eb      	ldr	r3, [r5, #12]
 800e220:	2b0c      	cmp	r3, #12
 800e222:	f040 8088 	bne.w	800e336 <mbedtls_ssl_write_record+0x2e6>
 800e226:	692b      	ldr	r3, [r5, #16]
 800e228:	2b04      	cmp	r3, #4
 800e22a:	d16a      	bne.n	800e302 <mbedtls_ssl_write_record+0x2b2>
            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
 800e22c:	69ab      	ldr	r3, [r5, #24]
            memcpy( iv + transform->fixed_ivlen, ssl->out_ctr, 8 );
 800e22e:	aa0c      	add	r2, sp, #48	; 0x30
            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
 800e230:	930b      	str	r3, [sp, #44]	; 0x2c
            memcpy( iv + transform->fixed_ivlen, ssl->out_ctr, 8 );
 800e232:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800e236:	6859      	ldr	r1, [r3, #4]
 800e238:	6818      	ldr	r0, [r3, #0]
 800e23a:	c203      	stmia	r2!, {r0, r1}
            memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 800e23c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	600a      	str	r2, [r1, #0]
 800e244:	685a      	ldr	r2, [r3, #4]
 800e246:	604a      	str	r2, [r1, #4]
        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used (internal)",
 800e248:	68eb      	ldr	r3, [r5, #12]
 800e24a:	4a42      	ldr	r2, [pc, #264]	; (800e354 <mbedtls_ssl_write_record+0x304>)
 800e24c:	9302      	str	r3, [sp, #8]
 800e24e:	ab0b      	add	r3, sp, #44	; 0x2c
 800e250:	9301      	str	r3, [sp, #4]
 800e252:	4b47      	ldr	r3, [pc, #284]	; (800e370 <mbedtls_ssl_write_record+0x320>)
 800e254:	2104      	movs	r1, #4
 800e256:	9300      	str	r3, [sp, #0]
 800e258:	4620      	mov	r0, r4
 800e25a:	f240 6345 	movw	r3, #1605	; 0x645
 800e25e:	f7f8 f835 	bl	80062cc <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used (transmitted)",
 800e262:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
 800e266:	eba8 0606 	sub.w	r6, r8, r6
        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used (transmitted)",
 800e26a:	9301      	str	r3, [sp, #4]
 800e26c:	4b41      	ldr	r3, [pc, #260]	; (800e374 <mbedtls_ssl_write_record+0x324>)
 800e26e:	9602      	str	r6, [sp, #8]
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	4a38      	ldr	r2, [pc, #224]	; (800e354 <mbedtls_ssl_write_record+0x304>)
 800e274:	f240 6347 	movw	r3, #1607	; 0x647
 800e278:	2104      	movs	r1, #4
 800e27a:	4620      	mov	r0, r4
 800e27c:	f7f8 f826 	bl	80062cc <mbedtls_debug_print_buf>
        enc_msglen = ssl->out_msglen;
 800e280:	f8d4 80a0 	ldr.w	r8, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 800e284:	4b3c      	ldr	r3, [pc, #240]	; (800e378 <mbedtls_ssl_write_record+0x328>)
        ssl->out_msglen += explicit_ivlen;
 800e286:	4446      	add	r6, r8
 800e288:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 800e28c:	9601      	str	r6, [sp, #4]
 800e28e:	9300      	str	r3, [sp, #0]
 800e290:	4a30      	ldr	r2, [pc, #192]	; (800e354 <mbedtls_ssl_write_record+0x304>)
 800e292:	f240 6352 	movw	r3, #1618	; 0x652
 800e296:	2103      	movs	r1, #3
 800e298:	4620      	mov	r0, r4
        enc_msg = ssl->out_msg;
 800e29a:	f8d4 b098 	ldr.w	fp, [r4, #152]	; 0x98
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 800e29e:	f7f7 ffb7 	bl	8006210 <mbedtls_debug_print_msg>
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
 800e2a2:	ab0a      	add	r3, sp, #40	; 0x28
 800e2a4:	9304      	str	r3, [sp, #16]
 800e2a6:	230d      	movs	r3, #13
 800e2a8:	eb0b 0608 	add.w	r6, fp, r8
 800e2ac:	9300      	str	r3, [sp, #0]
 800e2ae:	f8cd 9018 	str.w	r9, [sp, #24]
 800e2b2:	9605      	str	r6, [sp, #20]
 800e2b4:	f8cd b00c 	str.w	fp, [sp, #12]
 800e2b8:	f8cd 8008 	str.w	r8, [sp, #8]
 800e2bc:	f8cd b004 	str.w	fp, [sp, #4]
 800e2c0:	68ea      	ldr	r2, [r5, #12]
 800e2c2:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800e2c6:	4653      	mov	r3, sl
 800e2c8:	a90b      	add	r1, sp, #44	; 0x2c
 800e2ca:	f7f7 fe57 	bl	8005f7c <mbedtls_cipher_auth_encrypt>
 800e2ce:	4605      	mov	r5, r0
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	d035      	beq.n	800e340 <mbedtls_ssl_write_record+0x2f0>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
 800e2d4:	4b29      	ldr	r3, [pc, #164]	; (800e37c <mbedtls_ssl_write_record+0x32c>)
 800e2d6:	9001      	str	r0, [sp, #4]
 800e2d8:	9300      	str	r3, [sp, #0]
 800e2da:	f240 635e 	movw	r3, #1630	; 0x65e
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 800e2de:	4a1d      	ldr	r2, [pc, #116]	; (800e354 <mbedtls_ssl_write_record+0x304>)
 800e2e0:	2101      	movs	r1, #1
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	f7f7 ffc4 	bl	8006270 <mbedtls_debug_print_ret>
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
 800e2e8:	4b25      	ldr	r3, [pc, #148]	; (800e380 <mbedtls_ssl_write_record+0x330>)
 800e2ea:	9501      	str	r5, [sp, #4]
 800e2ec:	9300      	str	r3, [sp, #0]
 800e2ee:	f44f 6354 	mov.w	r3, #3392	; 0xd40
 800e2f2:	e148      	b.n	800e586 <mbedtls_ssl_write_record+0x536>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800e2f4:	4b19      	ldr	r3, [pc, #100]	; (800e35c <mbedtls_ssl_write_record+0x30c>)
 800e2f6:	9300      	str	r3, [sp, #0]
 800e2f8:	f240 53df 	movw	r3, #1503	; 0x5df
 800e2fc:	e6e6      	b.n	800e0cc <mbedtls_ssl_write_record+0x7c>
    int auth_done = 0;
 800e2fe:	2700      	movs	r7, #0
 800e300:	e750      	b.n	800e1a4 <mbedtls_ssl_write_record+0x154>
        else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
 800e302:	2b0c      	cmp	r3, #12
 800e304:	d117      	bne.n	800e336 <mbedtls_ssl_write_record+0x2e6>
            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
 800e306:	462a      	mov	r2, r5
 800e308:	f852 0f18 	ldr.w	r0, [r2, #24]!
 800e30c:	ab0b      	add	r3, sp, #44	; 0x2c
 800e30e:	6851      	ldr	r1, [r2, #4]
 800e310:	c303      	stmia	r3!, {r0, r1}
 800e312:	6890      	ldr	r0, [r2, #8]
 800e314:	6018      	str	r0, [r3, #0]
                iv[i+4] ^= ssl->out_ctr[i];
 800e316:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800e31a:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 800e31e:	1e59      	subs	r1, r3, #1
 800e320:	3307      	adds	r3, #7
 800e322:	f811 ef01 	ldrb.w	lr, [r1, #1]!
 800e326:	7842      	ldrb	r2, [r0, #1]
            for( i = 0; i < 8; i++ )
 800e328:	428b      	cmp	r3, r1
                iv[i+4] ^= ssl->out_ctr[i];
 800e32a:	ea82 020e 	eor.w	r2, r2, lr
 800e32e:	f800 2f01 	strb.w	r2, [r0, #1]!
            for( i = 0; i < 8; i++ )
 800e332:	d1f6      	bne.n	800e322 <mbedtls_ssl_write_record+0x2d2>
 800e334:	e788      	b.n	800e248 <mbedtls_ssl_write_record+0x1f8>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800e336:	4b09      	ldr	r3, [pc, #36]	; (800e35c <mbedtls_ssl_write_record+0x30c>)
 800e338:	9300      	str	r3, [sp, #0]
 800e33a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800e33e:	e6c5      	b.n	800e0cc <mbedtls_ssl_write_record+0x7c>
        if( olen != enc_msglen )
 800e340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e342:	4598      	cmp	r8, r3
 800e344:	d01e      	beq.n	800e384 <mbedtls_ssl_write_record+0x334>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800e346:	4b05      	ldr	r3, [pc, #20]	; (800e35c <mbedtls_ssl_write_record+0x30c>)
 800e348:	9300      	str	r3, [sp, #0]
 800e34a:	f240 6364 	movw	r3, #1636	; 0x664
 800e34e:	e6bd      	b.n	800e0cc <mbedtls_ssl_write_record+0x7c>
 800e350:	080184e7 	.word	0x080184e7
 800e354:	08018828 	.word	0x08018828
 800e358:	080184f7 	.word	0x080184f7
 800e35c:	08017544 	.word	0x08017544
 800e360:	ffff9400 	.word	0xffff9400
 800e364:	08018506 	.word	0x08018506
 800e368:	08018525 	.word	0x08018525
 800e36c:	08018532 	.word	0x08018532
 800e370:	0801854b 	.word	0x0801854b
 800e374:	0801855e 	.word	0x0801855e
 800e378:	08018574 	.word	0x08018574
 800e37c:	080185ae 	.word	0x080185ae
 800e380:	080186d2 	.word	0x080186d2
        ssl->out_msglen += taglen;
 800e384:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 800e388:	f8cd 9008 	str.w	r9, [sp, #8]
        ssl->out_msglen += taglen;
 800e38c:	444b      	add	r3, r9
 800e38e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 800e392:	4b82      	ldr	r3, [pc, #520]	; (800e59c <mbedtls_ssl_write_record+0x54c>)
 800e394:	9601      	str	r6, [sp, #4]
 800e396:	9300      	str	r3, [sp, #0]
 800e398:	4a81      	ldr	r2, [pc, #516]	; (800e5a0 <mbedtls_ssl_write_record+0x550>)
 800e39a:	f240 636b 	movw	r3, #1643	; 0x66b
 800e39e:	2104      	movs	r1, #4
 800e3a0:	4620      	mov	r0, r4
        auth_done++;
 800e3a2:	3701      	adds	r7, #1
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 800e3a4:	f7f7 ff92 	bl	80062cc <mbedtls_debug_print_buf>
    if( auth_done != 1 )
 800e3a8:	2f01      	cmp	r7, #1
 800e3aa:	d079      	beq.n	800e4a0 <mbedtls_ssl_write_record+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800e3ac:	4b7d      	ldr	r3, [pc, #500]	; (800e5a4 <mbedtls_ssl_write_record+0x554>)
 800e3ae:	9300      	str	r3, [sp, #0]
 800e3b0:	f240 63f1 	movw	r3, #1777	; 0x6f1
 800e3b4:	e68a      	b.n	800e0cc <mbedtls_ssl_write_record+0x7c>
    if( mode == MBEDTLS_MODE_CBC )
 800e3b6:	2d02      	cmp	r5, #2
 800e3b8:	d16d      	bne.n	800e496 <mbedtls_ssl_write_record+0x446>
        size_t enc_msglen, padlen, olen = 0, i;
 800e3ba:	2300      	movs	r3, #0
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 800e3bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        size_t enc_msglen, padlen, olen = 0, i;
 800e3be:	930e      	str	r3, [sp, #56]	; 0x38
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 800e3c0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800e3c4:	68d2      	ldr	r2, [r2, #12]
 800e3c6:	1c48      	adds	r0, r1, #1
 800e3c8:	fbb0 f6f2 	udiv	r6, r0, r2
 800e3cc:	fb02 0616 	mls	r6, r2, r6, r0
 800e3d0:	1b96      	subs	r6, r2, r6
        if( padlen == ssl->transform_out->ivlen )
 800e3d2:	42b2      	cmp	r2, r6
 800e3d4:	f000 80dd 	beq.w	800e592 <mbedtls_ssl_write_record+0x542>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 800e3d8:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800e3dc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800e3e0:	441a      	add	r2, r3
        for( i = 0; i <= padlen; i++ )
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	429e      	cmp	r6, r3
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 800e3e6:	5456      	strb	r6, [r2, r1]
        for( i = 0; i <= padlen; i++ )
 800e3e8:	d2f6      	bcs.n	800e3d8 <mbedtls_ssl_write_record+0x388>
        ssl->out_msglen += padlen + 1;
 800e3ea:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	eb03 0806 	add.w	r8, r3, r6
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 800e3f4:	68e3      	ldr	r3, [r4, #12]
        ssl->out_msglen += padlen + 1;
 800e3f6:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	dc27      	bgt.n	800e44e <mbedtls_ssl_write_record+0x3fe>
        enc_msg = ssl->out_msg;
 800e3fe:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 800e402:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e404:	3601      	adds	r6, #1
 800e406:	9603      	str	r6, [sp, #12]
 800e408:	68db      	ldr	r3, [r3, #12]
 800e40a:	4a65      	ldr	r2, [pc, #404]	; (800e5a0 <mbedtls_ssl_write_record+0x550>)
 800e40c:	9302      	str	r3, [sp, #8]
 800e40e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800e412:	2103      	movs	r1, #3
 800e414:	9301      	str	r3, [sp, #4]
 800e416:	4b64      	ldr	r3, [pc, #400]	; (800e5a8 <mbedtls_ssl_write_record+0x558>)
 800e418:	4620      	mov	r0, r4
 800e41a:	9300      	str	r3, [sp, #0]
 800e41c:	f240 63a2 	movw	r3, #1698	; 0x6a2
 800e420:	f7f7 fef6 	bl	8006210 <mbedtls_debug_print_msg>
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 800e424:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800e426:	ab0e      	add	r3, sp, #56	; 0x38
 800e428:	9302      	str	r3, [sp, #8]
 800e42a:	9501      	str	r5, [sp, #4]
 800e42c:	f8cd 8000 	str.w	r8, [sp]
 800e430:	462b      	mov	r3, r5
 800e432:	68c2      	ldr	r2, [r0, #12]
 800e434:	f100 0118 	add.w	r1, r0, #24
 800e438:	3050      	adds	r0, #80	; 0x50
 800e43a:	f7f7 fd79 	bl	8005f30 <mbedtls_cipher_crypt>
 800e43e:	4605      	mov	r5, r0
 800e440:	b308      	cbz	r0, 800e486 <mbedtls_ssl_write_record+0x436>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 800e442:	4b5a      	ldr	r3, [pc, #360]	; (800e5ac <mbedtls_ssl_write_record+0x55c>)
 800e444:	9001      	str	r0, [sp, #4]
 800e446:	9300      	str	r3, [sp, #0]
 800e448:	f240 63aa 	movw	r3, #1706	; 0x6aa
 800e44c:	e747      	b.n	800e2de <mbedtls_ssl_write_record+0x28e>
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 800e44e:	6823      	ldr	r3, [r4, #0]
 800e450:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e452:	699d      	ldr	r5, [r3, #24]
 800e454:	68ca      	ldr	r2, [r1, #12]
 800e456:	69d8      	ldr	r0, [r3, #28]
 800e458:	3118      	adds	r1, #24
 800e45a:	47a8      	blx	r5
            if( ret != 0 )
 800e45c:	4605      	mov	r5, r0
 800e45e:	2800      	cmp	r0, #0
 800e460:	f47f af42 	bne.w	800e2e8 <mbedtls_ssl_write_record+0x298>
            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 800e464:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e466:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800e46a:	68ca      	ldr	r2, [r1, #12]
 800e46c:	3118      	adds	r1, #24
 800e46e:	f003 fca6 	bl	8011dbe <memcpy>
            ssl->out_msglen += ssl->transform_out->ivlen;
 800e472:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            enc_msglen = ssl->out_msglen;
 800e474:	f8d4 80a0 	ldr.w	r8, [r4, #160]	; 0xa0
            ssl->out_msglen += ssl->transform_out->ivlen;
 800e478:	68db      	ldr	r3, [r3, #12]
            enc_msg = ssl->out_msg;
 800e47a:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
            ssl->out_msglen += ssl->transform_out->ivlen;
 800e47e:	4443      	add	r3, r8
 800e480:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800e484:	e7bd      	b.n	800e402 <mbedtls_ssl_write_record+0x3b2>
        if( enc_msglen != olen )
 800e486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e488:	4598      	cmp	r8, r3
 800e48a:	d08d      	beq.n	800e3a8 <mbedtls_ssl_write_record+0x358>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800e48c:	4b45      	ldr	r3, [pc, #276]	; (800e5a4 <mbedtls_ssl_write_record+0x554>)
 800e48e:	9300      	str	r3, [sp, #0]
 800e490:	f44f 63d6 	mov.w	r3, #1712	; 0x6b0
 800e494:	e61a      	b.n	800e0cc <mbedtls_ssl_write_record+0x7c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800e496:	4b43      	ldr	r3, [pc, #268]	; (800e5a4 <mbedtls_ssl_write_record+0x554>)
 800e498:	9300      	str	r3, [sp, #0]
 800e49a:	f240 63ea 	movw	r3, #1770	; 0x6ea
 800e49e:	e615      	b.n	800e0cc <mbedtls_ssl_write_record+0x7c>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= encrypt buf" ) );
 800e4a0:	4b43      	ldr	r3, [pc, #268]	; (800e5b0 <mbedtls_ssl_write_record+0x560>)
 800e4a2:	4a3f      	ldr	r2, [pc, #252]	; (800e5a0 <mbedtls_ssl_write_record+0x550>)
 800e4a4:	9300      	str	r3, [sp, #0]
 800e4a6:	2102      	movs	r1, #2
 800e4a8:	f240 63f5 	movw	r3, #1781	; 0x6f5
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	f7f7 feaf 	bl	8006210 <mbedtls_debug_print_msg>
            len = ssl->out_msglen;
 800e4b2:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 800e4b6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800e4ba:	0a2a      	lsrs	r2, r5, #8
 800e4bc:	701a      	strb	r2, [r3, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 800e4be:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800e4c2:	705d      	strb	r5, [r3, #1]
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "output record: msgtype = %d, "
 800e4c4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800e4c8:	9504      	str	r5, [sp, #16]
 800e4ca:	789a      	ldrb	r2, [r3, #2]
 800e4cc:	2103      	movs	r1, #3
 800e4ce:	9203      	str	r2, [sp, #12]
 800e4d0:	785a      	ldrb	r2, [r3, #1]
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	9202      	str	r2, [sp, #8]
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	4a31      	ldr	r2, [pc, #196]	; (800e5a0 <mbedtls_ssl_write_record+0x550>)
 800e4da:	9301      	str	r3, [sp, #4]
 800e4dc:	4b35      	ldr	r3, [pc, #212]	; (800e5b4 <mbedtls_ssl_write_record+0x564>)
        protected_record_size = len + mbedtls_ssl_hdr_len( ssl );
 800e4de:	1d6e      	adds	r6, r5, #5
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "output record: msgtype = %d, "
 800e4e0:	9300      	str	r3, [sp, #0]
 800e4e2:	f640 535f 	movw	r3, #3423	; 0xd5f
 800e4e6:	f7f7 fe93 	bl	8006210 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
 800e4ea:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800e4ee:	4a2c      	ldr	r2, [pc, #176]	; (800e5a0 <mbedtls_ssl_write_record+0x550>)
 800e4f0:	9301      	str	r3, [sp, #4]
 800e4f2:	4b31      	ldr	r3, [pc, #196]	; (800e5b8 <mbedtls_ssl_write_record+0x568>)
 800e4f4:	2104      	movs	r1, #4
 800e4f6:	9300      	str	r3, [sp, #0]
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	f640 5362 	movw	r3, #3426	; 0xd62
 800e4fe:	9602      	str	r6, [sp, #8]
 800e500:	f7f7 fee4 	bl	80062cc <mbedtls_debug_print_buf>
        ssl->out_left += protected_record_size;
 800e504:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
        ssl_update_out_pointers( ssl, ssl->transform_out );
 800e508:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        ssl->out_left += protected_record_size;
 800e50a:	4433      	add	r3, r6
 800e50c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        ssl->out_hdr  += protected_record_size;
 800e510:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        ssl_update_out_pointers( ssl, ssl->transform_out );
 800e514:	4620      	mov	r0, r4
        ssl->out_hdr  += protected_record_size;
 800e516:	4433      	add	r3, r6
 800e518:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl_update_out_pointers( ssl, ssl->transform_out );
 800e51c:	f7fe ff82 	bl	800d424 <ssl_update_out_pointers>
 800e520:	f104 02af 	add.w	r2, r4, #175	; 0xaf
 800e524:	f104 01a7 	add.w	r1, r4, #167	; 0xa7
            if( ++ssl->cur_out_ctr[i - 1] != 0 )
 800e528:	7813      	ldrb	r3, [r2, #0]
 800e52a:	3301      	adds	r3, #1
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	f802 3901 	strb.w	r3, [r2], #-1
 800e532:	b9d3      	cbnz	r3, 800e56a <mbedtls_ssl_write_record+0x51a>
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 800e534:	4291      	cmp	r1, r2
 800e536:	d1f7      	bne.n	800e528 <mbedtls_ssl_write_record+0x4d8>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
 800e538:	4b20      	ldr	r3, [pc, #128]	; (800e5bc <mbedtls_ssl_write_record+0x56c>)
 800e53a:	4a19      	ldr	r2, [pc, #100]	; (800e5a0 <mbedtls_ssl_write_record+0x550>)
 800e53c:	9300      	str	r3, [sp, #0]
 800e53e:	2101      	movs	r1, #1
 800e540:	f640 536f 	movw	r3, #3439	; 0xd6f
 800e544:	4620      	mov	r0, r4
 800e546:	f7f7 fe63 	bl	8006210 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 800e54a:	4d1d      	ldr	r5, [pc, #116]	; (800e5c0 <mbedtls_ssl_write_record+0x570>)
 800e54c:	e009      	b.n	800e562 <mbedtls_ssl_write_record+0x512>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );
 800e54e:	4b1d      	ldr	r3, [pc, #116]	; (800e5c4 <mbedtls_ssl_write_record+0x574>)
 800e550:	4a13      	ldr	r2, [pc, #76]	; (800e5a0 <mbedtls_ssl_write_record+0x550>)
 800e552:	9300      	str	r3, [sp, #0]
 800e554:	2102      	movs	r1, #2
 800e556:	f640 5394 	movw	r3, #3476	; 0xd94
 800e55a:	4620      	mov	r0, r4
 800e55c:	f7f7 fe58 	bl	8006210 <mbedtls_debug_print_msg>
    return( 0 );
 800e560:	2500      	movs	r5, #0
}
 800e562:	4628      	mov	r0, r5
 800e564:	b01b      	add	sp, #108	; 0x6c
 800e566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ( flush == SSL_FORCE_FLUSH ) &&
 800e56a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d1ee      	bne.n	800e54e <mbedtls_ssl_write_record+0x4fe>
 800e570:	4620      	mov	r0, r4
 800e572:	f7ff fce5 	bl	800df40 <mbedtls_ssl_flush_output>
 800e576:	4605      	mov	r5, r0
 800e578:	2800      	cmp	r0, #0
 800e57a:	d0e8      	beq.n	800e54e <mbedtls_ssl_write_record+0x4fe>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 800e57c:	4b12      	ldr	r3, [pc, #72]	; (800e5c8 <mbedtls_ssl_write_record+0x578>)
 800e57e:	9001      	str	r0, [sp, #4]
 800e580:	9300      	str	r3, [sp, #0]
 800e582:	f44f 6359 	mov.w	r3, #3472	; 0xd90
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
 800e586:	4a06      	ldr	r2, [pc, #24]	; (800e5a0 <mbedtls_ssl_write_record+0x550>)
 800e588:	2101      	movs	r1, #1
 800e58a:	4620      	mov	r0, r4
 800e58c:	f7f7 fe70 	bl	8006270 <mbedtls_debug_print_ret>
                return( ret );
 800e590:	e7e7      	b.n	800e562 <mbedtls_ssl_write_record+0x512>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 800e592:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
            padlen = 0;
 800e596:	461e      	mov	r6, r3
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 800e598:	5453      	strb	r3, [r2, r1]
 800e59a:	e726      	b.n	800e3ea <mbedtls_ssl_write_record+0x39a>
 800e59c:	080185ca 	.word	0x080185ca
 800e5a0:	08018828 	.word	0x08018828
 800e5a4:	08017544 	.word	0x08017544
 800e5a8:	080185dd 	.word	0x080185dd
 800e5ac:	0801862b 	.word	0x0801862b
 800e5b0:	08018640 	.word	0x08018640
 800e5b4:	0801864f 	.word	0x0801864f
 800e5b8:	0801868b 	.word	0x0801868b
 800e5bc:	080186e2 	.word	0x080186e2
 800e5c0:	ffff9480 	.word	0xffff9480
 800e5c4:	080186c2 	.word	0x080186c2
 800e5c8:	080186a9 	.word	0x080186a9

0800e5cc <mbedtls_ssl_write_handshake_msg>:
{
 800e5cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e5ce:	4604      	mov	r4, r0
    const unsigned char hs_type = ssl->out_msg[0];
 800e5d0:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    const size_t hs_len = ssl->out_msglen - 4;
 800e5d4:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    const unsigned char hs_type = ssl->out_msg[0];
 800e5d8:	781e      	ldrb	r6, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write handshake message" ) );
 800e5da:	4b34      	ldr	r3, [pc, #208]	; (800e6ac <mbedtls_ssl_write_handshake_msg+0xe0>)
 800e5dc:	4a34      	ldr	r2, [pc, #208]	; (800e6b0 <mbedtls_ssl_write_handshake_msg+0xe4>)
 800e5de:	9300      	str	r3, [sp, #0]
 800e5e0:	2102      	movs	r1, #2
 800e5e2:	f44f 6347 	mov.w	r3, #3184	; 0xc70
 800e5e6:	f7f7 fe13 	bl	8006210 <mbedtls_debug_print_msg>
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
 800e5ea:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800e5ee:	2b16      	cmp	r3, #22
 800e5f0:	d00e      	beq.n	800e610 <mbedtls_ssl_write_handshake_msg+0x44>
 800e5f2:	2b14      	cmp	r3, #20
 800e5f4:	d00d      	beq.n	800e612 <mbedtls_ssl_write_handshake_msg+0x46>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800e5f6:	4b2f      	ldr	r3, [pc, #188]	; (800e6b4 <mbedtls_ssl_write_handshake_msg+0xe8>)
 800e5f8:	9300      	str	r3, [sp, #0]
 800e5fa:	f640 437f 	movw	r3, #3199	; 0xc7f
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800e5fe:	4a2c      	ldr	r2, [pc, #176]	; (800e6b0 <mbedtls_ssl_write_handshake_msg+0xe4>)
 800e600:	2101      	movs	r1, #1
 800e602:	4620      	mov	r0, r4
 800e604:	f7f7 fe04 	bl	8006210 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800e608:	4d2b      	ldr	r5, [pc, #172]	; (800e6b8 <mbedtls_ssl_write_handshake_msg+0xec>)
}
 800e60a:	4628      	mov	r0, r5
 800e60c:	b004      	add	sp, #16
 800e60e:	bd70      	pop	{r4, r5, r6, pc}
    if( ! ( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
 800e610:	b136      	cbz	r6, 800e620 <mbedtls_ssl_write_handshake_msg+0x54>
            hs_type          == MBEDTLS_SSL_HS_HELLO_REQUEST ) &&
 800e612:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e614:	b922      	cbnz	r2, 800e620 <mbedtls_ssl_write_handshake_msg+0x54>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800e616:	4b27      	ldr	r3, [pc, #156]	; (800e6b4 <mbedtls_ssl_write_handshake_msg+0xe8>)
 800e618:	9300      	str	r3, [sp, #0]
 800e61a:	f640 438a 	movw	r3, #3210	; 0xc8a
 800e61e:	e7ee      	b.n	800e5fe <mbedtls_ssl_write_handshake_msg+0x32>
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
 800e620:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 800e624:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800e628:	d90d      	bls.n	800e646 <mbedtls_ssl_write_handshake_msg+0x7a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record too large: "
 800e62a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e62e:	9302      	str	r3, [sp, #8]
 800e630:	4b22      	ldr	r3, [pc, #136]	; (800e6bc <mbedtls_ssl_write_handshake_msg+0xf0>)
 800e632:	9201      	str	r2, [sp, #4]
 800e634:	9300      	str	r3, [sp, #0]
 800e636:	4a1e      	ldr	r2, [pc, #120]	; (800e6b0 <mbedtls_ssl_write_handshake_msg+0xe4>)
 800e638:	f640 43a5 	movw	r3, #3237	; 0xca5
 800e63c:	2101      	movs	r1, #1
 800e63e:	4620      	mov	r0, r4
 800e640:	f7f7 fde6 	bl	8006210 <mbedtls_debug_print_msg>
 800e644:	e7e0      	b.n	800e608 <mbedtls_ssl_write_handshake_msg+0x3c>
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 800e646:	2b16      	cmp	r3, #22
 800e648:	d115      	bne.n	800e676 <mbedtls_ssl_write_handshake_msg+0xaa>
        ssl->out_msg[1] = (unsigned char)( hs_len >> 16 );
 800e64a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    const size_t hs_len = ssl->out_msglen - 4;
 800e64e:	1f2b      	subs	r3, r5, #4
        ssl->out_msg[1] = (unsigned char)( hs_len >> 16 );
 800e650:	0c19      	lsrs	r1, r3, #16
 800e652:	7051      	strb	r1, [r2, #1]
        ssl->out_msg[2] = (unsigned char)( hs_len >>  8 );
 800e654:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800e658:	0a19      	lsrs	r1, r3, #8
 800e65a:	7091      	strb	r1, [r2, #2]
        ssl->out_msg[3] = (unsigned char)( hs_len       );
 800e65c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800e660:	70d3      	strb	r3, [r2, #3]
        if( hs_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 800e662:	b146      	cbz	r6, 800e676 <mbedtls_ssl_write_handshake_msg+0xaa>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, ssl->out_msglen );
 800e664:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e666:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 800e66a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800e66e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800e672:	4620      	mov	r0, r4
 800e674:	4798      	blx	r3
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 800e676:	2101      	movs	r1, #1
 800e678:	4620      	mov	r0, r4
 800e67a:	f7ff fce9 	bl	800e050 <mbedtls_ssl_write_record>
 800e67e:	4605      	mov	r5, r0
 800e680:	b150      	cbz	r0, 800e698 <mbedtls_ssl_write_handshake_msg+0xcc>
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_write_record", ret );
 800e682:	4b0f      	ldr	r3, [pc, #60]	; (800e6c0 <mbedtls_ssl_write_handshake_msg+0xf4>)
 800e684:	9001      	str	r0, [sp, #4]
 800e686:	9300      	str	r3, [sp, #0]
 800e688:	4a09      	ldr	r2, [pc, #36]	; (800e6b0 <mbedtls_ssl_write_handshake_msg+0xe4>)
 800e68a:	f640 43f3 	movw	r3, #3315	; 0xcf3
 800e68e:	2101      	movs	r1, #1
 800e690:	4620      	mov	r0, r4
 800e692:	f7f7 fded 	bl	8006270 <mbedtls_debug_print_ret>
            return( ret );
 800e696:	e7b8      	b.n	800e60a <mbedtls_ssl_write_handshake_msg+0x3e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write handshake message" ) );
 800e698:	4b0a      	ldr	r3, [pc, #40]	; (800e6c4 <mbedtls_ssl_write_handshake_msg+0xf8>)
 800e69a:	4a05      	ldr	r2, [pc, #20]	; (800e6b0 <mbedtls_ssl_write_handshake_msg+0xe4>)
 800e69c:	9300      	str	r3, [sp, #0]
 800e69e:	2102      	movs	r1, #2
 800e6a0:	f640 43f8 	movw	r3, #3320	; 0xcf8
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	f7f7 fdb3 	bl	8006210 <mbedtls_debug_print_msg>
    return( 0 );
 800e6aa:	e7ae      	b.n	800e60a <mbedtls_ssl_write_handshake_msg+0x3e>
 800e6ac:	0801848b 	.word	0x0801848b
 800e6b0:	08018828 	.word	0x08018828
 800e6b4:	08017544 	.word	0x08017544
 800e6b8:	ffff9400 	.word	0xffff9400
 800e6bc:	080184a6 	.word	0x080184a6
 800e6c0:	08018351 	.word	0x08018351
 800e6c4:	080184cc 	.word	0x080184cc

0800e6c8 <mbedtls_ssl_prepare_handshake_record>:
{
 800e6c8:	b530      	push	{r4, r5, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 800e6ca:	6f01      	ldr	r1, [r0, #112]	; 0x70
{
 800e6cc:	b085      	sub	sp, #20
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 800e6ce:	2903      	cmp	r1, #3
{
 800e6d0:	4604      	mov	r4, r0
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 800e6d2:	d80b      	bhi.n	800e6ec <mbedtls_ssl_prepare_handshake_record+0x24>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
 800e6d4:	4b19      	ldr	r3, [pc, #100]	; (800e73c <mbedtls_ssl_prepare_handshake_record+0x74>)
 800e6d6:	9101      	str	r1, [sp, #4]
 800e6d8:	9300      	str	r3, [sp, #0]
 800e6da:	4a19      	ldr	r2, [pc, #100]	; (800e740 <mbedtls_ssl_prepare_handshake_record+0x78>)
 800e6dc:	f640 6322 	movw	r3, #3618	; 0xe22
 800e6e0:	2101      	movs	r1, #1
 800e6e2:	f7f7 fd95 	bl	8006210 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 800e6e6:	4817      	ldr	r0, [pc, #92]	; (800e744 <mbedtls_ssl_prepare_handshake_record+0x7c>)
}
 800e6e8:	b005      	add	sp, #20
 800e6ea:	bd30      	pop	{r4, r5, pc}
 800e6ec:	6e42      	ldr	r2, [r0, #100]	; 0x64
            ( ssl->in_msg[2] << 8  ) |
 800e6ee:	7893      	ldrb	r3, [r2, #2]
    return( ( ssl->in_msg[1] << 16 ) |
 800e6f0:	7855      	ldrb	r5, [r2, #1]
            ( ssl->in_msg[2] << 8  ) |
 800e6f2:	021b      	lsls	r3, r3, #8
    return( ( ssl->in_msg[1] << 16 ) |
 800e6f4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
              ssl->in_msg[3] );
 800e6f8:	78d5      	ldrb	r5, [r2, #3]
            ( ssl->in_msg[2] << 8  ) |
 800e6fa:	432b      	orrs	r3, r5
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
 800e6fc:	3304      	adds	r3, #4
 800e6fe:	6783      	str	r3, [r0, #120]	; 0x78
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "handshake message: msglen ="
 800e700:	9303      	str	r3, [sp, #12]
 800e702:	7813      	ldrb	r3, [r2, #0]
 800e704:	9101      	str	r1, [sp, #4]
 800e706:	9302      	str	r3, [sp, #8]
 800e708:	4b0f      	ldr	r3, [pc, #60]	; (800e748 <mbedtls_ssl_prepare_handshake_record+0x80>)
 800e70a:	4a0d      	ldr	r2, [pc, #52]	; (800e740 <mbedtls_ssl_prepare_handshake_record+0x78>)
 800e70c:	9300      	str	r3, [sp, #0]
 800e70e:	2103      	movs	r1, #3
 800e710:	f640 632a 	movw	r3, #3626	; 0xe2a
 800e714:	f7f7 fd7c 	bl	8006210 <mbedtls_debug_print_msg>
    if( ssl->in_msglen < ssl->in_hslen )
 800e718:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800e71a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d20a      	bcs.n	800e736 <mbedtls_ssl_prepare_handshake_record+0x6e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
 800e720:	4b0a      	ldr	r3, [pc, #40]	; (800e74c <mbedtls_ssl_prepare_handshake_record+0x84>)
 800e722:	4620      	mov	r0, r4
 800e724:	9300      	str	r3, [sp, #0]
 800e726:	4a06      	ldr	r2, [pc, #24]	; (800e740 <mbedtls_ssl_prepare_handshake_record+0x78>)
 800e728:	f640 6372 	movw	r3, #3698	; 0xe72
 800e72c:	2101      	movs	r1, #1
 800e72e:	f7f7 fd6f 	bl	8006210 <mbedtls_debug_print_msg>
 800e732:	4807      	ldr	r0, [pc, #28]	; (800e750 <mbedtls_ssl_prepare_handshake_record+0x88>)
 800e734:	e7d8      	b.n	800e6e8 <mbedtls_ssl_prepare_handshake_record+0x20>
    return( 0 );
 800e736:	2000      	movs	r0, #0
 800e738:	e7d6      	b.n	800e6e8 <mbedtls_ssl_prepare_handshake_record+0x20>
 800e73a:	bf00      	nop
 800e73c:	08017eba 	.word	0x08017eba
 800e740:	08018828 	.word	0x08018828
 800e744:	ffff8e00 	.word	0xffff8e00
 800e748:	08017eda 	.word	0x08017eda
 800e74c:	08017f10 	.word	0x08017f10
 800e750:	ffff8f80 	.word	0xffff8f80

0800e754 <mbedtls_ssl_update_handshake_status>:
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
 800e754:	6842      	ldr	r2, [r0, #4]
{
 800e756:	b410      	push	{r4}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
 800e758:	2a10      	cmp	r2, #16
 800e75a:	d008      	beq.n	800e76e <mbedtls_ssl_update_handshake_status+0x1a>
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;
 800e75c:	6b02      	ldr	r2, [r0, #48]	; 0x30
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
 800e75e:	b132      	cbz	r2, 800e76e <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 800e760:	f8d2 4150 	ldr.w	r4, [r2, #336]	; 0x150
 800e764:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800e766:	4623      	mov	r3, r4
 800e768:	6f82      	ldr	r2, [r0, #120]	; 0x78
}
 800e76a:	bc10      	pop	{r4}
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 800e76c:	4718      	bx	r3
}
 800e76e:	bc10      	pop	{r4}
 800e770:	4770      	bx	lr
	...

0800e774 <mbedtls_ssl_handle_message_type>:
{
 800e774:	b530      	push	{r4, r5, lr}
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 800e776:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 800e778:	b085      	sub	sp, #20
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 800e77a:	2b16      	cmp	r3, #22
{
 800e77c:	4604      	mov	r4, r0
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 800e77e:	d00d      	beq.n	800e79c <mbedtls_ssl_handle_message_type+0x28>
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 800e780:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e782:	2b14      	cmp	r3, #20
 800e784:	d11f      	bne.n	800e7c6 <mbedtls_ssl_handle_message_type+0x52>
        if( ssl->in_msglen != 1 )
 800e786:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800e788:	2901      	cmp	r1, #1
 800e78a:	d00d      	beq.n	800e7a8 <mbedtls_ssl_handle_message_type+0x34>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
 800e78c:	4b32      	ldr	r3, [pc, #200]	; (800e858 <mbedtls_ssl_handle_message_type+0xe4>)
 800e78e:	9101      	str	r1, [sp, #4]
 800e790:	9300      	str	r3, [sp, #0]
 800e792:	f241 4309 	movw	r3, #5129	; 0x1409
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid alert message, len: %d",
 800e796:	4a31      	ldr	r2, [pc, #196]	; (800e85c <mbedtls_ssl_handle_message_type+0xe8>)
 800e798:	2101      	movs	r1, #1
 800e79a:	e00f      	b.n	800e7bc <mbedtls_ssl_handle_message_type+0x48>
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 800e79c:	f7ff ff94 	bl	800e6c8 <mbedtls_ssl_prepare_handshake_record>
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	d0ed      	beq.n	800e780 <mbedtls_ssl_handle_message_type+0xc>
}
 800e7a4:	b005      	add	sp, #20
 800e7a6:	bd30      	pop	{r4, r5, pc}
        if( ssl->in_msg[0] != 1 )
 800e7a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	2b01      	cmp	r3, #1
 800e7ae:	d04e      	beq.n	800e84e <mbedtls_ssl_handle_message_type+0xda>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, content: %02x",
 800e7b0:	9301      	str	r3, [sp, #4]
 800e7b2:	4b2b      	ldr	r3, [pc, #172]	; (800e860 <mbedtls_ssl_handle_message_type+0xec>)
 800e7b4:	4a29      	ldr	r2, [pc, #164]	; (800e85c <mbedtls_ssl_handle_message_type+0xe8>)
 800e7b6:	9300      	str	r3, [sp, #0]
 800e7b8:	f241 4310 	movw	r3, #5136	; 0x1410
 800e7bc:	4620      	mov	r0, r4
 800e7be:	f7f7 fd27 	bl	8006210 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 800e7c2:	4828      	ldr	r0, [pc, #160]	; (800e864 <mbedtls_ssl_handle_message_type+0xf0>)
 800e7c4:	e7ee      	b.n	800e7a4 <mbedtls_ssl_handle_message_type+0x30>
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 800e7c6:	2b15      	cmp	r3, #21
 800e7c8:	d141      	bne.n	800e84e <mbedtls_ssl_handle_message_type+0xda>
        if( ssl->in_msglen != 2 )
 800e7ca:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800e7cc:	2d02      	cmp	r5, #2
 800e7ce:	d005      	beq.n	800e7dc <mbedtls_ssl_handle_message_type+0x68>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid alert message, len: %d",
 800e7d0:	4b25      	ldr	r3, [pc, #148]	; (800e868 <mbedtls_ssl_handle_message_type+0xf4>)
 800e7d2:	9501      	str	r5, [sp, #4]
 800e7d4:	9300      	str	r3, [sp, #0]
 800e7d6:	f241 432d 	movw	r3, #5165	; 0x142d
 800e7da:	e7dc      	b.n	800e796 <mbedtls_ssl_handle_message_type+0x22>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "got an alert message, type: [%d:%d]",
 800e7dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7de:	4629      	mov	r1, r5
 800e7e0:	785a      	ldrb	r2, [r3, #1]
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	9202      	str	r2, [sp, #8]
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	4a1c      	ldr	r2, [pc, #112]	; (800e85c <mbedtls_ssl_handle_message_type+0xe8>)
 800e7ea:	9301      	str	r3, [sp, #4]
 800e7ec:	4b1f      	ldr	r3, [pc, #124]	; (800e86c <mbedtls_ssl_handle_message_type+0xf8>)
 800e7ee:	9300      	str	r3, [sp, #0]
 800e7f0:	f241 4332 	movw	r3, #5170	; 0x1432
 800e7f4:	f7f7 fd0c 	bl	8006210 <mbedtls_debug_print_msg>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 800e7f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7fa:	781a      	ldrb	r2, [r3, #0]
 800e7fc:	2a02      	cmp	r2, #2
 800e7fe:	d10c      	bne.n	800e81a <mbedtls_ssl_handle_message_type+0xa6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
 800e800:	785b      	ldrb	r3, [r3, #1]
 800e802:	4620      	mov	r0, r4
 800e804:	9301      	str	r3, [sp, #4]
 800e806:	4b1a      	ldr	r3, [pc, #104]	; (800e870 <mbedtls_ssl_handle_message_type+0xfc>)
 800e808:	4a14      	ldr	r2, [pc, #80]	; (800e85c <mbedtls_ssl_handle_message_type+0xe8>)
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	2101      	movs	r1, #1
 800e80e:	f241 433a 	movw	r3, #5178	; 0x143a
 800e812:	f7f7 fcfd 	bl	8006210 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 800e816:	4817      	ldr	r0, [pc, #92]	; (800e874 <mbedtls_ssl_handle_message_type+0x100>)
 800e818:	e7c4      	b.n	800e7a4 <mbedtls_ssl_handle_message_type+0x30>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 800e81a:	2a01      	cmp	r2, #1
 800e81c:	d119      	bne.n	800e852 <mbedtls_ssl_handle_message_type+0xde>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 800e81e:	785b      	ldrb	r3, [r3, #1]
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 800e820:	b953      	cbnz	r3, 800e838 <mbedtls_ssl_handle_message_type+0xc4>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
 800e822:	4b15      	ldr	r3, [pc, #84]	; (800e878 <mbedtls_ssl_handle_message_type+0x104>)
 800e824:	4620      	mov	r0, r4
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	4a0c      	ldr	r2, [pc, #48]	; (800e85c <mbedtls_ssl_handle_message_type+0xe8>)
 800e82a:	f241 4341 	movw	r3, #5185	; 0x1441
 800e82e:	4629      	mov	r1, r5
 800e830:	f7f7 fcee 	bl	8006210 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 800e834:	4811      	ldr	r0, [pc, #68]	; (800e87c <mbedtls_ssl_handle_message_type+0x108>)
 800e836:	e7b5      	b.n	800e7a4 <mbedtls_ssl_handle_message_type+0x30>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 800e838:	2b64      	cmp	r3, #100	; 0x64
 800e83a:	d10a      	bne.n	800e852 <mbedtls_ssl_handle_message_type+0xde>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a SSLv3 no renegotiation alert" ) );
 800e83c:	4b10      	ldr	r3, [pc, #64]	; (800e880 <mbedtls_ssl_handle_message_type+0x10c>)
 800e83e:	4a07      	ldr	r2, [pc, #28]	; (800e85c <mbedtls_ssl_handle_message_type+0xe8>)
 800e840:	9300      	str	r3, [sp, #0]
 800e842:	4629      	mov	r1, r5
 800e844:	f241 4349 	movw	r3, #5193	; 0x1449
 800e848:	4620      	mov	r0, r4
 800e84a:	f7f7 fce1 	bl	8006210 <mbedtls_debug_print_msg>
    return( 0 );
 800e84e:	2000      	movs	r0, #0
 800e850:	e7a8      	b.n	800e7a4 <mbedtls_ssl_handle_message_type+0x30>
        return MBEDTLS_ERR_SSL_NON_FATAL;
 800e852:	480c      	ldr	r0, [pc, #48]	; (800e884 <mbedtls_ssl_handle_message_type+0x110>)
 800e854:	e7a6      	b.n	800e7a4 <mbedtls_ssl_handle_message_type+0x30>
 800e856:	bf00      	nop
 800e858:	08017b70 	.word	0x08017b70
 800e85c:	08018828 	.word	0x08018828
 800e860:	08017b8d 	.word	0x08017b8d
 800e864:	ffff8e00 	.word	0xffff8e00
 800e868:	08017bb0 	.word	0x08017bb0
 800e86c:	08017bcf 	.word	0x08017bcf
 800e870:	08017bf3 	.word	0x08017bf3
 800e874:	ffff8880 	.word	0xffff8880
 800e878:	08017c15 	.word	0x08017c15
 800e87c:	ffff8780 	.word	0xffff8780
 800e880:	08017c2f 	.word	0x08017c2f
 800e884:	ffff9980 	.word	0xffff9980

0800e888 <mbedtls_ssl_send_alert_message>:
{
 800e888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e88a:	460f      	mov	r7, r1
 800e88c:	b085      	sub	sp, #20
 800e88e:	4615      	mov	r5, r2
    if( ssl == NULL || ssl->conf == NULL )
 800e890:	4604      	mov	r4, r0
 800e892:	2800      	cmp	r0, #0
 800e894:	d03e      	beq.n	800e914 <mbedtls_ssl_send_alert_message+0x8c>
 800e896:	6803      	ldr	r3, [r0, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d03b      	beq.n	800e914 <mbedtls_ssl_send_alert_message+0x8c>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
 800e89c:	4b1e      	ldr	r3, [pc, #120]	; (800e918 <mbedtls_ssl_send_alert_message+0x90>)
 800e89e:	4a1f      	ldr	r2, [pc, #124]	; (800e91c <mbedtls_ssl_send_alert_message+0x94>)
 800e8a0:	9300      	str	r3, [sp, #0]
 800e8a2:	2102      	movs	r1, #2
 800e8a4:	f241 4382 	movw	r3, #5250	; 0x1482
 800e8a8:	f7f7 fcb2 	bl	8006210 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));
 800e8ac:	4b1c      	ldr	r3, [pc, #112]	; (800e920 <mbedtls_ssl_send_alert_message+0x98>)
 800e8ae:	9502      	str	r5, [sp, #8]
 800e8b0:	9300      	str	r3, [sp, #0]
 800e8b2:	4a1a      	ldr	r2, [pc, #104]	; (800e91c <mbedtls_ssl_send_alert_message+0x94>)
 800e8b4:	f241 4383 	movw	r3, #5251	; 0x1483
 800e8b8:	2103      	movs	r1, #3
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	9701      	str	r7, [sp, #4]
 800e8be:	f7f7 fca7 	bl	8006210 <mbedtls_debug_print_msg>
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 800e8c2:	2315      	movs	r3, #21
    ssl->out_msglen = 2;
 800e8c4:	2602      	movs	r6, #2
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 800e8c6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0] = level;
 800e8ca:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl->out_msglen = 2;
 800e8ce:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msg[0] = level;
 800e8d2:	701f      	strb	r7, [r3, #0]
    ssl->out_msg[1] = message;
 800e8d4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 800e8d8:	2101      	movs	r1, #1
    ssl->out_msg[1] = message;
 800e8da:	705d      	strb	r5, [r3, #1]
    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 800e8dc:	4620      	mov	r0, r4
 800e8de:	f7ff fbb7 	bl	800e050 <mbedtls_ssl_write_record>
 800e8e2:	4605      	mov	r5, r0
 800e8e4:	b160      	cbz	r0, 800e900 <mbedtls_ssl_send_alert_message+0x78>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 800e8e6:	4b0f      	ldr	r3, [pc, #60]	; (800e924 <mbedtls_ssl_send_alert_message+0x9c>)
 800e8e8:	9001      	str	r0, [sp, #4]
 800e8ea:	9300      	str	r3, [sp, #0]
 800e8ec:	4a0b      	ldr	r2, [pc, #44]	; (800e91c <mbedtls_ssl_send_alert_message+0x94>)
 800e8ee:	f241 438c 	movw	r3, #5260	; 0x148c
 800e8f2:	2101      	movs	r1, #1
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	f7f7 fcbb 	bl	8006270 <mbedtls_debug_print_ret>
}
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	b005      	add	sp, #20
 800e8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );
 800e900:	4b09      	ldr	r3, [pc, #36]	; (800e928 <mbedtls_ssl_send_alert_message+0xa0>)
 800e902:	4a06      	ldr	r2, [pc, #24]	; (800e91c <mbedtls_ssl_send_alert_message+0x94>)
 800e904:	9300      	str	r3, [sp, #0]
 800e906:	4631      	mov	r1, r6
 800e908:	f241 438f 	movw	r3, #5263	; 0x148f
 800e90c:	4620      	mov	r0, r4
 800e90e:	f7f7 fc7f 	bl	8006210 <mbedtls_debug_print_msg>
    return( 0 );
 800e912:	e7f2      	b.n	800e8fa <mbedtls_ssl_send_alert_message+0x72>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800e914:	4d05      	ldr	r5, [pc, #20]	; (800e92c <mbedtls_ssl_send_alert_message+0xa4>)
 800e916:	e7f0      	b.n	800e8fa <mbedtls_ssl_send_alert_message+0x72>
 800e918:	08018314 	.word	0x08018314
 800e91c:	08018828 	.word	0x08018828
 800e920:	0801832a 	.word	0x0801832a
 800e924:	08018349 	.word	0x08018349
 800e928:	08018362 	.word	0x08018362
 800e92c:	ffff8f00 	.word	0xffff8f00

0800e930 <mbedtls_ssl_read_record>:
{
 800e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e934:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 800e936:	4ba5      	ldr	r3, [pc, #660]	; (800ebcc <mbedtls_ssl_read_record+0x29c>)
{
 800e938:	b09d      	sub	sp, #116	; 0x74
 800e93a:	9109      	str	r1, [sp, #36]	; 0x24
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	4aa4      	ldr	r2, [pc, #656]	; (800ebd0 <mbedtls_ssl_read_record+0x2a0>)
 800e940:	f241 03d7 	movw	r3, #4311	; 0x10d7
 800e944:	2102      	movs	r1, #2
 800e946:	f7f7 fc63 	bl	8006210 <mbedtls_debug_print_msg>
    if( ssl->keep_current_message == 0 )
 800e94a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e94e:	2b00      	cmp	r3, #0
 800e950:	f040 83db 	bne.w	800f10a <mbedtls_ssl_read_record+0x7da>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
 800e954:	4d9e      	ldr	r5, [pc, #632]	; (800ebd0 <mbedtls_ssl_read_record+0x2a0>)
    if( ssl->in_hslen != 0 )
 800e956:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800e958:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e95a:	2900      	cmp	r1, #0
 800e95c:	d04c      	beq.n	800e9f8 <mbedtls_ssl_read_record+0xc8>
        if( ssl->in_offt != NULL )
 800e95e:	b16b      	cbz	r3, 800e97c <mbedtls_ssl_read_record+0x4c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800e960:	4b9c      	ldr	r3, [pc, #624]	; (800ebd4 <mbedtls_ssl_read_record+0x2a4>)
 800e962:	4a9b      	ldr	r2, [pc, #620]	; (800ebd0 <mbedtls_ssl_read_record+0x2a0>)
 800e964:	9300      	str	r3, [sp, #0]
 800e966:	2101      	movs	r1, #1
 800e968:	f241 239b 	movw	r3, #4763	; 0x129b
 800e96c:	4620      	mov	r0, r4
 800e96e:	f7f7 fc4f 	bl	8006210 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800e972:	4e99      	ldr	r6, [pc, #612]	; (800ebd8 <mbedtls_ssl_read_record+0x2a8>)
}
 800e974:	4630      	mov	r0, r6
 800e976:	b01d      	add	sp, #116	; 0x74
 800e978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ssl->in_hslen < ssl->in_msglen )
 800e97c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800e97e:	4291      	cmp	r1, r2
 800e980:	d238      	bcs.n	800e9f4 <mbedtls_ssl_read_record+0xc4>
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 800e982:	6e60      	ldr	r0, [r4, #100]	; 0x64
            ssl->in_msglen -= ssl->in_hslen;
 800e984:	1a52      	subs	r2, r2, r1
 800e986:	6722      	str	r2, [r4, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 800e988:	4401      	add	r1, r0
 800e98a:	f003 fa23 	bl	8011dd4 <memmove>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
 800e98e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e990:	462a      	mov	r2, r5
 800e992:	9302      	str	r3, [sp, #8]
 800e994:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e996:	2104      	movs	r1, #4
 800e998:	9301      	str	r3, [sp, #4]
 800e99a:	4b90      	ldr	r3, [pc, #576]	; (800ebdc <mbedtls_ssl_read_record+0x2ac>)
 800e99c:	4620      	mov	r0, r4
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	f241 23bb 	movw	r3, #4795	; 0x12bb
 800e9a4:	f7f7 fc92 	bl	80062cc <mbedtls_debug_print_buf>
        ssl->in_hslen   = 0;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	67a3      	str	r3, [r4, #120]	; 0x78
 800e9ac:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
    if( ssl->in_msglen > 0 )
 800e9b0:	f1b8 0f00 	cmp.w	r8, #0
 800e9b4:	f040 8382 	bne.w	800f0bc <mbedtls_ssl_read_record+0x78c>
    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 800e9b8:	2105      	movs	r1, #5
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	f7ff fa06 	bl	800ddcc <mbedtls_ssl_fetch_input>
 800e9c0:	4606      	mov	r6, r0
 800e9c2:	b1e8      	cbz	r0, 800ea00 <mbedtls_ssl_read_record+0xd0>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 800e9c4:	4b86      	ldr	r3, [pc, #536]	; (800ebe0 <mbedtls_ssl_read_record+0x2b0>)
 800e9c6:	9601      	str	r6, [sp, #4]
 800e9c8:	9300      	str	r3, [sp, #0]
 800e9ca:	f241 336d 	movw	r3, #4973	; 0x136d
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decrypt_buf", ret );
 800e9ce:	462a      	mov	r2, r5
 800e9d0:	2101      	movs	r1, #1
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	f7f7 fc4c 	bl	8006270 <mbedtls_debug_print_ret>
                    if( ret == MBEDTLS_ERR_SSL_CONTINUE_PROCESSING )
 800e9d8:	f516 4fcb 	cmn.w	r6, #25984	; 0x6580
 800e9dc:	d0bb      	beq.n	800e956 <mbedtls_ssl_read_record+0x26>
                        MBEDTLS_SSL_DEBUG_RET( 1, ( "ssl_get_next_record" ), ret );
 800e9de:	4b81      	ldr	r3, [pc, #516]	; (800ebe4 <mbedtls_ssl_read_record+0x2b4>)
 800e9e0:	9601      	str	r6, [sp, #4]
 800e9e2:	9300      	str	r3, [sp, #0]
 800e9e4:	f241 03f8 	movw	r3, #4344	; 0x10f8
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_handle_message_type" ), ret );
 800e9e8:	4a79      	ldr	r2, [pc, #484]	; (800ebd0 <mbedtls_ssl_read_record+0x2a0>)
 800e9ea:	2101      	movs	r1, #1
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	f7f7 fc3f 	bl	8006270 <mbedtls_debug_print_ret>
            return( ret );
 800e9f2:	e7bf      	b.n	800e974 <mbedtls_ssl_read_record+0x44>
            ssl->in_msglen = 0;
 800e9f4:	6723      	str	r3, [r4, #112]	; 0x70
 800e9f6:	e7d7      	b.n	800e9a8 <mbedtls_ssl_read_record+0x78>
    else if( ssl->in_offt != NULL )
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d1d7      	bne.n	800e9ac <mbedtls_ssl_read_record+0x7c>
        ssl->in_msglen = 0;
 800e9fc:	6723      	str	r3, [r4, #112]	; 0x70
 800e9fe:	e7d5      	b.n	800e9ac <mbedtls_ssl_read_record+0x7c>
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );
 800ea00:	2305      	movs	r3, #5
 800ea02:	9302      	str	r3, [sp, #8]
 800ea04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea06:	462a      	mov	r2, r5
 800ea08:	9301      	str	r3, [sp, #4]
 800ea0a:	4b77      	ldr	r3, [pc, #476]	; (800ebe8 <mbedtls_ssl_read_record+0x2b8>)
 800ea0c:	2104      	movs	r1, #4
 800ea0e:	9300      	str	r3, [sp, #0]
 800ea10:	4620      	mov	r0, r4
 800ea12:	f640 73cf 	movw	r3, #4047	; 0xfcf
 800ea16:	f7f7 fc59 	bl	80062cc <mbedtls_debug_print_buf>
    ssl->in_msgtype =  ssl->in_hdr[0];
 800ea1a:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 800ea1c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    ssl->in_msgtype =  ssl->in_hdr[0];
 800ea1e:	7811      	ldrb	r1, [r2, #0]
 800ea20:	66e1      	str	r1, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 800ea22:	7806      	ldrb	r6, [r0, #0]
 800ea24:	7843      	ldrb	r3, [r0, #1]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 800ea26:	4620      	mov	r0, r4
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 800ea28:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 800ea2c:	6723      	str	r3, [r4, #112]	; 0x70
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 800ea2e:	7857      	ldrb	r7, [r2, #1]
        *minor = ver[1];
 800ea30:	7896      	ldrb	r6, [r2, #2]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 800ea32:	9304      	str	r3, [sp, #16]
 800ea34:	4b6d      	ldr	r3, [pc, #436]	; (800ebec <mbedtls_ssl_read_record+0x2bc>)
 800ea36:	9101      	str	r1, [sp, #4]
 800ea38:	9300      	str	r3, [sp, #0]
 800ea3a:	9603      	str	r6, [sp, #12]
 800ea3c:	f640 73d8 	movw	r3, #4056	; 0xfd8
 800ea40:	9702      	str	r7, [sp, #8]
 800ea42:	462a      	mov	r2, r5
 800ea44:	2103      	movs	r1, #3
 800ea46:	f7f7 fbe3 	bl	8006210 <mbedtls_debug_print_msg>
        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
 800ea4a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ea4c:	3b14      	subs	r3, #20
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 800ea4e:	2b03      	cmp	r3, #3
 800ea50:	d90f      	bls.n	800ea72 <mbedtls_ssl_read_record+0x142>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "unknown record type" ) );
 800ea52:	4b67      	ldr	r3, [pc, #412]	; (800ebf0 <mbedtls_ssl_read_record+0x2c0>)
 800ea54:	4a5e      	ldr	r2, [pc, #376]	; (800ebd0 <mbedtls_ssl_read_record+0x2a0>)
 800ea56:	9300      	str	r3, [sp, #0]
 800ea58:	2101      	movs	r1, #1
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	f44f 637e 	mov.w	r3, #4064	; 0xfe0
 800ea60:	f7f7 fbd6 	bl	8006210 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800ea64:	220a      	movs	r2, #10
 800ea66:	2102      	movs	r1, #2
 800ea68:	4620      	mov	r0, r4
 800ea6a:	f7ff ff0d 	bl	800e888 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_INVALID_MAC );
 800ea6e:	4e61      	ldr	r6, [pc, #388]	; (800ebf4 <mbedtls_ssl_read_record+0x2c4>)
 800ea70:	e7b5      	b.n	800e9de <mbedtls_ssl_read_record+0xae>
    if( major_ver != ssl->major_ver )
 800ea72:	68a3      	ldr	r3, [r4, #8]
 800ea74:	429f      	cmp	r7, r3
 800ea76:	d009      	beq.n	800ea8c <mbedtls_ssl_read_record+0x15c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
 800ea78:	4b5f      	ldr	r3, [pc, #380]	; (800ebf8 <mbedtls_ssl_read_record+0x2c8>)
 800ea7a:	9300      	str	r3, [sp, #0]
 800ea7c:	f44f 637f 	mov.w	r3, #4080	; 0xff0
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 800ea80:	4a53      	ldr	r2, [pc, #332]	; (800ebd0 <mbedtls_ssl_read_record+0x2a0>)
 800ea82:	2101      	movs	r1, #1
 800ea84:	4620      	mov	r0, r4
 800ea86:	f7f7 fbc3 	bl	8006210 <mbedtls_debug_print_msg>
 800ea8a:	e7f0      	b.n	800ea6e <mbedtls_ssl_read_record+0x13e>
    if( minor_ver > ssl->conf->max_minor_ver )
 800ea8c:	6823      	ldr	r3, [r4, #0]
 800ea8e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ea92:	429e      	cmp	r6, r3
 800ea94:	dd04      	ble.n	800eaa0 <mbedtls_ssl_read_record+0x170>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
 800ea96:	4b59      	ldr	r3, [pc, #356]	; (800ebfc <mbedtls_ssl_read_record+0x2cc>)
 800ea98:	9300      	str	r3, [sp, #0]
 800ea9a:	f640 73f6 	movw	r3, #4086	; 0xff6
 800ea9e:	e7ef      	b.n	800ea80 <mbedtls_ssl_read_record+0x150>
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 800eaa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eaa2:	6d22      	ldr	r2, [r4, #80]	; 0x50
    if( ssl->in_msglen > MBEDTLS_SSL_IN_BUFFER_LEN
 800eaa4:	6f21      	ldr	r1, [r4, #112]	; 0x70
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 800eaa6:	1a9b      	subs	r3, r3, r2
 800eaa8:	f5c3 538a 	rsb	r3, r3, #4416	; 0x1140
 800eaac:	330d      	adds	r3, #13
    if( ssl->in_msglen > MBEDTLS_SSL_IN_BUFFER_LEN
 800eaae:	4299      	cmp	r1, r3
 800eab0:	d904      	bls.n	800eabc <mbedtls_ssl_read_record+0x18c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 800eab2:	4b53      	ldr	r3, [pc, #332]	; (800ec00 <mbedtls_ssl_read_record+0x2d0>)
 800eab4:	9300      	str	r3, [sp, #0]
 800eab6:	f640 73fe 	movw	r3, #4094	; 0xffe
 800eaba:	e7e1      	b.n	800ea80 <mbedtls_ssl_read_record+0x150>
    if( ssl->transform_in == NULL )
 800eabc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eabe:	b94b      	cbnz	r3, 800ead4 <mbedtls_ssl_read_record+0x1a4>
        if( ssl->in_msglen < 1 ||
 800eac0:	1e4b      	subs	r3, r1, #1
 800eac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eac6:	f0c0 832d 	bcc.w	800f124 <mbedtls_ssl_read_record+0x7f4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 800eaca:	4b4d      	ldr	r3, [pc, #308]	; (800ec00 <mbedtls_ssl_read_record+0x2d0>)
 800eacc:	9300      	str	r3, [sp, #0]
 800eace:	f241 035b 	movw	r3, #4187	; 0x105b
 800ead2:	e7d5      	b.n	800ea80 <mbedtls_ssl_read_record+0x150>
        if( ssl->in_msglen < ssl->transform_in->minlen )
 800ead4:	689b      	ldr	r3, [r3, #8]
 800ead6:	4299      	cmp	r1, r3
 800ead8:	d204      	bcs.n	800eae4 <mbedtls_ssl_read_record+0x1b4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 800eada:	4b49      	ldr	r3, [pc, #292]	; (800ec00 <mbedtls_ssl_read_record+0x2d0>)
 800eadc:	9300      	str	r3, [sp, #0]
 800eade:	f241 0363 	movw	r3, #4195	; 0x1063
 800eae2:	e7cd      	b.n	800ea80 <mbedtls_ssl_read_record+0x150>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 800eae4:	68e2      	ldr	r2, [r4, #12]
 800eae6:	2a00      	cmp	r2, #0
 800eae8:	f340 831c 	ble.w	800f124 <mbedtls_ssl_read_record+0x7f4>
                             MBEDTLS_SSL_IN_CONTENT_LEN + 256 )
 800eaec:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 800eaf0:	4299      	cmp	r1, r3
 800eaf2:	f240 8317 	bls.w	800f124 <mbedtls_ssl_read_record+0x7f4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 800eaf6:	4b42      	ldr	r3, [pc, #264]	; (800ec00 <mbedtls_ssl_read_record+0x2d0>)
 800eaf8:	9300      	str	r3, [sp, #0]
 800eafa:	f241 0378 	movw	r3, #4216	; 0x1078
 800eafe:	e7bf      	b.n	800ea80 <mbedtls_ssl_read_record+0x150>
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 800eb00:	6f23      	ldr	r3, [r4, #112]	; 0x70
        ssl->in_left = 0;
 800eb02:	6766      	str	r6, [r4, #116]	; 0x74
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 800eb04:	3305      	adds	r3, #5
 800eb06:	9302      	str	r3, [sp, #8]
 800eb08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb0a:	462a      	mov	r2, r5
 800eb0c:	9301      	str	r3, [sp, #4]
 800eb0e:	4b3d      	ldr	r3, [pc, #244]	; (800ec04 <mbedtls_ssl_read_record+0x2d4>)
 800eb10:	2104      	movs	r1, #4
 800eb12:	9300      	str	r3, [sp, #0]
 800eb14:	4620      	mov	r0, r4
 800eb16:	f241 0389 	movw	r3, #4233	; 0x1089
 800eb1a:	f7f7 fbd7 	bl	80062cc <mbedtls_debug_print_buf>
    if( !done && ssl->transform_in != NULL )
 800eb1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	f000 82cb 	beq.w	800f0bc <mbedtls_ssl_read_record+0x78c>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );
 800eb26:	4b38      	ldr	r3, [pc, #224]	; (800ec08 <mbedtls_ssl_read_record+0x2d8>)
 800eb28:	462a      	mov	r2, r5
 800eb2a:	9300      	str	r3, [sp, #0]
 800eb2c:	2102      	movs	r1, #2
 800eb2e:	f240 7302 	movw	r3, #1794	; 0x702
 800eb32:	4620      	mov	r0, r4
 800eb34:	f7f7 fb6c 	bl	8006210 <mbedtls_debug_print_msg>
    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 800eb38:	6a23      	ldr	r3, [r4, #32]
 800eb3a:	b10b      	cbz	r3, 800eb40 <mbedtls_ssl_read_record+0x210>
 800eb3c:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800eb3e:	b956      	cbnz	r6, 800eb56 <mbedtls_ssl_read_record+0x226>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800eb40:	4b24      	ldr	r3, [pc, #144]	; (800ebd4 <mbedtls_ssl_read_record+0x2a4>)
 800eb42:	9300      	str	r3, [sp, #0]
 800eb44:	f240 7306 	movw	r3, #1798	; 0x706
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800eb48:	462a      	mov	r2, r5
 800eb4a:	2101      	movs	r1, #1
 800eb4c:	4620      	mov	r0, r4
 800eb4e:	f7f7 fb5f 	bl	8006210 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800eb52:	4e21      	ldr	r6, [pc, #132]	; (800ebd8 <mbedtls_ssl_read_record+0x2a8>)
 800eb54:	e0d9      	b.n	800ed0a <mbedtls_ssl_read_record+0x3da>
 800eb56:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
    if( ctx->cipher_info == NULL )
 800eb5a:	b103      	cbz	r3, 800eb5e <mbedtls_ssl_read_record+0x22e>
    return ctx->cipher_info->mode;
 800eb5c:	785b      	ldrb	r3, [r3, #1]
    if( ssl->in_msglen < ssl->transform_in->minlen )
 800eb5e:	6f27      	ldr	r7, [r4, #112]	; 0x70
 800eb60:	68b2      	ldr	r2, [r6, #8]
 800eb62:	4297      	cmp	r7, r2
 800eb64:	d20b      	bcs.n	800eb7e <mbedtls_ssl_read_record+0x24e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "in_msglen (%d) < minlen (%d)",
 800eb66:	4b29      	ldr	r3, [pc, #164]	; (800ec0c <mbedtls_ssl_read_record+0x2dc>)
 800eb68:	9202      	str	r2, [sp, #8]
 800eb6a:	9300      	str	r3, [sp, #0]
 800eb6c:	f240 730f 	movw	r3, #1807	; 0x70f
 800eb70:	9701      	str	r7, [sp, #4]
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
 800eb72:	462a      	mov	r2, r5
 800eb74:	2101      	movs	r1, #1
 800eb76:	4620      	mov	r0, r4
 800eb78:	f7f7 fb4a 	bl	8006210 <mbedtls_debug_print_msg>
 800eb7c:	e023      	b.n	800ebc6 <mbedtls_ssl_read_record+0x296>
    if( mode == MBEDTLS_MODE_GCM ||
 800eb7e:	2b06      	cmp	r3, #6
 800eb80:	d004      	beq.n	800eb8c <mbedtls_ssl_read_record+0x25c>
 800eb82:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800eb86:	2a08      	cmp	r2, #8
 800eb88:	f040 80ec 	bne.w	800ed64 <mbedtls_ssl_read_record+0x434>
        unsigned char taglen = transform->ciphersuite_info->flags &
 800eb8c:	6833      	ldr	r3, [r6, #0]
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
 800eb8e:	6932      	ldr	r2, [r6, #16]
        unsigned char taglen = transform->ciphersuite_info->flags &
 800eb90:	7f1b      	ldrb	r3, [r3, #28]
 800eb92:	f013 0f02 	tst.w	r3, #2
 800eb96:	bf0c      	ite	eq
 800eb98:	f04f 0810 	moveq.w	r8, #16
 800eb9c:	f04f 0808 	movne.w	r8, #8
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
 800eba0:	68f3      	ldr	r3, [r6, #12]
 800eba2:	1a9b      	subs	r3, r3, r2
        if( ssl->in_msglen < explicit_iv_len + taglen )
 800eba4:	eb03 0208 	add.w	r2, r3, r8
 800eba8:	4297      	cmp	r7, r2
 800ebaa:	d235      	bcs.n	800ec18 <mbedtls_ssl_read_record+0x2e8>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
 800ebac:	9302      	str	r3, [sp, #8]
 800ebae:	4b18      	ldr	r3, [pc, #96]	; (800ec10 <mbedtls_ssl_read_record+0x2e0>)
 800ebb0:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebb4:	9300      	str	r3, [sp, #0]
 800ebb6:	f240 7346 	movw	r3, #1862	; 0x746
 800ebba:	9701      	str	r7, [sp, #4]
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
 800ebbc:	462a      	mov	r2, r5
 800ebbe:	2101      	movs	r1, #1
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	f7f7 fb25 	bl	8006210 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_MAC );
 800ebc6:	4e13      	ldr	r6, [pc, #76]	; (800ec14 <mbedtls_ssl_read_record+0x2e4>)
 800ebc8:	e09f      	b.n	800ed0a <mbedtls_ssl_read_record+0x3da>
 800ebca:	bf00      	nop
 800ebcc:	08018009 	.word	0x08018009
 800ebd0:	08018828 	.word	0x08018828
 800ebd4:	08017544 	.word	0x08017544
 800ebd8:	ffff9400 	.word	0xffff9400
 800ebdc:	08018018 	.word	0x08018018
 800ebe0:	08018034 	.word	0x08018034
 800ebe4:	08018264 	.word	0x08018264
 800ebe8:	0801804c 	.word	0x0801804c
 800ebec:	08018060 	.word	0x08018060
 800ebf0:	0801809b 	.word	0x0801809b
 800ebf4:	ffff8e00 	.word	0xffff8e00
 800ebf8:	080180af 	.word	0x080180af
 800ebfc:	080180c6 	.word	0x080180c6
 800ec00:	080180dd 	.word	0x080180dd
 800ec04:	080180f0 	.word	0x080180f0
 800ec08:	0801810a 	.word	0x0801810a
 800ec0c:	08018119 	.word	0x08018119
 800ec10:	08018136 	.word	0x08018136
 800ec14:	ffff8e80 	.word	0xffff8e80
        memcpy( add_data, ssl->in_ctr, 8 );
 800ec18:	f10d 0940 	add.w	r9, sp, #64	; 0x40
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 800ec1c:	1aff      	subs	r7, r7, r3
        memcpy( add_data, ssl->in_ctr, 8 );
 800ec1e:	464b      	mov	r3, r9
 800ec20:	6d62      	ldr	r2, [r4, #84]	; 0x54
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 800ec22:	eba7 0708 	sub.w	r7, r7, r8
        ssl->in_msglen = dec_msglen;
 800ec26:	6727      	str	r7, [r4, #112]	; 0x70
        memcpy( add_data, ssl->in_ctr, 8 );
 800ec28:	6810      	ldr	r0, [r2, #0]
 800ec2a:	6851      	ldr	r1, [r2, #4]
        ver[0] = (unsigned char) major;
 800ec2c:	68a2      	ldr	r2, [r4, #8]
        memcpy( add_data, ssl->in_ctr, 8 );
 800ec2e:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
 800ec30:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        ver[0] = (unsigned char) major;
 800ec32:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
        add_data[8]  = ssl->in_msgtype;
 800ec36:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 800ec3a:	68e3      	ldr	r3, [r4, #12]
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );
 800ec3c:	f8cd 9004 	str.w	r9, [sp, #4]
        ver[1] = (unsigned char) minor;
 800ec40:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 800ec44:	0a3b      	lsrs	r3, r7, #8
 800ec46:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );
 800ec4a:	230d      	movs	r3, #13
 800ec4c:	9302      	str	r3, [sp, #8]
 800ec4e:	4baf      	ldr	r3, [pc, #700]	; (800ef0c <mbedtls_ssl_read_record+0x5dc>)
 800ec50:	462a      	mov	r2, r5
 800ec52:	9300      	str	r3, [sp, #0]
 800ec54:	2104      	movs	r1, #4
 800ec56:	f240 7359 	movw	r3, #1881	; 0x759
 800ec5a:	4620      	mov	r0, r4
        dec_msg = ssl->in_msg;
 800ec5c:	f8d4 b064 	ldr.w	fp, [r4, #100]	; 0x64
        add_data[12] = ssl->in_msglen & 0xFF;
 800ec60:	f88d 704c 	strb.w	r7, [sp, #76]	; 0x4c
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );
 800ec64:	f7f7 fb32 	bl	80062cc <mbedtls_debug_print_buf>
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
 800ec68:	68f3      	ldr	r3, [r6, #12]
 800ec6a:	2b0c      	cmp	r3, #12
 800ec6c:	d16c      	bne.n	800ed48 <mbedtls_ssl_read_record+0x418>
 800ec6e:	6933      	ldr	r3, [r6, #16]
 800ec70:	2b04      	cmp	r3, #4
 800ec72:	d150      	bne.n	800ed16 <mbedtls_ssl_read_record+0x3e6>
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
 800ec74:	6ab3      	ldr	r3, [r6, #40]	; 0x28
            memcpy( iv + transform->fixed_ivlen, ssl->in_iv, 8 );
 800ec76:	6e22      	ldr	r2, [r4, #96]	; 0x60
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
 800ec78:	930d      	str	r3, [sp, #52]	; 0x34
            memcpy( iv + transform->fixed_ivlen, ssl->in_iv, 8 );
 800ec7a:	6810      	ldr	r0, [r2, #0]
 800ec7c:	6851      	ldr	r1, [r2, #4]
 800ec7e:	ab0e      	add	r3, sp, #56	; 0x38
 800ec80:	c303      	stmia	r3!, {r0, r1}
        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", iv, transform->ivlen );
 800ec82:	230c      	movs	r3, #12
 800ec84:	9302      	str	r3, [sp, #8]
 800ec86:	4ba2      	ldr	r3, [pc, #648]	; (800ef10 <mbedtls_ssl_read_record+0x5e0>)
 800ec88:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 800ec8c:	9300      	str	r3, [sp, #0]
 800ec8e:	462a      	mov	r2, r5
 800ec90:	f240 7376 	movw	r3, #1910	; 0x776
 800ec94:	2104      	movs	r1, #4
 800ec96:	4620      	mov	r0, r4
 800ec98:	f8cd a004 	str.w	sl, [sp, #4]
 800ec9c:	f7f7 fb16 	bl	80062cc <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );
 800eca0:	eb0b 0307 	add.w	r3, fp, r7
 800eca4:	9308      	str	r3, [sp, #32]
 800eca6:	9301      	str	r3, [sp, #4]
 800eca8:	4b9a      	ldr	r3, [pc, #616]	; (800ef14 <mbedtls_ssl_read_record+0x5e4>)
 800ecaa:	462a      	mov	r2, r5
 800ecac:	9300      	str	r3, [sp, #0]
 800ecae:	2104      	movs	r1, #4
 800ecb0:	f240 7377 	movw	r3, #1911	; 0x777
 800ecb4:	4620      	mov	r0, r4
 800ecb6:	f8cd 8008 	str.w	r8, [sp, #8]
 800ecba:	f7f7 fb07 	bl	80062cc <mbedtls_debug_print_buf>
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 800ecbe:	9b08      	ldr	r3, [sp, #32]
 800ecc0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ecc2:	9305      	str	r3, [sp, #20]
 800ecc4:	ab0c      	add	r3, sp, #48	; 0x30
 800ecc6:	9304      	str	r3, [sp, #16]
 800ecc8:	230d      	movs	r3, #13
 800ecca:	f8cd 8018 	str.w	r8, [sp, #24]
 800ecce:	9300      	str	r3, [sp, #0]
 800ecd0:	f8cd b00c 	str.w	fp, [sp, #12]
 800ecd4:	9702      	str	r7, [sp, #8]
 800ecd6:	f8cd b004 	str.w	fp, [sp, #4]
 800ecda:	68f2      	ldr	r2, [r6, #12]
 800ecdc:	464b      	mov	r3, r9
 800ecde:	4651      	mov	r1, sl
 800ece0:	3090      	adds	r0, #144	; 0x90
 800ece2:	f7f7 f975 	bl	8005fd0 <mbedtls_cipher_auth_decrypt>
 800ece6:	4606      	mov	r6, r0
 800ece8:	2800      	cmp	r0, #0
 800ecea:	d032      	beq.n	800ed52 <mbedtls_ssl_read_record+0x422>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );
 800ecec:	4b8a      	ldr	r3, [pc, #552]	; (800ef18 <mbedtls_ssl_read_record+0x5e8>)
 800ecee:	9001      	str	r0, [sp, #4]
 800ecf0:	9300      	str	r3, [sp, #0]
 800ecf2:	462a      	mov	r2, r5
 800ecf4:	f240 7383 	movw	r3, #1923	; 0x783
 800ecf8:	2101      	movs	r1, #1
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	f7f7 fab8 	bl	8006270 <mbedtls_debug_print_ret>
                return( MBEDTLS_ERR_SSL_INVALID_MAC );
 800ed00:	4b86      	ldr	r3, [pc, #536]	; (800ef1c <mbedtls_ssl_read_record+0x5ec>)
 800ed02:	f516 4fc6 	cmn.w	r6, #25344	; 0x6300
 800ed06:	bf08      	it	eq
 800ed08:	461e      	moveq	r6, r3
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decrypt_buf", ret );
 800ed0a:	4b85      	ldr	r3, [pc, #532]	; (800ef20 <mbedtls_ssl_read_record+0x5f0>)
 800ed0c:	9601      	str	r6, [sp, #4]
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	f241 039f 	movw	r3, #4255	; 0x109f
 800ed14:	e65b      	b.n	800e9ce <mbedtls_ssl_read_record+0x9e>
        else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
 800ed16:	2b0c      	cmp	r3, #12
 800ed18:	d116      	bne.n	800ed48 <mbedtls_ssl_read_record+0x418>
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
 800ed1a:	4632      	mov	r2, r6
 800ed1c:	f852 0f28 	ldr.w	r0, [r2, #40]!
 800ed20:	ab0d      	add	r3, sp, #52	; 0x34
 800ed22:	6851      	ldr	r1, [r2, #4]
 800ed24:	c303      	stmia	r3!, {r0, r1}
 800ed26:	6890      	ldr	r0, [r2, #8]
 800ed28:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 800ed2c:	6018      	str	r0, [r3, #0]
                iv[i+4] ^= ssl->in_ctr[i];
 800ed2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ed30:	1e5a      	subs	r2, r3, #1
 800ed32:	3307      	adds	r3, #7
 800ed34:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 800ed38:	7848      	ldrb	r0, [r1, #1]
            for( i = 0; i < 8; i++ )
 800ed3a:	4293      	cmp	r3, r2
                iv[i+4] ^= ssl->in_ctr[i];
 800ed3c:	ea80 000e 	eor.w	r0, r0, lr
 800ed40:	f801 0f01 	strb.w	r0, [r1, #1]!
            for( i = 0; i < 8; i++ )
 800ed44:	d1f6      	bne.n	800ed34 <mbedtls_ssl_read_record+0x404>
 800ed46:	e79c      	b.n	800ec82 <mbedtls_ssl_read_record+0x352>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800ed48:	4b76      	ldr	r3, [pc, #472]	; (800ef24 <mbedtls_ssl_read_record+0x5f4>)
 800ed4a:	9300      	str	r3, [sp, #0]
 800ed4c:	f240 7372 	movw	r3, #1906	; 0x772
 800ed50:	e6fa      	b.n	800eb48 <mbedtls_ssl_read_record+0x218>
        if( olen != dec_msglen )
 800ed52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed54:	429f      	cmp	r7, r3
 800ed56:	f000 8148 	beq.w	800efea <mbedtls_ssl_read_record+0x6ba>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800ed5a:	4b72      	ldr	r3, [pc, #456]	; (800ef24 <mbedtls_ssl_read_record+0x5f4>)
 800ed5c:	9300      	str	r3, [sp, #0]
 800ed5e:	f240 738e 	movw	r3, #1934	; 0x78e
 800ed62:	e6f1      	b.n	800eb48 <mbedtls_ssl_read_record+0x218>
    if( mode == MBEDTLS_MODE_CBC )
 800ed64:	2b02      	cmp	r3, #2
 800ed66:	f040 80b5 	bne.w	800eed4 <mbedtls_ssl_read_record+0x5a4>
        size_t olen = 0;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	9310      	str	r3, [sp, #64]	; 0x40
 800ed6e:	68f2      	ldr	r2, [r6, #12]
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 800ed70:	68e1      	ldr	r1, [r4, #12]
 800ed72:	6970      	ldr	r0, [r6, #20]
            minlen += ssl->transform_in->ivlen;
 800ed74:	2901      	cmp	r1, #1
 800ed76:	bfc8      	it	gt
 800ed78:	4690      	movgt	r8, r2
        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 800ed7a:	eb02 0308 	add.w	r3, r2, r8
 800ed7e:	429f      	cmp	r7, r3
 800ed80:	d303      	bcc.n	800ed8a <mbedtls_ssl_read_record+0x45a>
            ssl->in_msglen < minlen + ssl->transform_in->maclen + 1 )
 800ed82:	1c43      	adds	r3, r0, #1
 800ed84:	4498      	add	r8, r3
        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 800ed86:	4547      	cmp	r7, r8
 800ed88:	d207      	bcs.n	800ed9a <mbedtls_ssl_read_record+0x46a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
 800ed8a:	4b67      	ldr	r3, [pc, #412]	; (800ef28 <mbedtls_ssl_read_record+0x5f8>)
 800ed8c:	9003      	str	r0, [sp, #12]
 800ed8e:	9300      	str	r3, [sp, #0]
 800ed90:	9202      	str	r2, [sp, #8]
 800ed92:	9701      	str	r7, [sp, #4]
 800ed94:	f44f 63f6 	mov.w	r3, #1968	; 0x7b0
 800ed98:	e710      	b.n	800ebbc <mbedtls_ssl_read_record+0x28c>
        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
 800ed9a:	fbb7 f8f2 	udiv	r8, r7, r2
 800ed9e:	fb02 7818 	mls	r8, r2, r8, r7
 800eda2:	f1b8 0f00 	cmp.w	r8, #0
 800eda6:	d006      	beq.n	800edb6 <mbedtls_ssl_read_record+0x486>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
 800eda8:	4b60      	ldr	r3, [pc, #384]	; (800ef2c <mbedtls_ssl_read_record+0x5fc>)
 800edaa:	9202      	str	r2, [sp, #8]
 800edac:	9300      	str	r3, [sp, #0]
 800edae:	9701      	str	r7, [sp, #4]
 800edb0:	f240 73e9 	movw	r3, #2025	; 0x7e9
 800edb4:	e6dd      	b.n	800eb72 <mbedtls_ssl_read_record+0x242>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 800edb6:	2901      	cmp	r1, #1
        dec_msg = ssl->in_msg;
 800edb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 800edba:	dd07      	ble.n	800edcc <mbedtls_ssl_read_record+0x49c>
            ssl->in_msglen -= ssl->transform_in->ivlen;
 800edbc:	4640      	mov	r0, r8
            dec_msglen -= ssl->transform_in->ivlen;
 800edbe:	1abf      	subs	r7, r7, r2
            ssl->in_msglen -= ssl->transform_in->ivlen;
 800edc0:	6727      	str	r7, [r4, #112]	; 0x70
 800edc2:	b2c1      	uxtb	r1, r0
            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 800edc4:	428a      	cmp	r2, r1
 800edc6:	f100 0c01 	add.w	ip, r0, #1
 800edca:	d818      	bhi.n	800edfe <mbedtls_ssl_read_record+0x4ce>
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 800edcc:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 800edd0:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800edd4:	f106 0090 	add.w	r0, r6, #144	; 0x90
 800edd8:	f8cd 9008 	str.w	r9, [sp, #8]
 800eddc:	9301      	str	r3, [sp, #4]
 800edde:	9700      	str	r7, [sp, #0]
 800ede0:	f7f7 f8a6 	bl	8005f30 <mbedtls_cipher_crypt>
 800ede4:	4606      	mov	r6, r0
 800ede6:	b190      	cbz	r0, 800ee0e <mbedtls_ssl_read_record+0x4de>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 800ede8:	4b51      	ldr	r3, [pc, #324]	; (800ef30 <mbedtls_ssl_read_record+0x600>)
 800edea:	9001      	str	r0, [sp, #4]
 800edec:	9300      	str	r3, [sp, #0]
 800edee:	462a      	mov	r2, r5
 800edf0:	f640 0302 	movw	r3, #2050	; 0x802
 800edf4:	2101      	movs	r1, #1
 800edf6:	4620      	mov	r0, r4
 800edf8:	f7f7 fa3a 	bl	8006270 <mbedtls_debug_print_ret>
 800edfc:	e785      	b.n	800ed0a <mbedtls_ssl_read_record+0x3da>
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 800edfe:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800ee00:	f810 e001 	ldrb.w	lr, [r0, r1]
 800ee04:	4431      	add	r1, r6
 800ee06:	f881 e028 	strb.w	lr, [r1, #40]	; 0x28
 800ee0a:	4660      	mov	r0, ip
 800ee0c:	e7d9      	b.n	800edc2 <mbedtls_ssl_read_record+0x492>
        if( dec_msglen != olen )
 800ee0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee10:	429f      	cmp	r7, r3
 800ee12:	d004      	beq.n	800ee1e <mbedtls_ssl_read_record+0x4ee>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800ee14:	4b43      	ldr	r3, [pc, #268]	; (800ef24 <mbedtls_ssl_read_record+0x5f4>)
 800ee16:	9300      	str	r3, [sp, #0]
 800ee18:	f640 0308 	movw	r3, #2056	; 0x808
 800ee1c:	e694      	b.n	800eb48 <mbedtls_ssl_read_record+0x218>
        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 800ee1e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800ee20:	6e63      	ldr	r3, [r4, #100]	; 0x64
        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 800ee22:	6b60      	ldr	r0, [r4, #52]	; 0x34
        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 800ee24:	1899      	adds	r1, r3, r2
 800ee26:	f811 1c01 	ldrb.w	r1, [r1, #-1]
        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 800ee2a:	f8d0 e014 	ldr.w	lr, [r0, #20]
        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 800ee2e:	3101      	adds	r1, #1
        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 800ee30:	eb01 000e 	add.w	r0, r1, lr
 800ee34:	4282      	cmp	r2, r0
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 800ee36:	68e0      	ldr	r0, [r4, #12]
    size_t padlen = 0, correct = 1;
 800ee38:	bf2c      	ite	cs
 800ee3a:	2601      	movcs	r6, #1
            padlen = 0;
 800ee3c:	4631      	movcc	r1, r6
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	dd43      	ble.n	800eeca <mbedtls_ssl_read_record+0x59a>
            correct &= ( padlen <= ssl->in_msglen );
 800ee42:	428a      	cmp	r2, r1
 800ee44:	bf34      	ite	cc
 800ee46:	2600      	movcc	r6, #0
 800ee48:	f006 0601 	andcs.w	r6, r6, #1
            size_t pad_count = 0, real_count = 1;
 800ee4c:	2700      	movs	r7, #0
            size_t padding_idx = ssl->in_msglen - padlen;
 800ee4e:	eba2 0c01 	sub.w	ip, r2, r1
            correct &= ( padding_idx <= MBEDTLS_SSL_IN_CONTENT_LEN +
 800ee52:	f50e 5080 	add.w	r0, lr, #4096	; 0x1000
 800ee56:	4584      	cmp	ip, r0
 800ee58:	bf8c      	ite	hi
 800ee5a:	2600      	movhi	r6, #0
 800ee5c:	f006 0601 	andls.w	r6, r6, #1
            size_t pad_count = 0, real_count = 1;
 800ee60:	f04f 0a01 	mov.w	sl, #1
            for( i = 0; i < 256; i++ )
 800ee64:	4638      	mov	r0, r7
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 800ee66:	fb06 330c 	mla	r3, r6, ip, r3
 800ee6a:	f101 3bff 	add.w	fp, r1, #4294967295
 800ee6e:	f813 c000 	ldrb.w	ip, [r3, r0]
                real_count &= ( i < padlen );
 800ee72:	4281      	cmp	r1, r0
 800ee74:	bf94      	ite	ls
 800ee76:	f04f 0a00 	movls.w	sl, #0
 800ee7a:	f00a 0a01 	andhi.w	sl, sl, #1
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 800ee7e:	45dc      	cmp	ip, fp
 800ee80:	bf14      	ite	ne
 800ee82:	f04f 0c00 	movne.w	ip, #0
 800ee86:	f04f 0c01 	moveq.w	ip, #1
            for( i = 0; i < 256; i++ )
 800ee8a:	3001      	adds	r0, #1
 800ee8c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
                pad_count += real_count *
 800ee90:	fb0a 770c 	mla	r7, sl, ip, r7
            for( i = 0; i < 256; i++ )
 800ee94:	d1eb      	bne.n	800ee6e <mbedtls_ssl_read_record+0x53e>
            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
 800ee96:	42b9      	cmp	r1, r7
 800ee98:	bf14      	ite	ne
 800ee9a:	2600      	movne	r6, #0
 800ee9c:	f006 0601 	andeq.w	r6, r6, #1
            padlen &= correct * 0x1FF;
 800eea0:	0273      	lsls	r3, r6, #9
 800eea2:	1b9b      	subs	r3, r3, r6
 800eea4:	400b      	ands	r3, r1
        ssl->in_msglen -= padlen;
 800eea6:	1ad2      	subs	r2, r2, r3
        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 800eea8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        ssl->in_msglen -= ssl->transform_in->maclen;
 800eeaa:	eba2 020e 	sub.w	r2, r2, lr
 800eeae:	6722      	str	r2, [r4, #112]	; 0x70
        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 800eeb0:	0a12      	lsrs	r2, r2, #8
 800eeb2:	700a      	strb	r2, [r1, #0]
        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
 800eeb4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800eeb6:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800eeb8:	7051      	strb	r1, [r2, #1]
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 800eeba:	68e2      	ldr	r2, [r4, #12]
 800eebc:	2a00      	cmp	r2, #0
 800eebe:	dc0e      	bgt.n	800eede <mbedtls_ssl_read_record+0x5ae>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800eec0:	4b18      	ldr	r3, [pc, #96]	; (800ef24 <mbedtls_ssl_read_record+0x5f4>)
 800eec2:	9300      	str	r3, [sp, #0]
 800eec4:	f640 03f4 	movw	r3, #2292	; 0x8f4
 800eec8:	e63e      	b.n	800eb48 <mbedtls_ssl_read_record+0x218>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800eeca:	4b16      	ldr	r3, [pc, #88]	; (800ef24 <mbedtls_ssl_read_record+0x5f4>)
 800eecc:	9300      	str	r3, [sp, #0]
 800eece:	f640 0363 	movw	r3, #2147	; 0x863
 800eed2:	e639      	b.n	800eb48 <mbedtls_ssl_read_record+0x218>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800eed4:	4b13      	ldr	r3, [pc, #76]	; (800ef24 <mbedtls_ssl_read_record+0x5f4>)
 800eed6:	9300      	str	r3, [sp, #0]
 800eed8:	f640 036d 	movw	r3, #2157	; 0x86d
 800eedc:	e634      	b.n	800eb48 <mbedtls_ssl_read_record+0x218>
            switch( ssl->transform_in->ciphersuite_info->mac )
 800eede:	6b60      	ldr	r0, [r4, #52]	; 0x34
            const size_t max_len = ssl->in_msglen + padlen;
 800eee0:	6f22      	ldr	r2, [r4, #112]	; 0x70
            switch( ssl->transform_in->ciphersuite_info->mac )
 800eee2:	6801      	ldr	r1, [r0, #0]
            const size_t max_len = ssl->in_msglen + padlen;
 800eee4:	189f      	adds	r7, r3, r2
            switch( ssl->transform_in->ciphersuite_info->mac )
 800eee6:	7a49      	ldrb	r1, [r1, #9]
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 800eee8:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
            switch( ssl->transform_in->ciphersuite_info->mac )
 800eeec:	f1a1 0103 	sub.w	r1, r1, #3
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 800eef0:	bf8c      	ite	hi
 800eef2:	f5a7 7b80 	subhi.w	fp, r7, #256	; 0x100
 800eef6:	f04f 0b00 	movls.w	fp, #0
            switch( ssl->transform_in->ciphersuite_info->mac )
 800eefa:	2904      	cmp	r1, #4
 800eefc:	f200 8093 	bhi.w	800f026 <mbedtls_ssl_read_record+0x6f6>
 800ef00:	e8df f001 	tbb	[pc, r1]
 800ef04:	18911818 	.word	0x18911818
 800ef08:	88          	.byte	0x88
 800ef09:	00          	.byte	0x00
 800ef0a:	bf00      	nop
 800ef0c:	08018532 	.word	0x08018532
 800ef10:	08018167 	.word	0x08018167
 800ef14:	0801816f 	.word	0x0801816f
 800ef18:	08018178 	.word	0x08018178
 800ef1c:	ffff8e80 	.word	0xffff8e80
 800ef20:	08018254 	.word	0x08018254
 800ef24:	08017544 	.word	0x08017544
 800ef28:	08018194 	.word	0x08018194
 800ef2c:	080181d2 	.word	0x080181d2
 800ef30:	0801862b 	.word	0x0801862b
                                ( 13 + ssl->in_msglen          + 8 ) / 64;
 800ef34:	f102 0a15 	add.w	sl, r2, #21
                    extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 800ef38:	f107 0115 	add.w	r1, r7, #21
                                ( 13 + ssl->in_msglen          + 8 ) / 64;
 800ef3c:	ea4f 1a9a 	mov.w	sl, sl, lsr #6
                    extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 800ef40:	ebca 1291 	rsb	r2, sl, r1, lsr #6
            extra_run &= correct * 0xFF;
 800ef44:	ea4f 2a06 	mov.w	sl, r6, lsl #8
 800ef48:	ebaa 0a06 	sub.w	sl, sl, r6
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 800ef4c:	6d61      	ldr	r1, [r4, #84]	; 0x54
            extra_run &= correct * 0xFF;
 800ef4e:	ea0a 0a02 	and.w	sl, sl, r2
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 800ef52:	3044      	adds	r0, #68	; 0x44
 800ef54:	2208      	movs	r2, #8
 800ef56:	9308      	str	r3, [sp, #32]
 800ef58:	f7f8 fe02 	bl	8007b60 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
 800ef5c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ef5e:	2203      	movs	r2, #3
 800ef60:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ef62:	3044      	adds	r0, #68	; 0x44
 800ef64:	f7f8 fdfc 	bl	8007b60 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
 800ef68:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ef6a:	2202      	movs	r2, #2
 800ef6c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ef6e:	3044      	adds	r0, #68	; 0x44
 800ef70:	f7f8 fdf6 	bl	8007b60 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
 800ef74:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ef76:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800ef78:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ef7a:	3044      	adds	r0, #68	; 0x44
 800ef7c:	f7f8 fdf0 	bl	8007b60 <mbedtls_md_hmac_update>
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
 800ef80:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800ef82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ef84:	9b08      	ldr	r3, [sp, #32]
 800ef86:	440a      	add	r2, r1
    unsigned char acc = 0;
 800ef88:	2100      	movs	r1, #0
 800ef8a:	4413      	add	r3, r2
    for( ; len != 0; p++, len-- )
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d14f      	bne.n	800f030 <mbedtls_ssl_read_record+0x700>
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 800ef90:	6b60      	ldr	r0, [r4, #52]	; 0x34
    force = acc;
 800ef92:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 800ef96:	3044      	adds	r0, #68	; 0x44
 800ef98:	a910      	add	r1, sp, #64	; 0x40
    (void) force;
 800ef9a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 800ef9e:	f7f8 fdef 	bl	8007b80 <mbedtls_md_hmac_finish>
            for( j = 0; j < extra_run + 1; j++ )
 800efa2:	2300      	movs	r3, #0
 800efa4:	f10a 0a01 	add.w	sl, sl, #1
 800efa8:	4553      	cmp	r3, sl
 800efaa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800efac:	d344      	bcc.n	800f038 <mbedtls_ssl_read_record+0x708>
            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
 800efae:	3044      	adds	r0, #68	; 0x44
 800efb0:	f7f8 fe18 	bl	8007be4 <mbedtls_md_hmac_reset>
                                 max_len - min_len + ssl->transform_in->maclen );
 800efb4:	6b62      	ldr	r2, [r4, #52]	; 0x34
            ssl_read_memory( ssl->in_msg + min_len,
 800efb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
                                 max_len - min_len + ssl->transform_in->maclen );
 800efb8:	6951      	ldr	r1, [r2, #20]
    unsigned char acc = 0;
 800efba:	2200      	movs	r2, #0
 800efbc:	440f      	add	r7, r1
            ssl_read_memory( ssl->in_msg + min_len,
 800efbe:	449b      	add	fp, r3
 800efc0:	441f      	add	r7, r3
    for( ; len != 0; p++, len-- )
 800efc2:	45bb      	cmp	fp, r7
 800efc4:	d140      	bne.n	800f048 <mbedtls_ssl_read_record+0x718>
    force = acc;
 800efc6:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
    (void) force;
 800efca:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 800efce:	2200      	movs	r2, #0
        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 800efd0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800efd2:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e

    for( i = 0; i < n; i++ )
 800efd6:	4541      	cmp	r1, r8
 800efd8:	d13a      	bne.n	800f050 <mbedtls_ssl_read_record+0x720>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
 800efda:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800efde:	2b00      	cmp	r3, #0
 800efe0:	f47f adf1 	bne.w	800ebc6 <mbedtls_ssl_read_record+0x296>
    if( correct == 0 )
 800efe4:	2e00      	cmp	r6, #0
 800efe6:	f43f adee 	beq.w	800ebc6 <mbedtls_ssl_read_record+0x296>
    if( ssl->in_msglen == 0 )
 800efea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800efec:	2b00      	cmp	r3, #0
 800efee:	d14d      	bne.n	800f08c <mbedtls_ssl_read_record+0x75c>
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
 800eff0:	68e3      	ldr	r3, [r4, #12]
 800eff2:	2b03      	cmp	r3, #3
 800eff4:	d13b      	bne.n	800f06e <mbedtls_ssl_read_record+0x73e>
            && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 800eff6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800eff8:	2b17      	cmp	r3, #23
 800effa:	d038      	beq.n	800f06e <mbedtls_ssl_read_record+0x73e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
 800effc:	9301      	str	r3, [sp, #4]
 800effe:	4b60      	ldr	r3, [pc, #384]	; (800f180 <mbedtls_ssl_read_record+0x850>)
 800f000:	462a      	mov	r2, r5
 800f002:	9300      	str	r3, [sp, #0]
 800f004:	2101      	movs	r1, #1
 800f006:	f640 131e 	movw	r3, #2334	; 0x91e
 800f00a:	4620      	mov	r0, r4
 800f00c:	f7f7 f900 	bl	8006210 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 800f010:	4e5c      	ldr	r6, [pc, #368]	; (800f184 <mbedtls_ssl_read_record+0x854>)
 800f012:	e67a      	b.n	800ed0a <mbedtls_ssl_read_record+0x3da>
                                ( 13 + ssl->in_msglen          + 16 ) / 128;
 800f014:	f102 0a1d 	add.w	sl, r2, #29
                    extra_run = ( 13 + ssl->in_msglen + padlen + 16 ) / 128 -
 800f018:	f107 011d 	add.w	r1, r7, #29
                                ( 13 + ssl->in_msglen          + 16 ) / 128;
 800f01c:	ea4f 1ada 	mov.w	sl, sl, lsr #7
                    extra_run = ( 13 + ssl->in_msglen + padlen + 16 ) / 128 -
 800f020:	ebca 12d1 	rsb	r2, sl, r1, lsr #7
 800f024:	e78e      	b.n	800ef44 <mbedtls_ssl_read_record+0x614>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800f026:	4b58      	ldr	r3, [pc, #352]	; (800f188 <mbedtls_ssl_read_record+0x858>)
 800f028:	9300      	str	r3, [sp, #0]
 800f02a:	f640 03d1 	movw	r3, #2257	; 0x8d1
 800f02e:	e58b      	b.n	800eb48 <mbedtls_ssl_read_record+0x218>
        acc ^= *p;
 800f030:	f812 0b01 	ldrb.w	r0, [r2], #1
 800f034:	4041      	eors	r1, r0
 800f036:	e7a9      	b.n	800ef8c <mbedtls_ssl_read_record+0x65c>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 800f038:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f03a:	3044      	adds	r0, #68	; 0x44
 800f03c:	9308      	str	r3, [sp, #32]
 800f03e:	f7f8 fde9 	bl	8007c14 <mbedtls_md_process>
            for( j = 0; j < extra_run + 1; j++ )
 800f042:	9b08      	ldr	r3, [sp, #32]
 800f044:	3301      	adds	r3, #1
 800f046:	e7af      	b.n	800efa8 <mbedtls_ssl_read_record+0x678>
        acc ^= *p;
 800f048:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800f04c:	4042      	eors	r2, r0
 800f04e:	e7b8      	b.n	800efc2 <mbedtls_ssl_read_record+0x692>
 800f050:	eb00 0208 	add.w	r2, r0, r8
        unsigned char x = A[i], y = B[i];
 800f054:	5c9a      	ldrb	r2, [r3, r2]
 800f056:	f819 e008 	ldrb.w	lr, [r9, r8]
        diff |= x ^ y;
 800f05a:	f89d 702e 	ldrb.w	r7, [sp, #46]	; 0x2e
 800f05e:	ea82 020e 	eor.w	r2, r2, lr
 800f062:	433a      	orrs	r2, r7
 800f064:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
    for( i = 0; i < n; i++ )
 800f068:	f108 0801 	add.w	r8, r8, #1
 800f06c:	e7b3      	b.n	800efd6 <mbedtls_ssl_read_record+0x6a6>
        ssl->nb_zero++;
 800f06e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f070:	3301      	adds	r3, #1
        if( ssl->nb_zero > 3 )
 800f072:	2b03      	cmp	r3, #3
        ssl->nb_zero++;
 800f074:	67e3      	str	r3, [r4, #124]	; 0x7c
        if( ssl->nb_zero > 3 )
 800f076:	dd0b      	ble.n	800f090 <mbedtls_ssl_read_record+0x760>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
 800f078:	4b44      	ldr	r3, [pc, #272]	; (800f18c <mbedtls_ssl_read_record+0x85c>)
 800f07a:	462a      	mov	r2, r5
 800f07c:	9300      	str	r3, [sp, #0]
 800f07e:	2101      	movs	r1, #1
 800f080:	f640 132c 	movw	r3, #2348	; 0x92c
 800f084:	4620      	mov	r0, r4
 800f086:	f7f7 f8c3 	bl	8006210 <mbedtls_debug_print_msg>
 800f08a:	e59c      	b.n	800ebc6 <mbedtls_ssl_read_record+0x296>
        ssl->nb_zero = 0;
 800f08c:	2300      	movs	r3, #0
 800f08e:	67e3      	str	r3, [r4, #124]	; 0x7c
    unsigned char acc = 0;
 800f090:	2207      	movs	r2, #7
            if( ++ssl->in_ctr[i - 1] != 0 )
 800f092:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800f094:	5c8b      	ldrb	r3, [r1, r2]
 800f096:	3301      	adds	r3, #1
 800f098:	b2db      	uxtb	r3, r3
 800f09a:	548b      	strb	r3, [r1, r2]
 800f09c:	3a01      	subs	r2, #1
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d14e      	bne.n	800f140 <mbedtls_ssl_read_record+0x810>
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 800f0a2:	1c53      	adds	r3, r2, #1
 800f0a4:	d1f5      	bne.n	800f092 <mbedtls_ssl_read_record+0x762>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
 800f0a6:	4b3a      	ldr	r3, [pc, #232]	; (800f190 <mbedtls_ssl_read_record+0x860>)
 800f0a8:	462a      	mov	r2, r5
 800f0aa:	9300      	str	r3, [sp, #0]
 800f0ac:	2101      	movs	r1, #1
 800f0ae:	f640 1343 	movw	r3, #2371	; 0x943
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	f7f7 f8ac 	bl	8006210 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 800f0b8:	4e36      	ldr	r6, [pc, #216]	; (800f194 <mbedtls_ssl_read_record+0x864>)
 800f0ba:	e626      	b.n	800ed0a <mbedtls_ssl_read_record+0x3da>
            ret = mbedtls_ssl_handle_message_type( ssl );
 800f0bc:	4620      	mov	r0, r4
 800f0be:	f7ff fb59 	bl	800e774 <mbedtls_ssl_handle_message_type>
                 MBEDTLS_ERR_SSL_CONTINUE_PROCESSING == ret );
 800f0c2:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
            ret = mbedtls_ssl_handle_message_type( ssl );
 800f0c6:	4606      	mov	r6, r0
                 MBEDTLS_ERR_SSL_CONTINUE_PROCESSING == ret );
 800f0c8:	f43f ac45 	beq.w	800e956 <mbedtls_ssl_read_record+0x26>
        } while( MBEDTLS_ERR_SSL_NON_FATAL           == ret  ||
 800f0cc:	f510 4fcb 	cmn.w	r0, #25984	; 0x6580
 800f0d0:	f43f ac41 	beq.w	800e956 <mbedtls_ssl_read_record+0x26>
        if( 0 != ret )
 800f0d4:	b128      	cbz	r0, 800f0e2 <mbedtls_ssl_read_record+0x7b2>
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_handle_message_type" ), ret );
 800f0d6:	4b30      	ldr	r3, [pc, #192]	; (800f198 <mbedtls_ssl_read_record+0x868>)
 800f0d8:	9001      	str	r0, [sp, #4]
 800f0da:	9300      	str	r3, [sp, #0]
 800f0dc:	f241 1311 	movw	r3, #4369	; 0x1111
 800f0e0:	e482      	b.n	800e9e8 <mbedtls_ssl_read_record+0xb8>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
 800f0e2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f0e4:	2b16      	cmp	r3, #22
 800f0e6:	d105      	bne.n	800f0f4 <mbedtls_ssl_read_record+0x7c4>
 800f0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0ea:	2b01      	cmp	r3, #1
 800f0ec:	d102      	bne.n	800f0f4 <mbedtls_ssl_read_record+0x7c4>
            mbedtls_ssl_update_handshake_status( ssl );
 800f0ee:	4620      	mov	r0, r4
 800f0f0:	f7ff fb30 	bl	800e754 <mbedtls_ssl_update_handshake_status>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );
 800f0f4:	4b29      	ldr	r3, [pc, #164]	; (800f19c <mbedtls_ssl_read_record+0x86c>)
 800f0f6:	4a2a      	ldr	r2, [pc, #168]	; (800f1a0 <mbedtls_ssl_read_record+0x870>)
 800f0f8:	9300      	str	r3, [sp, #0]
 800f0fa:	2102      	movs	r1, #2
 800f0fc:	f241 1321 	movw	r3, #4385	; 0x1121
 800f100:	4620      	mov	r0, r4
 800f102:	f7f7 f885 	bl	8006210 <mbedtls_debug_print_msg>
    return( 0 );
 800f106:	2600      	movs	r6, #0
 800f108:	e434      	b.n	800e974 <mbedtls_ssl_read_record+0x44>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "reuse previously read message" ) );
 800f10a:	4b26      	ldr	r3, [pc, #152]	; (800f1a4 <mbedtls_ssl_read_record+0x874>)
 800f10c:	4a24      	ldr	r2, [pc, #144]	; (800f1a0 <mbedtls_ssl_read_record+0x870>)
 800f10e:	9300      	str	r3, [sp, #0]
 800f110:	2102      	movs	r1, #2
 800f112:	f241 131d 	movw	r3, #4381	; 0x111d
 800f116:	4620      	mov	r0, r4
 800f118:	f7f7 f87a 	bl	8006210 <mbedtls_debug_print_msg>
        ssl->keep_current_message = 0;
 800f11c:	2300      	movs	r3, #0
 800f11e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800f122:	e7e7      	b.n	800f0f4 <mbedtls_ssl_read_record+0x7c4>
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 800f124:	3105      	adds	r1, #5
 800f126:	4620      	mov	r0, r4
 800f128:	f7fe fe50 	bl	800ddcc <mbedtls_ssl_fetch_input>
 800f12c:	4606      	mov	r6, r0
 800f12e:	2800      	cmp	r0, #0
 800f130:	f43f ace6 	beq.w	800eb00 <mbedtls_ssl_read_record+0x1d0>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 800f134:	4b1c      	ldr	r3, [pc, #112]	; (800f1a8 <mbedtls_ssl_read_record+0x878>)
 800f136:	9601      	str	r6, [sp, #4]
 800f138:	9300      	str	r3, [sp, #0]
 800f13a:	f241 33a1 	movw	r3, #5025	; 0x13a1
 800f13e:	e446      	b.n	800e9ce <mbedtls_ssl_read_record+0x9e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decrypt buf" ) );
 800f140:	4b1a      	ldr	r3, [pc, #104]	; (800f1ac <mbedtls_ssl_read_record+0x87c>)
 800f142:	462a      	mov	r2, r5
 800f144:	9300      	str	r3, [sp, #0]
 800f146:	2102      	movs	r1, #2
 800f148:	f640 1348 	movw	r3, #2376	; 0x948
 800f14c:	4620      	mov	r0, r4
 800f14e:	f7f7 f85f 	bl	8006210 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
 800f152:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f154:	462a      	mov	r2, r5
 800f156:	9302      	str	r3, [sp, #8]
 800f158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f15a:	2104      	movs	r1, #4
 800f15c:	9301      	str	r3, [sp, #4]
 800f15e:	4b14      	ldr	r3, [pc, #80]	; (800f1b0 <mbedtls_ssl_read_record+0x880>)
 800f160:	4620      	mov	r0, r4
 800f162:	9300      	str	r3, [sp, #0]
 800f164:	f241 03a4 	movw	r3, #4260	; 0x10a4
 800f168:	f7f7 f8b0 	bl	80062cc <mbedtls_debug_print_buf>
        if( ssl->in_msglen > MBEDTLS_SSL_IN_CONTENT_LEN )
 800f16c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f16e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f172:	d9a3      	bls.n	800f0bc <mbedtls_ssl_read_record+0x78c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 800f174:	4b0f      	ldr	r3, [pc, #60]	; (800f1b4 <mbedtls_ssl_read_record+0x884>)
 800f176:	9300      	str	r3, [sp, #0]
 800f178:	f241 03a8 	movw	r3, #4264	; 0x10a8
 800f17c:	e480      	b.n	800ea80 <mbedtls_ssl_read_record+0x150>
 800f17e:	bf00      	nop
 800f180:	080181f1 	.word	0x080181f1
 800f184:	ffff8e00 	.word	0xffff8e00
 800f188:	08017544 	.word	0x08017544
 800f18c:	08018216 	.word	0x08018216
 800f190:	080182c5 	.word	0x080182c5
 800f194:	ffff9480 	.word	0xffff9480
 800f198:	08018278 	.word	0x08018278
 800f19c:	080182b6 	.word	0x080182b6
 800f1a0:	08018828 	.word	0x08018828
 800f1a4:	08018298 	.word	0x08018298
 800f1a8:	08018034 	.word	0x08018034
 800f1ac:	080182e9 	.word	0x080182e9
 800f1b0:	080182f8 	.word	0x080182f8
 800f1b4:	080180dd 	.word	0x080180dd

0800f1b8 <mbedtls_ssl_write_certificate>:
{
 800f1b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 800f1bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 800f1be:	4a5a      	ldr	r2, [pc, #360]	; (800f328 <mbedtls_ssl_write_certificate+0x170>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 800f1c0:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 800f1c2:	4b5a      	ldr	r3, [pc, #360]	; (800f32c <mbedtls_ssl_write_certificate+0x174>)
 800f1c4:	2102      	movs	r1, #2
 800f1c6:	9300      	str	r3, [sp, #0]
 800f1c8:	f241 43d1 	movw	r3, #5329	; 0x14d1
{
 800f1cc:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 800f1ce:	f7f7 f81f 	bl	8006210 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 800f1d2:	7aab      	ldrb	r3, [r5, #10]
 800f1d4:	2b0b      	cmp	r3, #11
 800f1d6:	d816      	bhi.n	800f206 <mbedtls_ssl_write_certificate+0x4e>
 800f1d8:	f44f 6516 	mov.w	r5, #2400	; 0x960
 800f1dc:	40dd      	lsrs	r5, r3
 800f1de:	43ed      	mvns	r5, r5
 800f1e0:	f015 0501 	ands.w	r5, r5, #1
 800f1e4:	d10f      	bne.n	800f206 <mbedtls_ssl_write_certificate+0x4e>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 800f1e6:	4b52      	ldr	r3, [pc, #328]	; (800f330 <mbedtls_ssl_write_certificate+0x178>)
 800f1e8:	9300      	str	r3, [sp, #0]
 800f1ea:	f241 43d8 	movw	r3, #5336	; 0x14d8
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 800f1ee:	4a4e      	ldr	r2, [pc, #312]	; (800f328 <mbedtls_ssl_write_certificate+0x170>)
 800f1f0:	2102      	movs	r1, #2
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f7f7 f80c 	bl	8006210 <mbedtls_debug_print_msg>
            ssl->state++;
 800f1f8:	6863      	ldr	r3, [r4, #4]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	6063      	str	r3, [r4, #4]
}
 800f1fe:	4628      	mov	r0, r5
 800f200:	b004      	add	sp, #16
 800f202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 800f206:	6822      	ldr	r2, [r4, #0]
 800f208:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 800f20c:	07db      	lsls	r3, r3, #31
 800f20e:	d407      	bmi.n	800f220 <mbedtls_ssl_write_certificate+0x68>
        if( ssl->client_auth == 0 )
 800f210:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 800f214:	b925      	cbnz	r5, 800f220 <mbedtls_ssl_write_certificate+0x68>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 800f216:	4b46      	ldr	r3, [pc, #280]	; (800f330 <mbedtls_ssl_write_certificate+0x178>)
 800f218:	9300      	str	r3, [sp, #0]
 800f21a:	f241 43e2 	movw	r3, #5346	; 0x14e2
 800f21e:	e7e6      	b.n	800f1ee <mbedtls_ssl_write_certificate+0x36>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 800f220:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f222:	b10b      	cbz	r3, 800f228 <mbedtls_ssl_write_certificate+0x70>
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	b90b      	cbnz	r3, 800f22c <mbedtls_ssl_write_certificate+0x74>
        key_cert = ssl->conf->key_cert;
 800f228:	6b93      	ldr	r3, [r2, #56]	; 0x38
    return( key_cert == NULL ? NULL : key_cert->cert );
 800f22a:	b103      	cbz	r3, 800f22e <mbedtls_ssl_write_certificate+0x76>
 800f22c:	681b      	ldr	r3, [r3, #0]
    MBEDTLS_SSL_DEBUG_CRT( 3, "own certificate", mbedtls_ssl_own_cert( ssl ) );
 800f22e:	9301      	str	r3, [sp, #4]
 800f230:	4b40      	ldr	r3, [pc, #256]	; (800f334 <mbedtls_ssl_write_certificate+0x17c>)
 800f232:	4a3d      	ldr	r2, [pc, #244]	; (800f328 <mbedtls_ssl_write_certificate+0x170>)
 800f234:	9300      	str	r3, [sp, #0]
 800f236:	2103      	movs	r1, #3
 800f238:	f241 5305 	movw	r3, #5381	; 0x1505
 800f23c:	4620      	mov	r0, r4
 800f23e:	f7f7 f8f5 	bl	800642c <mbedtls_debug_print_crt>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 800f242:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f244:	b10b      	cbz	r3, 800f24a <mbedtls_ssl_write_certificate+0x92>
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	b91b      	cbnz	r3, 800f252 <mbedtls_ssl_write_certificate+0x9a>
        key_cert = ssl->conf->key_cert;
 800f24a:	6823      	ldr	r3, [r4, #0]
 800f24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    return( key_cert == NULL ? NULL : key_cert->cert );
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d05d      	beq.n	800f30e <mbedtls_ssl_write_certificate+0x156>
 800f252:	2207      	movs	r2, #7
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
 800f254:	f640 77fd 	movw	r7, #4093	; 0xffd
 800f258:	681e      	ldr	r6, [r3, #0]
    while( crt != NULL )
 800f25a:	bb46      	cbnz	r6, 800f2ae <mbedtls_ssl_write_certificate+0xf6>
    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 800f25c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800f260:	1fd3      	subs	r3, r2, #7
 800f262:	0c18      	lsrs	r0, r3, #16
 800f264:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 800f266:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800f26a:	0a18      	lsrs	r0, r3, #8
 800f26c:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 800f26e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 800f272:	4620      	mov	r0, r4
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 800f274:	718b      	strb	r3, [r1, #6]
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 800f276:	2316      	movs	r3, #22
    ssl->out_msglen  = i;
 800f278:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 800f27c:	220b      	movs	r2, #11
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 800f27e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 800f282:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800f286:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 800f288:	6863      	ldr	r3, [r4, #4]
 800f28a:	3301      	adds	r3, #1
 800f28c:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 800f28e:	f7ff f99d 	bl	800e5cc <mbedtls_ssl_write_handshake_msg>
 800f292:	4605      	mov	r5, r0
 800f294:	2800      	cmp	r0, #0
 800f296:	d03c      	beq.n	800f312 <mbedtls_ssl_write_certificate+0x15a>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
 800f298:	4b27      	ldr	r3, [pc, #156]	; (800f338 <mbedtls_ssl_write_certificate+0x180>)
 800f29a:	9001      	str	r0, [sp, #4]
 800f29c:	9300      	str	r3, [sp, #0]
 800f29e:	4a22      	ldr	r2, [pc, #136]	; (800f328 <mbedtls_ssl_write_certificate+0x170>)
 800f2a0:	f241 5335 	movw	r3, #5429	; 0x1535
 800f2a4:	2101      	movs	r1, #1
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	f7f6 ffe2 	bl	8006270 <mbedtls_debug_print_ret>
        return( ret );
 800f2ac:	e7a7      	b.n	800f1fe <mbedtls_ssl_write_certificate+0x46>
        n = crt->raw.len;
 800f2ae:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
 800f2b0:	1abb      	subs	r3, r7, r2
 800f2b2:	429d      	cmp	r5, r3
 800f2b4:	d910      	bls.n	800f2d8 <mbedtls_ssl_write_certificate+0x120>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
 800f2b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f2ba:	442a      	add	r2, r5
 800f2bc:	9302      	str	r3, [sp, #8]
 800f2be:	4b1f      	ldr	r3, [pc, #124]	; (800f33c <mbedtls_ssl_write_certificate+0x184>)
 800f2c0:	3203      	adds	r2, #3
 800f2c2:	9201      	str	r2, [sp, #4]
 800f2c4:	9300      	str	r3, [sp, #0]
 800f2c6:	4a18      	ldr	r2, [pc, #96]	; (800f328 <mbedtls_ssl_write_certificate+0x170>)
 800f2c8:	f241 5319 	movw	r3, #5401	; 0x1519
 800f2cc:	2101      	movs	r1, #1
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	f7f6 ff9e 	bl	8006210 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 800f2d4:	4d1a      	ldr	r5, [pc, #104]	; (800f340 <mbedtls_ssl_write_certificate+0x188>)
 800f2d6:	e792      	b.n	800f1fe <mbedtls_ssl_write_certificate+0x46>
        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 800f2d8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800f2dc:	0c29      	lsrs	r1, r5, #16
 800f2de:	5499      	strb	r1, [r3, r2]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 800f2e0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800f2e4:	0a29      	lsrs	r1, r5, #8
 800f2e6:	4413      	add	r3, r2
 800f2e8:	7059      	strb	r1, [r3, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 800f2ea:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 800f2ee:	f102 0803 	add.w	r8, r2, #3
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 800f2f2:	4413      	add	r3, r2
 800f2f4:	709d      	strb	r5, [r3, #2]
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 800f2f6:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800f2fa:	462a      	mov	r2, r5
 800f2fc:	68b1      	ldr	r1, [r6, #8]
 800f2fe:	4440      	add	r0, r8
 800f300:	f002 fd5d 	bl	8011dbe <memcpy>
        i += n; crt = crt->next;
 800f304:	eb05 0208 	add.w	r2, r5, r8
 800f308:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 800f30c:	e7a5      	b.n	800f25a <mbedtls_ssl_write_certificate+0xa2>
 800f30e:	2207      	movs	r2, #7
 800f310:	e7a4      	b.n	800f25c <mbedtls_ssl_write_certificate+0xa4>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );
 800f312:	4b0c      	ldr	r3, [pc, #48]	; (800f344 <mbedtls_ssl_write_certificate+0x18c>)
 800f314:	4a04      	ldr	r2, [pc, #16]	; (800f328 <mbedtls_ssl_write_certificate+0x170>)
 800f316:	9300      	str	r3, [sp, #0]
 800f318:	2102      	movs	r1, #2
 800f31a:	f241 5339 	movw	r3, #5433	; 0x1539
 800f31e:	4620      	mov	r0, r4
 800f320:	f7f6 ff76 	bl	8006210 <mbedtls_debug_print_msg>
    return( ret );
 800f324:	e76b      	b.n	800f1fe <mbedtls_ssl_write_certificate+0x46>
 800f326:	bf00      	nop
 800f328:	08018828 	.word	0x08018828
 800f32c:	0801838a 	.word	0x0801838a
 800f330:	0801839f 	.word	0x0801839f
 800f334:	080183b9 	.word	0x080183b9
 800f338:	080171ed 	.word	0x080171ed
 800f33c:	080183c9 	.word	0x080183c9
 800f340:	ffff8b00 	.word	0xffff8b00
 800f344:	080183e8 	.word	0x080183e8

0800f348 <mbedtls_ssl_parse_certificate>:
{
 800f348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    const mbedtls_ssl_ciphersuite_t * const ciphersuite_info =
 800f34c:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 800f34e:	b087      	sub	sp, #28
    const mbedtls_ssl_ciphersuite_t * const ciphersuite_info =
 800f350:	681d      	ldr	r5, [r3, #0]
    const int authmode = ssl->conf->authmode;
 800f352:	6803      	ldr	r3, [r0, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 800f354:	4a9d      	ldr	r2, [pc, #628]	; (800f5cc <mbedtls_ssl_parse_certificate+0x284>)
    const int authmode = ssl->conf->authmode;
 800f356:	f893 8050 	ldrb.w	r8, [r3, #80]	; 0x50
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 800f35a:	4b9d      	ldr	r3, [pc, #628]	; (800f5d0 <mbedtls_ssl_parse_certificate+0x288>)
 800f35c:	2102      	movs	r1, #2
 800f35e:	9300      	str	r3, [sp, #0]
 800f360:	f241 6317 	movw	r3, #5655	; 0x1617
{
 800f364:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 800f366:	f7f6 ff53 	bl	8006210 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 800f36a:	7aab      	ldrb	r3, [r5, #10]
    const int authmode = ssl->conf->authmode;
 800f36c:	f3c8 0881 	ubfx	r8, r8, #2, #2
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 800f370:	2b0b      	cmp	r3, #11
 800f372:	d816      	bhi.n	800f3a2 <mbedtls_ssl_parse_certificate+0x5a>
 800f374:	f44f 6516 	mov.w	r5, #2400	; 0x960
 800f378:	40dd      	lsrs	r5, r3
 800f37a:	43ed      	mvns	r5, r5
 800f37c:	f015 0501 	ands.w	r5, r5, #1
 800f380:	d10f      	bne.n	800f3a2 <mbedtls_ssl_parse_certificate+0x5a>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
 800f382:	4b94      	ldr	r3, [pc, #592]	; (800f5d4 <mbedtls_ssl_parse_certificate+0x28c>)
 800f384:	4a91      	ldr	r2, [pc, #580]	; (800f5cc <mbedtls_ssl_parse_certificate+0x284>)
 800f386:	9300      	str	r3, [sp, #0]
 800f388:	2102      	movs	r1, #2
 800f38a:	f241 631e 	movw	r3, #5662	; 0x161e
 800f38e:	4620      	mov	r0, r4
 800f390:	f7f6 ff3e 	bl	8006210 <mbedtls_debug_print_msg>
        ssl->state++;
 800f394:	6863      	ldr	r3, [r4, #4]
 800f396:	3301      	adds	r3, #1
 800f398:	6063      	str	r3, [r4, #4]
}
 800f39a:	4628      	mov	r0, r5
 800f39c:	b007      	add	sp, #28
 800f39e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 800f3a2:	2101      	movs	r1, #1
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f7ff fac3 	bl	800e930 <mbedtls_ssl_read_record>
 800f3aa:	4605      	mov	r5, r0
 800f3ac:	b150      	cbz	r0, 800f3c4 <mbedtls_ssl_parse_certificate+0x7c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800f3ae:	4b8a      	ldr	r3, [pc, #552]	; (800f5d8 <mbedtls_ssl_parse_certificate+0x290>)
 800f3b0:	9001      	str	r0, [sp, #4]
 800f3b2:	9300      	str	r3, [sp, #0]
 800f3b4:	4a85      	ldr	r2, [pc, #532]	; (800f5cc <mbedtls_ssl_parse_certificate+0x284>)
 800f3b6:	f241 6343 	movw	r3, #5699	; 0x1643
 800f3ba:	2101      	movs	r1, #1
 800f3bc:	4620      	mov	r0, r4
 800f3be:	f7f6 ff57 	bl	8006270 <mbedtls_debug_print_ret>
        return( ret );
 800f3c2:	e7ea      	b.n	800f39a <mbedtls_ssl_parse_certificate+0x52>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 800f3c4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f3c6:	2b16      	cmp	r3, #22
 800f3c8:	d013      	beq.n	800f3f2 <mbedtls_ssl_parse_certificate+0xaa>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800f3ca:	4b84      	ldr	r3, [pc, #528]	; (800f5dc <mbedtls_ssl_parse_certificate+0x294>)
 800f3cc:	4a7f      	ldr	r2, [pc, #508]	; (800f5cc <mbedtls_ssl_parse_certificate+0x284>)
 800f3ce:	9300      	str	r3, [sp, #0]
 800f3d0:	2101      	movs	r1, #1
 800f3d2:	f241 5379 	movw	r3, #5497	; 0x1579
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	f7f6 ff1a 	bl	8006210 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800f3dc:	220a      	movs	r2, #10
 800f3de:	2102      	movs	r1, #2
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	f7ff fa51 	bl	800e888 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800f3e6:	4e7e      	ldr	r6, [pc, #504]	; (800f5e0 <mbedtls_ssl_parse_certificate+0x298>)
        ssl->state++;
 800f3e8:	6863      	ldr	r3, [r4, #4]
        return( ret );
 800f3ea:	4635      	mov	r5, r6
        ssl->state++;
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	6063      	str	r3, [r4, #4]
        return( ret );
 800f3f0:	e7d3      	b.n	800f39a <mbedtls_ssl_parse_certificate+0x52>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 800f3f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f3f4:	7813      	ldrb	r3, [r2, #0]
 800f3f6:	2b0b      	cmp	r3, #11
 800f3f8:	d102      	bne.n	800f400 <mbedtls_ssl_parse_certificate+0xb8>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 800f3fa:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 800f3fc:	2909      	cmp	r1, #9
 800f3fe:	d80f      	bhi.n	800f420 <mbedtls_ssl_parse_certificate+0xd8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800f400:	4b76      	ldr	r3, [pc, #472]	; (800f5dc <mbedtls_ssl_parse_certificate+0x294>)
 800f402:	9300      	str	r3, [sp, #0]
 800f404:	f241 5382 	movw	r3, #5506	; 0x1582
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800f408:	4a70      	ldr	r2, [pc, #448]	; (800f5cc <mbedtls_ssl_parse_certificate+0x284>)
 800f40a:	2101      	movs	r1, #1
 800f40c:	4620      	mov	r0, r4
 800f40e:	f7f6 feff 	bl	8006210 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800f412:	2232      	movs	r2, #50	; 0x32
 800f414:	2102      	movs	r1, #2
 800f416:	4620      	mov	r0, r4
 800f418:	f7ff fa36 	bl	800e888 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 800f41c:	4e71      	ldr	r6, [pc, #452]	; (800f5e4 <mbedtls_ssl_parse_certificate+0x29c>)
 800f41e:	e7e3      	b.n	800f3e8 <mbedtls_ssl_parse_certificate+0xa0>
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 800f420:	7950      	ldrb	r0, [r2, #5]
 800f422:	7993      	ldrb	r3, [r2, #6]
    if( ssl->in_msg[i] != 0 ||
 800f424:	7912      	ldrb	r2, [r2, #4]
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 800f426:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    if( ssl->in_msg[i] != 0 ||
 800f42a:	b912      	cbnz	r2, 800f432 <mbedtls_ssl_parse_certificate+0xea>
        ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )
 800f42c:	3307      	adds	r3, #7
    if( ssl->in_msg[i] != 0 ||
 800f42e:	4299      	cmp	r1, r3
 800f430:	d004      	beq.n	800f43c <mbedtls_ssl_parse_certificate+0xf4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800f432:	4b6a      	ldr	r3, [pc, #424]	; (800f5dc <mbedtls_ssl_parse_certificate+0x294>)
 800f434:	9300      	str	r3, [sp, #0]
 800f436:	f241 5392 	movw	r3, #5522	; 0x1592
 800f43a:	e7e5      	b.n	800f408 <mbedtls_ssl_parse_certificate+0xc0>
    if( ssl->session_negotiate->peer_cert != NULL )
 800f43c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f43e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800f440:	b128      	cbz	r0, 800f44e <mbedtls_ssl_parse_certificate+0x106>
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 800f442:	f002 f854 	bl	80114ee <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 800f446:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f448:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800f44a:	f002 fca1 	bl	8011d90 <free>
    if( ( ssl->session_negotiate->peer_cert = mbedtls_calloc( 1,
 800f44e:	f44f 719a 	mov.w	r1, #308	; 0x134
 800f452:	2001      	movs	r0, #1
 800f454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f456:	f002 fc61 	bl	8011d1c <calloc>
 800f45a:	65f0      	str	r0, [r6, #92]	; 0x5c
 800f45c:	b990      	cbnz	r0, 800f484 <mbedtls_ssl_parse_certificate+0x13c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
 800f45e:	f44f 739a 	mov.w	r3, #308	; 0x134
 800f462:	9301      	str	r3, [sp, #4]
 800f464:	4b60      	ldr	r3, [pc, #384]	; (800f5e8 <mbedtls_ssl_parse_certificate+0x2a0>)
 800f466:	4a59      	ldr	r2, [pc, #356]	; (800f5cc <mbedtls_ssl_parse_certificate+0x284>)
 800f468:	9300      	str	r3, [sp, #0]
 800f46a:	2101      	movs	r1, #1
 800f46c:	f241 53a3 	movw	r3, #5539	; 0x15a3
 800f470:	4620      	mov	r0, r4
 800f472:	f7f6 fecd 	bl	8006210 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800f476:	2250      	movs	r2, #80	; 0x50
 800f478:	2102      	movs	r1, #2
 800f47a:	4620      	mov	r0, r4
 800f47c:	f7ff fa04 	bl	800e888 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 800f480:	4e5a      	ldr	r6, [pc, #360]	; (800f5ec <mbedtls_ssl_parse_certificate+0x2a4>)
 800f482:	e7b1      	b.n	800f3e8 <mbedtls_ssl_parse_certificate+0xa0>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 800f484:	f002 f82e 	bl	80114e4 <mbedtls_x509_crt_init>
    i += 3;
 800f488:	2707      	movs	r7, #7
        switch( ret )
 800f48a:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f604 <mbedtls_ssl_parse_certificate+0x2bc>
    while( i < ssl->in_hslen )
 800f48e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f490:	429f      	cmp	r7, r3
 800f492:	d30c      	bcc.n	800f4ae <mbedtls_ssl_parse_certificate+0x166>
    MBEDTLS_SSL_DEBUG_CRT( 3, "peer certificate", ssl->session_negotiate->peer_cert );
 800f494:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f496:	4a4d      	ldr	r2, [pc, #308]	; (800f5cc <mbedtls_ssl_parse_certificate+0x284>)
 800f498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f49a:	2103      	movs	r1, #3
 800f49c:	9301      	str	r3, [sp, #4]
 800f49e:	4b54      	ldr	r3, [pc, #336]	; (800f5f0 <mbedtls_ssl_parse_certificate+0x2a8>)
 800f4a0:	4620      	mov	r0, r4
 800f4a2:	9300      	str	r3, [sp, #0]
 800f4a4:	f241 53e6 	movw	r3, #5606	; 0x15e6
 800f4a8:	f7f6 ffc0 	bl	800642c <mbedtls_debug_print_crt>
 800f4ac:	e044      	b.n	800f538 <mbedtls_ssl_parse_certificate+0x1f0>
        if ( i + 3 > ssl->in_hslen ) {
 800f4ae:	1cf9      	adds	r1, r7, #3
 800f4b0:	4299      	cmp	r1, r3
 800f4b2:	d904      	bls.n	800f4be <mbedtls_ssl_parse_certificate+0x176>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800f4b4:	4b49      	ldr	r3, [pc, #292]	; (800f5dc <mbedtls_ssl_parse_certificate+0x294>)
 800f4b6:	9300      	str	r3, [sp, #0]
 800f4b8:	f241 53b0 	movw	r3, #5552	; 0x15b0
 800f4bc:	e7a4      	b.n	800f408 <mbedtls_ssl_parse_certificate+0xc0>
        if( ssl->in_msg[i] != 0 )
 800f4be:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800f4c0:	5dc2      	ldrb	r2, [r0, r7]
 800f4c2:	b122      	cbz	r2, 800f4ce <mbedtls_ssl_parse_certificate+0x186>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800f4c4:	4b45      	ldr	r3, [pc, #276]	; (800f5dc <mbedtls_ssl_parse_certificate+0x294>)
 800f4c6:	9300      	str	r3, [sp, #0]
 800f4c8:	f241 53b7 	movw	r3, #5559	; 0x15b7
 800f4cc:	e79c      	b.n	800f408 <mbedtls_ssl_parse_certificate+0xc0>
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 800f4ce:	4407      	add	r7, r0
 800f4d0:	787e      	ldrb	r6, [r7, #1]
            | (unsigned int) ssl->in_msg[i + 2];
 800f4d2:	78ba      	ldrb	r2, [r7, #2]
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 800f4d4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
        if( n < 128 || i + n > ssl->in_hslen )
 800f4d8:	2a7f      	cmp	r2, #127	; 0x7f
 800f4da:	d902      	bls.n	800f4e2 <mbedtls_ssl_parse_certificate+0x19a>
 800f4dc:	188f      	adds	r7, r1, r2
 800f4de:	42bb      	cmp	r3, r7
 800f4e0:	d204      	bcs.n	800f4ec <mbedtls_ssl_parse_certificate+0x1a4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800f4e2:	4b3e      	ldr	r3, [pc, #248]	; (800f5dc <mbedtls_ssl_parse_certificate+0x294>)
 800f4e4:	9300      	str	r3, [sp, #0]
 800f4e6:	f241 53c3 	movw	r3, #5571	; 0x15c3
 800f4ea:	e78d      	b.n	800f408 <mbedtls_ssl_parse_certificate+0xc0>
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 800f4ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f4ee:	4401      	add	r1, r0
 800f4f0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800f4f2:	f002 f857 	bl	80115a4 <mbedtls_x509_crt_parse_der>
        switch( ret )
 800f4f6:	4548      	cmp	r0, r9
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 800f4f8:	4606      	mov	r6, r0
        switch( ret )
 800f4fa:	d0c8      	beq.n	800f48e <mbedtls_ssl_parse_certificate+0x146>
 800f4fc:	dc04      	bgt.n	800f508 <mbedtls_ssl_parse_certificate+0x1c0>
 800f4fe:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 800f502:	d061      	beq.n	800f5c8 <mbedtls_ssl_parse_certificate+0x280>
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 800f504:	222a      	movs	r2, #42	; 0x2a
 800f506:	e006      	b.n	800f516 <mbedtls_ssl_parse_certificate+0x1ce>
        switch( ret )
 800f508:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
 800f50c:	d002      	beq.n	800f514 <mbedtls_ssl_parse_certificate+0x1cc>
 800f50e:	2800      	cmp	r0, #0
 800f510:	d0bd      	beq.n	800f48e <mbedtls_ssl_parse_certificate+0x146>
 800f512:	e7f7      	b.n	800f504 <mbedtls_ssl_parse_certificate+0x1bc>
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 800f514:	222b      	movs	r2, #43	; 0x2b
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
 800f516:	2102      	movs	r1, #2
 800f518:	4620      	mov	r0, r4
 800f51a:	f7ff f9b5 	bl	800e888 <mbedtls_ssl_send_alert_message>
            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
 800f51e:	4b35      	ldr	r3, [pc, #212]	; (800f5f4 <mbedtls_ssl_parse_certificate+0x2ac>)
 800f520:	9601      	str	r6, [sp, #4]
 800f522:	9300      	str	r3, [sp, #0]
 800f524:	4a29      	ldr	r2, [pc, #164]	; (800f5cc <mbedtls_ssl_parse_certificate+0x284>)
 800f526:	f241 53df 	movw	r3, #5599	; 0x15df
 800f52a:	2101      	movs	r1, #1
 800f52c:	4620      	mov	r0, r4
 800f52e:	f7f6 fe9f 	bl	8006270 <mbedtls_debug_print_ret>
    if( ( ret = ssl_parse_certificate_chain( ssl ) ) != 0 )
 800f532:	2e00      	cmp	r6, #0
 800f534:	f47f af58 	bne.w	800f3e8 <mbedtls_ssl_parse_certificate+0xa0>
    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 800f538:	f1b8 0f00 	cmp.w	r8, #0
 800f53c:	d037      	beq.n	800f5ae <mbedtls_ssl_parse_certificate+0x266>
        ret = mbedtls_x509_crt_verify_restartable(
 800f53e:	2300      	movs	r3, #0
            ca_chain = ssl->conf->ca_chain;
 800f540:	6822      	ldr	r2, [r4, #0]
                                ssl->session_negotiate->peer_cert,
 800f542:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
            ca_chain = ssl->conf->ca_chain;
 800f544:	6bd7      	ldr	r7, [r2, #60]	; 0x3c
        ret = mbedtls_x509_crt_verify_restartable(
 800f546:	9304      	str	r3, [sp, #16]
 800f548:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800f54a:	4639      	mov	r1, r7
 800f54c:	9303      	str	r3, [sp, #12]
 800f54e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f550:	9302      	str	r3, [sp, #8]
 800f552:	f100 0360 	add.w	r3, r0, #96	; 0x60
 800f556:	9301      	str	r3, [sp, #4]
 800f558:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800f55c:	9300      	str	r3, [sp, #0]
 800f55e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800f560:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800f562:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f564:	f001 fdf0 	bl	8011148 <mbedtls_x509_crt_verify_restartable>
        if( ret != 0 )
 800f568:	4606      	mov	r6, r0
 800f56a:	b148      	cbz	r0, 800f580 <mbedtls_ssl_parse_certificate+0x238>
            MBEDTLS_SSL_DEBUG_RET( 1, "x509_verify_cert", ret );
 800f56c:	4b22      	ldr	r3, [pc, #136]	; (800f5f8 <mbedtls_ssl_parse_certificate+0x2b0>)
 800f56e:	9001      	str	r0, [sp, #4]
 800f570:	9300      	str	r3, [sp, #0]
 800f572:	4a16      	ldr	r2, [pc, #88]	; (800f5cc <mbedtls_ssl_parse_certificate+0x284>)
 800f574:	f241 637d 	movw	r3, #5757	; 0x167d
 800f578:	2101      	movs	r1, #1
 800f57a:	4620      	mov	r0, r4
 800f57c:	f7f6 fe78 	bl	8006270 <mbedtls_debug_print_ret>
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 800f580:	f1b8 0f01 	cmp.w	r8, #1
 800f584:	d140      	bne.n	800f608 <mbedtls_ssl_parse_certificate+0x2c0>
 800f586:	f516 5f1c 	cmn.w	r6, #9984	; 0x2700
 800f58a:	d002      	beq.n	800f592 <mbedtls_ssl_parse_certificate+0x24a>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 800f58c:	f516 4ff4 	cmn.w	r6, #31232	; 0x7a00
 800f590:	d15f      	bne.n	800f652 <mbedtls_ssl_parse_certificate+0x30a>
        if( ssl->session_negotiate->verify_result != 0 )
 800f592:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f596:	2b00      	cmp	r3, #0
 800f598:	d069      	beq.n	800f66e <mbedtls_ssl_parse_certificate+0x326>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "! Certificate verification flags %x",
 800f59a:	9301      	str	r3, [sp, #4]
 800f59c:	4b17      	ldr	r3, [pc, #92]	; (800f5fc <mbedtls_ssl_parse_certificate+0x2b4>)
 800f59e:	4a0b      	ldr	r2, [pc, #44]	; (800f5cc <mbedtls_ssl_parse_certificate+0x284>)
 800f5a0:	9300      	str	r3, [sp, #0]
 800f5a2:	2103      	movs	r1, #3
 800f5a4:	f241 63dc 	movw	r3, #5852	; 0x16dc
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	f7f6 fe31 	bl	8006210 <mbedtls_debug_print_msg>
    ssl->state++;
 800f5ae:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );
 800f5b0:	4a06      	ldr	r2, [pc, #24]	; (800f5cc <mbedtls_ssl_parse_certificate+0x284>)
    ssl->state++;
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );
 800f5b6:	4b12      	ldr	r3, [pc, #72]	; (800f600 <mbedtls_ssl_parse_certificate+0x2b8>)
 800f5b8:	2102      	movs	r1, #2
 800f5ba:	9300      	str	r3, [sp, #0]
 800f5bc:	4620      	mov	r0, r4
 800f5be:	f241 63e7 	movw	r3, #5863	; 0x16e7
 800f5c2:	f7f6 fe25 	bl	8006210 <mbedtls_debug_print_msg>
    return( ret );
 800f5c6:	e6e8      	b.n	800f39a <mbedtls_ssl_parse_certificate+0x52>
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
 800f5c8:	2250      	movs	r2, #80	; 0x50
 800f5ca:	e7a4      	b.n	800f516 <mbedtls_ssl_parse_certificate+0x1ce>
 800f5cc:	08018828 	.word	0x08018828
 800f5d0:	08017cef 	.word	0x08017cef
 800f5d4:	08017d04 	.word	0x08017d04
 800f5d8:	08017239 	.word	0x08017239
 800f5dc:	08017d1e 	.word	0x08017d1e
 800f5e0:	ffff8900 	.word	0xffff8900
 800f5e4:	ffff8600 	.word	0xffff8600
 800f5e8:	08017d36 	.word	0x08017d36
 800f5ec:	ffff8100 	.word	0xffff8100
 800f5f0:	08017d69 	.word	0x08017d69
 800f5f4:	08017d4d 	.word	0x08017d4d
 800f5f8:	08017d7a 	.word	0x08017d7a
 800f5fc:	08017d9b 	.word	0x08017d9b
 800f600:	08017de4 	.word	0x08017de4
 800f604:	ffffd9d2 	.word	0xffffd9d2
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 800f608:	bb1f      	cbnz	r7, 800f652 <mbedtls_ssl_parse_certificate+0x30a>
 800f60a:	f1b8 0f02 	cmp.w	r8, #2
 800f60e:	d120      	bne.n	800f652 <mbedtls_ssl_parse_certificate+0x30a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
 800f610:	4b1c      	ldr	r3, [pc, #112]	; (800f684 <mbedtls_ssl_parse_certificate+0x33c>)
 800f612:	4a1d      	ldr	r2, [pc, #116]	; (800f688 <mbedtls_ssl_parse_certificate+0x340>)
 800f614:	9300      	str	r3, [sp, #0]
 800f616:	2101      	movs	r1, #1
 800f618:	f241 63b3 	movw	r3, #5811	; 0x16b3
 800f61c:	4620      	mov	r0, r4
 800f61e:	f7f6 fdf7 	bl	8006210 <mbedtls_debug_print_msg>
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 800f622:	4e1a      	ldr	r6, [pc, #104]	; (800f68c <mbedtls_ssl_parse_certificate+0x344>)
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 800f624:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f628:	05df      	lsls	r7, r3, #23
 800f62a:	d416      	bmi.n	800f65a <mbedtls_ssl_parse_certificate+0x312>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 800f62c:	075d      	lsls	r5, r3, #29
 800f62e:	d416      	bmi.n	800f65e <mbedtls_ssl_parse_certificate+0x316>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 800f630:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
 800f634:	d115      	bne.n	800f662 <mbedtls_ssl_parse_certificate+0x31a>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 800f636:	07d8      	lsls	r0, r3, #31
 800f638:	d415      	bmi.n	800f666 <mbedtls_ssl_parse_certificate+0x31e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 800f63a:	0799      	lsls	r1, r3, #30
 800f63c:	d415      	bmi.n	800f66a <mbedtls_ssl_parse_certificate+0x322>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 800f63e:	f013 0f08 	tst.w	r3, #8
 800f642:	bf14      	ite	ne
 800f644:	2230      	movne	r2, #48	; 0x30
 800f646:	222e      	moveq	r2, #46	; 0x2e
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800f648:	2102      	movs	r1, #2
 800f64a:	4620      	mov	r0, r4
 800f64c:	f7ff f91c 	bl	800e888 <mbedtls_ssl_send_alert_message>
 800f650:	e001      	b.n	800f656 <mbedtls_ssl_parse_certificate+0x30e>
        if( ret != 0 )
 800f652:	2e00      	cmp	r6, #0
 800f654:	d1e6      	bne.n	800f624 <mbedtls_ssl_parse_certificate+0x2dc>
 800f656:	4635      	mov	r5, r6
 800f658:	e79b      	b.n	800f592 <mbedtls_ssl_parse_certificate+0x24a>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 800f65a:	2231      	movs	r2, #49	; 0x31
 800f65c:	e7f4      	b.n	800f648 <mbedtls_ssl_parse_certificate+0x300>
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 800f65e:	222a      	movs	r2, #42	; 0x2a
 800f660:	e7f2      	b.n	800f648 <mbedtls_ssl_parse_certificate+0x300>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 800f662:	222b      	movs	r2, #43	; 0x2b
 800f664:	e7f0      	b.n	800f648 <mbedtls_ssl_parse_certificate+0x300>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 800f666:	222d      	movs	r2, #45	; 0x2d
 800f668:	e7ee      	b.n	800f648 <mbedtls_ssl_parse_certificate+0x300>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 800f66a:	222c      	movs	r2, #44	; 0x2c
 800f66c:	e7ec      	b.n	800f648 <mbedtls_ssl_parse_certificate+0x300>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Certificate verification flags clear" ) );
 800f66e:	4b08      	ldr	r3, [pc, #32]	; (800f690 <mbedtls_ssl_parse_certificate+0x348>)
 800f670:	4a05      	ldr	r2, [pc, #20]	; (800f688 <mbedtls_ssl_parse_certificate+0x340>)
 800f672:	9300      	str	r3, [sp, #0]
 800f674:	2103      	movs	r1, #3
 800f676:	f44f 53b7 	mov.w	r3, #5856	; 0x16e0
 800f67a:	4620      	mov	r0, r4
 800f67c:	f7f6 fdc8 	bl	8006210 <mbedtls_debug_print_msg>
 800f680:	e795      	b.n	800f5ae <mbedtls_ssl_parse_certificate+0x266>
 800f682:	bf00      	nop
 800f684:	08017d8b 	.word	0x08017d8b
 800f688:	08018828 	.word	0x08018828
 800f68c:	ffff8980 	.word	0xffff8980
 800f690:	08017dbf 	.word	0x08017dbf

0800f694 <mbedtls_ssl_write_change_cipher_spec>:
{
 800f694:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 800f696:	4b18      	ldr	r3, [pc, #96]	; (800f6f8 <mbedtls_ssl_write_change_cipher_spec+0x64>)
 800f698:	4a18      	ldr	r2, [pc, #96]	; (800f6fc <mbedtls_ssl_write_change_cipher_spec+0x68>)
 800f69a:	9300      	str	r3, [sp, #0]
 800f69c:	2102      	movs	r1, #2
 800f69e:	f241 63f7 	movw	r3, #5879	; 0x16f7
{
 800f6a2:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 800f6a4:	f7f6 fdb4 	bl	8006210 <mbedtls_debug_print_msg>
    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 800f6a8:	2314      	movs	r3, #20
    ssl->out_msglen  = 1;
 800f6aa:	2601      	movs	r6, #1
    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 800f6ac:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = 1;
 800f6b0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl->out_msglen  = 1;
 800f6b4:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
 800f6b8:	701e      	strb	r6, [r3, #0]
    ssl->state++;
 800f6ba:	6863      	ldr	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 800f6bc:	4620      	mov	r0, r4
    ssl->state++;
 800f6be:	4433      	add	r3, r6
 800f6c0:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 800f6c2:	f7fe ff83 	bl	800e5cc <mbedtls_ssl_write_handshake_msg>
 800f6c6:	4605      	mov	r5, r0
 800f6c8:	b160      	cbz	r0, 800f6e4 <mbedtls_ssl_write_change_cipher_spec+0x50>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
 800f6ca:	4b0d      	ldr	r3, [pc, #52]	; (800f700 <mbedtls_ssl_write_change_cipher_spec+0x6c>)
 800f6cc:	9001      	str	r0, [sp, #4]
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	4a0a      	ldr	r2, [pc, #40]	; (800f6fc <mbedtls_ssl_write_change_cipher_spec+0x68>)
 800f6d2:	f241 7301 	movw	r3, #5889	; 0x1701
 800f6d6:	4631      	mov	r1, r6
 800f6d8:	4620      	mov	r0, r4
 800f6da:	f7f6 fdc9 	bl	8006270 <mbedtls_debug_print_ret>
}
 800f6de:	4628      	mov	r0, r5
 800f6e0:	b002      	add	sp, #8
 800f6e2:	bd70      	pop	{r4, r5, r6, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write change cipher spec" ) );
 800f6e4:	4b07      	ldr	r3, [pc, #28]	; (800f704 <mbedtls_ssl_write_change_cipher_spec+0x70>)
 800f6e6:	4a05      	ldr	r2, [pc, #20]	; (800f6fc <mbedtls_ssl_write_change_cipher_spec+0x68>)
 800f6e8:	9300      	str	r3, [sp, #0]
 800f6ea:	2102      	movs	r1, #2
 800f6ec:	f241 7305 	movw	r3, #5893	; 0x1705
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	f7f6 fd8d 	bl	8006210 <mbedtls_debug_print_msg>
    return( 0 );
 800f6f6:	e7f2      	b.n	800f6de <mbedtls_ssl_write_change_cipher_spec+0x4a>
 800f6f8:	080183fd 	.word	0x080183fd
 800f6fc:	08018828 	.word	0x08018828
 800f700:	080171ed 	.word	0x080171ed
 800f704:	08018419 	.word	0x08018419

0800f708 <mbedtls_ssl_parse_change_cipher_spec>:
{
 800f708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f70a:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
 800f70c:	4b2e      	ldr	r3, [pc, #184]	; (800f7c8 <mbedtls_ssl_parse_change_cipher_spec+0xc0>)
 800f70e:	4a2f      	ldr	r2, [pc, #188]	; (800f7cc <mbedtls_ssl_parse_change_cipher_spec+0xc4>)
 800f710:	9300      	str	r3, [sp, #0]
 800f712:	2102      	movs	r1, #2
 800f714:	f241 730e 	movw	r3, #5902	; 0x170e
 800f718:	f7f6 fd7a 	bl	8006210 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 800f71c:	2101      	movs	r1, #1
 800f71e:	4620      	mov	r0, r4
 800f720:	f7ff f906 	bl	800e930 <mbedtls_ssl_read_record>
 800f724:	4605      	mov	r5, r0
 800f726:	b160      	cbz	r0, 800f742 <mbedtls_ssl_parse_change_cipher_spec+0x3a>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800f728:	4b29      	ldr	r3, [pc, #164]	; (800f7d0 <mbedtls_ssl_parse_change_cipher_spec+0xc8>)
 800f72a:	9001      	str	r0, [sp, #4]
 800f72c:	9300      	str	r3, [sp, #0]
 800f72e:	4a27      	ldr	r2, [pc, #156]	; (800f7cc <mbedtls_ssl_parse_change_cipher_spec+0xc4>)
 800f730:	f241 7312 	movw	r3, #5906	; 0x1712
 800f734:	2101      	movs	r1, #1
 800f736:	4620      	mov	r0, r4
 800f738:	f7f6 fd9a 	bl	8006270 <mbedtls_debug_print_ret>
}
 800f73c:	4628      	mov	r0, r5
 800f73e:	b003      	add	sp, #12
 800f740:	bd30      	pop	{r4, r5, pc}
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 800f742:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f744:	2b14      	cmp	r3, #20
 800f746:	d00f      	beq.n	800f768 <mbedtls_ssl_parse_change_cipher_spec+0x60>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 800f748:	4b22      	ldr	r3, [pc, #136]	; (800f7d4 <mbedtls_ssl_parse_change_cipher_spec+0xcc>)
 800f74a:	4a20      	ldr	r2, [pc, #128]	; (800f7cc <mbedtls_ssl_parse_change_cipher_spec+0xc4>)
 800f74c:	9300      	str	r3, [sp, #0]
 800f74e:	2101      	movs	r1, #1
 800f750:	f241 7318 	movw	r3, #5912	; 0x1718
 800f754:	4620      	mov	r0, r4
 800f756:	f7f6 fd5b 	bl	8006210 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800f75a:	220a      	movs	r2, #10
 800f75c:	2102      	movs	r1, #2
 800f75e:	4620      	mov	r0, r4
 800f760:	f7ff f892 	bl	800e888 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800f764:	4d1c      	ldr	r5, [pc, #112]	; (800f7d8 <mbedtls_ssl_parse_change_cipher_spec+0xd0>)
 800f766:	e7e9      	b.n	800f73c <mbedtls_ssl_parse_change_cipher_spec+0x34>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
 800f768:	4b1c      	ldr	r3, [pc, #112]	; (800f7dc <mbedtls_ssl_parse_change_cipher_spec+0xd4>)
 800f76a:	4a18      	ldr	r2, [pc, #96]	; (800f7cc <mbedtls_ssl_parse_change_cipher_spec+0xc4>)
 800f76c:	9300      	str	r3, [sp, #0]
 800f76e:	2103      	movs	r1, #3
 800f770:	f241 7325 	movw	r3, #5925	; 0x1725
 800f774:	4620      	mov	r0, r4
 800f776:	f7f6 fd4b 	bl	8006210 <mbedtls_debug_print_msg>
    ssl->transform_in = ssl->transform_negotiate;
 800f77a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f77c:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
 800f77e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f780:	6223      	str	r3, [r4, #32]
    memset( ssl->in_ctr, 0, 8 );
 800f782:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f784:	601d      	str	r5, [r3, #0]
 800f786:	605d      	str	r5, [r3, #4]
        ssl->in_ctr = ssl->in_hdr - 8;
 800f788:	6da3      	ldr	r3, [r4, #88]	; 0x58
    ssl_update_in_pointers( ssl, ssl->transform_negotiate );
 800f78a:	6c21      	ldr	r1, [r4, #64]	; 0x40
        ssl->in_ctr = ssl->in_hdr - 8;
 800f78c:	f1a3 0208 	sub.w	r2, r3, #8
 800f790:	6562      	str	r2, [r4, #84]	; 0x54
        ssl->in_len = ssl->in_hdr + 3;
 800f792:	1cda      	adds	r2, r3, #3
        ssl->in_iv  = ssl->in_hdr + 5;
 800f794:	3305      	adds	r3, #5
        ssl->in_len = ssl->in_hdr + 3;
 800f796:	65e2      	str	r2, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_hdr + 5;
 800f798:	6623      	str	r3, [r4, #96]	; 0x60
    if( transform != NULL &&
 800f79a:	b131      	cbz	r1, 800f7aa <mbedtls_ssl_parse_change_cipher_spec+0xa2>
 800f79c:	68e2      	ldr	r2, [r4, #12]
 800f79e:	2a01      	cmp	r2, #1
        ssl->in_msg = ssl->in_iv + transform->ivlen - transform->fixed_ivlen;
 800f7a0:	bfc1      	itttt	gt
 800f7a2:	68ca      	ldrgt	r2, [r1, #12]
 800f7a4:	6909      	ldrgt	r1, [r1, #16]
 800f7a6:	1a52      	subgt	r2, r2, r1
 800f7a8:	189b      	addgt	r3, r3, r2
        ssl->in_msg = ssl->in_iv;
 800f7aa:	6663      	str	r3, [r4, #100]	; 0x64
    ssl->state++;
 800f7ac:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 800f7ae:	4a07      	ldr	r2, [pc, #28]	; (800f7cc <mbedtls_ssl_parse_change_cipher_spec+0xc4>)
    ssl->state++;
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 800f7b4:	4b0a      	ldr	r3, [pc, #40]	; (800f7e0 <mbedtls_ssl_parse_change_cipher_spec+0xd8>)
 800f7b6:	2102      	movs	r1, #2
 800f7b8:	9300      	str	r3, [sp, #0]
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	f241 734e 	movw	r3, #5966	; 0x174e
 800f7c0:	f7f6 fd26 	bl	8006210 <mbedtls_debug_print_msg>
    return( 0 );
 800f7c4:	e7ba      	b.n	800f73c <mbedtls_ssl_parse_change_cipher_spec+0x34>
 800f7c6:	bf00      	nop
 800f7c8:	08017df9 	.word	0x08017df9
 800f7cc:	08018828 	.word	0x08018828
 800f7d0:	08017239 	.word	0x08017239
 800f7d4:	08017e15 	.word	0x08017e15
 800f7d8:	ffff8900 	.word	0xffff8900
 800f7dc:	08017e34 	.word	0x08017e34
 800f7e0:	08017e65 	.word	0x08017e65

0800f7e4 <mbedtls_ssl_optimize_checksum>:
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 800f7e4:	7a4b      	ldrb	r3, [r1, #9]
 800f7e6:	2b07      	cmp	r3, #7
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
 800f7e8:	bf08      	it	eq
 800f7ea:	4a03      	ldreq	r2, [pc, #12]	; (800f7f8 <mbedtls_ssl_optimize_checksum+0x14>)
 800f7ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 800f7ee:	bf18      	it	ne
 800f7f0:	4a02      	ldrne	r2, [pc, #8]	; (800f7fc <mbedtls_ssl_optimize_checksum+0x18>)
 800f7f2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800f7f6:	4770      	bx	lr
 800f7f8:	0800d89d 	.word	0x0800d89d
 800f7fc:	0800d895 	.word	0x0800d895

0800f800 <mbedtls_ssl_write_finished>:
{
 800f800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f802:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
 800f804:	4b31      	ldr	r3, [pc, #196]	; (800f8cc <mbedtls_ssl_write_finished+0xcc>)
 800f806:	4a32      	ldr	r2, [pc, #200]	; (800f8d0 <mbedtls_ssl_write_finished+0xd0>)
 800f808:	9300      	str	r3, [sp, #0]
 800f80a:	2102      	movs	r1, #2
 800f80c:	f641 03fe 	movw	r3, #6398	; 0x18fe
 800f810:	f7f6 fcfe 	bl	8006210 <mbedtls_debug_print_msg>
    ssl_update_out_pointers( ssl, ssl->transform_negotiate );
 800f814:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f816:	4620      	mov	r0, r4
 800f818:	f7fd fe04 	bl	800d424 <ssl_update_out_pointers>
    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 800f81c:	6823      	ldr	r3, [r4, #0]
 800f81e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800f822:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800f826:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f828:	f002 0201 	and.w	r2, r2, #1
 800f82c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800f830:	3104      	adds	r1, #4
 800f832:	4620      	mov	r0, r4
 800f834:	4798      	blx	r3
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 800f836:	68e3      	ldr	r3, [r4, #12]
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 800f838:	2214      	movs	r2, #20
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 800f83a:	2b00      	cmp	r3, #0
    ssl->out_msglen  = 4 + hash_len;
 800f83c:	bf14      	ite	ne
 800f83e:	2310      	movne	r3, #16
 800f840:	2328      	moveq	r3, #40	; 0x28
 800f842:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 800f846:	2316      	movs	r3, #22
 800f848:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 800f84c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800f850:	701a      	strb	r2, [r3, #0]
    if( ssl->handshake->resume != 0 )
 800f852:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f854:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800f858:	b353      	cbz	r3, 800f8b0 <mbedtls_ssl_write_finished+0xb0>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 800f85a:	6823      	ldr	r3, [r4, #0]
 800f85c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f860:	07db      	lsls	r3, r3, #31
 800f862:	d401      	bmi.n	800f868 <mbedtls_ssl_write_finished+0x68>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 800f864:	230f      	movs	r3, #15
        ssl->state++;
 800f866:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for outbound data" ) );
 800f868:	4b1a      	ldr	r3, [pc, #104]	; (800f8d4 <mbedtls_ssl_write_finished+0xd4>)
 800f86a:	4a19      	ldr	r2, [pc, #100]	; (800f8d0 <mbedtls_ssl_write_finished+0xd0>)
 800f86c:	9300      	str	r3, [sp, #0]
 800f86e:	2103      	movs	r1, #3
 800f870:	f641 132b 	movw	r3, #6443	; 0x192b
 800f874:	4620      	mov	r0, r4
 800f876:	f7f6 fccb 	bl	8006210 <mbedtls_debug_print_msg>
    memset( ssl->cur_out_ctr, 0, 8 );
 800f87a:	2300      	movs	r3, #0
 800f87c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800f880:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    ssl->transform_out = ssl->transform_negotiate;
 800f884:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 800f886:	4620      	mov	r0, r4
    ssl->transform_out = ssl->transform_negotiate;
 800f888:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
 800f88a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f88c:	6263      	str	r3, [r4, #36]	; 0x24
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 800f88e:	f7fe fe9d 	bl	800e5cc <mbedtls_ssl_write_handshake_msg>
 800f892:	4605      	mov	r5, r0
 800f894:	b178      	cbz	r0, 800f8b6 <mbedtls_ssl_write_finished+0xb6>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
 800f896:	4b10      	ldr	r3, [pc, #64]	; (800f8d8 <mbedtls_ssl_write_finished+0xd8>)
 800f898:	9001      	str	r0, [sp, #4]
 800f89a:	9300      	str	r3, [sp, #0]
 800f89c:	4a0c      	ldr	r2, [pc, #48]	; (800f8d0 <mbedtls_ssl_write_finished+0xd0>)
 800f89e:	f641 135e 	movw	r3, #6494	; 0x195e
 800f8a2:	2101      	movs	r1, #1
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	f7f6 fce3 	bl	8006270 <mbedtls_debug_print_ret>
}
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	b003      	add	sp, #12
 800f8ae:	bd30      	pop	{r4, r5, pc}
        ssl->state++;
 800f8b0:	6863      	ldr	r3, [r4, #4]
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	e7d7      	b.n	800f866 <mbedtls_ssl_write_finished+0x66>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );
 800f8b6:	4b09      	ldr	r3, [pc, #36]	; (800f8dc <mbedtls_ssl_write_finished+0xdc>)
 800f8b8:	4a05      	ldr	r2, [pc, #20]	; (800f8d0 <mbedtls_ssl_write_finished+0xd0>)
 800f8ba:	9300      	str	r3, [sp, #0]
 800f8bc:	2102      	movs	r1, #2
 800f8be:	f641 136b 	movw	r3, #6507	; 0x196b
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	f7f6 fca4 	bl	8006210 <mbedtls_debug_print_msg>
    return( 0 );
 800f8c8:	e7ef      	b.n	800f8aa <mbedtls_ssl_write_finished+0xaa>
 800f8ca:	bf00      	nop
 800f8cc:	08018435 	.word	0x08018435
 800f8d0:	08018828 	.word	0x08018828
 800f8d4:	08018447 	.word	0x08018447
 800f8d8:	080171ed 	.word	0x080171ed
 800f8dc:	08018479 	.word	0x08018479

0800f8e0 <mbedtls_ssl_parse_finished>:
{
 800f8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8e2:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );
 800f8e4:	4b40      	ldr	r3, [pc, #256]	; (800f9e8 <mbedtls_ssl_parse_finished+0x108>)
{
 800f8e6:	b087      	sub	sp, #28
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );
 800f8e8:	9300      	str	r3, [sp, #0]
 800f8ea:	4a40      	ldr	r2, [pc, #256]	; (800f9ec <mbedtls_ssl_parse_finished+0x10c>)
 800f8ec:	f641 137c 	movw	r3, #6524	; 0x197c
 800f8f0:	2102      	movs	r1, #2
 800f8f2:	f7f6 fc8d 	bl	8006210 <mbedtls_debug_print_msg>
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 800f8f6:	6823      	ldr	r3, [r4, #0]
 800f8f8:	ae03      	add	r6, sp, #12
 800f8fa:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800f8fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f900:	43d2      	mvns	r2, r2
 800f902:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800f906:	f002 0201 	and.w	r2, r2, #1
 800f90a:	4631      	mov	r1, r6
 800f90c:	4620      	mov	r0, r4
 800f90e:	4798      	blx	r3
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 800f910:	2101      	movs	r1, #1
 800f912:	4620      	mov	r0, r4
 800f914:	f7ff f80c 	bl	800e930 <mbedtls_ssl_read_record>
 800f918:	4605      	mov	r5, r0
 800f91a:	b160      	cbz	r0, 800f936 <mbedtls_ssl_parse_finished+0x56>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800f91c:	4b34      	ldr	r3, [pc, #208]	; (800f9f0 <mbedtls_ssl_parse_finished+0x110>)
 800f91e:	9001      	str	r0, [sp, #4]
 800f920:	9300      	str	r3, [sp, #0]
 800f922:	4a32      	ldr	r2, [pc, #200]	; (800f9ec <mbedtls_ssl_parse_finished+0x10c>)
 800f924:	f641 1382 	movw	r3, #6530	; 0x1982
 800f928:	2101      	movs	r1, #1
 800f92a:	4620      	mov	r0, r4
 800f92c:	f7f6 fca0 	bl	8006270 <mbedtls_debug_print_ret>
}
 800f930:	4628      	mov	r0, r5
 800f932:	b007      	add	sp, #28
 800f934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 800f936:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f938:	2b16      	cmp	r3, #22
 800f93a:	d00f      	beq.n	800f95c <mbedtls_ssl_parse_finished+0x7c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 800f93c:	4b2d      	ldr	r3, [pc, #180]	; (800f9f4 <mbedtls_ssl_parse_finished+0x114>)
 800f93e:	4a2b      	ldr	r2, [pc, #172]	; (800f9ec <mbedtls_ssl_parse_finished+0x10c>)
 800f940:	9300      	str	r3, [sp, #0]
 800f942:	2101      	movs	r1, #1
 800f944:	f641 1388 	movw	r3, #6536	; 0x1988
 800f948:	4620      	mov	r0, r4
 800f94a:	f7f6 fc61 	bl	8006210 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800f94e:	220a      	movs	r2, #10
 800f950:	2102      	movs	r1, #2
 800f952:	4620      	mov	r0, r4
 800f954:	f7fe ff98 	bl	800e888 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800f958:	4d27      	ldr	r5, [pc, #156]	; (800f9f8 <mbedtls_ssl_parse_finished+0x118>)
 800f95a:	e7e9      	b.n	800f930 <mbedtls_ssl_parse_finished+0x50>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 800f95c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800f95e:	7803      	ldrb	r3, [r0, #0]
 800f960:	2b14      	cmp	r3, #20
 800f962:	d102      	bne.n	800f96a <mbedtls_ssl_parse_finished+0x8a>
 800f964:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f966:	2b10      	cmp	r3, #16
 800f968:	d00f      	beq.n	800f98a <mbedtls_ssl_parse_finished+0xaa>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 800f96a:	4b22      	ldr	r3, [pc, #136]	; (800f9f4 <mbedtls_ssl_parse_finished+0x114>)
 800f96c:	9300      	str	r3, [sp, #0]
 800f96e:	f641 1399 	movw	r3, #6553	; 0x1999
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 800f972:	4a1e      	ldr	r2, [pc, #120]	; (800f9ec <mbedtls_ssl_parse_finished+0x10c>)
 800f974:	2101      	movs	r1, #1
 800f976:	4620      	mov	r0, r4
 800f978:	f7f6 fc4a 	bl	8006210 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800f97c:	2232      	movs	r2, #50	; 0x32
 800f97e:	2102      	movs	r1, #2
 800f980:	4620      	mov	r0, r4
 800f982:	f7fe ff81 	bl	800e888 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 800f986:	4d1d      	ldr	r5, [pc, #116]	; (800f9fc <mbedtls_ssl_parse_finished+0x11c>)
 800f988:	e7d2      	b.n	800f930 <mbedtls_ssl_parse_finished+0x50>
    for( i = 0; i < n; i++ )
 800f98a:	462b      	mov	r3, r5
    volatile unsigned char diff = 0;
 800f98c:	f88d 500b 	strb.w	r5, [sp, #11]
 800f990:	1d1a      	adds	r2, r3, #4
        unsigned char x = A[i], y = B[i];
 800f992:	5c81      	ldrb	r1, [r0, r2]
 800f994:	5cf7      	ldrb	r7, [r6, r3]
        diff |= x ^ y;
 800f996:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800f99a:	4079      	eors	r1, r7
    for( i = 0; i < n; i++ )
 800f99c:	3301      	adds	r3, #1
        diff |= x ^ y;
 800f99e:	430a      	orrs	r2, r1
    for( i = 0; i < n; i++ )
 800f9a0:	2b0c      	cmp	r3, #12
        diff |= x ^ y;
 800f9a2:	f88d 200b 	strb.w	r2, [sp, #11]
    for( i = 0; i < n; i++ )
 800f9a6:	d1f3      	bne.n	800f990 <mbedtls_ssl_parse_finished+0xb0>
    return( diff );
 800f9a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 800f9ac:	b123      	cbz	r3, 800f9b8 <mbedtls_ssl_parse_finished+0xd8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 800f9ae:	4b11      	ldr	r3, [pc, #68]	; (800f9f4 <mbedtls_ssl_parse_finished+0x114>)
 800f9b0:	9300      	str	r3, [sp, #0]
 800f9b2:	f641 13a2 	movw	r3, #6562	; 0x19a2
 800f9b6:	e7dc      	b.n	800f972 <mbedtls_ssl_parse_finished+0x92>
    if( ssl->handshake->resume != 0 )
 800f9b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f9ba:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800f9be:	b183      	cbz	r3, 800f9e2 <mbedtls_ssl_parse_finished+0x102>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 800f9c0:	6823      	ldr	r3, [r4, #0]
 800f9c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f9c6:	07db      	lsls	r3, r3, #31
 800f9c8:	d401      	bmi.n	800f9ce <mbedtls_ssl_parse_finished+0xee>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 800f9ca:	230a      	movs	r3, #10
        ssl->state++;
 800f9cc:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );
 800f9ce:	4b0c      	ldr	r3, [pc, #48]	; (800fa00 <mbedtls_ssl_parse_finished+0x120>)
 800f9d0:	4a06      	ldr	r2, [pc, #24]	; (800f9ec <mbedtls_ssl_parse_finished+0x10c>)
 800f9d2:	9300      	str	r3, [sp, #0]
 800f9d4:	2102      	movs	r1, #2
 800f9d6:	f44f 53ce 	mov.w	r3, #6592	; 0x19c0
 800f9da:	4620      	mov	r0, r4
 800f9dc:	f7f6 fc18 	bl	8006210 <mbedtls_debug_print_msg>
    return( 0 );
 800f9e0:	e7a6      	b.n	800f930 <mbedtls_ssl_parse_finished+0x50>
        ssl->state++;
 800f9e2:	6863      	ldr	r3, [r4, #4]
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	e7f1      	b.n	800f9cc <mbedtls_ssl_parse_finished+0xec>
 800f9e8:	08017e81 	.word	0x08017e81
 800f9ec:	08018828 	.word	0x08018828
 800f9f0:	08017239 	.word	0x08017239
 800f9f4:	08017e93 	.word	0x08017e93
 800f9f8:	ffff8900 	.word	0xffff8900
 800f9fc:	ffff8180 	.word	0xffff8180
 800fa00:	08017ea8 	.word	0x08017ea8

0800fa04 <mbedtls_ssl_session_init>:
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 800fa04:	2264      	movs	r2, #100	; 0x64
 800fa06:	2100      	movs	r1, #0
 800fa08:	f002 b9fe 	b.w	8011e08 <memset>

0800fa0c <mbedtls_ssl_init>:
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 800fa0c:	22bc      	movs	r2, #188	; 0xbc
 800fa0e:	2100      	movs	r1, #0
 800fa10:	f002 b9fa 	b.w	8011e08 <memset>

0800fa14 <mbedtls_ssl_conf_authmode>:
    conf->authmode   = authmode;
 800fa14:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800fa18:	f361 0383 	bfi	r3, r1, #2, #2
 800fa1c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800fa20:	4770      	bx	lr

0800fa22 <mbedtls_ssl_conf_rng>:
    conf->f_rng      = f_rng;
 800fa22:	6181      	str	r1, [r0, #24]
    conf->p_rng      = p_rng;
 800fa24:	61c2      	str	r2, [r0, #28]
 800fa26:	4770      	bx	lr

0800fa28 <mbedtls_ssl_conf_dbg>:
    conf->f_dbg      = f_dbg;
 800fa28:	6101      	str	r1, [r0, #16]
    conf->p_dbg      = p_dbg;
 800fa2a:	6142      	str	r2, [r0, #20]
 800fa2c:	4770      	bx	lr

0800fa2e <mbedtls_ssl_set_bio>:
    ssl->f_recv         = f_recv;
 800fa2e:	6143      	str	r3, [r0, #20]
    ssl->f_recv_timeout = f_recv_timeout;
 800fa30:	9b00      	ldr	r3, [sp, #0]
    ssl->p_bio          = p_bio;
 800fa32:	61c1      	str	r1, [r0, #28]
    ssl->f_send         = f_send;
 800fa34:	6102      	str	r2, [r0, #16]
    ssl->f_recv_timeout = f_recv_timeout;
 800fa36:	6183      	str	r3, [r0, #24]
 800fa38:	4770      	bx	lr

0800fa3a <mbedtls_ssl_conf_ca_chain>:
    conf->ca_chain   = ca_chain;
 800fa3a:	63c1      	str	r1, [r0, #60]	; 0x3c
    conf->ca_crl     = ca_crl;
 800fa3c:	6402      	str	r2, [r0, #64]	; 0x40
 800fa3e:	4770      	bx	lr

0800fa40 <mbedtls_ssl_set_hostname>:
{
 800fa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa42:	4606      	mov	r6, r0
    if( hostname != NULL )
 800fa44:	460c      	mov	r4, r1
 800fa46:	b139      	cbz	r1, 800fa58 <mbedtls_ssl_set_hostname+0x18>
        hostname_len = strlen( hostname );
 800fa48:	4608      	mov	r0, r1
 800fa4a:	f7f0 fbed 	bl	8000228 <strlen>
        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 800fa4e:	28ff      	cmp	r0, #255	; 0xff
        hostname_len = strlen( hostname );
 800fa50:	4605      	mov	r5, r0
        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 800fa52:	d902      	bls.n	800fa5a <mbedtls_ssl_set_hostname+0x1a>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800fa54:	4813      	ldr	r0, [pc, #76]	; (800faa4 <mbedtls_ssl_set_hostname+0x64>)
 800fa56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    size_t hostname_len = 0;
 800fa58:	460d      	mov	r5, r1
    if( ssl->hostname != NULL )
 800fa5a:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
 800fa5e:	b157      	cbz	r7, 800fa76 <mbedtls_ssl_set_hostname+0x36>
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 800fa60:	4638      	mov	r0, r7
 800fa62:	f7f0 fbe1 	bl	8000228 <strlen>
 800fa66:	4601      	mov	r1, r0
 800fa68:	4638      	mov	r0, r7
 800fa6a:	f7f8 fd59 	bl	8008520 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
 800fa6e:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
 800fa72:	f002 f98d 	bl	8011d90 <free>
    if( hostname == NULL )
 800fa76:	b91c      	cbnz	r4, 800fa80 <mbedtls_ssl_set_hostname+0x40>
        ssl->hostname = NULL;
 800fa78:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
    return( 0 );
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ssl->hostname = mbedtls_calloc( 1, hostname_len + 1 );
 800fa80:	1c69      	adds	r1, r5, #1
 800fa82:	2001      	movs	r0, #1
 800fa84:	f002 f94a 	bl	8011d1c <calloc>
 800fa88:	4607      	mov	r7, r0
 800fa8a:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
        if( ssl->hostname == NULL )
 800fa8e:	b130      	cbz	r0, 800fa9e <mbedtls_ssl_set_hostname+0x5e>
        memcpy( ssl->hostname, hostname, hostname_len );
 800fa90:	462a      	mov	r2, r5
 800fa92:	4621      	mov	r1, r4
 800fa94:	f002 f993 	bl	8011dbe <memcpy>
        ssl->hostname[hostname_len] = '\0';
 800fa98:	2000      	movs	r0, #0
 800fa9a:	5578      	strb	r0, [r7, r5]
 800fa9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 800fa9e:	4802      	ldr	r0, [pc, #8]	; (800faa8 <mbedtls_ssl_set_hostname+0x68>)
}
 800faa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faa2:	bf00      	nop
 800faa4:	ffff8f00 	.word	0xffff8f00
 800faa8:	ffff8100 	.word	0xffff8100

0800faac <mbedtls_ssl_get_ciphersuite>:
    if( ssl == NULL || ssl->session == NULL )
 800faac:	b120      	cbz	r0, 800fab8 <mbedtls_ssl_get_ciphersuite+0xc>
 800faae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fab0:	b113      	cbz	r3, 800fab8 <mbedtls_ssl_get_ciphersuite+0xc>
    return mbedtls_ssl_get_ciphersuite_name( ssl->session->ciphersuite );
 800fab2:	6818      	ldr	r0, [r3, #0]
 800fab4:	f7fc bcbe 	b.w	800c434 <mbedtls_ssl_get_ciphersuite_name>
}
 800fab8:	2000      	movs	r0, #0
 800faba:	4770      	bx	lr

0800fabc <mbedtls_ssl_handshake_step>:
    if( ssl == NULL || ssl->conf == NULL )
 800fabc:	b138      	cbz	r0, 800face <mbedtls_ssl_handshake_step+0x12>
 800fabe:	6803      	ldr	r3, [r0, #0]
 800fac0:	b12b      	cbz	r3, 800face <mbedtls_ssl_handshake_step+0x12>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 800fac2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fac6:	07db      	lsls	r3, r3, #31
 800fac8:	d403      	bmi.n	800fad2 <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 800faca:	f7fc bcc9 	b.w	800c460 <mbedtls_ssl_handshake_client_step>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800face:	4802      	ldr	r0, [pc, #8]	; (800fad8 <mbedtls_ssl_handshake_step+0x1c>)
 800fad0:	4770      	bx	lr
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 800fad2:	4802      	ldr	r0, [pc, #8]	; (800fadc <mbedtls_ssl_handshake_step+0x20>)
}
 800fad4:	4770      	bx	lr
 800fad6:	bf00      	nop
 800fad8:	ffff8f00 	.word	0xffff8f00
 800fadc:	ffff8f80 	.word	0xffff8f80

0800fae0 <mbedtls_ssl_handshake>:
{
 800fae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL || ssl->conf == NULL )
 800fae2:	4605      	mov	r5, r0
 800fae4:	b300      	cbz	r0, 800fb28 <mbedtls_ssl_handshake+0x48>
 800fae6:	6803      	ldr	r3, [r0, #0]
 800fae8:	b1f3      	cbz	r3, 800fb28 <mbedtls_ssl_handshake+0x48>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );
 800faea:	4b10      	ldr	r3, [pc, #64]	; (800fb2c <mbedtls_ssl_handshake+0x4c>)
 800faec:	4a10      	ldr	r2, [pc, #64]	; (800fb30 <mbedtls_ssl_handshake+0x50>)
 800faee:	9300      	str	r3, [sp, #0]
 800faf0:	2102      	movs	r1, #2
 800faf2:	f641 7394 	movw	r3, #8084	; 0x1f94
 800faf6:	f7f6 fb8b 	bl	8006210 <mbedtls_debug_print_msg>
    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 800fafa:	686b      	ldr	r3, [r5, #4]
 800fafc:	2b10      	cmp	r3, #16
 800fafe:	d101      	bne.n	800fb04 <mbedtls_ssl_handshake+0x24>
 800fb00:	2400      	movs	r4, #0
 800fb02:	e005      	b.n	800fb10 <mbedtls_ssl_handshake+0x30>
        ret = mbedtls_ssl_handshake_step( ssl );
 800fb04:	4628      	mov	r0, r5
 800fb06:	f7ff ffd9 	bl	800fabc <mbedtls_ssl_handshake_step>
        if( ret != 0 )
 800fb0a:	4604      	mov	r4, r0
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	d0f4      	beq.n	800fafa <mbedtls_ssl_handshake+0x1a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );
 800fb10:	4b08      	ldr	r3, [pc, #32]	; (800fb34 <mbedtls_ssl_handshake+0x54>)
 800fb12:	4a07      	ldr	r2, [pc, #28]	; (800fb30 <mbedtls_ssl_handshake+0x50>)
 800fb14:	9300      	str	r3, [sp, #0]
 800fb16:	2102      	movs	r1, #2
 800fb18:	f641 739e 	movw	r3, #8094	; 0x1f9e
 800fb1c:	4628      	mov	r0, r5
 800fb1e:	f7f6 fb77 	bl	8006210 <mbedtls_debug_print_msg>
}
 800fb22:	4620      	mov	r0, r4
 800fb24:	b003      	add	sp, #12
 800fb26:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800fb28:	4c03      	ldr	r4, [pc, #12]	; (800fb38 <mbedtls_ssl_handshake+0x58>)
 800fb2a:	e7fa      	b.n	800fb22 <mbedtls_ssl_handshake+0x42>
 800fb2c:	08017c51 	.word	0x08017c51
 800fb30:	08018828 	.word	0x08018828
 800fb34:	08017c5e 	.word	0x08017c5e
 800fb38:	ffff8f00 	.word	0xffff8f00

0800fb3c <mbedtls_ssl_read>:
{
 800fb3c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb40:	460f      	mov	r7, r1
 800fb42:	4690      	mov	r8, r2
    if( ssl == NULL || ssl->conf == NULL )
 800fb44:	4604      	mov	r4, r0
 800fb46:	2800      	cmp	r0, #0
 800fb48:	f000 80de 	beq.w	800fd08 <mbedtls_ssl_read+0x1cc>
 800fb4c:	6803      	ldr	r3, [r0, #0]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	f000 80da 	beq.w	800fd08 <mbedtls_ssl_read+0x1cc>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read" ) );
 800fb54:	4b6d      	ldr	r3, [pc, #436]	; (800fd0c <mbedtls_ssl_read+0x1d0>)
 800fb56:	4a6e      	ldr	r2, [pc, #440]	; (800fd10 <mbedtls_ssl_read+0x1d4>)
 800fb58:	9300      	str	r3, [sp, #0]
 800fb5a:	2102      	movs	r1, #2
 800fb5c:	f242 034e 	movw	r3, #8270	; 0x204e
 800fb60:	f7f6 fb56 	bl	8006210 <mbedtls_debug_print_msg>
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 800fb64:	6863      	ldr	r3, [r4, #4]
 800fb66:	2b10      	cmp	r3, #16
 800fb68:	d121      	bne.n	800fbae <mbedtls_ssl_read+0x72>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received handshake message" ) );
 800fb6a:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 800fd40 <mbedtls_ssl_read+0x204>
 800fb6e:	4e68      	ldr	r6, [pc, #416]	; (800fd10 <mbedtls_ssl_read+0x1d4>)
                MBEDTLS_SSL_DEBUG_MSG( 3, ( "refusing renegotiation, sending alert" ) );
 800fb70:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 800fd44 <mbedtls_ssl_read+0x208>
    while( ssl->in_offt == NULL )
 800fb74:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800fb76:	b371      	cbz	r1, 800fbd6 <mbedtls_ssl_read+0x9a>
    n = ( len < ssl->in_msglen )
 800fb78:	6f25      	ldr	r5, [r4, #112]	; 0x70
    memcpy( buf, ssl->in_offt, n );
 800fb7a:	4638      	mov	r0, r7
    n = ( len < ssl->in_msglen )
 800fb7c:	4545      	cmp	r5, r8
 800fb7e:	bf28      	it	cs
 800fb80:	4645      	movcs	r5, r8
    memcpy( buf, ssl->in_offt, n );
 800fb82:	462a      	mov	r2, r5
 800fb84:	f002 f91b 	bl	8011dbe <memcpy>
    ssl->in_msglen -= n;
 800fb88:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800fb8a:	1b5b      	subs	r3, r3, r5
 800fb8c:	6723      	str	r3, [r4, #112]	; 0x70
    if( ssl->in_msglen == 0 )
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	f040 80b6 	bne.w	800fd00 <mbedtls_ssl_read+0x1c4>
        ssl->in_offt = NULL;
 800fb94:	66a3      	str	r3, [r4, #104]	; 0x68
        ssl->keep_current_message = 0;
 800fb96:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );
 800fb9a:	4b5e      	ldr	r3, [pc, #376]	; (800fd14 <mbedtls_ssl_read+0x1d8>)
 800fb9c:	4a5c      	ldr	r2, [pc, #368]	; (800fd10 <mbedtls_ssl_read+0x1d4>)
 800fb9e:	9300      	str	r3, [sp, #0]
 800fba0:	2102      	movs	r1, #2
 800fba2:	f242 136e 	movw	r3, #8558	; 0x216e
 800fba6:	4620      	mov	r0, r4
 800fba8:	f7f6 fb32 	bl	8006210 <mbedtls_debug_print_msg>
    return( (int) n );
 800fbac:	e028      	b.n	800fc00 <mbedtls_ssl_read+0xc4>
        ret = mbedtls_ssl_handshake( ssl );
 800fbae:	4620      	mov	r0, r4
 800fbb0:	f7ff ff96 	bl	800fae0 <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 800fbb4:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
        ret = mbedtls_ssl_handshake( ssl );
 800fbb8:	4605      	mov	r5, r0
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 800fbba:	d0d6      	beq.n	800fb6a <mbedtls_ssl_read+0x2e>
 800fbbc:	2800      	cmp	r0, #0
 800fbbe:	d0d4      	beq.n	800fb6a <mbedtls_ssl_read+0x2e>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 800fbc0:	4b55      	ldr	r3, [pc, #340]	; (800fd18 <mbedtls_ssl_read+0x1dc>)
 800fbc2:	9001      	str	r0, [sp, #4]
 800fbc4:	9300      	str	r3, [sp, #0]
 800fbc6:	f242 037b 	movw	r3, #8315	; 0x207b
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800fbca:	4a51      	ldr	r2, [pc, #324]	; (800fd10 <mbedtls_ssl_read+0x1d4>)
 800fbcc:	2101      	movs	r1, #1
 800fbce:	4620      	mov	r0, r4
 800fbd0:	f7f6 fb4e 	bl	8006270 <mbedtls_debug_print_ret>
            return( ret );
 800fbd4:	e014      	b.n	800fc00 <mbedtls_ssl_read+0xc4>
        if( ssl->f_get_timer != NULL &&
 800fbd6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800fbd8:	b143      	cbz	r3, 800fbec <mbedtls_ssl_read+0xb0>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
 800fbda:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800fbdc:	4798      	blx	r3
        if( ssl->f_get_timer != NULL &&
 800fbde:	3001      	adds	r0, #1
 800fbe0:	d104      	bne.n	800fbec <mbedtls_ssl_read+0xb0>
            ssl_set_timer( ssl, ssl->conf->read_timeout );
 800fbe2:	6823      	ldr	r3, [r4, #0]
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800fbe8:	f7fd fc34 	bl	800d454 <ssl_set_timer>
        if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 800fbec:	2101      	movs	r1, #1
 800fbee:	4620      	mov	r0, r4
 800fbf0:	f7fe fe9e 	bl	800e930 <mbedtls_ssl_read_record>
 800fbf4:	4605      	mov	r5, r0
 800fbf6:	b168      	cbz	r0, 800fc14 <mbedtls_ssl_read+0xd8>
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 800fbf8:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 800fbfc:	d104      	bne.n	800fc08 <mbedtls_ssl_read+0xcc>
                return( 0 );
 800fbfe:	2500      	movs	r5, #0
}
 800fc00:	4628      	mov	r0, r5
 800fc02:	b002      	add	sp, #8
 800fc04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800fc08:	4b44      	ldr	r3, [pc, #272]	; (800fd1c <mbedtls_ssl_read+0x1e0>)
 800fc0a:	9001      	str	r0, [sp, #4]
 800fc0c:	9300      	str	r3, [sp, #0]
 800fc0e:	f242 038f 	movw	r3, #8335	; 0x208f
 800fc12:	e7da      	b.n	800fbca <mbedtls_ssl_read+0x8e>
        if( ssl->in_msglen  == 0 &&
 800fc14:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800fc16:	b98b      	cbnz	r3, 800fc3c <mbedtls_ssl_read+0x100>
 800fc18:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800fc1a:	2b17      	cmp	r3, #23
 800fc1c:	d10e      	bne.n	800fc3c <mbedtls_ssl_read+0x100>
            if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 800fc1e:	2101      	movs	r1, #1
 800fc20:	4620      	mov	r0, r4
 800fc22:	f7fe fe85 	bl	800e930 <mbedtls_ssl_read_record>
 800fc26:	4605      	mov	r5, r0
 800fc28:	b140      	cbz	r0, 800fc3c <mbedtls_ssl_read+0x100>
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 800fc2a:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 800fc2e:	d0e6      	beq.n	800fbfe <mbedtls_ssl_read+0xc2>
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800fc30:	4b3a      	ldr	r3, [pc, #232]	; (800fd1c <mbedtls_ssl_read+0x1e0>)
 800fc32:	9001      	str	r0, [sp, #4]
 800fc34:	9300      	str	r3, [sp, #0]
 800fc36:	f242 039e 	movw	r3, #8350	; 0x209e
 800fc3a:	e7c6      	b.n	800fbca <mbedtls_ssl_read+0x8e>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 800fc3c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800fc3e:	2b16      	cmp	r3, #22
 800fc40:	d13f      	bne.n	800fcc2 <mbedtls_ssl_read+0x186>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received handshake message" ) );
 800fc42:	f242 03a5 	movw	r3, #8357	; 0x20a5
 800fc46:	f8cd 9000 	str.w	r9, [sp]
 800fc4a:	4632      	mov	r2, r6
 800fc4c:	2101      	movs	r1, #1
 800fc4e:	4620      	mov	r0, r4
 800fc50:	f7f6 fade 	bl	8006210 <mbedtls_debug_print_msg>
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 800fc54:	6823      	ldr	r3, [r4, #0]
 800fc56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fc5a:	07db      	lsls	r3, r3, #31
 800fc5c:	d410      	bmi.n	800fc80 <mbedtls_ssl_read+0x144>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 800fc5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	b913      	cbnz	r3, 800fc6a <mbedtls_ssl_read+0x12e>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 800fc64:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800fc66:	2b04      	cmp	r3, #4
 800fc68:	d00a      	beq.n	800fc80 <mbedtls_ssl_read+0x144>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake received (not HelloRequest)" ) );
 800fc6a:	4b2d      	ldr	r3, [pc, #180]	; (800fd20 <mbedtls_ssl_read+0x1e4>)
 800fc6c:	9300      	str	r3, [sp, #0]
 800fc6e:	f242 03b2 	movw	r3, #8370	; 0x20b2
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 800fc72:	4a27      	ldr	r2, [pc, #156]	; (800fd10 <mbedtls_ssl_read+0x1d4>)
 800fc74:	2101      	movs	r1, #1
 800fc76:	4620      	mov	r0, r4
 800fc78:	f7f6 faca 	bl	8006210 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800fc7c:	4d29      	ldr	r5, [pc, #164]	; (800fd24 <mbedtls_ssl_read+0x1e8>)
 800fc7e:	e7bf      	b.n	800fc00 <mbedtls_ssl_read+0xc4>
                MBEDTLS_SSL_DEBUG_MSG( 3, ( "refusing renegotiation, sending alert" ) );
 800fc80:	f242 03f2 	movw	r3, #8434	; 0x20f2
 800fc84:	f8cd a000 	str.w	sl, [sp]
 800fc88:	4632      	mov	r2, r6
 800fc8a:	2103      	movs	r1, #3
 800fc8c:	4620      	mov	r0, r4
 800fc8e:	f7f6 fabf 	bl	8006210 <mbedtls_debug_print_msg>
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 800fc92:	68e3      	ldr	r3, [r4, #12]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	dd09      	ble.n	800fcac <mbedtls_ssl_read+0x170>
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 800fc98:	2264      	movs	r2, #100	; 0x64
 800fc9a:	2101      	movs	r1, #1
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	f7fe fdf3 	bl	800e888 <mbedtls_ssl_send_alert_message>
 800fca2:	4605      	mov	r5, r0
 800fca4:	2800      	cmp	r0, #0
 800fca6:	f43f af65 	beq.w	800fb74 <mbedtls_ssl_read+0x38>
 800fcaa:	e7a9      	b.n	800fc00 <mbedtls_ssl_read+0xc4>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800fcac:	4b1e      	ldr	r3, [pc, #120]	; (800fd28 <mbedtls_ssl_read+0x1ec>)
 800fcae:	4a18      	ldr	r2, [pc, #96]	; (800fd10 <mbedtls_ssl_read+0x1d4>)
 800fcb0:	9300      	str	r3, [sp, #0]
 800fcb2:	2101      	movs	r1, #1
 800fcb4:	f242 130e 	movw	r3, #8462	; 0x210e
 800fcb8:	4620      	mov	r0, r4
 800fcba:	f7f6 faa9 	bl	8006210 <mbedtls_debug_print_msg>
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800fcbe:	4d1b      	ldr	r5, [pc, #108]	; (800fd2c <mbedtls_ssl_read+0x1f0>)
 800fcc0:	e79e      	b.n	800fc00 <mbedtls_ssl_read+0xc4>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 800fcc2:	2b15      	cmp	r3, #21
 800fcc4:	d10a      	bne.n	800fcdc <mbedtls_ssl_read+0x1a0>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
 800fcc6:	4b1a      	ldr	r3, [pc, #104]	; (800fd30 <mbedtls_ssl_read+0x1f4>)
 800fcc8:	4a11      	ldr	r2, [pc, #68]	; (800fd10 <mbedtls_ssl_read+0x1d4>)
 800fcca:	9300      	str	r3, [sp, #0]
 800fccc:	2102      	movs	r1, #2
 800fcce:	f242 1339 	movw	r3, #8505	; 0x2139
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	f7f6 fa9c 	bl	8006210 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_WANT_READ );
 800fcd8:	4d16      	ldr	r5, [pc, #88]	; (800fd34 <mbedtls_ssl_read+0x1f8>)
 800fcda:	e791      	b.n	800fc00 <mbedtls_ssl_read+0xc4>
        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 800fcdc:	2b17      	cmp	r3, #23
 800fcde:	d004      	beq.n	800fcea <mbedtls_ssl_read+0x1ae>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 800fce0:	4b15      	ldr	r3, [pc, #84]	; (800fd38 <mbedtls_ssl_read+0x1fc>)
 800fce2:	9300      	str	r3, [sp, #0]
 800fce4:	f242 133f 	movw	r3, #8511	; 0x213f
 800fce8:	e7c3      	b.n	800fc72 <mbedtls_ssl_read+0x136>
        ssl->in_offt = ssl->in_msg;
 800fcea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcec:	66a3      	str	r3, [r4, #104]	; 0x68
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 800fcee:	6863      	ldr	r3, [r4, #4]
 800fcf0:	2b10      	cmp	r3, #16
 800fcf2:	f47f af3f 	bne.w	800fb74 <mbedtls_ssl_read+0x38>
            ssl_set_timer( ssl, 0 );
 800fcf6:	2100      	movs	r1, #0
 800fcf8:	4620      	mov	r0, r4
 800fcfa:	f7fd fbab 	bl	800d454 <ssl_set_timer>
 800fcfe:	e739      	b.n	800fb74 <mbedtls_ssl_read+0x38>
        ssl->in_offt += n;
 800fd00:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800fd02:	442b      	add	r3, r5
 800fd04:	66a3      	str	r3, [r4, #104]	; 0x68
 800fd06:	e748      	b.n	800fb9a <mbedtls_ssl_read+0x5e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800fd08:	4d0c      	ldr	r5, [pc, #48]	; (800fd3c <mbedtls_ssl_read+0x200>)
 800fd0a:	e779      	b.n	800fc00 <mbedtls_ssl_read+0xc4>
 800fd0c:	08017f3a 	.word	0x08017f3a
 800fd10:	08018828 	.word	0x08018828
 800fd14:	08018001 	.word	0x08018001
 800fd18:	08017f42 	.word	0x08017f42
 800fd1c:	08017239 	.word	0x08017239
 800fd20:	08017f73 	.word	0x08017f73
 800fd24:	ffff8900 	.word	0xffff8900
 800fd28:	08017544 	.word	0x08017544
 800fd2c:	ffff9400 	.word	0xffff9400
 800fd30:	08017fbf 	.word	0x08017fbf
 800fd34:	ffff9700 	.word	0xffff9700
 800fd38:	08017fe4 	.word	0x08017fe4
 800fd3c:	ffff8f00 	.word	0xffff8f00
 800fd40:	08017f58 	.word	0x08017f58
 800fd44:	08017f99 	.word	0x08017f99

0800fd48 <mbedtls_ssl_write>:
{
 800fd48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd4a:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
 800fd4c:	4b2f      	ldr	r3, [pc, #188]	; (800fe0c <mbedtls_ssl_write+0xc4>)
{
 800fd4e:	460f      	mov	r7, r1
 800fd50:	4616      	mov	r6, r2
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
 800fd52:	9300      	str	r3, [sp, #0]
 800fd54:	4a2e      	ldr	r2, [pc, #184]	; (800fe10 <mbedtls_ssl_write+0xc8>)
 800fd56:	f242 13ea 	movw	r3, #8682	; 0x21ea
 800fd5a:	2102      	movs	r1, #2
 800fd5c:	f7f6 fa58 	bl	8006210 <mbedtls_debug_print_msg>
    if( ssl == NULL || ssl->conf == NULL )
 800fd60:	2c00      	cmp	r4, #0
 800fd62:	d051      	beq.n	800fe08 <mbedtls_ssl_write+0xc0>
 800fd64:	6823      	ldr	r3, [r4, #0]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d04e      	beq.n	800fe08 <mbedtls_ssl_write+0xc0>
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 800fd6a:	6863      	ldr	r3, [r4, #4]
 800fd6c:	2b10      	cmp	r3, #16
 800fd6e:	d011      	beq.n	800fd94 <mbedtls_ssl_write+0x4c>
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 800fd70:	4620      	mov	r0, r4
 800fd72:	f7ff feb5 	bl	800fae0 <mbedtls_ssl_handshake>
 800fd76:	4605      	mov	r5, r0
 800fd78:	b160      	cbz	r0, 800fd94 <mbedtls_ssl_write+0x4c>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 800fd7a:	4b26      	ldr	r3, [pc, #152]	; (800fe14 <mbedtls_ssl_write+0xcc>)
 800fd7c:	9001      	str	r0, [sp, #4]
 800fd7e:	9300      	str	r3, [sp, #0]
 800fd80:	4a23      	ldr	r2, [pc, #140]	; (800fe10 <mbedtls_ssl_write+0xc8>)
 800fd82:	f242 13fb 	movw	r3, #8699	; 0x21fb
 800fd86:	2101      	movs	r1, #1
 800fd88:	4620      	mov	r0, r4
 800fd8a:	f7f6 fa71 	bl	8006270 <mbedtls_debug_print_ret>
}
 800fd8e:	4628      	mov	r0, r5
 800fd90:	b003      	add	sp, #12
 800fd92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->out_left != 0 )
 800fd94:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800fd98:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 800fd9c:	bf28      	it	cs
 800fd9e:	f44f 5680 	movcs.w	r6, #4096	; 0x1000
 800fda2:	b1c3      	cbz	r3, 800fdd6 <mbedtls_ssl_write+0x8e>
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 800fda4:	4620      	mov	r0, r4
 800fda6:	f7fe f8cb 	bl	800df40 <mbedtls_ssl_flush_output>
 800fdaa:	4605      	mov	r5, r0
 800fdac:	b350      	cbz	r0, 800fe04 <mbedtls_ssl_write+0xbc>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 800fdae:	4b1a      	ldr	r3, [pc, #104]	; (800fe18 <mbedtls_ssl_write+0xd0>)
 800fdb0:	9001      	str	r0, [sp, #4]
 800fdb2:	9300      	str	r3, [sp, #0]
 800fdb4:	f242 13a4 	movw	r3, #8612	; 0x21a4
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 800fdb8:	4a15      	ldr	r2, [pc, #84]	; (800fe10 <mbedtls_ssl_write+0xc8>)
 800fdba:	2101      	movs	r1, #1
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	f7f6 fa57 	bl	8006270 <mbedtls_debug_print_ret>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );
 800fdc2:	4b16      	ldr	r3, [pc, #88]	; (800fe1c <mbedtls_ssl_write+0xd4>)
 800fdc4:	4a12      	ldr	r2, [pc, #72]	; (800fe10 <mbedtls_ssl_write+0xc8>)
 800fdc6:	9300      	str	r3, [sp, #0]
 800fdc8:	2102      	movs	r1, #2
 800fdca:	f242 2306 	movw	r3, #8710	; 0x2206
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f7f6 fa1e 	bl	8006210 <mbedtls_debug_print_msg>
    return( ret );
 800fdd4:	e7db      	b.n	800fd8e <mbedtls_ssl_write+0x46>
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 800fdd6:	2317      	movs	r3, #23
        memcpy( ssl->out_msg, buf, len );
 800fdd8:	4632      	mov	r2, r6
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 800fdda:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
 800fdde:	4639      	mov	r1, r7
        ssl->out_msglen  = len;
 800fde0:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
        memcpy( ssl->out_msg, buf, len );
 800fde4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800fde8:	f001 ffe9 	bl	8011dbe <memcpy>
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 800fdec:	2101      	movs	r1, #1
 800fdee:	4620      	mov	r0, r4
 800fdf0:	f7fe f92e 	bl	800e050 <mbedtls_ssl_write_record>
 800fdf4:	4605      	mov	r5, r0
 800fdf6:	b128      	cbz	r0, 800fe04 <mbedtls_ssl_write+0xbc>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 800fdf8:	4b09      	ldr	r3, [pc, #36]	; (800fe20 <mbedtls_ssl_write+0xd8>)
 800fdfa:	9001      	str	r0, [sp, #4]
 800fdfc:	9300      	str	r3, [sp, #0]
 800fdfe:	f242 13b5 	movw	r3, #8629	; 0x21b5
 800fe02:	e7d9      	b.n	800fdb8 <mbedtls_ssl_write+0x70>
    return( (int) len );
 800fe04:	4635      	mov	r5, r6
 800fe06:	e7dc      	b.n	800fdc2 <mbedtls_ssl_write+0x7a>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800fe08:	4d06      	ldr	r5, [pc, #24]	; (800fe24 <mbedtls_ssl_write+0xdc>)
 800fe0a:	e7c0      	b.n	800fd8e <mbedtls_ssl_write+0x46>
 800fe0c:	08018378 	.word	0x08018378
 800fe10:	08018828 	.word	0x08018828
 800fe14:	08017f42 	.word	0x08017f42
 800fe18:	080186a9 	.word	0x080186a9
 800fe1c:	08018381 	.word	0x08018381
 800fe20:	08018349 	.word	0x08018349
 800fe24:	ffff8f00 	.word	0xffff8f00

0800fe28 <mbedtls_ssl_close_notify>:
{
 800fe28:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL || ssl->conf == NULL )
 800fe2a:	4604      	mov	r4, r0
 800fe2c:	2800      	cmp	r0, #0
 800fe2e:	d033      	beq.n	800fe98 <mbedtls_ssl_close_notify+0x70>
 800fe30:	6803      	ldr	r3, [r0, #0]
 800fe32:	b38b      	cbz	r3, 800fe98 <mbedtls_ssl_close_notify+0x70>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write close notify" ) );
 800fe34:	4b19      	ldr	r3, [pc, #100]	; (800fe9c <mbedtls_ssl_close_notify+0x74>)
 800fe36:	4a1a      	ldr	r2, [pc, #104]	; (800fea0 <mbedtls_ssl_close_notify+0x78>)
 800fe38:	9300      	str	r3, [sp, #0]
 800fe3a:	2102      	movs	r1, #2
 800fe3c:	f242 2315 	movw	r3, #8725	; 0x2215
 800fe40:	f7f6 f9e6 	bl	8006210 <mbedtls_debug_print_msg>
    if( ssl->out_left != 0 )
 800fe44:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800fe48:	b12a      	cbz	r2, 800fe56 <mbedtls_ssl_close_notify+0x2e>
        return( mbedtls_ssl_flush_output( ssl ) );
 800fe4a:	4620      	mov	r0, r4
}
 800fe4c:	b003      	add	sp, #12
 800fe4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return( mbedtls_ssl_flush_output( ssl ) );
 800fe52:	f7fe b875 	b.w	800df40 <mbedtls_ssl_flush_output>
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 800fe56:	6863      	ldr	r3, [r4, #4]
 800fe58:	2b10      	cmp	r3, #16
 800fe5a:	d112      	bne.n	800fe82 <mbedtls_ssl_close_notify+0x5a>
        if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 800fe5c:	2101      	movs	r1, #1
 800fe5e:	4620      	mov	r0, r4
 800fe60:	f7fe fd12 	bl	800e888 <mbedtls_ssl_send_alert_message>
 800fe64:	4605      	mov	r5, r0
 800fe66:	b160      	cbz	r0, 800fe82 <mbedtls_ssl_close_notify+0x5a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_send_alert_message", ret );
 800fe68:	4b0e      	ldr	r3, [pc, #56]	; (800fea4 <mbedtls_ssl_close_notify+0x7c>)
 800fe6a:	9001      	str	r0, [sp, #4]
 800fe6c:	9300      	str	r3, [sp, #0]
 800fe6e:	4a0c      	ldr	r2, [pc, #48]	; (800fea0 <mbedtls_ssl_close_notify+0x78>)
 800fe70:	f242 2320 	movw	r3, #8736	; 0x2220
 800fe74:	2101      	movs	r1, #1
 800fe76:	4620      	mov	r0, r4
 800fe78:	f7f6 f9fa 	bl	8006270 <mbedtls_debug_print_ret>
}
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	b003      	add	sp, #12
 800fe80:	bd30      	pop	{r4, r5, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write close notify" ) );
 800fe82:	4b09      	ldr	r3, [pc, #36]	; (800fea8 <mbedtls_ssl_close_notify+0x80>)
 800fe84:	4a06      	ldr	r2, [pc, #24]	; (800fea0 <mbedtls_ssl_close_notify+0x78>)
 800fe86:	9300      	str	r3, [sp, #0]
 800fe88:	2102      	movs	r1, #2
 800fe8a:	f242 2325 	movw	r3, #8741	; 0x2225
 800fe8e:	4620      	mov	r0, r4
 800fe90:	f7f6 f9be 	bl	8006210 <mbedtls_debug_print_msg>
    return( 0 );
 800fe94:	2500      	movs	r5, #0
 800fe96:	e7f1      	b.n	800fe7c <mbedtls_ssl_close_notify+0x54>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800fe98:	4d04      	ldr	r5, [pc, #16]	; (800feac <mbedtls_ssl_close_notify+0x84>)
 800fe9a:	e7ef      	b.n	800fe7c <mbedtls_ssl_close_notify+0x54>
 800fe9c:	08017864 	.word	0x08017864
 800fea0:	08018828 	.word	0x08018828
 800fea4:	0801787a 	.word	0x0801787a
 800fea8:	08017899 	.word	0x08017899
 800feac:	ffff8f00 	.word	0xffff8f00

0800feb0 <mbedtls_ssl_transform_free>:
{
 800feb0:	b510      	push	{r4, lr}
    if( transform == NULL )
 800feb2:	4604      	mov	r4, r0
 800feb4:	b1a0      	cbz	r0, 800fee0 <mbedtls_ssl_transform_free+0x30>
    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 800feb6:	3050      	adds	r0, #80	; 0x50
 800feb8:	f7f5 fe92 	bl	8005be0 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 800febc:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800fec0:	f7f5 fe8e 	bl	8005be0 <mbedtls_cipher_free>
    mbedtls_md_free( &transform->md_ctx_enc );
 800fec4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800fec8:	f7f7 fd9b 	bl	8007a02 <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 800fecc:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800fed0:	f7f7 fd97 	bl	8007a02 <mbedtls_md_free>
    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 800fed4:	4620      	mov	r0, r4
}
 800fed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 800feda:	21d0      	movs	r1, #208	; 0xd0
 800fedc:	f7f8 bb20 	b.w	8008520 <mbedtls_platform_zeroize>
 800fee0:	bd10      	pop	{r4, pc}

0800fee2 <mbedtls_ssl_handshake_free>:
{
 800fee2:	b510      	push	{r4, lr}
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 800fee4:	6b04      	ldr	r4, [r0, #48]	; 0x30
    if( handshake == NULL )
 800fee6:	b174      	cbz	r4, 800ff06 <mbedtls_ssl_handshake_free+0x24>
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 800fee8:	f104 0008 	add.w	r0, r4, #8
 800feec:	f7fa fd5a 	bl	800a9a4 <mbedtls_sha256_free>
    mbedtls_sha512_free(   &handshake->fin_sha512    );
 800fef0:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800fef4:	f7fb fa00 	bl	800b2f8 <mbedtls_sha512_free>
    mbedtls_platform_zeroize( handshake,
 800fef8:	4620      	mov	r0, r4
}
 800fefa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( handshake,
 800fefe:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800ff02:	f7f8 bb0d 	b.w	8008520 <mbedtls_platform_zeroize>
 800ff06:	bd10      	pop	{r4, pc}

0800ff08 <mbedtls_ssl_session_free>:
{
 800ff08:	b510      	push	{r4, lr}
    if( session == NULL )
 800ff0a:	4604      	mov	r4, r0
 800ff0c:	b160      	cbz	r0, 800ff28 <mbedtls_ssl_session_free+0x20>
    if( session->peer_cert != NULL )
 800ff0e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800ff10:	b120      	cbz	r0, 800ff1c <mbedtls_ssl_session_free+0x14>
        mbedtls_x509_crt_free( session->peer_cert );
 800ff12:	f001 faec 	bl	80114ee <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 800ff16:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800ff18:	f001 ff3a 	bl	8011d90 <free>
    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
 800ff1c:	4620      	mov	r0, r4
}
 800ff1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
 800ff22:	2164      	movs	r1, #100	; 0x64
 800ff24:	f7f8 bafc 	b.w	8008520 <mbedtls_platform_zeroize>
 800ff28:	bd10      	pop	{r4, pc}
	...

0800ff2c <mbedtls_ssl_handshake_wrapup>:
{
 800ff2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff2e:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
 800ff30:	6b03      	ldr	r3, [r0, #48]	; 0x30
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 800ff32:	4a2d      	ldr	r2, [pc, #180]	; (800ffe8 <mbedtls_ssl_handshake_wrapup+0xbc>)
    int resume = ssl->handshake->resume;
 800ff34:	f8d3 51d4 	ldr.w	r5, [r3, #468]	; 0x1d4
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 800ff38:	4b2c      	ldr	r3, [pc, #176]	; (800ffec <mbedtls_ssl_handshake_wrapup+0xc0>)
 800ff3a:	2103      	movs	r1, #3
 800ff3c:	9300      	str	r3, [sp, #0]
 800ff3e:	f44f 53c6 	mov.w	r3, #6336	; 0x18c0
 800ff42:	f7f6 f965 	bl	8006210 <mbedtls_debug_print_msg>
    if( ssl->session )
 800ff46:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ff48:	b120      	cbz	r0, 800ff54 <mbedtls_ssl_handshake_wrapup+0x28>
        mbedtls_ssl_session_free( ssl->session );
 800ff4a:	f7ff ffdd 	bl	800ff08 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 800ff4e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ff50:	f001 ff1e 	bl	8011d90 <free>
    ssl->session_negotiate = NULL;
 800ff54:	2300      	movs	r3, #0
    if( ssl->conf->f_set_cache != NULL &&
 800ff56:	6822      	ldr	r2, [r4, #0]
    ssl->session = ssl->session_negotiate;
 800ff58:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ssl->session_negotiate = NULL;
 800ff5a:	62e3      	str	r3, [r4, #44]	; 0x2c
    if( ssl->conf->f_set_cache != NULL &&
 800ff5c:	6a53      	ldr	r3, [r2, #36]	; 0x24
    ssl->session = ssl->session_negotiate;
 800ff5e:	62a1      	str	r1, [r4, #40]	; 0x28
    if( ssl->conf->f_set_cache != NULL &&
 800ff60:	b173      	cbz	r3, 800ff80 <mbedtls_ssl_handshake_wrapup+0x54>
 800ff62:	6888      	ldr	r0, [r1, #8]
 800ff64:	b160      	cbz	r0, 800ff80 <mbedtls_ssl_handshake_wrapup+0x54>
        ssl->session->id_len != 0 &&
 800ff66:	b95d      	cbnz	r5, 800ff80 <mbedtls_ssl_handshake_wrapup+0x54>
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 800ff68:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800ff6a:	4798      	blx	r3
 800ff6c:	b140      	cbz	r0, 800ff80 <mbedtls_ssl_handshake_wrapup+0x54>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "cache did not store session" ) );
 800ff6e:	4b20      	ldr	r3, [pc, #128]	; (800fff0 <mbedtls_ssl_handshake_wrapup+0xc4>)
 800ff70:	4a1d      	ldr	r2, [pc, #116]	; (800ffe8 <mbedtls_ssl_handshake_wrapup+0xbc>)
 800ff72:	9300      	str	r3, [sp, #0]
 800ff74:	2101      	movs	r1, #1
 800ff76:	f641 03e3 	movw	r3, #6371	; 0x18e3
 800ff7a:	4620      	mov	r0, r4
 800ff7c:	f7f6 f948 	bl	8006210 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );
 800ff80:	4b1c      	ldr	r3, [pc, #112]	; (800fff4 <mbedtls_ssl_handshake_wrapup+0xc8>)
 800ff82:	4a19      	ldr	r2, [pc, #100]	; (800ffe8 <mbedtls_ssl_handshake_wrapup+0xbc>)
 800ff84:	2103      	movs	r1, #3
 800ff86:	9300      	str	r3, [sp, #0]
 800ff88:	4620      	mov	r0, r4
 800ff8a:	f641 03a5 	movw	r3, #6309	; 0x18a5
 800ff8e:	f7f6 f93f 	bl	8006210 <mbedtls_debug_print_msg>
    mbedtls_ssl_handshake_free( ssl );
 800ff92:	4620      	mov	r0, r4
 800ff94:	f7ff ffa5 	bl	800fee2 <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 800ff98:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ff9a:	f001 fef9 	bl	8011d90 <free>
    ssl->handshake = NULL;
 800ff9e:	2300      	movs	r3, #0
    if( ssl->transform )
 800ffa0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    ssl->handshake = NULL;
 800ffa2:	6323      	str	r3, [r4, #48]	; 0x30
    if( ssl->transform )
 800ffa4:	b120      	cbz	r0, 800ffb0 <mbedtls_ssl_handshake_wrapup+0x84>
        mbedtls_ssl_transform_free( ssl->transform );
 800ffa6:	f7ff ff83 	bl	800feb0 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 800ffaa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ffac:	f001 fef0 	bl	8011d90 <free>
    ssl->transform = ssl->transform_negotiate;
 800ffb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
 800ffb2:	4620      	mov	r0, r4
    ssl->transform = ssl->transform_negotiate;
 800ffb4:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	6423      	str	r3, [r4, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
 800ffba:	4b0f      	ldr	r3, [pc, #60]	; (800fff8 <mbedtls_ssl_handshake_wrapup+0xcc>)
 800ffbc:	4a0a      	ldr	r2, [pc, #40]	; (800ffe8 <mbedtls_ssl_handshake_wrapup+0xbc>)
 800ffbe:	9300      	str	r3, [sp, #0]
 800ffc0:	2103      	movs	r1, #3
 800ffc2:	f641 03b9 	movw	r3, #6329	; 0x18b9
 800ffc6:	f7f6 f923 	bl	8006210 <mbedtls_debug_print_msg>
    ssl->state++;
 800ffca:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 800ffcc:	4a06      	ldr	r2, [pc, #24]	; (800ffe8 <mbedtls_ssl_handshake_wrapup+0xbc>)
    ssl->state++;
 800ffce:	3301      	adds	r3, #1
 800ffd0:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 800ffd2:	4b0a      	ldr	r3, [pc, #40]	; (800fffc <mbedtls_ssl_handshake_wrapup+0xd0>)
 800ffd4:	2103      	movs	r1, #3
 800ffd6:	9300      	str	r3, [sp, #0]
 800ffd8:	4620      	mov	r0, r4
 800ffda:	f641 03f7 	movw	r3, #6391	; 0x18f7
 800ffde:	f7f6 f917 	bl	8006210 <mbedtls_debug_print_msg>
}
 800ffe2:	b003      	add	sp, #12
 800ffe4:	bd30      	pop	{r4, r5, pc}
 800ffe6:	bf00      	nop
 800ffe8:	08018828 	.word	0x08018828
 800ffec:	08017c6b 	.word	0x08017c6b
 800fff0:	08017c7f 	.word	0x08017c7f
 800fff4:	08017c9b 	.word	0x08017c9b
 800fff8:	08017cbb 	.word	0x08017cbb
 800fffc:	08017cdb 	.word	0x08017cdb

08010000 <ssl_handshake_init>:
{
 8010000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010002:	4604      	mov	r4, r0
    if( ssl->transform_negotiate )
 8010004:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8010006:	b108      	cbz	r0, 801000c <ssl_handshake_init+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 8010008:	f7ff ff52 	bl	800feb0 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 801000c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801000e:	b108      	cbz	r0, 8010014 <ssl_handshake_init+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 8010010:	f7ff ff7a 	bl	800ff08 <mbedtls_ssl_session_free>
    if( ssl->handshake )
 8010014:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010016:	b113      	cbz	r3, 801001e <ssl_handshake_init+0x1e>
        mbedtls_ssl_handshake_free( ssl );
 8010018:	4620      	mov	r0, r4
 801001a:	f7ff ff62 	bl	800fee2 <mbedtls_ssl_handshake_free>
    if( ssl->transform_negotiate == NULL )
 801001e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010020:	b923      	cbnz	r3, 801002c <ssl_handshake_init+0x2c>
        ssl->transform_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 8010022:	21d0      	movs	r1, #208	; 0xd0
 8010024:	2001      	movs	r0, #1
 8010026:	f001 fe79 	bl	8011d1c <calloc>
 801002a:	6420      	str	r0, [r4, #64]	; 0x40
    if( ssl->session_negotiate == NULL )
 801002c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801002e:	b923      	cbnz	r3, 801003a <ssl_handshake_init+0x3a>
        ssl->session_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 8010030:	2164      	movs	r1, #100	; 0x64
 8010032:	2001      	movs	r0, #1
 8010034:	f001 fe72 	bl	8011d1c <calloc>
 8010038:	62e0      	str	r0, [r4, #44]	; 0x2c
    if( ssl->handshake == NULL )
 801003a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801003c:	b92b      	cbnz	r3, 801004a <ssl_handshake_init+0x4a>
        ssl->handshake = mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 801003e:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8010042:	2001      	movs	r0, #1
 8010044:	f001 fe6a 	bl	8011d1c <calloc>
 8010048:	6320      	str	r0, [r4, #48]	; 0x30
    if( ssl->handshake == NULL ||
 801004a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801004c:	b11b      	cbz	r3, 8010056 <ssl_handshake_init+0x56>
 801004e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010050:	b10b      	cbz	r3, 8010056 <ssl_handshake_init+0x56>
        ssl->session_negotiate == NULL )
 8010052:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        ssl->transform_negotiate == NULL ||
 8010054:	b9c0      	cbnz	r0, 8010088 <ssl_handshake_init+0x88>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );
 8010056:	4b28      	ldr	r3, [pc, #160]	; (80100f8 <ssl_handshake_init+0xf8>)
 8010058:	4a28      	ldr	r2, [pc, #160]	; (80100fc <ssl_handshake_init+0xfc>)
 801005a:	2101      	movs	r1, #1
 801005c:	9300      	str	r3, [sp, #0]
 801005e:	4620      	mov	r0, r4
 8010060:	f641 232b 	movw	r3, #6699	; 0x1a2b
 8010064:	f7f6 f8d4 	bl	8006210 <mbedtls_debug_print_msg>
        mbedtls_free( ssl->handshake );
 8010068:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801006a:	f001 fe91 	bl	8011d90 <free>
        mbedtls_free( ssl->transform_negotiate );
 801006e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8010070:	f001 fe8e 	bl	8011d90 <free>
        mbedtls_free( ssl->session_negotiate );
 8010074:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010076:	f001 fe8b 	bl	8011d90 <free>
        ssl->handshake = NULL;
 801007a:	2300      	movs	r3, #0
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801007c:	4820      	ldr	r0, [pc, #128]	; (8010100 <ssl_handshake_init+0x100>)
        ssl->handshake = NULL;
 801007e:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
 8010080:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
 8010082:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8010084:	b003      	add	sp, #12
 8010086:	bd30      	pop	{r4, r5, pc}
    mbedtls_ssl_session_init( ssl->session_negotiate );
 8010088:	f7ff fcbc 	bl	800fa04 <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 801008c:	6c25      	ldr	r5, [r4, #64]	; 0x40
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 801008e:	22d0      	movs	r2, #208	; 0xd0
 8010090:	2100      	movs	r1, #0
 8010092:	4628      	mov	r0, r5
 8010094:	f001 feb8 	bl	8011e08 <memset>
    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 8010098:	f105 0050 	add.w	r0, r5, #80	; 0x50
 801009c:	f7f5 fd9c 	bl	8005bd8 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 80100a0:	f105 0090 	add.w	r0, r5, #144	; 0x90
 80100a4:	f7f5 fd98 	bl	8005bd8 <mbedtls_cipher_init>
    mbedtls_md_init( &transform->md_ctx_enc );
 80100a8:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80100ac:	f7f7 fca4 	bl	80079f8 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 80100b0:	f105 0044 	add.w	r0, r5, #68	; 0x44
 80100b4:	f7f7 fca0 	bl	80079f8 <mbedtls_md_init>
    ssl_handshake_params_init( ssl->handshake );
 80100b8:	6b24      	ldr	r4, [r4, #48]	; 0x30
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 80100ba:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80100be:	2100      	movs	r1, #0
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 80100c0:	f104 0508 	add.w	r5, r4, #8
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 80100c4:	4620      	mov	r0, r4
 80100c6:	f001 fe9f 	bl	8011e08 <memset>
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 80100ca:	4628      	mov	r0, r5
 80100cc:	f7fa fc66 	bl	800a99c <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 80100d0:	2100      	movs	r1, #0
 80100d2:	4628      	mov	r0, r5
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 80100d4:	f104 0578 	add.w	r5, r4, #120	; 0x78
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 80100d8:	f7fa fc6e 	bl	800a9b8 <mbedtls_sha256_starts_ret>
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 80100dc:	4628      	mov	r0, r5
 80100de:	f7fb f907 	bl	800b2f0 <mbedtls_sha512_init>
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
 80100e2:	2101      	movs	r1, #1
 80100e4:	4628      	mov	r0, r5
 80100e6:	f7fb f913 	bl	800b310 <mbedtls_sha512_starts_ret>
    set->rsa   = md_alg;
 80100ea:	2000      	movs	r0, #0
    handshake->update_checksum = ssl_update_checksum_start;
 80100ec:	4b05      	ldr	r3, [pc, #20]	; (8010104 <ssl_handshake_init+0x104>)
    set->rsa   = md_alg;
 80100ee:	7020      	strb	r0, [r4, #0]
    handshake->update_checksum = ssl_update_checksum_start;
 80100f0:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    set->ecdsa = md_alg;
 80100f4:	7060      	strb	r0, [r4, #1]
 80100f6:	e7c5      	b.n	8010084 <ssl_handshake_init+0x84>
 80100f8:	08018805 	.word	0x08018805
 80100fc:	08018828 	.word	0x08018828
 8010100:	ffff8100 	.word	0xffff8100
 8010104:	0800d8a5 	.word	0x0800d8a5

08010108 <mbedtls_ssl_setup>:
    ssl->out_buf = NULL;
 8010108:	2300      	movs	r3, #0
{
 801010a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ssl->conf = conf;
 801010c:	6001      	str	r1, [r0, #0]
{
 801010e:	4604      	mov	r4, r0
    ssl->out_buf = NULL;
 8010110:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    ssl->in_buf = mbedtls_calloc( 1, MBEDTLS_SSL_IN_BUFFER_LEN );
 8010114:	f241 114d 	movw	r1, #4429	; 0x114d
 8010118:	2001      	movs	r0, #1
 801011a:	f001 fdff 	bl	8011d1c <calloc>
 801011e:	6520      	str	r0, [r4, #80]	; 0x50
    if( ssl->in_buf == NULL )
 8010120:	bb40      	cbnz	r0, 8010174 <mbedtls_ssl_setup+0x6c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", MBEDTLS_SSL_IN_BUFFER_LEN) );
 8010122:	f241 134d 	movw	r3, #4429	; 0x114d
 8010126:	9301      	str	r3, [sp, #4]
 8010128:	4b20      	ldr	r3, [pc, #128]	; (80101ac <mbedtls_ssl_setup+0xa4>)
 801012a:	9300      	str	r3, [sp, #0]
 801012c:	f641 23e5 	movw	r3, #6885	; 0x1ae5
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", MBEDTLS_SSL_OUT_BUFFER_LEN) );
 8010130:	4a1f      	ldr	r2, [pc, #124]	; (80101b0 <mbedtls_ssl_setup+0xa8>)
 8010132:	2101      	movs	r1, #1
 8010134:	4620      	mov	r0, r4
 8010136:	f7f6 f86b 	bl	8006210 <mbedtls_debug_print_msg>
        ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
 801013a:	4d1e      	ldr	r5, [pc, #120]	; (80101b4 <mbedtls_ssl_setup+0xac>)
    mbedtls_free( ssl->in_buf );
 801013c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801013e:	f001 fe27 	bl	8011d90 <free>
    mbedtls_free( ssl->out_buf );
 8010142:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8010146:	f001 fe23 	bl	8011d90 <free>
    ssl->conf = NULL;
 801014a:	2300      	movs	r3, #0
 801014c:	6023      	str	r3, [r4, #0]
    ssl->in_buf = NULL;
 801014e:	6523      	str	r3, [r4, #80]	; 0x50
    ssl->out_buf = NULL;
 8010150:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    ssl->in_hdr = NULL;
 8010154:	65a3      	str	r3, [r4, #88]	; 0x58
    ssl->in_ctr = NULL;
 8010156:	6563      	str	r3, [r4, #84]	; 0x54
    ssl->in_len = NULL;
 8010158:	65e3      	str	r3, [r4, #92]	; 0x5c
    ssl->in_iv = NULL;
 801015a:	6623      	str	r3, [r4, #96]	; 0x60
    ssl->in_msg = NULL;
 801015c:	6663      	str	r3, [r4, #100]	; 0x64
    ssl->out_hdr = NULL;
 801015e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    ssl->out_ctr = NULL;
 8010162:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    ssl->out_len = NULL;
 8010166:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    ssl->out_iv = NULL;
 801016a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    ssl->out_msg = NULL;
 801016e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    return( ret );
 8010172:	e018      	b.n	80101a6 <mbedtls_ssl_setup+0x9e>
    ssl->out_buf = mbedtls_calloc( 1, MBEDTLS_SSL_OUT_BUFFER_LEN );
 8010174:	f241 114d 	movw	r1, #4429	; 0x114d
 8010178:	2001      	movs	r0, #1
 801017a:	f001 fdcf 	bl	8011d1c <calloc>
 801017e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if( ssl->out_buf == NULL )
 8010182:	b938      	cbnz	r0, 8010194 <mbedtls_ssl_setup+0x8c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", MBEDTLS_SSL_OUT_BUFFER_LEN) );
 8010184:	f241 134d 	movw	r3, #4429	; 0x114d
 8010188:	9301      	str	r3, [sp, #4]
 801018a:	4b08      	ldr	r3, [pc, #32]	; (80101ac <mbedtls_ssl_setup+0xa4>)
 801018c:	9300      	str	r3, [sp, #0]
 801018e:	f641 23ed 	movw	r3, #6893	; 0x1aed
 8010192:	e7cd      	b.n	8010130 <mbedtls_ssl_setup+0x28>
    ssl_reset_in_out_pointers( ssl );
 8010194:	4620      	mov	r0, r4
 8010196:	f7fd fb95 	bl	800d8c4 <ssl_reset_in_out_pointers>
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 801019a:	4620      	mov	r0, r4
 801019c:	f7ff ff30 	bl	8010000 <ssl_handshake_init>
 80101a0:	4605      	mov	r5, r0
 80101a2:	2800      	cmp	r0, #0
 80101a4:	d1ca      	bne.n	801013c <mbedtls_ssl_setup+0x34>
}
 80101a6:	4628      	mov	r0, r5
 80101a8:	b003      	add	sp, #12
 80101aa:	bd30      	pop	{r4, r5, pc}
 80101ac:	08017d36 	.word	0x08017d36
 80101b0:	08018828 	.word	0x08018828
 80101b4:	ffff8100 	.word	0xffff8100

080101b8 <mbedtls_ssl_free>:
{
 80101b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL )
 80101ba:	4604      	mov	r4, r0
 80101bc:	2800      	cmp	r0, #0
 80101be:	d05b      	beq.n	8010278 <mbedtls_ssl_free+0xc0>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );
 80101c0:	4b2e      	ldr	r3, [pc, #184]	; (801027c <mbedtls_ssl_free+0xc4>)
 80101c2:	4a2f      	ldr	r2, [pc, #188]	; (8010280 <mbedtls_ssl_free+0xc8>)
 80101c4:	9300      	str	r3, [sp, #0]
 80101c6:	2102      	movs	r1, #2
 80101c8:	f242 23e6 	movw	r3, #8934	; 0x22e6
 80101cc:	f7f6 f820 	bl	8006210 <mbedtls_debug_print_msg>
    if( ssl->out_buf != NULL )
 80101d0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80101d4:	b138      	cbz	r0, 80101e6 <mbedtls_ssl_free+0x2e>
        mbedtls_platform_zeroize( ssl->out_buf, MBEDTLS_SSL_OUT_BUFFER_LEN );
 80101d6:	f241 114d 	movw	r1, #4429	; 0x114d
 80101da:	f7f8 f9a1 	bl	8008520 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->out_buf );
 80101de:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80101e2:	f001 fdd5 	bl	8011d90 <free>
    if( ssl->in_buf != NULL )
 80101e6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80101e8:	b130      	cbz	r0, 80101f8 <mbedtls_ssl_free+0x40>
        mbedtls_platform_zeroize( ssl->in_buf, MBEDTLS_SSL_IN_BUFFER_LEN );
 80101ea:	f241 114d 	movw	r1, #4429	; 0x114d
 80101ee:	f7f8 f997 	bl	8008520 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->in_buf );
 80101f2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80101f4:	f001 fdcc 	bl	8011d90 <free>
    if( ssl->transform )
 80101f8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80101fa:	b120      	cbz	r0, 8010206 <mbedtls_ssl_free+0x4e>
        mbedtls_ssl_transform_free( ssl->transform );
 80101fc:	f7ff fe58 	bl	800feb0 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 8010200:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8010202:	f001 fdc5 	bl	8011d90 <free>
    if( ssl->handshake )
 8010206:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010208:	b18b      	cbz	r3, 801022e <mbedtls_ssl_free+0x76>
        mbedtls_ssl_handshake_free( ssl );
 801020a:	4620      	mov	r0, r4
 801020c:	f7ff fe69 	bl	800fee2 <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 8010210:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8010212:	f7ff fe4d 	bl	800feb0 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 8010216:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010218:	f7ff fe76 	bl	800ff08 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->handshake );
 801021c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801021e:	f001 fdb7 	bl	8011d90 <free>
        mbedtls_free( ssl->transform_negotiate );
 8010222:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8010224:	f001 fdb4 	bl	8011d90 <free>
        mbedtls_free( ssl->session_negotiate );
 8010228:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801022a:	f001 fdb1 	bl	8011d90 <free>
    if( ssl->session )
 801022e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010230:	b120      	cbz	r0, 801023c <mbedtls_ssl_free+0x84>
        mbedtls_ssl_session_free( ssl->session );
 8010232:	f7ff fe69 	bl	800ff08 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 8010236:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010238:	f001 fdaa 	bl	8011d90 <free>
    if( ssl->hostname != NULL )
 801023c:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8010240:	b155      	cbz	r5, 8010258 <mbedtls_ssl_free+0xa0>
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 8010242:	4628      	mov	r0, r5
 8010244:	f7ef fff0 	bl	8000228 <strlen>
 8010248:	4601      	mov	r1, r0
 801024a:	4628      	mov	r0, r5
 801024c:	f7f8 f968 	bl	8008520 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
 8010250:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8010254:	f001 fd9c 	bl	8011d90 <free>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );
 8010258:	4b0a      	ldr	r3, [pc, #40]	; (8010284 <mbedtls_ssl_free+0xcc>)
 801025a:	4620      	mov	r0, r4
 801025c:	9300      	str	r3, [sp, #0]
 801025e:	4a08      	ldr	r2, [pc, #32]	; (8010280 <mbedtls_ssl_free+0xc8>)
 8010260:	f242 3327 	movw	r3, #8999	; 0x2327
 8010264:	2102      	movs	r1, #2
 8010266:	f7f5 ffd3 	bl	8006210 <mbedtls_debug_print_msg>
    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 801026a:	21bc      	movs	r1, #188	; 0xbc
 801026c:	4620      	mov	r0, r4
}
 801026e:	b003      	add	sp, #12
 8010270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 8010274:	f7f8 b954 	b.w	8008520 <mbedtls_platform_zeroize>
}
 8010278:	b003      	add	sp, #12
 801027a:	bd30      	pop	{r4, r5, pc}
 801027c:	08017b60 	.word	0x08017b60
 8010280:	08018828 	.word	0x08018828
 8010284:	08017b68 	.word	0x08017b68

08010288 <mbedtls_ssl_config_init>:
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 8010288:	2254      	movs	r2, #84	; 0x54
 801028a:	2100      	movs	r1, #0
 801028c:	f001 bdbc 	b.w	8011e08 <memset>

08010290 <mbedtls_ssl_config_defaults>:
{
 8010290:	b510      	push	{r4, lr}
 8010292:	4604      	mov	r4, r0
    conf->endpoint   = endpoint;
 8010294:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8010298:	f361 0000 	bfi	r0, r1, #0, #1
    conf->transport = transport;
 801029c:	f362 0041 	bfi	r0, r2, #1, #1
 80102a0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 80102a4:	b929      	cbnz	r1, 80102b2 <mbedtls_ssl_config_defaults+0x22>
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 80102a6:	2102      	movs	r1, #2
 80102a8:	b2c2      	uxtb	r2, r0
 80102aa:	f361 0283 	bfi	r2, r1, #2, #2
 80102ae:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    switch( preset )
 80102b2:	2b02      	cmp	r3, #2
 80102b4:	f04f 0303 	mov.w	r3, #3
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
 80102b8:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
 80102bc:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 80102c0:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 80102c4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    switch( preset )
 80102c8:	d10a      	bne.n	80102e0 <mbedtls_ssl_config_defaults+0x50>
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 80102ca:	4b0a      	ldr	r3, [pc, #40]	; (80102f4 <mbedtls_ssl_config_defaults+0x64>)
 80102cc:	60e3      	str	r3, [r4, #12]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 80102ce:	60a3      	str	r3, [r4, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
 80102d0:	6063      	str	r3, [r4, #4]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 80102d2:	6023      	str	r3, [r4, #0]
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 80102d4:	4b08      	ldr	r3, [pc, #32]	; (80102f8 <mbedtls_ssl_config_defaults+0x68>)
 80102d6:	6363      	str	r3, [r4, #52]	; 0x34
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 80102d8:	4b08      	ldr	r3, [pc, #32]	; (80102fc <mbedtls_ssl_config_defaults+0x6c>)
            conf->sig_hashes = ssl_preset_default_hashes;
 80102da:	6463      	str	r3, [r4, #68]	; 0x44
}
 80102dc:	2000      	movs	r0, #0
 80102de:	bd10      	pop	{r4, pc}
                                   mbedtls_ssl_list_ciphersuites();
 80102e0:	f7fc f898 	bl	800c414 <mbedtls_ssl_list_ciphersuites>
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 80102e4:	4b06      	ldr	r3, [pc, #24]	; (8010300 <mbedtls_ssl_config_defaults+0x70>)
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 80102e6:	60e0      	str	r0, [r4, #12]
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 80102e8:	6363      	str	r3, [r4, #52]	; 0x34
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 80102ea:	60a0      	str	r0, [r4, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
 80102ec:	6060      	str	r0, [r4, #4]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 80102ee:	6020      	str	r0, [r4, #0]
            conf->sig_hashes = ssl_preset_default_hashes;
 80102f0:	4b04      	ldr	r3, [pc, #16]	; (8010304 <mbedtls_ssl_config_defaults+0x74>)
 80102f2:	e7f2      	b.n	80102da <mbedtls_ssl_config_defaults+0x4a>
 80102f4:	200000cc 	.word	0x200000cc
 80102f8:	08018b94 	.word	0x08018b94
 80102fc:	200000d8 	.word	0x200000d8
 8010300:	08018b84 	.word	0x08018b84
 8010304:	200000b8 	.word	0x200000b8

08010308 <mbedtls_ssl_config_free>:
{
 8010308:	b538      	push	{r3, r4, r5, lr}
 801030a:	4604      	mov	r4, r0
    ssl_key_cert_free( conf->key_cert );
 801030c:	6b80      	ldr	r0, [r0, #56]	; 0x38
    while( cur != NULL )
 801030e:	b928      	cbnz	r0, 801031c <mbedtls_ssl_config_free+0x14>
    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 8010310:	4620      	mov	r0, r4
}
 8010312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 8010316:	2154      	movs	r1, #84	; 0x54
 8010318:	f7f8 b902 	b.w	8008520 <mbedtls_platform_zeroize>
        next = cur->next;
 801031c:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
 801031e:	f001 fd37 	bl	8011d90 <free>
        cur = next;
 8010322:	4628      	mov	r0, r5
 8010324:	e7f3      	b.n	801030e <mbedtls_ssl_config_free+0x6>

08010326 <mbedtls_ssl_sig_from_pk>:
{
 8010326:	b508      	push	{r3, lr}
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 8010328:	2101      	movs	r1, #1
 801032a:	f7f7 fe6f 	bl	800800c <mbedtls_pk_can_do>
}
 801032e:	3000      	adds	r0, #0
 8010330:	bf18      	it	ne
 8010332:	2001      	movne	r0, #1
 8010334:	bd08      	pop	{r3, pc}
	...

08010338 <mbedtls_ssl_hash_from_md_alg>:
{
 8010338:	3804      	subs	r0, #4
 801033a:	2804      	cmp	r0, #4
 801033c:	bf9a      	itte	ls
 801033e:	4b02      	ldrls	r3, [pc, #8]	; (8010348 <mbedtls_ssl_hash_from_md_alg+0x10>)
 8010340:	5c18      	ldrbls	r0, [r3, r0]
    switch( md )
 8010342:	2000      	movhi	r0, #0
}
 8010344:	4770      	bx	lr
 8010346:	bf00      	nop
 8010348:	0801785f 	.word	0x0801785f

0801034c <mbedtls_ssl_write_version>:
        ver[0] = (unsigned char) major;
 801034c:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 801034e:	7059      	strb	r1, [r3, #1]
 8010350:	4770      	bx	lr

08010352 <mbedtls_ssl_read_version>:
        *major = ver[0];
 8010352:	781a      	ldrb	r2, [r3, #0]
 8010354:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 8010356:	785b      	ldrb	r3, [r3, #1]
 8010358:	600b      	str	r3, [r1, #0]
 801035a:	4770      	bx	lr

0801035c <x509_parse_int>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
 801035c:	2300      	movs	r3, #0
{
 801035e:	b570      	push	{r4, r5, r6, lr}
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 8010360:	260a      	movs	r6, #10
    *res = 0;
 8010362:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
 8010364:	b909      	cbnz	r1, 801036a <x509_parse_int+0xe>
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
 8010366:	4608      	mov	r0, r1
 8010368:	bd70      	pop	{r4, r5, r6, pc}
        if( ( **p < '0') || ( **p > '9' ) )
 801036a:	6805      	ldr	r5, [r0, #0]
 801036c:	782b      	ldrb	r3, [r5, #0]
 801036e:	3b30      	subs	r3, #48	; 0x30
 8010370:	2b09      	cmp	r3, #9
 8010372:	d80b      	bhi.n	801038c <x509_parse_int+0x30>
        *res *= 10;
 8010374:	6813      	ldr	r3, [r2, #0]
    for( ; n > 0; --n )
 8010376:	3901      	subs	r1, #1
        *res *= 10;
 8010378:	fb06 f403 	mul.w	r4, r6, r3
        *res += ( *(*p)++ - '0' );
 801037c:	1c6b      	adds	r3, r5, #1
        *res *= 10;
 801037e:	6014      	str	r4, [r2, #0]
        *res += ( *(*p)++ - '0' );
 8010380:	6003      	str	r3, [r0, #0]
 8010382:	782b      	ldrb	r3, [r5, #0]
 8010384:	3b30      	subs	r3, #48	; 0x30
 8010386:	4423      	add	r3, r4
 8010388:	6013      	str	r3, [r2, #0]
 801038a:	e7eb      	b.n	8010364 <x509_parse_int+0x8>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 801038c:	4800      	ldr	r0, [pc, #0]	; (8010390 <x509_parse_int+0x34>)
}
 801038e:	bd70      	pop	{r4, r5, r6, pc}
 8010390:	ffffdc00 	.word	0xffffdc00

08010394 <mbedtls_x509_get_serial>:
{
 8010394:	b538      	push	{r3, r4, r5, lr}
    if( ( end - *p ) < 1 )
 8010396:	6803      	ldr	r3, [r0, #0]
{
 8010398:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 801039a:	1aca      	subs	r2, r1, r3
 801039c:	2a00      	cmp	r2, #0
{
 801039e:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 80103a0:	dd17      	ble.n	80103d2 <mbedtls_x509_get_serial+0x3e>
    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 80103a2:	781a      	ldrb	r2, [r3, #0]
 80103a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80103a8:	2a02      	cmp	r2, #2
 80103aa:	d114      	bne.n	80103d6 <mbedtls_x509_get_serial+0x42>
    serial->tag = *(*p)++;
 80103ac:	1c5a      	adds	r2, r3, #1
 80103ae:	6002      	str	r2, [r0, #0]
 80103b0:	462a      	mov	r2, r5
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 80103b8:	f7f3 fd8f 	bl	8003eda <mbedtls_asn1_get_len>
 80103bc:	b110      	cbz	r0, 80103c4 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 80103be:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
 80103c2:	bd38      	pop	{r3, r4, r5, pc}
    serial->p = *p;
 80103c4:	6823      	ldr	r3, [r4, #0]
    *p += serial->len;
 80103c6:	686a      	ldr	r2, [r5, #4]
    serial->p = *p;
 80103c8:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 80103ca:	6823      	ldr	r3, [r4, #0]
 80103cc:	4413      	add	r3, r2
 80103ce:	6023      	str	r3, [r4, #0]
    return( 0 );
 80103d0:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 80103d2:	4802      	ldr	r0, [pc, #8]	; (80103dc <mbedtls_x509_get_serial+0x48>)
 80103d4:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 80103d6:	4802      	ldr	r0, [pc, #8]	; (80103e0 <mbedtls_x509_get_serial+0x4c>)
}
 80103d8:	bd38      	pop	{r3, r4, r5, pc}
 80103da:	bf00      	nop
 80103dc:	ffffdd20 	.word	0xffffdd20
 80103e0:	ffffdd1e 	.word	0xffffdd1e

080103e4 <mbedtls_x509_get_alg>:
{
 80103e4:	b508      	push	{r3, lr}
    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 80103e6:	f7f3 fe8c 	bl	8004102 <mbedtls_asn1_get_alg>
 80103ea:	b108      	cbz	r0, 80103f0 <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 80103ec:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
}
 80103f0:	bd08      	pop	{r3, pc}
	...

080103f4 <mbedtls_x509_get_name>:
{
 80103f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80103f8:	4605      	mov	r5, r0
 80103fa:	460f      	mov	r7, r1
 80103fc:	4614      	mov	r4, r2
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 80103fe:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80104e8 <mbedtls_x509_get_name+0xf4>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 8010402:	2331      	movs	r3, #49	; 0x31
 8010404:	466a      	mov	r2, sp
 8010406:	4639      	mov	r1, r7
 8010408:	4628      	mov	r0, r5
 801040a:	f7f3 fdb5 	bl	8003f78 <mbedtls_asn1_get_tag>
 801040e:	b120      	cbz	r0, 801041a <mbedtls_x509_get_name+0x26>
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8010410:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
}
 8010414:	b002      	add	sp, #8
 8010416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        end_set  = *p + set_len;
 801041a:	682e      	ldr	r6, [r5, #0]
 801041c:	9b00      	ldr	r3, [sp, #0]
 801041e:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8010420:	2330      	movs	r3, #48	; 0x30
 8010422:	aa01      	add	r2, sp, #4
 8010424:	4631      	mov	r1, r6
 8010426:	4628      	mov	r0, r5
 8010428:	f7f3 fda6 	bl	8003f78 <mbedtls_asn1_get_tag>
 801042c:	b188      	cbz	r0, 8010452 <mbedtls_x509_get_name+0x5e>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 801042e:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 8010432:	2800      	cmp	r0, #0
 8010434:	d1ee      	bne.n	8010414 <mbedtls_x509_get_name+0x20>
            if( *p == end_set )
 8010436:	682b      	ldr	r3, [r5, #0]
 8010438:	429e      	cmp	r6, r3
 801043a:	d03d      	beq.n	80104b8 <mbedtls_x509_get_name+0xc4>
            cur->next_merged = 1;
 801043c:	2001      	movs	r0, #1
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 801043e:	2120      	movs	r1, #32
            cur->next_merged = 1;
 8010440:	7720      	strb	r0, [r4, #28]
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 8010442:	f001 fc6b 	bl	8011d1c <calloc>
 8010446:	61a0      	str	r0, [r4, #24]
            if( cur->next == NULL )
 8010448:	4604      	mov	r4, r0
 801044a:	2800      	cmp	r0, #0
 801044c:	d1e8      	bne.n	8010420 <mbedtls_x509_get_name+0x2c>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801044e:	4823      	ldr	r0, [pc, #140]	; (80104dc <mbedtls_x509_get_name+0xe8>)
 8010450:	e7e0      	b.n	8010414 <mbedtls_x509_get_name+0x20>
    if( ( end - *p ) < 1 )
 8010452:	682b      	ldr	r3, [r5, #0]
 8010454:	1af2      	subs	r2, r6, r3
 8010456:	2a00      	cmp	r2, #0
 8010458:	dd3b      	ble.n	80104d2 <mbedtls_x509_get_name+0xde>
    oid->tag = **p;
 801045a:	4622      	mov	r2, r4
 801045c:	781b      	ldrb	r3, [r3, #0]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 801045e:	4631      	mov	r1, r6
    oid->tag = **p;
 8010460:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8010464:	4628      	mov	r0, r5
 8010466:	2306      	movs	r3, #6
 8010468:	f7f3 fd86 	bl	8003f78 <mbedtls_asn1_get_tag>
 801046c:	2800      	cmp	r0, #0
 801046e:	d1de      	bne.n	801042e <mbedtls_x509_get_name+0x3a>
    oid->p = *p;
 8010470:	682b      	ldr	r3, [r5, #0]
    *p += oid->len;
 8010472:	6861      	ldr	r1, [r4, #4]
    oid->p = *p;
 8010474:	60a3      	str	r3, [r4, #8]
    *p += oid->len;
 8010476:	6828      	ldr	r0, [r5, #0]
 8010478:	1843      	adds	r3, r0, r1
    if( ( end - *p ) < 1 )
 801047a:	1af2      	subs	r2, r6, r3
 801047c:	2a00      	cmp	r2, #0
    *p += oid->len;
 801047e:	602b      	str	r3, [r5, #0]
    if( ( end - *p ) < 1 )
 8010480:	dd27      	ble.n	80104d2 <mbedtls_x509_get_name+0xde>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 8010482:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8010484:	2a1e      	cmp	r2, #30
 8010486:	d826      	bhi.n	80104d6 <mbedtls_x509_get_name+0xe2>
 8010488:	fa28 f202 	lsr.w	r2, r8, r2
 801048c:	07d2      	lsls	r2, r2, #31
 801048e:	d522      	bpl.n	80104d6 <mbedtls_x509_get_name+0xe2>
    val->tag = *(*p)++;
 8010490:	3301      	adds	r3, #1
 8010492:	602b      	str	r3, [r5, #0]
 8010494:	5c43      	ldrb	r3, [r0, r1]
    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 8010496:	f104 0210 	add.w	r2, r4, #16
    val->tag = *(*p)++;
 801049a:	60e3      	str	r3, [r4, #12]
    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 801049c:	4631      	mov	r1, r6
 801049e:	4628      	mov	r0, r5
 80104a0:	f7f3 fd1b 	bl	8003eda <mbedtls_asn1_get_len>
 80104a4:	2800      	cmp	r0, #0
 80104a6:	d1c2      	bne.n	801042e <mbedtls_x509_get_name+0x3a>
    val->p = *p;
 80104a8:	682b      	ldr	r3, [r5, #0]
    *p += val->len;
 80104aa:	6922      	ldr	r2, [r4, #16]
    val->p = *p;
 80104ac:	6163      	str	r3, [r4, #20]
    *p += val->len;
 80104ae:	682b      	ldr	r3, [r5, #0]
 80104b0:	4413      	add	r3, r2
 80104b2:	602b      	str	r3, [r5, #0]
    cur->next = NULL;
 80104b4:	61a0      	str	r0, [r4, #24]
 80104b6:	e7be      	b.n	8010436 <mbedtls_x509_get_name+0x42>
        if( *p == end )
 80104b8:	42b7      	cmp	r7, r6
 80104ba:	d008      	beq.n	80104ce <mbedtls_x509_get_name+0xda>
        cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 80104bc:	2120      	movs	r1, #32
 80104be:	2001      	movs	r0, #1
 80104c0:	f001 fc2c 	bl	8011d1c <calloc>
 80104c4:	61a0      	str	r0, [r4, #24]
        if( cur->next == NULL )
 80104c6:	4604      	mov	r4, r0
 80104c8:	2800      	cmp	r0, #0
 80104ca:	d19a      	bne.n	8010402 <mbedtls_x509_get_name+0xe>
 80104cc:	e7bf      	b.n	801044e <mbedtls_x509_get_name+0x5a>
            return( 0 );
 80104ce:	2000      	movs	r0, #0
 80104d0:	e7a0      	b.n	8010414 <mbedtls_x509_get_name+0x20>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 80104d2:	4803      	ldr	r0, [pc, #12]	; (80104e0 <mbedtls_x509_get_name+0xec>)
 80104d4:	e79e      	b.n	8010414 <mbedtls_x509_get_name+0x20>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 80104d6:	4803      	ldr	r0, [pc, #12]	; (80104e4 <mbedtls_x509_get_name+0xf0>)
 80104d8:	e79c      	b.n	8010414 <mbedtls_x509_get_name+0x20>
 80104da:	bf00      	nop
 80104dc:	ffffd780 	.word	0xffffd780
 80104e0:	ffffdc20 	.word	0xffffdc20
 80104e4:	ffffdc1e 	.word	0xffffdc1e
 80104e8:	50581008 	.word	0x50581008

080104ec <mbedtls_x509_get_time>:
{
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80104ec:	6803      	ldr	r3, [r0, #0]
{
 80104ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104f0:	4614      	mov	r4, r2
    if( ( end - *p ) < 1 )
 80104f2:	1aca      	subs	r2, r1, r3
 80104f4:	2a00      	cmp	r2, #0
{
 80104f6:	4605      	mov	r5, r0
    if( ( end - *p ) < 1 )
 80104f8:	f340 809f 	ble.w	801063a <mbedtls_x509_get_time+0x14e>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 80104fc:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 80104fe:	2a17      	cmp	r2, #23
 8010500:	d00e      	beq.n	8010520 <mbedtls_x509_get_time+0x34>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 8010502:	2a18      	cmp	r2, #24
 8010504:	f040 809b 	bne.w	801063e <mbedtls_x509_get_time+0x152>
        year_len = 4;
 8010508:	2704      	movs	r7, #4
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 801050a:	3301      	adds	r3, #1
 801050c:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 801050e:	aa01      	add	r2, sp, #4
 8010510:	4628      	mov	r0, r5
 8010512:	f7f3 fce2 	bl	8003eda <mbedtls_asn1_get_len>

    if( ret != 0 )
 8010516:	b128      	cbz	r0, 8010524 <mbedtls_x509_get_time+0x38>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 8010518:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400

    return x509_parse_time( p, len, year_len, tm );
}
 801051c:	b003      	add	sp, #12
 801051e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        year_len = 2;
 8010520:	2702      	movs	r7, #2
 8010522:	e7f2      	b.n	801050a <mbedtls_x509_get_time+0x1e>
    return x509_parse_time( p, len, year_len, tm );
 8010524:	9e01      	ldr	r6, [sp, #4]
    if ( len < yearlen + 8 )
 8010526:	f107 0308 	add.w	r3, r7, #8
 801052a:	429e      	cmp	r6, r3
 801052c:	d37d      	bcc.n	801062a <mbedtls_x509_get_time+0x13e>
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 801052e:	4622      	mov	r2, r4
 8010530:	4639      	mov	r1, r7
 8010532:	4628      	mov	r0, r5
 8010534:	f7ff ff12 	bl	801035c <x509_parse_int>
 8010538:	2800      	cmp	r0, #0
 801053a:	d1ef      	bne.n	801051c <mbedtls_x509_get_time+0x30>
    if ( 2 == yearlen )
 801053c:	2f02      	cmp	r7, #2
 801053e:	d108      	bne.n	8010552 <mbedtls_x509_get_time+0x66>
        if ( tm->year < 50 )
 8010540:	6823      	ldr	r3, [r4, #0]
 8010542:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 8010544:	bfdc      	itt	le
 8010546:	3364      	addle	r3, #100	; 0x64
 8010548:	6023      	strle	r3, [r4, #0]
        tm->year += 1900;
 801054a:	6823      	ldr	r3, [r4, #0]
 801054c:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8010550:	6023      	str	r3, [r4, #0]
    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 8010552:	1d22      	adds	r2, r4, #4
 8010554:	2102      	movs	r1, #2
 8010556:	4628      	mov	r0, r5
 8010558:	f7ff ff00 	bl	801035c <x509_parse_int>
 801055c:	2800      	cmp	r0, #0
 801055e:	d1dd      	bne.n	801051c <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 8010560:	f104 0208 	add.w	r2, r4, #8
 8010564:	2102      	movs	r1, #2
 8010566:	4628      	mov	r0, r5
 8010568:	f7ff fef8 	bl	801035c <x509_parse_int>
 801056c:	2800      	cmp	r0, #0
 801056e:	d1d5      	bne.n	801051c <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 8010570:	f104 020c 	add.w	r2, r4, #12
 8010574:	2102      	movs	r1, #2
 8010576:	4628      	mov	r0, r5
 8010578:	f7ff fef0 	bl	801035c <x509_parse_int>
 801057c:	2800      	cmp	r0, #0
 801057e:	d1cd      	bne.n	801051c <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 8010580:	f104 0210 	add.w	r2, r4, #16
 8010584:	2102      	movs	r1, #2
 8010586:	4628      	mov	r0, r5
 8010588:	f7ff fee8 	bl	801035c <x509_parse_int>
 801058c:	2800      	cmp	r0, #0
 801058e:	d1c5      	bne.n	801051c <mbedtls_x509_get_time+0x30>
    len -= yearlen + 8;
 8010590:	1bf6      	subs	r6, r6, r7
 8010592:	f1a6 0308 	sub.w	r3, r6, #8
    if ( len >= 2 )
 8010596:	2b01      	cmp	r3, #1
 8010598:	d947      	bls.n	801062a <mbedtls_x509_get_time+0x13e>
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 801059a:	f104 0214 	add.w	r2, r4, #20
 801059e:	2102      	movs	r1, #2
 80105a0:	4628      	mov	r0, r5
 80105a2:	f7ff fedb 	bl	801035c <x509_parse_int>
 80105a6:	2800      	cmp	r0, #0
 80105a8:	d1b8      	bne.n	801051c <mbedtls_x509_get_time+0x30>
        len -= 2;
 80105aa:	3e0a      	subs	r6, #10
    if ( 1 == len && 'Z' == **p )
 80105ac:	2e01      	cmp	r6, #1
 80105ae:	d13a      	bne.n	8010626 <mbedtls_x509_get_time+0x13a>
 80105b0:	682b      	ldr	r3, [r5, #0]
 80105b2:	781a      	ldrb	r2, [r3, #0]
 80105b4:	2a5a      	cmp	r2, #90	; 0x5a
 80105b6:	d138      	bne.n	801062a <mbedtls_x509_get_time+0x13e>
        (*p)++;
 80105b8:	3301      	adds	r3, #1
 80105ba:	602b      	str	r3, [r5, #0]
    CHECK_RANGE( 0, 9999, t->year );
 80105bc:	f242 720f 	movw	r2, #9999	; 0x270f
 80105c0:	6823      	ldr	r3, [r4, #0]
 80105c2:	4293      	cmp	r3, r2
 80105c4:	d831      	bhi.n	801062a <mbedtls_x509_get_time+0x13e>
    CHECK_RANGE( 0, 23,   t->hour );
 80105c6:	68e2      	ldr	r2, [r4, #12]
 80105c8:	2a17      	cmp	r2, #23
 80105ca:	d82e      	bhi.n	801062a <mbedtls_x509_get_time+0x13e>
    CHECK_RANGE( 0, 59,   t->min  );
 80105cc:	6922      	ldr	r2, [r4, #16]
 80105ce:	2a3b      	cmp	r2, #59	; 0x3b
 80105d0:	d82b      	bhi.n	801062a <mbedtls_x509_get_time+0x13e>
    CHECK_RANGE( 0, 59,   t->sec  );
 80105d2:	6962      	ldr	r2, [r4, #20]
 80105d4:	2a3b      	cmp	r2, #59	; 0x3b
 80105d6:	d828      	bhi.n	801062a <mbedtls_x509_get_time+0x13e>
 80105d8:	6861      	ldr	r1, [r4, #4]
 80105da:	290c      	cmp	r1, #12
 80105dc:	d825      	bhi.n	801062a <mbedtls_x509_get_time+0x13e>
 80105de:	2201      	movs	r2, #1
 80105e0:	408a      	lsls	r2, r1
 80105e2:	f241 51aa 	movw	r1, #5546	; 0x15aa
 80105e6:	420a      	tst	r2, r1
 80105e8:	d121      	bne.n	801062e <mbedtls_x509_get_time+0x142>
 80105ea:	f412 6f25 	tst.w	r2, #2640	; 0xa50
 80105ee:	d120      	bne.n	8010632 <mbedtls_x509_get_time+0x146>
 80105f0:	0751      	lsls	r1, r2, #29
 80105f2:	d51a      	bpl.n	801062a <mbedtls_x509_get_time+0x13e>
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 80105f4:	079a      	lsls	r2, r3, #30
 80105f6:	d105      	bne.n	8010604 <mbedtls_x509_get_time+0x118>
 80105f8:	2164      	movs	r1, #100	; 0x64
 80105fa:	fb93 f2f1 	sdiv	r2, r3, r1
 80105fe:	fb01 3212 	mls	r2, r1, r2, r3
 8010602:	b9c2      	cbnz	r2, 8010636 <mbedtls_x509_get_time+0x14a>
                !( t->year % 400 ) )
 8010604:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8010608:	fb93 f2f1 	sdiv	r2, r3, r1
 801060c:	fb01 3312 	mls	r3, r1, r2, r3
                month_len = 28;
 8010610:	2b00      	cmp	r3, #0
 8010612:	bf0c      	ite	eq
 8010614:	231d      	moveq	r3, #29
 8010616:	231c      	movne	r3, #28
    CHECK_RANGE( 1, month_len, t->day );
 8010618:	68a2      	ldr	r2, [r4, #8]
 801061a:	2a00      	cmp	r2, #0
 801061c:	dd05      	ble.n	801062a <mbedtls_x509_get_time+0x13e>
 801061e:	429a      	cmp	r2, r3
 8010620:	f77f af7c 	ble.w	801051c <mbedtls_x509_get_time+0x30>
 8010624:	e001      	b.n	801062a <mbedtls_x509_get_time+0x13e>
    if ( 0 != len )
 8010626:	2e00      	cmp	r6, #0
 8010628:	d0c8      	beq.n	80105bc <mbedtls_x509_get_time+0xd0>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801062a:	4806      	ldr	r0, [pc, #24]	; (8010644 <mbedtls_x509_get_time+0x158>)
 801062c:	e776      	b.n	801051c <mbedtls_x509_get_time+0x30>
            month_len = 31;
 801062e:	231f      	movs	r3, #31
 8010630:	e7f2      	b.n	8010618 <mbedtls_x509_get_time+0x12c>
            month_len = 30;
 8010632:	231e      	movs	r3, #30
 8010634:	e7f0      	b.n	8010618 <mbedtls_x509_get_time+0x12c>
                month_len = 29;
 8010636:	231d      	movs	r3, #29
 8010638:	e7ee      	b.n	8010618 <mbedtls_x509_get_time+0x12c>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801063a:	4803      	ldr	r0, [pc, #12]	; (8010648 <mbedtls_x509_get_time+0x15c>)
 801063c:	e76e      	b.n	801051c <mbedtls_x509_get_time+0x30>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801063e:	4803      	ldr	r0, [pc, #12]	; (801064c <mbedtls_x509_get_time+0x160>)
 8010640:	e76c      	b.n	801051c <mbedtls_x509_get_time+0x30>
 8010642:	bf00      	nop
 8010644:	ffffdc00 	.word	0xffffdc00
 8010648:	ffffdba0 	.word	0xffffdba0
 801064c:	ffffdb9e 	.word	0xffffdb9e

08010650 <mbedtls_x509_get_sig>:
{
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 8010650:	6803      	ldr	r3, [r0, #0]
{
 8010652:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010654:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 8010656:	1aca      	subs	r2, r1, r3
 8010658:	2a00      	cmp	r2, #0
{
 801065a:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 801065c:	dd11      	ble.n	8010682 <mbedtls_x509_get_sig+0x32>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 801065e:	aa01      	add	r2, sp, #4
    tag_type = **p;
 8010660:	781e      	ldrb	r6, [r3, #0]
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8010662:	f7f3 fcfc 	bl	800405e <mbedtls_asn1_get_bitstring_null>
 8010666:	b118      	cbz	r0, 8010670 <mbedtls_x509_get_sig+0x20>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 8010668:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
    sig->p = *p;

    *p += len;

    return( 0 );
}
 801066c:	b002      	add	sp, #8
 801066e:	bd70      	pop	{r4, r5, r6, pc}
    sig->p = *p;
 8010670:	6823      	ldr	r3, [r4, #0]
    sig->len = len;
 8010672:	9a01      	ldr	r2, [sp, #4]
    sig->p = *p;
 8010674:	60ab      	str	r3, [r5, #8]
    *p += len;
 8010676:	6823      	ldr	r3, [r4, #0]
    tag_type = **p;
 8010678:	602e      	str	r6, [r5, #0]
    *p += len;
 801067a:	4413      	add	r3, r2
    sig->len = len;
 801067c:	606a      	str	r2, [r5, #4]
    *p += len;
 801067e:	6023      	str	r3, [r4, #0]
    return( 0 );
 8010680:	e7f4      	b.n	801066c <mbedtls_x509_get_sig+0x1c>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
 8010682:	4801      	ldr	r0, [pc, #4]	; (8010688 <mbedtls_x509_get_sig+0x38>)
 8010684:	e7f2      	b.n	801066c <mbedtls_x509_get_sig+0x1c>
 8010686:	bf00      	nop
 8010688:	ffffdb20 	.word	0xffffdb20

0801068c <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 801068c:	b510      	push	{r4, lr}
 801068e:	460c      	mov	r4, r1
 8010690:	4611      	mov	r1, r2
    int ret;

    if( *sig_opts != NULL )
 8010692:	9a02      	ldr	r2, [sp, #8]
 8010694:	6812      	ldr	r2, [r2, #0]
 8010696:	b982      	cbnz	r2, 80106ba <mbedtls_x509_get_sig_alg+0x2e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 8010698:	461a      	mov	r2, r3
 801069a:	f7f7 fba9 	bl	8007df0 <mbedtls_oid_get_sig_alg>
 801069e:	b110      	cbz	r0, 80106a6 <mbedtls_x509_get_sig_alg+0x1a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 80106a0:	f5a0 5018 	sub.w	r0, r0, #9728	; 0x2600
 80106a4:	bd10      	pop	{r4, pc}
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 80106a6:	6823      	ldr	r3, [r4, #0]
 80106a8:	2b05      	cmp	r3, #5
 80106aa:	d000      	beq.n	80106ae <mbedtls_x509_get_sig_alg+0x22>
 80106ac:	b93b      	cbnz	r3, 80106be <mbedtls_x509_get_sig_alg+0x32>
 80106ae:	6862      	ldr	r2, [r4, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 80106b0:	4b04      	ldr	r3, [pc, #16]	; (80106c4 <mbedtls_x509_get_sig_alg+0x38>)
 80106b2:	2a00      	cmp	r2, #0
 80106b4:	bf18      	it	ne
 80106b6:	4618      	movne	r0, r3
 80106b8:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80106ba:	4803      	ldr	r0, [pc, #12]	; (80106c8 <mbedtls_x509_get_sig_alg+0x3c>)
 80106bc:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 80106be:	4801      	ldr	r0, [pc, #4]	; (80106c4 <mbedtls_x509_get_sig_alg+0x38>)
    }

    return( 0 );
}
 80106c0:	bd10      	pop	{r4, pc}
 80106c2:	bf00      	nop
 80106c4:	ffffdd00 	.word	0xffffdd00
 80106c8:	ffffd800 	.word	0xffffd800

080106cc <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 80106cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80106ce:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( *p == end )
 80106d0:	6802      	ldr	r2, [r0, #0]
{
 80106d2:	4604      	mov	r4, r0
    if( *p == end )
 80106d4:	428a      	cmp	r2, r1
 80106d6:	d01d      	beq.n	8010714 <mbedtls_x509_get_ext+0x48>
        return( 0 );

    ext->tag = **p;
 80106d8:	7815      	ldrb	r5, [r2, #0]
 80106da:	4632      	mov	r2, r6

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 80106dc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    ext->tag = **p;
 80106e0:	f842 5b04 	str.w	r5, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 80106e4:	f7f3 fc48 	bl	8003f78 <mbedtls_asn1_get_tag>
 80106e8:	b968      	cbnz	r0, 8010706 <mbedtls_x509_get_ext+0x3a>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 80106ea:	6823      	ldr	r3, [r4, #0]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80106ec:	aa01      	add	r2, sp, #4
    ext->p = *p;
 80106ee:	60b3      	str	r3, [r6, #8]
    end = *p + ext->len;
 80106f0:	6825      	ldr	r5, [r4, #0]
 80106f2:	6873      	ldr	r3, [r6, #4]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80106f4:	4620      	mov	r0, r4
    end = *p + ext->len;
 80106f6:	441d      	add	r5, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80106f8:	4629      	mov	r1, r5
 80106fa:	2330      	movs	r3, #48	; 0x30
 80106fc:	f7f3 fc3c 	bl	8003f78 <mbedtls_asn1_get_tag>
 8010700:	b118      	cbz	r0, 801070a <mbedtls_x509_get_ext+0x3e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8010702:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
    if( end != *p + len )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8010706:	b002      	add	sp, #8
 8010708:	bd70      	pop	{r4, r5, r6, pc}
    if( end != *p + len )
 801070a:	6823      	ldr	r3, [r4, #0]
 801070c:	9a01      	ldr	r2, [sp, #4]
 801070e:	4413      	add	r3, r2
 8010710:	429d      	cmp	r5, r3
 8010712:	d101      	bne.n	8010718 <mbedtls_x509_get_ext+0x4c>
    return( 0 );
 8010714:	2000      	movs	r0, #0
 8010716:	e7f6      	b.n	8010706 <mbedtls_x509_get_ext+0x3a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8010718:	4800      	ldr	r0, [pc, #0]	; (801071c <mbedtls_x509_get_ext+0x50>)
 801071a:	e7f4      	b.n	8010706 <mbedtls_x509_get_ext+0x3a>
 801071c:	ffffda9a 	.word	0xffffda9a

08010720 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 8010720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010724:	460f      	mov	r7, r1
 8010726:	4691      	mov	r9, r2
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 8010728:	f04f 0a00 	mov.w	sl, #0
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );

    name = dn;
 801072c:	464d      	mov	r5, r9
    p = buf;
    n = size;
 801072e:	463c      	mov	r4, r7
            if( i >= sizeof( s ) - 1 )
                break;

            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
 8010730:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
{
 8010734:	b0c3      	sub	sp, #268	; 0x10c
    memset( s, 0, sizeof( s ) );
 8010736:	f10d 0808 	add.w	r8, sp, #8
 801073a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801073e:	4651      	mov	r1, sl
{
 8010740:	4606      	mov	r6, r0
    memset( s, 0, sizeof( s ) );
 8010742:	4640      	mov	r0, r8
    const char *short_name = NULL;
 8010744:	f8cd a004 	str.w	sl, [sp, #4]
    memset( s, 0, sizeof( s ) );
 8010748:	f001 fb5e 	bl	8011e08 <memset>
    unsigned char c, merge = 0;
 801074c:	4652      	mov	r2, sl
            else s[i] = c;
        }
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
 801074e:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8010820 <mbedtls_x509_dn_gets+0x100>
    while( name != NULL )
 8010752:	b90d      	cbnz	r5, 8010758 <mbedtls_x509_dn_gets+0x38>

        merge = name->next_merged;
        name = name->next;
    }

    return( (int) ( size - n ) );
 8010754:	1b38      	subs	r0, r7, r4
 8010756:	e012      	b.n	801077e <mbedtls_x509_dn_gets+0x5e>
        if( !name->oid.p )
 8010758:	68ab      	ldr	r3, [r5, #8]
 801075a:	b90b      	cbnz	r3, 8010760 <mbedtls_x509_dn_gets+0x40>
        name = name->next;
 801075c:	69ad      	ldr	r5, [r5, #24]
 801075e:	e7f8      	b.n	8010752 <mbedtls_x509_dn_gets+0x32>
        if( name != dn )
 8010760:	454d      	cmp	r5, r9
 8010762:	d013      	beq.n	801078c <mbedtls_x509_dn_gets+0x6c>
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 8010764:	4b29      	ldr	r3, [pc, #164]	; (801080c <mbedtls_x509_dn_gets+0xec>)
 8010766:	492a      	ldr	r1, [pc, #168]	; (8010810 <mbedtls_x509_dn_gets+0xf0>)
 8010768:	4630      	mov	r0, r6
 801076a:	2a00      	cmp	r2, #0
 801076c:	bf14      	ite	ne
 801076e:	460a      	movne	r2, r1
 8010770:	461a      	moveq	r2, r3
 8010772:	4621      	mov	r1, r4
 8010774:	f001 fcf6 	bl	8012164 <sniprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8010778:	2800      	cmp	r0, #0
 801077a:	da03      	bge.n	8010784 <mbedtls_x509_dn_gets+0x64>
 801077c:	4825      	ldr	r0, [pc, #148]	; (8010814 <mbedtls_x509_dn_gets+0xf4>)
}
 801077e:	b043      	add	sp, #268	; 0x10c
 8010780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_X509_SAFE_SNPRINTF;
 8010784:	4284      	cmp	r4, r0
 8010786:	d9f9      	bls.n	801077c <mbedtls_x509_dn_gets+0x5c>
 8010788:	1a24      	subs	r4, r4, r0
 801078a:	4406      	add	r6, r0
        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 801078c:	a901      	add	r1, sp, #4
 801078e:	4628      	mov	r0, r5
 8010790:	f7f7 fad4 	bl	8007d3c <mbedtls_oid_get_attr_short_name>
        if( ret == 0 )
 8010794:	bb10      	cbnz	r0, 80107dc <mbedtls_x509_dn_gets+0xbc>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 8010796:	9b01      	ldr	r3, [sp, #4]
 8010798:	4a1f      	ldr	r2, [pc, #124]	; (8010818 <mbedtls_x509_dn_gets+0xf8>)
 801079a:	4621      	mov	r1, r4
 801079c:	4630      	mov	r0, r6
 801079e:	f001 fce1 	bl	8012164 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80107a2:	2800      	cmp	r0, #0
 80107a4:	dbea      	blt.n	801077c <mbedtls_x509_dn_gets+0x5c>
 80107a6:	4284      	cmp	r4, r0
 80107a8:	d9e8      	bls.n	801077c <mbedtls_x509_dn_gets+0x5c>
        for( i = 0; i < name->val.len; i++ )
 80107aa:	2300      	movs	r3, #0
        MBEDTLS_X509_SAFE_SNPRINTF;
 80107ac:	1a24      	subs	r4, r4, r0
 80107ae:	4406      	add	r6, r0
        for( i = 0; i < name->val.len; i++ )
 80107b0:	692a      	ldr	r2, [r5, #16]
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d201      	bcs.n	80107ba <mbedtls_x509_dn_gets+0x9a>
            if( i >= sizeof( s ) - 1 )
 80107b6:	2bff      	cmp	r3, #255	; 0xff
 80107b8:	d116      	bne.n	80107e8 <mbedtls_x509_dn_gets+0xc8>
        s[i] = '\0';
 80107ba:	2200      	movs	r2, #0
        ret = mbedtls_snprintf( p, n, "%s", s );
 80107bc:	4621      	mov	r1, r4
        s[i] = '\0';
 80107be:	f808 2003 	strb.w	r2, [r8, r3]
        ret = mbedtls_snprintf( p, n, "%s", s );
 80107c2:	4630      	mov	r0, r6
 80107c4:	4643      	mov	r3, r8
 80107c6:	4652      	mov	r2, sl
 80107c8:	f001 fccc 	bl	8012164 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80107cc:	2800      	cmp	r0, #0
 80107ce:	dbd5      	blt.n	801077c <mbedtls_x509_dn_gets+0x5c>
 80107d0:	4284      	cmp	r4, r0
 80107d2:	d9d3      	bls.n	801077c <mbedtls_x509_dn_gets+0x5c>
 80107d4:	1a24      	subs	r4, r4, r0
 80107d6:	4406      	add	r6, r0
        merge = name->next_merged;
 80107d8:	7f2a      	ldrb	r2, [r5, #28]
 80107da:	e7bf      	b.n	801075c <mbedtls_x509_dn_gets+0x3c>
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 80107dc:	4a0f      	ldr	r2, [pc, #60]	; (801081c <mbedtls_x509_dn_gets+0xfc>)
 80107de:	4621      	mov	r1, r4
 80107e0:	4630      	mov	r0, r6
 80107e2:	f001 fcbf 	bl	8012164 <sniprintf>
 80107e6:	e7dc      	b.n	80107a2 <mbedtls_x509_dn_gets+0x82>
            c = name->val.p[i];
 80107e8:	696a      	ldr	r2, [r5, #20]
 80107ea:	5cd2      	ldrb	r2, [r2, r3]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 80107ec:	2a1f      	cmp	r2, #31
 80107ee:	d906      	bls.n	80107fe <mbedtls_x509_dn_gets+0xde>
 80107f0:	2a7f      	cmp	r2, #127	; 0x7f
 80107f2:	d004      	beq.n	80107fe <mbedtls_x509_dn_gets+0xde>
 80107f4:	f102 017f 	add.w	r1, r2, #127	; 0x7f
 80107f8:	b2c9      	uxtb	r1, r1
 80107fa:	291e      	cmp	r1, #30
 80107fc:	d803      	bhi.n	8010806 <mbedtls_x509_dn_gets+0xe6>
                 s[i] = '?';
 80107fe:	f808 b003 	strb.w	fp, [r8, r3]
        for( i = 0; i < name->val.len; i++ )
 8010802:	3301      	adds	r3, #1
 8010804:	e7d4      	b.n	80107b0 <mbedtls_x509_dn_gets+0x90>
            else s[i] = c;
 8010806:	f808 2003 	strb.w	r2, [r8, r3]
 801080a:	e7fa      	b.n	8010802 <mbedtls_x509_dn_gets+0xe2>
 801080c:	08018876 	.word	0x08018876
 8010810:	08018872 	.word	0x08018872
 8010814:	ffffd680 	.word	0xffffd680
 8010818:	08018879 	.word	0x08018879
 801081c:	0801887d 	.word	0x0801887d
 8010820:	080177fb 	.word	0x080177fb

08010824 <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
 8010824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *p;

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
 8010828:	6856      	ldr	r6, [r2, #4]
{
 801082a:	4680      	mov	r8, r0
        ? serial->len  : 28;
 801082c:	2e20      	cmp	r6, #32
{
 801082e:	460f      	mov	r7, r1
 8010830:	4691      	mov	r9, r2
        ? serial->len  : 28;
 8010832:	bf88      	it	hi
 8010834:	261c      	movhi	r6, #28
    n = size;
 8010836:	460c      	mov	r4, r1

    for( i = 0; i < nr; i++ )
 8010838:	2500      	movs	r5, #0
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 801083a:	f8df a074 	ldr.w	sl, [pc, #116]	; 80108b0 <mbedtls_x509_serial_gets+0x8c>
 801083e:	f8df b074 	ldr.w	fp, [pc, #116]	; 80108b4 <mbedtls_x509_serial_gets+0x90>
    for( i = 0; i < nr; i++ )
 8010842:	42b5      	cmp	r5, r6
 8010844:	d10f      	bne.n	8010866 <mbedtls_x509_serial_gets+0x42>
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
        MBEDTLS_X509_SAFE_SNPRINTF;
    }

    if( nr != serial->len )
 8010846:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801084a:	429d      	cmp	r5, r3
 801084c:	d009      	beq.n	8010862 <mbedtls_x509_serial_gets+0x3e>
    {
        ret = mbedtls_snprintf( p, n, "...." );
 801084e:	4a15      	ldr	r2, [pc, #84]	; (80108a4 <mbedtls_x509_serial_gets+0x80>)
 8010850:	4621      	mov	r1, r4
 8010852:	4640      	mov	r0, r8
 8010854:	f001 fc86 	bl	8012164 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8010858:	2800      	cmp	r0, #0
 801085a:	db19      	blt.n	8010890 <mbedtls_x509_serial_gets+0x6c>
 801085c:	4284      	cmp	r4, r0
 801085e:	d917      	bls.n	8010890 <mbedtls_x509_serial_gets+0x6c>
 8010860:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
 8010862:	1b38      	subs	r0, r7, r4
 8010864:	e015      	b.n	8010892 <mbedtls_x509_serial_gets+0x6e>
 8010866:	f8d9 3008 	ldr.w	r3, [r9, #8]
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 801086a:	b91d      	cbnz	r5, 8010874 <mbedtls_x509_serial_gets+0x50>
 801086c:	2e01      	cmp	r6, #1
 801086e:	d001      	beq.n	8010874 <mbedtls_x509_serial_gets+0x50>
 8010870:	781a      	ldrb	r2, [r3, #0]
 8010872:	b1aa      	cbz	r2, 80108a0 <mbedtls_x509_serial_gets+0x7c>
        ret = mbedtls_snprintf( p, n, "%02X%s",
 8010874:	490c      	ldr	r1, [pc, #48]	; (80108a8 <mbedtls_x509_serial_gets+0x84>)
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 8010876:	1e72      	subs	r2, r6, #1
        ret = mbedtls_snprintf( p, n, "%02X%s",
 8010878:	4295      	cmp	r5, r2
 801087a:	bf28      	it	cs
 801087c:	4651      	movcs	r1, sl
 801087e:	5d5b      	ldrb	r3, [r3, r5]
 8010880:	465a      	mov	r2, fp
 8010882:	9100      	str	r1, [sp, #0]
 8010884:	4640      	mov	r0, r8
 8010886:	4621      	mov	r1, r4
 8010888:	f001 fc6c 	bl	8012164 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801088c:	2800      	cmp	r0, #0
 801088e:	da03      	bge.n	8010898 <mbedtls_x509_serial_gets+0x74>
 8010890:	4806      	ldr	r0, [pc, #24]	; (80108ac <mbedtls_x509_serial_gets+0x88>)
}
 8010892:	b003      	add	sp, #12
 8010894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_X509_SAFE_SNPRINTF;
 8010898:	4284      	cmp	r4, r0
 801089a:	d9f9      	bls.n	8010890 <mbedtls_x509_serial_gets+0x6c>
 801089c:	1a24      	subs	r4, r4, r0
 801089e:	4480      	add	r8, r0
    for( i = 0; i < nr; i++ )
 80108a0:	3501      	adds	r5, #1
 80108a2:	e7ce      	b.n	8010842 <mbedtls_x509_serial_gets+0x1e>
 80108a4:	08018896 	.word	0x08018896
 80108a8:	0801888d 	.word	0x0801888d
 80108ac:	ffffd680 	.word	0xffffd680
 80108b0:	0801643c 	.word	0x0801643c
 80108b4:	0801888f 	.word	0x0801888f

080108b8 <mbedtls_x509_sig_alg_gets>:
                       const void *sig_opts )
{
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 80108b8:	2300      	movs	r3, #0
{
 80108ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80108bc:	460c      	mov	r4, r1
    const char *desc = NULL;
 80108be:	a902      	add	r1, sp, #8
{
 80108c0:	4605      	mov	r5, r0
    const char *desc = NULL;
 80108c2:	f841 3d04 	str.w	r3, [r1, #-4]!

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 80108c6:	4610      	mov	r0, r2
 80108c8:	f7f7 fa86 	bl	8007dd8 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
 80108cc:	b160      	cbz	r0, 80108e8 <mbedtls_x509_sig_alg_gets+0x30>
        ret = mbedtls_snprintf( p, n, "???"  );
 80108ce:	4a0b      	ldr	r2, [pc, #44]	; (80108fc <mbedtls_x509_sig_alg_gets+0x44>)
 80108d0:	4621      	mov	r1, r4
 80108d2:	4628      	mov	r0, r5
 80108d4:	f001 fc46 	bl	8012164 <sniprintf>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80108d8:	2800      	cmp	r0, #0
 80108da:	db0c      	blt.n	80108f6 <mbedtls_x509_sig_alg_gets+0x3e>
 80108dc:	4b08      	ldr	r3, [pc, #32]	; (8010900 <mbedtls_x509_sig_alg_gets+0x48>)
 80108de:	4284      	cmp	r4, r0
 80108e0:	bf98      	it	ls
 80108e2:	4618      	movls	r0, r3
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
}
 80108e4:	b003      	add	sp, #12
 80108e6:	bd30      	pop	{r4, r5, pc}
        ret = mbedtls_snprintf( p, n, "%s", desc );
 80108e8:	9b01      	ldr	r3, [sp, #4]
 80108ea:	4a06      	ldr	r2, [pc, #24]	; (8010904 <mbedtls_x509_sig_alg_gets+0x4c>)
 80108ec:	4621      	mov	r1, r4
 80108ee:	4628      	mov	r0, r5
 80108f0:	f001 fc38 	bl	8012164 <sniprintf>
 80108f4:	e7f0      	b.n	80108d8 <mbedtls_x509_sig_alg_gets+0x20>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80108f6:	4802      	ldr	r0, [pc, #8]	; (8010900 <mbedtls_x509_sig_alg_gets+0x48>)
 80108f8:	e7f4      	b.n	80108e4 <mbedtls_x509_sig_alg_gets+0x2c>
 80108fa:	bf00      	nop
 80108fc:	0801889b 	.word	0x0801889b
 8010900:	ffffd680 	.word	0xffffd680
 8010904:	080177fb 	.word	0x080177fb

08010908 <mbedtls_x509_key_size_helper>:
{
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 8010908:	4613      	mov	r3, r2
{
 801090a:	b510      	push	{r4, lr}
    ret = mbedtls_snprintf( p, n, "%s key size", name );
 801090c:	4a05      	ldr	r2, [pc, #20]	; (8010924 <mbedtls_x509_key_size_helper+0x1c>)
{
 801090e:	460c      	mov	r4, r1
    ret = mbedtls_snprintf( p, n, "%s key size", name );
 8010910:	f001 fc28 	bl	8012164 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010914:	1e03      	subs	r3, r0, #0
 8010916:	4804      	ldr	r0, [pc, #16]	; (8010928 <mbedtls_x509_key_size_helper+0x20>)
 8010918:	db03      	blt.n	8010922 <mbedtls_x509_key_size_helper+0x1a>

    return( 0 );
 801091a:	429c      	cmp	r4, r3
 801091c:	bf88      	it	hi
 801091e:	2000      	movhi	r0, #0
 8010920:	bd10      	pop	{r4, pc}
}
 8010922:	bd10      	pop	{r4, pc}
 8010924:	08018881 	.word	0x08018881
 8010928:	ffffd680 	.word	0xffffd680

0801092c <mbedtls_x509_time_is_past>:
 801092c:	2000      	movs	r0, #0
 801092e:	4770      	bx	lr

08010930 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
    ((void) from);
    return( 0 );
}
 8010930:	2000      	movs	r0, #0
 8010932:	4770      	bx	lr

08010934 <x509_memcasecmp>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 8010934:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = s1, *n2 = s2;

    for( i = 0; i < len; i++ )
 8010936:	2400      	movs	r4, #0
 8010938:	4294      	cmp	r4, r2
 801093a:	d101      	bne.n	8010940 <x509_memcasecmp+0xc>
        }

        return( -1 );
    }

    return( 0 );
 801093c:	2000      	movs	r0, #0
 801093e:	bd30      	pop	{r4, r5, pc}
        diff = n1[i] ^ n2[i];
 8010940:	5d03      	ldrb	r3, [r0, r4]
 8010942:	5d0d      	ldrb	r5, [r1, r4]
        if( diff == 0 )
 8010944:	42ab      	cmp	r3, r5
 8010946:	d007      	beq.n	8010958 <x509_memcasecmp+0x24>
        if( diff == 32 &&
 8010948:	405d      	eors	r5, r3
 801094a:	2d20      	cmp	r5, #32
 801094c:	d106      	bne.n	801095c <x509_memcasecmp+0x28>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 801094e:	f023 0320 	bic.w	r3, r3, #32
 8010952:	3b41      	subs	r3, #65	; 0x41
 8010954:	2b19      	cmp	r3, #25
 8010956:	d801      	bhi.n	801095c <x509_memcasecmp+0x28>
    for( i = 0; i < len; i++ )
 8010958:	3401      	adds	r4, #1
 801095a:	e7ed      	b.n	8010938 <x509_memcasecmp+0x4>
        return( -1 );
 801095c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010960:	bd30      	pop	{r4, r5, pc}

08010962 <x509_name_cmp>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 8010962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010966:	4605      	mov	r5, r0
 8010968:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 801096a:	b92d      	cbnz	r5, 8010978 <x509_name_cmp+0x16>
 801096c:	1c20      	adds	r0, r4, #0
 801096e:	bf18      	it	ne
 8010970:	2001      	movne	r0, #1
 8010972:	4240      	negs	r0, r0
 8010974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
        if( a == NULL || b == NULL )
 8010978:	2c00      	cmp	r4, #0
 801097a:	d036      	beq.n	80109ea <x509_name_cmp+0x88>
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 801097c:	682a      	ldr	r2, [r5, #0]
 801097e:	6823      	ldr	r3, [r4, #0]
 8010980:	429a      	cmp	r2, r3
 8010982:	d132      	bne.n	80109ea <x509_name_cmp+0x88>
            a->oid.len != b->oid.len ||
 8010984:	686a      	ldr	r2, [r5, #4]
        if( a->oid.tag != b->oid.tag ||
 8010986:	6863      	ldr	r3, [r4, #4]
 8010988:	429a      	cmp	r2, r3
 801098a:	d12e      	bne.n	80109ea <x509_name_cmp+0x88>
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 801098c:	68a1      	ldr	r1, [r4, #8]
 801098e:	68a8      	ldr	r0, [r5, #8]
 8010990:	f001 fa06 	bl	8011da0 <memcmp>
            a->oid.len != b->oid.len ||
 8010994:	bb48      	cbnz	r0, 80109ea <x509_name_cmp+0x88>
    if( a->tag == b->tag &&
 8010996:	68ef      	ldr	r7, [r5, #12]
 8010998:	f8d4 800c 	ldr.w	r8, [r4, #12]
 801099c:	4547      	cmp	r7, r8
 801099e:	d110      	bne.n	80109c2 <x509_name_cmp+0x60>
        a->len == b->len &&
 80109a0:	692e      	ldr	r6, [r5, #16]
    if( a->tag == b->tag &&
 80109a2:	6923      	ldr	r3, [r4, #16]
 80109a4:	429e      	cmp	r6, r3
 80109a6:	d128      	bne.n	80109fa <x509_name_cmp+0x98>
        memcmp( a->p, b->p, b->len ) == 0 )
 80109a8:	4632      	mov	r2, r6
 80109aa:	6961      	ldr	r1, [r4, #20]
 80109ac:	6968      	ldr	r0, [r5, #20]
 80109ae:	f001 f9f7 	bl	8011da0 <memcmp>
        a->len == b->len &&
 80109b2:	b9f0      	cbnz	r0, 80109f2 <x509_name_cmp+0x90>
        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 80109b4:	7f2a      	ldrb	r2, [r5, #28]
 80109b6:	7f23      	ldrb	r3, [r4, #28]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d116      	bne.n	80109ea <x509_name_cmp+0x88>
            return( -1 );

        a = a->next;
 80109bc:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 80109be:	69a4      	ldr	r4, [r4, #24]
 80109c0:	e7d3      	b.n	801096a <x509_name_cmp+0x8>
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80109c2:	2f0c      	cmp	r7, #12
 80109c4:	d001      	beq.n	80109ca <x509_name_cmp+0x68>
 80109c6:	2f13      	cmp	r7, #19
 80109c8:	d10f      	bne.n	80109ea <x509_name_cmp+0x88>
 80109ca:	f1b8 0f0c 	cmp.w	r8, #12
 80109ce:	d002      	beq.n	80109d6 <x509_name_cmp+0x74>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80109d0:	f1b8 0f13 	cmp.w	r8, #19
 80109d4:	d109      	bne.n	80109ea <x509_name_cmp+0x88>
        a->len == b->len &&
 80109d6:	692a      	ldr	r2, [r5, #16]
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80109d8:	6923      	ldr	r3, [r4, #16]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d105      	bne.n	80109ea <x509_name_cmp+0x88>
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 80109de:	6961      	ldr	r1, [r4, #20]
 80109e0:	6968      	ldr	r0, [r5, #20]
 80109e2:	f7ff ffa7 	bl	8010934 <x509_memcasecmp>
        a->len == b->len &&
 80109e6:	2800      	cmp	r0, #0
 80109e8:	d0e4      	beq.n	80109b4 <x509_name_cmp+0x52>
            return( -1 );
 80109ea:	f04f 30ff 	mov.w	r0, #4294967295
 80109ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80109f2:	2f0c      	cmp	r7, #12
 80109f4:	d103      	bne.n	80109fe <x509_name_cmp+0x9c>
        a->len == b->len &&
 80109f6:	4632      	mov	r2, r6
 80109f8:	e7f1      	b.n	80109de <x509_name_cmp+0x7c>
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80109fa:	2f0c      	cmp	r7, #12
 80109fc:	d0f5      	beq.n	80109ea <x509_name_cmp+0x88>
 80109fe:	2f13      	cmp	r7, #19
 8010a00:	d0e6      	beq.n	80109d0 <x509_name_cmp+0x6e>
 8010a02:	e7f2      	b.n	80109ea <x509_name_cmp+0x88>

08010a04 <x509_crt_check_cn>:
/*
 * Check for CN match
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
 8010a04:	b570      	push	{r4, r5, r6, lr}
    /* try exact match */
    if( name->len == cn_len &&
 8010a06:	6845      	ldr	r5, [r0, #4]
{
 8010a08:	4606      	mov	r6, r0
    if( name->len == cn_len &&
 8010a0a:	4295      	cmp	r5, r2
{
 8010a0c:	460c      	mov	r4, r1
    if( name->len == cn_len &&
 8010a0e:	d104      	bne.n	8010a1a <x509_crt_check_cn+0x16>
        x509_memcasecmp( cn, name->p, cn_len ) == 0 )
 8010a10:	6881      	ldr	r1, [r0, #8]
 8010a12:	4620      	mov	r0, r4
 8010a14:	f7ff ff8e 	bl	8010934 <x509_memcasecmp>
    if( name->len == cn_len &&
 8010a18:	b180      	cbz	r0, 8010a3c <x509_crt_check_cn+0x38>
    size_t cn_idx = 0, cn_len = strlen( cn );
 8010a1a:	4620      	mov	r0, r4
 8010a1c:	f7ef fc04 	bl	8000228 <strlen>
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 8010a20:	2d02      	cmp	r5, #2
 8010a22:	d909      	bls.n	8010a38 <x509_crt_check_cn+0x34>
 8010a24:	68b3      	ldr	r3, [r6, #8]
 8010a26:	781a      	ldrb	r2, [r3, #0]
 8010a28:	2a2a      	cmp	r2, #42	; 0x2a
 8010a2a:	d105      	bne.n	8010a38 <x509_crt_check_cn+0x34>
 8010a2c:	785a      	ldrb	r2, [r3, #1]
 8010a2e:	2a2e      	cmp	r2, #46	; 0x2e
 8010a30:	d102      	bne.n	8010a38 <x509_crt_check_cn+0x34>
 8010a32:	2200      	movs	r2, #0
    for( i = 0; i < cn_len; ++i )
 8010a34:	4290      	cmp	r0, r2
 8010a36:	d102      	bne.n	8010a3e <x509_crt_check_cn+0x3a>
    if( x509_check_wildcard( cn, name ) == 0 )
    {
        return( 0 );
    }

    return( -1 );
 8010a38:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010a3c:	bd70      	pop	{r4, r5, r6, pc}
        if( cn[i] == '.' )
 8010a3e:	4621      	mov	r1, r4
 8010a40:	780e      	ldrb	r6, [r1, #0]
 8010a42:	3401      	adds	r4, #1
 8010a44:	2e2e      	cmp	r6, #46	; 0x2e
 8010a46:	d001      	beq.n	8010a4c <x509_crt_check_cn+0x48>
    for( i = 0; i < cn_len; ++i )
 8010a48:	3201      	adds	r2, #1
 8010a4a:	e7f3      	b.n	8010a34 <x509_crt_check_cn+0x30>
    if( cn_idx == 0 )
 8010a4c:	2a00      	cmp	r2, #0
 8010a4e:	d0f3      	beq.n	8010a38 <x509_crt_check_cn+0x34>
    if( cn_len - cn_idx == name->len - 1 &&
 8010a50:	1a82      	subs	r2, r0, r2
 8010a52:	3d01      	subs	r5, #1
 8010a54:	42aa      	cmp	r2, r5
 8010a56:	d1ef      	bne.n	8010a38 <x509_crt_check_cn+0x34>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 8010a58:	1c58      	adds	r0, r3, #1
 8010a5a:	f7ff ff6b 	bl	8010934 <x509_memcasecmp>
    if( cn_len - cn_idx == name->len - 1 &&
 8010a5e:	3000      	adds	r0, #0
 8010a60:	bf18      	it	ne
 8010a62:	2001      	movne	r0, #1
 8010a64:	4240      	negs	r0, r0
 8010a66:	bd70      	pop	{r4, r5, r6, pc}

08010a68 <x509_get_uid>:
{
 8010a68:	b570      	push	{r4, r5, r6, lr}
 8010a6a:	4615      	mov	r5, r2
    if( *p == end )
 8010a6c:	6802      	ldr	r2, [r0, #0]
{
 8010a6e:	4604      	mov	r4, r0
    if( *p == end )
 8010a70:	428a      	cmp	r2, r1
 8010a72:	d00b      	beq.n	8010a8c <x509_get_uid+0x24>
    uid->tag = **p;
 8010a74:	7816      	ldrb	r6, [r2, #0]
 8010a76:	462a      	mov	r2, r5
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 8010a78:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    uid->tag = **p;
 8010a7c:	f842 6b04 	str.w	r6, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 8010a80:	f7f3 fa7a 	bl	8003f78 <mbedtls_asn1_get_tag>
 8010a84:	b120      	cbz	r0, 8010a90 <x509_get_uid+0x28>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8010a86:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8010a8a:	d107      	bne.n	8010a9c <x509_get_uid+0x34>
            return( 0 );
 8010a8c:	2000      	movs	r0, #0
 8010a8e:	bd70      	pop	{r4, r5, r6, pc}
    uid->p = *p;
 8010a90:	6823      	ldr	r3, [r4, #0]
    *p += uid->len;
 8010a92:	686a      	ldr	r2, [r5, #4]
    uid->p = *p;
 8010a94:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
 8010a96:	6823      	ldr	r3, [r4, #0]
 8010a98:	4413      	add	r3, r2
 8010a9a:	6023      	str	r3, [r4, #0]
}
 8010a9c:	bd70      	pop	{r4, r5, r6, pc}

08010a9e <x509_profile_check_key.isra.3>:
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
 8010a9e:	b538      	push	{r3, r4, r5, lr}
 8010aa0:	4605      	mov	r5, r0
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
 8010aa2:	4608      	mov	r0, r1
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
 8010aa4:	460c      	mov	r4, r1
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
 8010aa6:	f7f7 fb8d 	bl	80081c4 <mbedtls_pk_get_type>
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 8010aaa:	2801      	cmp	r0, #1
 8010aac:	d001      	beq.n	8010ab2 <x509_profile_check_key.isra.3+0x14>
 8010aae:	2806      	cmp	r0, #6
 8010ab0:	d109      	bne.n	8010ac6 <x509_profile_check_key.isra.3+0x28>
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	f7f7 fb62 	bl	800817c <mbedtls_pk_get_bitlen>
 8010ab8:	682b      	ldr	r3, [r5, #0]
 8010aba:	4298      	cmp	r0, r3
 8010abc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ac0:	bf28      	it	cs
 8010ac2:	2000      	movcs	r0, #0
 8010ac4:	bd38      	pop	{r3, r4, r5, pc}
    return( -1 );
 8010ac6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010aca:	bd38      	pop	{r3, r4, r5, pc}

08010acc <mbedtls_x509_crt_info>:
{
 8010acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad0:	4605      	mov	r5, r0
 8010ad2:	b08d      	sub	sp, #52	; 0x34
 8010ad4:	460f      	mov	r7, r1
 8010ad6:	4690      	mov	r8, r2
    if( NULL == crt )
 8010ad8:	461e      	mov	r6, r3
 8010ada:	b95b      	cbnz	r3, 8010af4 <mbedtls_x509_crt_info+0x28>
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 8010adc:	4a99      	ldr	r2, [pc, #612]	; (8010d44 <mbedtls_x509_crt_info+0x278>)
 8010ade:	f001 fb41 	bl	8012164 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8010ae2:	2800      	cmp	r0, #0
 8010ae4:	da01      	bge.n	8010aea <mbedtls_x509_crt_info+0x1e>
 8010ae6:	4898      	ldr	r0, [pc, #608]	; (8010d48 <mbedtls_x509_crt_info+0x27c>)
 8010ae8:	e001      	b.n	8010aee <mbedtls_x509_crt_info+0x22>
 8010aea:	4287      	cmp	r7, r0
 8010aec:	d9fb      	bls.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
}
 8010aee:	b00d      	add	sp, #52	; 0x34
 8010af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
 8010af4:	699b      	ldr	r3, [r3, #24]
 8010af6:	9300      	str	r3, [sp, #0]
 8010af8:	4613      	mov	r3, r2
 8010afa:	4a94      	ldr	r2, [pc, #592]	; (8010d4c <mbedtls_x509_crt_info+0x280>)
 8010afc:	f001 fb32 	bl	8012164 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010b00:	2800      	cmp	r0, #0
 8010b02:	dbf0      	blt.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010b04:	4287      	cmp	r7, r0
 8010b06:	d9ee      	bls.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010b08:	1a3c      	subs	r4, r7, r0
 8010b0a:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
 8010b0c:	4643      	mov	r3, r8
 8010b0e:	4a90      	ldr	r2, [pc, #576]	; (8010d50 <mbedtls_x509_crt_info+0x284>)
 8010b10:	4621      	mov	r1, r4
 8010b12:	4628      	mov	r0, r5
 8010b14:	f001 fb26 	bl	8012164 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010b18:	2800      	cmp	r0, #0
 8010b1a:	dbe4      	blt.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010b1c:	4284      	cmp	r4, r0
 8010b1e:	d9e2      	bls.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010b20:	1a24      	subs	r4, r4, r0
 8010b22:	4405      	add	r5, r0
    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 8010b24:	f106 021c 	add.w	r2, r6, #28
 8010b28:	4621      	mov	r1, r4
 8010b2a:	4628      	mov	r0, r5
 8010b2c:	f7ff fe7a 	bl	8010824 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010b30:	2800      	cmp	r0, #0
 8010b32:	dbd8      	blt.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010b34:	4284      	cmp	r4, r0
 8010b36:	d9d6      	bls.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010b38:	1a24      	subs	r4, r4, r0
 8010b3a:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 8010b3c:	4643      	mov	r3, r8
 8010b3e:	4a85      	ldr	r2, [pc, #532]	; (8010d54 <mbedtls_x509_crt_info+0x288>)
 8010b40:	4621      	mov	r1, r4
 8010b42:	4628      	mov	r0, r5
 8010b44:	f001 fb0e 	bl	8012164 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	dbcc      	blt.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010b4c:	4284      	cmp	r4, r0
 8010b4e:	d9ca      	bls.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010b50:	1a24      	subs	r4, r4, r0
 8010b52:	4405      	add	r5, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 8010b54:	f106 024c 	add.w	r2, r6, #76	; 0x4c
 8010b58:	4621      	mov	r1, r4
 8010b5a:	4628      	mov	r0, r5
 8010b5c:	f7ff fde0 	bl	8010720 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010b60:	2800      	cmp	r0, #0
 8010b62:	dbc0      	blt.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010b64:	4284      	cmp	r4, r0
 8010b66:	d9be      	bls.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010b68:	1a24      	subs	r4, r4, r0
 8010b6a:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 8010b6c:	4643      	mov	r3, r8
 8010b6e:	4a7a      	ldr	r2, [pc, #488]	; (8010d58 <mbedtls_x509_crt_info+0x28c>)
 8010b70:	4621      	mov	r1, r4
 8010b72:	4628      	mov	r0, r5
 8010b74:	f001 faf6 	bl	8012164 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010b78:	2800      	cmp	r0, #0
 8010b7a:	dbb4      	blt.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010b7c:	4284      	cmp	r4, r0
 8010b7e:	d9b2      	bls.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010b80:	1a24      	subs	r4, r4, r0
 8010b82:	4405      	add	r5, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 8010b84:	f106 026c 	add.w	r2, r6, #108	; 0x6c
 8010b88:	4621      	mov	r1, r4
 8010b8a:	4628      	mov	r0, r5
 8010b8c:	f7ff fdc8 	bl	8010720 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010b90:	2800      	cmp	r0, #0
 8010b92:	dba8      	blt.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010b94:	4284      	cmp	r4, r0
 8010b96:	d9a6      	bls.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 8010b98:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010b9c:	1a24      	subs	r4, r4, r0
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 8010b9e:	9305      	str	r3, [sp, #20]
 8010ba0:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010ba4:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 8010ba6:	9304      	str	r3, [sp, #16]
 8010ba8:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8010bac:	4a6b      	ldr	r2, [pc, #428]	; (8010d5c <mbedtls_x509_crt_info+0x290>)
 8010bae:	9303      	str	r3, [sp, #12]
 8010bb0:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8010bb4:	4621      	mov	r1, r4
 8010bb6:	9302      	str	r3, [sp, #8]
 8010bb8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	9301      	str	r3, [sp, #4]
 8010bc0:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8010bc4:	9300      	str	r3, [sp, #0]
 8010bc6:	4643      	mov	r3, r8
 8010bc8:	f001 facc 	bl	8012164 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	db8a      	blt.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010bd0:	4284      	cmp	r4, r0
 8010bd2:	d988      	bls.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 8010bd4:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010bd8:	1a24      	subs	r4, r4, r0
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 8010bda:	9305      	str	r3, [sp, #20]
 8010bdc:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010be0:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 8010be2:	9304      	str	r3, [sp, #16]
 8010be4:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
 8010be8:	4a5d      	ldr	r2, [pc, #372]	; (8010d60 <mbedtls_x509_crt_info+0x294>)
 8010bea:	9303      	str	r3, [sp, #12]
 8010bec:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8010bf0:	4621      	mov	r1, r4
 8010bf2:	9302      	str	r3, [sp, #8]
 8010bf4:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 8010bf8:	4628      	mov	r0, r5
 8010bfa:	9301      	str	r3, [sp, #4]
 8010bfc:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 8010c00:	9300      	str	r3, [sp, #0]
 8010c02:	4643      	mov	r3, r8
 8010c04:	f001 faae 	bl	8012164 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010c08:	2800      	cmp	r0, #0
 8010c0a:	f6ff af6c 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010c0e:	4284      	cmp	r4, r0
 8010c10:	f67f af69 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010c14:	1a24      	subs	r4, r4, r0
 8010c16:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 8010c18:	4643      	mov	r3, r8
 8010c1a:	4a52      	ldr	r2, [pc, #328]	; (8010d64 <mbedtls_x509_crt_info+0x298>)
 8010c1c:	4621      	mov	r1, r4
 8010c1e:	4628      	mov	r0, r5
 8010c20:	f001 faa0 	bl	8012164 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010c24:	2800      	cmp	r0, #0
 8010c26:	f6ff af5e 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010c2a:	4284      	cmp	r4, r0
 8010c2c:	f67f af5b 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 8010c30:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
 8010c34:	f896 3129 	ldrb.w	r3, [r6, #297]	; 0x129
 8010c38:	9201      	str	r2, [sp, #4]
 8010c3a:	f896 2128 	ldrb.w	r2, [r6, #296]	; 0x128
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010c3e:	1a24      	subs	r4, r4, r0
 8010c40:	4405      	add	r5, r0
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 8010c42:	9200      	str	r2, [sp, #0]
 8010c44:	4621      	mov	r1, r4
 8010c46:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	f7ff fe34 	bl	80108b8 <mbedtls_x509_sig_alg_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010c50:	f1b0 0900 	subs.w	r9, r0, #0
 8010c54:	f6ff af47 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010c58:	454c      	cmp	r4, r9
 8010c5a:	f67f af44 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 8010c5e:	f106 0bbc 	add.w	fp, r6, #188	; 0xbc
 8010c62:	4658      	mov	r0, fp
 8010c64:	f7f7 faa4 	bl	80081b0 <mbedtls_pk_get_name>
 8010c68:	f10d 0a1c 	add.w	sl, sp, #28
 8010c6c:	4602      	mov	r2, r0
 8010c6e:	2112      	movs	r1, #18
 8010c70:	4650      	mov	r0, sl
 8010c72:	f7ff fe49 	bl	8010908 <mbedtls_x509_key_size_helper>
 8010c76:	2800      	cmp	r0, #0
 8010c78:	f47f af39 	bne.w	8010aee <mbedtls_x509_crt_info+0x22>
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 8010c7c:	4658      	mov	r0, fp
 8010c7e:	f7f7 fa7d 	bl	800817c <mbedtls_pk_get_bitlen>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010c82:	eba4 0409 	sub.w	r4, r4, r9
 8010c86:	444d      	add	r5, r9
    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
 8010c88:	9001      	str	r0, [sp, #4]
 8010c8a:	f8cd a000 	str.w	sl, [sp]
 8010c8e:	4643      	mov	r3, r8
 8010c90:	4a35      	ldr	r2, [pc, #212]	; (8010d68 <mbedtls_x509_crt_info+0x29c>)
 8010c92:	4621      	mov	r1, r4
 8010c94:	4628      	mov	r0, r5
 8010c96:	f001 fa65 	bl	8012164 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010c9a:	2800      	cmp	r0, #0
 8010c9c:	f6ff af23 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010ca0:	4284      	cmp	r4, r0
 8010ca2:	f67f af20 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8010ca6:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010caa:	1a24      	subs	r4, r4, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8010cac:	05db      	lsls	r3, r3, #23
    MBEDTLS_X509_SAFE_SNPRINTF;
 8010cae:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8010cb0:	d527      	bpl.n	8010d02 <mbedtls_x509_crt_info+0x236>
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 8010cb2:	f8d6 10fc 	ldr.w	r1, [r6, #252]	; 0xfc
 8010cb6:	4a2d      	ldr	r2, [pc, #180]	; (8010d6c <mbedtls_x509_crt_info+0x2a0>)
 8010cb8:	4b2d      	ldr	r3, [pc, #180]	; (8010d70 <mbedtls_x509_crt_info+0x2a4>)
 8010cba:	4628      	mov	r0, r5
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bf08      	it	eq
 8010cc0:	4613      	moveq	r3, r2
 8010cc2:	4a2c      	ldr	r2, [pc, #176]	; (8010d74 <mbedtls_x509_crt_info+0x2a8>)
 8010cc4:	9300      	str	r3, [sp, #0]
 8010cc6:	4621      	mov	r1, r4
 8010cc8:	4643      	mov	r3, r8
 8010cca:	f001 fa4b 	bl	8012164 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8010cce:	2800      	cmp	r0, #0
 8010cd0:	f6ff af09 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010cd4:	4284      	cmp	r4, r0
 8010cd6:	f67f af06 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
        if( crt->max_pathlen > 0 )
 8010cda:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
        MBEDTLS_X509_SAFE_SNPRINTF;
 8010cde:	1a24      	subs	r4, r4, r0
        if( crt->max_pathlen > 0 )
 8010ce0:	2b00      	cmp	r3, #0
        MBEDTLS_X509_SAFE_SNPRINTF;
 8010ce2:	4405      	add	r5, r0
        if( crt->max_pathlen > 0 )
 8010ce4:	dd0d      	ble.n	8010d02 <mbedtls_x509_crt_info+0x236>
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 8010ce6:	3b01      	subs	r3, #1
 8010ce8:	4a23      	ldr	r2, [pc, #140]	; (8010d78 <mbedtls_x509_crt_info+0x2ac>)
 8010cea:	4621      	mov	r1, r4
 8010cec:	4628      	mov	r0, r5
 8010cee:	f001 fa39 	bl	8012164 <sniprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8010cf2:	2800      	cmp	r0, #0
 8010cf4:	f6ff aef7 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010cf8:	4284      	cmp	r4, r0
 8010cfa:	f67f aef4 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010cfe:	1a24      	subs	r4, r4, r0
 8010d00:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8010d02:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 8010d06:	0698      	lsls	r0, r3, #26
 8010d08:	d550      	bpl.n	8010dac <mbedtls_x509_crt_info+0x2e0>
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 8010d0a:	4643      	mov	r3, r8
 8010d0c:	4a1b      	ldr	r2, [pc, #108]	; (8010d7c <mbedtls_x509_crt_info+0x2b0>)
 8010d0e:	4621      	mov	r1, r4
 8010d10:	4628      	mov	r0, r5
 8010d12:	f001 fa27 	bl	8012164 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8010d16:	2800      	cmp	r0, #0
 8010d18:	f6ff aee5 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010d1c:	42a0      	cmp	r0, r4
 8010d1e:	f4bf aee2 	bcs.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
    size_t sep_len = 0;
 8010d22:	2100      	movs	r1, #0
 8010d24:	468c      	mov	ip, r1
        MBEDTLS_X509_SAFE_SNPRINTF;
 8010d26:	1a24      	subs	r4, r4, r0
 8010d28:	4405      	add	r5, r0
        sep = ", ";
 8010d2a:	f8df e058 	ldr.w	lr, [pc, #88]	; 8010d84 <mbedtls_x509_crt_info+0x2b8>
    const char *sep = "";
 8010d2e:	4814      	ldr	r0, [pc, #80]	; (8010d80 <mbedtls_x509_crt_info+0x2b4>)
        if( ( ret = x509_info_subject_alt_name( &p, &n,
 8010d30:	f106 02e8 	add.w	r2, r6, #232	; 0xe8
        if( cur->buf.len + sep_len >= n )
 8010d34:	6853      	ldr	r3, [r2, #4]
 8010d36:	440b      	add	r3, r1
 8010d38:	42a3      	cmp	r3, r4
 8010d3a:	d325      	bcc.n	8010d88 <mbedtls_x509_crt_info+0x2bc>
            *p = '\0';
 8010d3c:	f885 c000 	strb.w	ip, [r5]
 8010d40:	e6d1      	b.n	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010d42:	bf00      	nop
 8010d44:	080188aa 	.word	0x080188aa
 8010d48:	ffffd680 	.word	0xffffd680
 8010d4c:	080188ca 	.word	0x080188ca
 8010d50:	080188e4 	.word	0x080188e4
 8010d54:	080188fb 	.word	0x080188fb
 8010d58:	08018913 	.word	0x08018913
 8010d5c:	0801892b 	.word	0x0801892b
 8010d60:	08018960 	.word	0x08018960
 8010d64:	08018995 	.word	0x08018995
 8010d68:	080189ad 	.word	0x080189ad
 8010d6c:	080188a4 	.word	0x080188a4
 8010d70:	0801889f 	.word	0x0801889f
 8010d74:	080189bf 	.word	0x080189bf
 8010d78:	080189dc 	.word	0x080189dc
 8010d7c:	080189ed 	.word	0x080189ed
 8010d80:	0801643c 	.word	0x0801643c
 8010d84:	08018876 	.word	0x08018876
        n -= cur->buf.len + sep_len;
 8010d88:	1ae4      	subs	r4, r4, r3
        for( i = 0; i < sep_len; i++ )
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	428b      	cmp	r3, r1
 8010d8e:	f040 819d 	bne.w	80110cc <mbedtls_x509_crt_info+0x600>
 8010d92:	441d      	add	r5, r3
 8010d94:	4628      	mov	r0, r5
        for( i = 0; i < cur->buf.len; i++ )
 8010d96:	6853      	ldr	r3, [r2, #4]
 8010d98:	1a29      	subs	r1, r5, r0
 8010d9a:	428b      	cmp	r3, r1
 8010d9c:	f200 819c 	bhi.w	80110d8 <mbedtls_x509_crt_info+0x60c>
        cur = cur->next;
 8010da0:	68d2      	ldr	r2, [r2, #12]
        sep_len = 2;
 8010da2:	2102      	movs	r1, #2
        sep = ", ";
 8010da4:	4670      	mov	r0, lr
    while( cur != NULL )
 8010da6:	2a00      	cmp	r2, #0
 8010da8:	d1c4      	bne.n	8010d34 <mbedtls_x509_crt_info+0x268>
    *p = '\0';
 8010daa:	702a      	strb	r2, [r5, #0]
    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 8010dac:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 8010db0:	03d9      	lsls	r1, r3, #15
 8010db2:	f140 8098 	bpl.w	8010ee6 <mbedtls_x509_crt_info+0x41a>
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 8010db6:	4643      	mov	r3, r8
 8010db8:	4aca      	ldr	r2, [pc, #808]	; (80110e4 <mbedtls_x509_crt_info+0x618>)
 8010dba:	4621      	mov	r1, r4
 8010dbc:	4628      	mov	r0, r5
 8010dbe:	f001 f9d1 	bl	8012164 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8010dc2:	2800      	cmp	r0, #0
 8010dc4:	f6ff ae8f 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010dc8:	42a0      	cmp	r0, r4
 8010dca:	f4bf ae8c 	bcs.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 8010dce:	f896 9118 	ldrb.w	r9, [r6, #280]	; 0x118
        MBEDTLS_X509_SAFE_SNPRINTF;
 8010dd2:	1a24      	subs	r4, r4, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 8010dd4:	f019 0f80 	tst.w	r9, #128	; 0x80
        MBEDTLS_X509_SAFE_SNPRINTF;
 8010dd8:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 8010dda:	4bc3      	ldr	r3, [pc, #780]	; (80110e8 <mbedtls_x509_crt_info+0x61c>)
 8010ddc:	d00d      	beq.n	8010dfa <mbedtls_x509_crt_info+0x32e>
 8010dde:	4ac3      	ldr	r2, [pc, #780]	; (80110ec <mbedtls_x509_crt_info+0x620>)
 8010de0:	4621      	mov	r1, r4
 8010de2:	4628      	mov	r0, r5
 8010de4:	f001 f9be 	bl	8012164 <sniprintf>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	f6ff ae7c 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010dee:	4284      	cmp	r4, r0
 8010df0:	f67f ae79 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010df4:	4bbe      	ldr	r3, [pc, #760]	; (80110f0 <mbedtls_x509_crt_info+0x624>)
 8010df6:	1a24      	subs	r4, r4, r0
 8010df8:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 8010dfa:	f019 0f40 	tst.w	r9, #64	; 0x40
 8010dfe:	d00d      	beq.n	8010e1c <mbedtls_x509_crt_info+0x350>
 8010e00:	4abc      	ldr	r2, [pc, #752]	; (80110f4 <mbedtls_x509_crt_info+0x628>)
 8010e02:	4621      	mov	r1, r4
 8010e04:	4628      	mov	r0, r5
 8010e06:	f001 f9ad 	bl	8012164 <sniprintf>
 8010e0a:	2800      	cmp	r0, #0
 8010e0c:	f6ff ae6b 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010e10:	4284      	cmp	r4, r0
 8010e12:	f67f ae68 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010e16:	4bb6      	ldr	r3, [pc, #728]	; (80110f0 <mbedtls_x509_crt_info+0x624>)
 8010e18:	1a24      	subs	r4, r4, r0
 8010e1a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 8010e1c:	f019 0f20 	tst.w	r9, #32
 8010e20:	d00d      	beq.n	8010e3e <mbedtls_x509_crt_info+0x372>
 8010e22:	4ab5      	ldr	r2, [pc, #724]	; (80110f8 <mbedtls_x509_crt_info+0x62c>)
 8010e24:	4621      	mov	r1, r4
 8010e26:	4628      	mov	r0, r5
 8010e28:	f001 f99c 	bl	8012164 <sniprintf>
 8010e2c:	2800      	cmp	r0, #0
 8010e2e:	f6ff ae5a 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010e32:	4284      	cmp	r4, r0
 8010e34:	f67f ae57 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010e38:	4bad      	ldr	r3, [pc, #692]	; (80110f0 <mbedtls_x509_crt_info+0x624>)
 8010e3a:	1a24      	subs	r4, r4, r0
 8010e3c:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 8010e3e:	f019 0f10 	tst.w	r9, #16
 8010e42:	d00d      	beq.n	8010e60 <mbedtls_x509_crt_info+0x394>
 8010e44:	4aad      	ldr	r2, [pc, #692]	; (80110fc <mbedtls_x509_crt_info+0x630>)
 8010e46:	4621      	mov	r1, r4
 8010e48:	4628      	mov	r0, r5
 8010e4a:	f001 f98b 	bl	8012164 <sniprintf>
 8010e4e:	2800      	cmp	r0, #0
 8010e50:	f6ff ae49 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010e54:	4284      	cmp	r4, r0
 8010e56:	f67f ae46 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010e5a:	4ba5      	ldr	r3, [pc, #660]	; (80110f0 <mbedtls_x509_crt_info+0x624>)
 8010e5c:	1a24      	subs	r4, r4, r0
 8010e5e:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 8010e60:	f019 0f08 	tst.w	r9, #8
 8010e64:	d00d      	beq.n	8010e82 <mbedtls_x509_crt_info+0x3b6>
 8010e66:	4aa6      	ldr	r2, [pc, #664]	; (8011100 <mbedtls_x509_crt_info+0x634>)
 8010e68:	4621      	mov	r1, r4
 8010e6a:	4628      	mov	r0, r5
 8010e6c:	f001 f97a 	bl	8012164 <sniprintf>
 8010e70:	2800      	cmp	r0, #0
 8010e72:	f6ff ae38 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010e76:	4284      	cmp	r4, r0
 8010e78:	f67f ae35 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010e7c:	4b9c      	ldr	r3, [pc, #624]	; (80110f0 <mbedtls_x509_crt_info+0x624>)
 8010e7e:	1a24      	subs	r4, r4, r0
 8010e80:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 8010e82:	f019 0f04 	tst.w	r9, #4
 8010e86:	d00d      	beq.n	8010ea4 <mbedtls_x509_crt_info+0x3d8>
 8010e88:	4a9e      	ldr	r2, [pc, #632]	; (8011104 <mbedtls_x509_crt_info+0x638>)
 8010e8a:	4621      	mov	r1, r4
 8010e8c:	4628      	mov	r0, r5
 8010e8e:	f001 f969 	bl	8012164 <sniprintf>
 8010e92:	2800      	cmp	r0, #0
 8010e94:	f6ff ae27 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010e98:	4284      	cmp	r4, r0
 8010e9a:	f67f ae24 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010e9e:	4b94      	ldr	r3, [pc, #592]	; (80110f0 <mbedtls_x509_crt_info+0x624>)
 8010ea0:	1a24      	subs	r4, r4, r0
 8010ea2:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 8010ea4:	f019 0f02 	tst.w	r9, #2
 8010ea8:	d00d      	beq.n	8010ec6 <mbedtls_x509_crt_info+0x3fa>
 8010eaa:	4a97      	ldr	r2, [pc, #604]	; (8011108 <mbedtls_x509_crt_info+0x63c>)
 8010eac:	4621      	mov	r1, r4
 8010eae:	4628      	mov	r0, r5
 8010eb0:	f001 f958 	bl	8012164 <sniprintf>
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	f6ff ae16 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010eba:	4284      	cmp	r4, r0
 8010ebc:	f67f ae13 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010ec0:	4b8b      	ldr	r3, [pc, #556]	; (80110f0 <mbedtls_x509_crt_info+0x624>)
 8010ec2:	1a24      	subs	r4, r4, r0
 8010ec4:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 8010ec6:	f019 0f01 	tst.w	r9, #1
 8010eca:	d00c      	beq.n	8010ee6 <mbedtls_x509_crt_info+0x41a>
 8010ecc:	4a8f      	ldr	r2, [pc, #572]	; (801110c <mbedtls_x509_crt_info+0x640>)
 8010ece:	4621      	mov	r1, r4
 8010ed0:	4628      	mov	r0, r5
 8010ed2:	f001 f947 	bl	8012164 <sniprintf>
 8010ed6:	2800      	cmp	r0, #0
 8010ed8:	f6ff ae05 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010edc:	4284      	cmp	r4, r0
 8010ede:	f67f ae02 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010ee2:	1a24      	subs	r4, r4, r0
 8010ee4:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 8010ee6:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 8010eea:	075a      	lsls	r2, r3, #29
 8010eec:	f140 80a9 	bpl.w	8011042 <mbedtls_x509_crt_info+0x576>
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 8010ef0:	4643      	mov	r3, r8
 8010ef2:	4a87      	ldr	r2, [pc, #540]	; (8011110 <mbedtls_x509_crt_info+0x644>)
 8010ef4:	4621      	mov	r1, r4
 8010ef6:	4628      	mov	r0, r5
 8010ef8:	f001 f934 	bl	8012164 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8010efc:	2800      	cmp	r0, #0
 8010efe:	f6ff adf2 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010f02:	42a0      	cmp	r0, r4
 8010f04:	f4bf adef 	bcs.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 8010f08:	f8d6 9104 	ldr.w	r9, [r6, #260]	; 0x104
        MBEDTLS_X509_SAFE_SNPRINTF;
 8010f0c:	1a24      	subs	r4, r4, r0
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 8010f0e:	f019 0f80 	tst.w	r9, #128	; 0x80
        MBEDTLS_X509_SAFE_SNPRINTF;
 8010f12:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 8010f14:	4b74      	ldr	r3, [pc, #464]	; (80110e8 <mbedtls_x509_crt_info+0x61c>)
 8010f16:	d00d      	beq.n	8010f34 <mbedtls_x509_crt_info+0x468>
 8010f18:	4a7e      	ldr	r2, [pc, #504]	; (8011114 <mbedtls_x509_crt_info+0x648>)
 8010f1a:	4621      	mov	r1, r4
 8010f1c:	4628      	mov	r0, r5
 8010f1e:	f001 f921 	bl	8012164 <sniprintf>
 8010f22:	2800      	cmp	r0, #0
 8010f24:	f6ff addf 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010f28:	4284      	cmp	r4, r0
 8010f2a:	f67f addc 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010f2e:	4b70      	ldr	r3, [pc, #448]	; (80110f0 <mbedtls_x509_crt_info+0x624>)
 8010f30:	1a24      	subs	r4, r4, r0
 8010f32:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 8010f34:	f019 0f40 	tst.w	r9, #64	; 0x40
 8010f38:	d00d      	beq.n	8010f56 <mbedtls_x509_crt_info+0x48a>
 8010f3a:	4a77      	ldr	r2, [pc, #476]	; (8011118 <mbedtls_x509_crt_info+0x64c>)
 8010f3c:	4621      	mov	r1, r4
 8010f3e:	4628      	mov	r0, r5
 8010f40:	f001 f910 	bl	8012164 <sniprintf>
 8010f44:	2800      	cmp	r0, #0
 8010f46:	f6ff adce 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010f4a:	4284      	cmp	r4, r0
 8010f4c:	f67f adcb 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010f50:	4b67      	ldr	r3, [pc, #412]	; (80110f0 <mbedtls_x509_crt_info+0x624>)
 8010f52:	1a24      	subs	r4, r4, r0
 8010f54:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 8010f56:	f019 0f20 	tst.w	r9, #32
 8010f5a:	d00d      	beq.n	8010f78 <mbedtls_x509_crt_info+0x4ac>
 8010f5c:	4a6f      	ldr	r2, [pc, #444]	; (801111c <mbedtls_x509_crt_info+0x650>)
 8010f5e:	4621      	mov	r1, r4
 8010f60:	4628      	mov	r0, r5
 8010f62:	f001 f8ff 	bl	8012164 <sniprintf>
 8010f66:	2800      	cmp	r0, #0
 8010f68:	f6ff adbd 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010f6c:	4284      	cmp	r4, r0
 8010f6e:	f67f adba 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010f72:	4b5f      	ldr	r3, [pc, #380]	; (80110f0 <mbedtls_x509_crt_info+0x624>)
 8010f74:	1a24      	subs	r4, r4, r0
 8010f76:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 8010f78:	f019 0f10 	tst.w	r9, #16
 8010f7c:	d00d      	beq.n	8010f9a <mbedtls_x509_crt_info+0x4ce>
 8010f7e:	4a68      	ldr	r2, [pc, #416]	; (8011120 <mbedtls_x509_crt_info+0x654>)
 8010f80:	4621      	mov	r1, r4
 8010f82:	4628      	mov	r0, r5
 8010f84:	f001 f8ee 	bl	8012164 <sniprintf>
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	f6ff adac 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010f8e:	4284      	cmp	r4, r0
 8010f90:	f67f ada9 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010f94:	4b56      	ldr	r3, [pc, #344]	; (80110f0 <mbedtls_x509_crt_info+0x624>)
 8010f96:	1a24      	subs	r4, r4, r0
 8010f98:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 8010f9a:	f019 0f08 	tst.w	r9, #8
 8010f9e:	d00d      	beq.n	8010fbc <mbedtls_x509_crt_info+0x4f0>
 8010fa0:	4a60      	ldr	r2, [pc, #384]	; (8011124 <mbedtls_x509_crt_info+0x658>)
 8010fa2:	4621      	mov	r1, r4
 8010fa4:	4628      	mov	r0, r5
 8010fa6:	f001 f8dd 	bl	8012164 <sniprintf>
 8010faa:	2800      	cmp	r0, #0
 8010fac:	f6ff ad9b 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010fb0:	4284      	cmp	r4, r0
 8010fb2:	f67f ad98 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010fb6:	4b4e      	ldr	r3, [pc, #312]	; (80110f0 <mbedtls_x509_crt_info+0x624>)
 8010fb8:	1a24      	subs	r4, r4, r0
 8010fba:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 8010fbc:	f019 0f04 	tst.w	r9, #4
 8010fc0:	d00d      	beq.n	8010fde <mbedtls_x509_crt_info+0x512>
 8010fc2:	4a59      	ldr	r2, [pc, #356]	; (8011128 <mbedtls_x509_crt_info+0x65c>)
 8010fc4:	4621      	mov	r1, r4
 8010fc6:	4628      	mov	r0, r5
 8010fc8:	f001 f8cc 	bl	8012164 <sniprintf>
 8010fcc:	2800      	cmp	r0, #0
 8010fce:	f6ff ad8a 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010fd2:	4284      	cmp	r4, r0
 8010fd4:	f67f ad87 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010fd8:	4b45      	ldr	r3, [pc, #276]	; (80110f0 <mbedtls_x509_crt_info+0x624>)
 8010fda:	1a24      	subs	r4, r4, r0
 8010fdc:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 8010fde:	f019 0f02 	tst.w	r9, #2
 8010fe2:	d00d      	beq.n	8011000 <mbedtls_x509_crt_info+0x534>
 8010fe4:	4a51      	ldr	r2, [pc, #324]	; (801112c <mbedtls_x509_crt_info+0x660>)
 8010fe6:	4621      	mov	r1, r4
 8010fe8:	4628      	mov	r0, r5
 8010fea:	f001 f8bb 	bl	8012164 <sniprintf>
 8010fee:	2800      	cmp	r0, #0
 8010ff0:	f6ff ad79 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010ff4:	4284      	cmp	r4, r0
 8010ff6:	f67f ad76 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8010ffa:	4b3d      	ldr	r3, [pc, #244]	; (80110f0 <mbedtls_x509_crt_info+0x624>)
 8010ffc:	1a24      	subs	r4, r4, r0
 8010ffe:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 8011000:	f019 0f01 	tst.w	r9, #1
 8011004:	d00d      	beq.n	8011022 <mbedtls_x509_crt_info+0x556>
 8011006:	4a4a      	ldr	r2, [pc, #296]	; (8011130 <mbedtls_x509_crt_info+0x664>)
 8011008:	4621      	mov	r1, r4
 801100a:	4628      	mov	r0, r5
 801100c:	f001 f8aa 	bl	8012164 <sniprintf>
 8011010:	2800      	cmp	r0, #0
 8011012:	f6ff ad68 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8011016:	4284      	cmp	r4, r0
 8011018:	f67f ad65 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 801101c:	4b34      	ldr	r3, [pc, #208]	; (80110f0 <mbedtls_x509_crt_info+0x624>)
 801101e:	1a24      	subs	r4, r4, r0
 8011020:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 8011022:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 8011026:	d00c      	beq.n	8011042 <mbedtls_x509_crt_info+0x576>
 8011028:	4a42      	ldr	r2, [pc, #264]	; (8011134 <mbedtls_x509_crt_info+0x668>)
 801102a:	4621      	mov	r1, r4
 801102c:	4628      	mov	r0, r5
 801102e:	f001 f899 	bl	8012164 <sniprintf>
 8011032:	2800      	cmp	r0, #0
 8011034:	f6ff ad57 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 8011038:	4284      	cmp	r4, r0
 801103a:	f67f ad54 	bls.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 801103e:	1a24      	subs	r4, r4, r0
 8011040:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 8011042:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 8011046:	051b      	lsls	r3, r3, #20
 8011048:	d532      	bpl.n	80110b0 <mbedtls_x509_crt_info+0x5e4>
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 801104a:	4643      	mov	r3, r8
 801104c:	4a3a      	ldr	r2, [pc, #232]	; (8011138 <mbedtls_x509_crt_info+0x66c>)
 801104e:	4621      	mov	r1, r4
 8011050:	4628      	mov	r0, r5
 8011052:	f001 f887 	bl	8012164 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8011056:	2800      	cmp	r0, #0
 8011058:	f6ff ad45 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 801105c:	42a0      	cmp	r0, r4
 801105e:	f4bf ad42 	bcs.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
    const char *sep = "";
 8011062:	f8df b084 	ldr.w	fp, [pc, #132]	; 80110e8 <mbedtls_x509_crt_info+0x61c>
            desc = "???";
 8011066:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8011140 <mbedtls_x509_crt_info+0x674>
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 801106a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8011144 <mbedtls_x509_crt_info+0x678>
        sep = ", ";
 801106e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80110f0 <mbedtls_x509_crt_info+0x624>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8011072:	1a24      	subs	r4, r4, r0
 8011074:	4405      	add	r5, r0
        if( ( ret = x509_info_ext_key_usage( &p, &n,
 8011076:	f506 7684 	add.w	r6, r6, #264	; 0x108
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 801107a:	a906      	add	r1, sp, #24
 801107c:	4630      	mov	r0, r6
 801107e:	f7f6 fe91 	bl	8007da4 <mbedtls_oid_get_extended_key_usage>
 8011082:	b108      	cbz	r0, 8011088 <mbedtls_x509_crt_info+0x5bc>
            desc = "???";
 8011084:	f8cd 9018 	str.w	r9, [sp, #24]
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 8011088:	9b06      	ldr	r3, [sp, #24]
 801108a:	4652      	mov	r2, sl
 801108c:	9300      	str	r3, [sp, #0]
 801108e:	4621      	mov	r1, r4
 8011090:	465b      	mov	r3, fp
 8011092:	4628      	mov	r0, r5
 8011094:	f001 f866 	bl	8012164 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8011098:	2800      	cmp	r0, #0
 801109a:	f6ff ad24 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 801109e:	42a0      	cmp	r0, r4
 80110a0:	f4bf ad21 	bcs.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
        cur = cur->next;
 80110a4:	68f6      	ldr	r6, [r6, #12]
        MBEDTLS_X509_SAFE_SNPRINTF;
 80110a6:	1a24      	subs	r4, r4, r0
 80110a8:	4405      	add	r5, r0
        sep = ", ";
 80110aa:	46c3      	mov	fp, r8
    while( cur != NULL )
 80110ac:	2e00      	cmp	r6, #0
 80110ae:	d1e4      	bne.n	801107a <mbedtls_x509_crt_info+0x5ae>
    ret = mbedtls_snprintf( p, n, "\n" );
 80110b0:	4a22      	ldr	r2, [pc, #136]	; (801113c <mbedtls_x509_crt_info+0x670>)
 80110b2:	4621      	mov	r1, r4
 80110b4:	4628      	mov	r0, r5
 80110b6:	f001 f855 	bl	8012164 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80110ba:	2800      	cmp	r0, #0
 80110bc:	f6ff ad13 	blt.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 80110c0:	42a0      	cmp	r0, r4
 80110c2:	f4bf ad10 	bcs.w	8010ae6 <mbedtls_x509_crt_info+0x1a>
 80110c6:	1a20      	subs	r0, r4, r0
    return( (int) ( size - n ) );
 80110c8:	1a38      	subs	r0, r7, r0
 80110ca:	e510      	b.n	8010aee <mbedtls_x509_crt_info+0x22>
            *p++ = sep[i];
 80110cc:	f810 9003 	ldrb.w	r9, [r0, r3]
 80110d0:	f805 9003 	strb.w	r9, [r5, r3]
        for( i = 0; i < sep_len; i++ )
 80110d4:	3301      	adds	r3, #1
 80110d6:	e659      	b.n	8010d8c <mbedtls_x509_crt_info+0x2c0>
            *p++ = cur->buf.p[i];
 80110d8:	6893      	ldr	r3, [r2, #8]
 80110da:	5c5b      	ldrb	r3, [r3, r1]
 80110dc:	f805 3b01 	strb.w	r3, [r5], #1
 80110e0:	e659      	b.n	8010d96 <mbedtls_x509_crt_info+0x2ca>
 80110e2:	bf00      	nop
 80110e4:	08018a05 	.word	0x08018a05
 80110e8:	0801643c 	.word	0x0801643c
 80110ec:	08018a1d 	.word	0x08018a1d
 80110f0:	08018876 	.word	0x08018876
 80110f4:	08018a2a 	.word	0x08018a2a
 80110f8:	08018a37 	.word	0x08018a37
 80110fc:	08018a3f 	.word	0x08018a3f
 8011100:	08018a50 	.word	0x08018a50
 8011104:	08018a5b 	.word	0x08018a5b
 8011108:	08018a64 	.word	0x08018a64
 801110c:	08018a6f 	.word	0x08018a6f
 8011110:	08018a83 	.word	0x08018a83
 8011114:	08018a9b 	.word	0x08018a9b
 8011118:	08018aaf 	.word	0x08018aaf
 801111c:	08018ac1 	.word	0x08018ac1
 8011120:	08018ad4 	.word	0x08018ad4
 8011124:	08018ae8 	.word	0x08018ae8
 8011128:	08018af8 	.word	0x08018af8
 801112c:	08018b08 	.word	0x08018b08
 8011130:	08018b13 	.word	0x08018b13
 8011134:	08018b23 	.word	0x08018b23
 8011138:	08018b33 	.word	0x08018b33
 801113c:	0801659c 	.word	0x0801659c
 8011140:	0801889b 	.word	0x0801889b
 8011144:	08013cf5 	.word	0x08013cf5

08011148 <mbedtls_x509_crt_verify_restartable>:
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy,
                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
 8011148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801114c:	469a      	mov	sl, r3
    int ret;
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
 801114e:	2300      	movs	r3, #0
{
 8011150:	b0b7      	sub	sp, #220	; 0xdc
 8011152:	4604      	mov	r4, r0
 8011154:	9107      	str	r1, [sp, #28]
        ver_chain->items[i].crt = NULL;
 8011156:	4618      	mov	r0, r3
        ver_chain->items[i].flags = -1;
 8011158:	f04f 31ff 	mov.w	r1, #4294967295
    *flags = 0;
 801115c:	9a41      	ldr	r2, [sp, #260]	; 0x104
{
 801115e:	9e40      	ldr	r6, [sp, #256]	; 0x100
    *flags = 0;
 8011160:	6013      	str	r3, [r2, #0]
        ver_chain->items[i].crt = NULL;
 8011162:	ad21      	add	r5, sp, #132	; 0x84
 8011164:	5158      	str	r0, [r3, r5]
        ver_chain->items[i].flags = -1;
 8011166:	18ea      	adds	r2, r5, r3
 8011168:	3308      	adds	r3, #8
    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
 801116a:	2b50      	cmp	r3, #80	; 0x50
        ver_chain->items[i].flags = -1;
 801116c:	6051      	str	r1, [r2, #4]
    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
 801116e:	d1f9      	bne.n	8011164 <mbedtls_x509_crt_verify_restartable+0x1c>
    ee_flags = 0;
    x509_crt_verify_chain_reset( &ver_chain );

    if( profile == NULL )
 8011170:	f1ba 0f00 	cmp.w	sl, #0
 8011174:	f000 818b 	beq.w	801148e <mbedtls_x509_crt_verify_restartable+0x346>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    /* check name if requested */
    if( cn != NULL )
 8011178:	2e00      	cmp	r6, #0
 801117a:	f000 80a3 	beq.w	80112c4 <mbedtls_x509_crt_verify_restartable+0x17c>
    size_t cn_len = strlen( cn );
 801117e:	4630      	mov	r0, r6
 8011180:	f7ef f852 	bl	8000228 <strlen>
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8011184:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    size_t cn_len = strlen( cn );
 8011188:	4607      	mov	r7, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 801118a:	069b      	lsls	r3, r3, #26
 801118c:	f140 8084 	bpl.w	8011298 <mbedtls_x509_crt_verify_restartable+0x150>
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
 8011190:	f104 08e8 	add.w	r8, r4, #232	; 0xe8
            if( x509_crt_check_cn( &cur->buf, cn, cn_len ) == 0 )
 8011194:	463a      	mov	r2, r7
 8011196:	4631      	mov	r1, r6
 8011198:	4640      	mov	r0, r8
 801119a:	f7ff fc33 	bl	8010a04 <x509_crt_check_cn>
 801119e:	2800      	cmp	r0, #0
 80111a0:	f000 8182 	beq.w	80114a8 <mbedtls_x509_crt_verify_restartable+0x360>
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
 80111a4:	f8d8 800c 	ldr.w	r8, [r8, #12]
 80111a8:	f1b8 0f00 	cmp.w	r8, #0
 80111ac:	d1f2      	bne.n	8011194 <mbedtls_x509_crt_verify_restartable+0x4c>
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 80111ae:	f04f 0b04 	mov.w	fp, #4
        x509_crt_verify_name( crt, cn, &ee_flags );

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 80111b2:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
 80111b6:	4630      	mov	r0, r6
 80111b8:	f7f7 f804 	bl	80081c4 <mbedtls_pk_get_type>
    if( pk_alg == MBEDTLS_PK_NONE )
 80111bc:	2800      	cmp	r0, #0
 80111be:	f000 8175 	beq.w	80114ac <mbedtls_x509_crt_verify_restartable+0x364>
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80111c2:	2301      	movs	r3, #1
 80111c4:	3801      	subs	r0, #1
 80111c6:	fa03 f000 	lsl.w	r0, r3, r0
 80111ca:	f8da 3004 	ldr.w	r3, [sl, #4]
 80111ce:	4218      	tst	r0, r3
 80111d0:	f000 816c 	beq.w	80114ac <mbedtls_x509_crt_verify_restartable+0x364>
 80111d4:	f10a 030c 	add.w	r3, sl, #12

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    if( x509_profile_check_key( profile, &crt->pk ) != 0 )
 80111d8:	4631      	mov	r1, r6
 80111da:	4618      	mov	r0, r3
 80111dc:	930a      	str	r3, [sp, #40]	; 0x28
 80111de:	f7ff fc5e 	bl	8010a9e <x509_profile_check_key.isra.3>
 80111e2:	b108      	cbz	r0, 80111e8 <mbedtls_x509_crt_verify_restartable+0xa0>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80111e4:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
    ver_chain->len = 0;
 80111e8:	2300      	movs	r3, #0
    child_is_trusted = 0;
 80111ea:	461f      	mov	r7, r3
    ver_chain->len = 0;
 80111ec:	9306      	str	r3, [sp, #24]
    self_cnt = 0;
 80111ee:	9308      	str	r3, [sp, #32]
        cur->crt = child;
 80111f0:	9a06      	ldr	r2, [sp, #24]
 80111f2:	ab21      	add	r3, sp, #132	; 0x84
 80111f4:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
        cur->flags = 0;
 80111f8:	2300      	movs	r3, #0
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
 80111fa:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
        cur->flags = 0;
 80111fe:	606b      	str	r3, [r5, #4]
        ver_chain->len++;
 8011200:	f102 0801 	add.w	r8, r2, #1
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8011204:	f7ff fb92 	bl	801092c <mbedtls_x509_time_is_past>
 8011208:	b108      	cbz	r0, 801120e <mbedtls_x509_crt_verify_restartable+0xc6>
            *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 801120a:	2301      	movs	r3, #1
 801120c:	606b      	str	r3, [r5, #4]
        if( mbedtls_x509_time_is_future( &child->valid_from ) )
 801120e:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8011212:	f7ff fb8d 	bl	8010930 <mbedtls_x509_time_is_future>
 8011216:	b118      	cbz	r0, 8011220 <mbedtls_x509_crt_verify_restartable+0xd8>
            *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8011218:	686b      	ldr	r3, [r5, #4]
 801121a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801121e:	606b      	str	r3, [r5, #4]
        if( child_is_trusted )
 8011220:	2f00      	cmp	r7, #0
 8011222:	f040 8102 	bne.w	801142a <mbedtls_x509_crt_verify_restartable+0x2e2>
        if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 8011226:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    if( md_alg == MBEDTLS_MD_NONE )
 801122a:	2b00      	cmp	r3, #0
 801122c:	f000 8141 	beq.w	80114b2 <mbedtls_x509_crt_verify_restartable+0x36a>
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8011230:	2201      	movs	r2, #1
 8011232:	3b01      	subs	r3, #1
 8011234:	fa02 f303 	lsl.w	r3, r2, r3
 8011238:	f8da 2000 	ldr.w	r2, [sl]
 801123c:	4213      	tst	r3, r2
 801123e:	f000 8138 	beq.w	80114b2 <mbedtls_x509_crt_verify_restartable+0x36a>
        if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
 8011242:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
    if( pk_alg == MBEDTLS_PK_NONE )
 8011246:	2b00      	cmp	r3, #0
 8011248:	f000 8138 	beq.w	80114bc <mbedtls_x509_crt_verify_restartable+0x374>
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 801124c:	2201      	movs	r2, #1
 801124e:	3b01      	subs	r3, #1
 8011250:	fa02 f303 	lsl.w	r3, r2, r3
 8011254:	f8da 2004 	ldr.w	r2, [sl, #4]
 8011258:	4213      	tst	r3, r2
 801125a:	f000 812f 	beq.w	80114bc <mbedtls_x509_crt_verify_restartable+0x374>
        if( ver_chain->len == 1 &&
 801125e:	f1b8 0f01 	cmp.w	r8, #1
 8011262:	d109      	bne.n	8011278 <mbedtls_x509_crt_verify_restartable+0x130>
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
 8011264:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8011268:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801126c:	f7ff fb79 	bl	8010962 <x509_name_cmp>
 8011270:	9e07      	ldr	r6, [sp, #28]
 8011272:	2800      	cmp	r0, #0
 8011274:	d136      	bne.n	80112e4 <mbedtls_x509_crt_verify_restartable+0x19c>
    for( cur = trust_ca; cur != NULL; cur = cur->next )
 8011276:	bb3e      	cbnz	r6, 80112c8 <mbedtls_x509_crt_verify_restartable+0x180>
        if( ver_chain->len == 1 &&
 8011278:	2701      	movs	r7, #1
 801127a:	9e07      	ldr	r6, [sp, #28]
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 801127c:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 8011280:	930d      	str	r3, [sp, #52]	; 0x34
            if( fallback_parent == NULL )
 8011282:	2300      	movs	r3, #0
 8011284:	9309      	str	r3, [sp, #36]	; 0x24
 8011286:	9305      	str	r3, [sp, #20]
    for( parent = candidates; parent != NULL; parent = parent->next )
 8011288:	bb96      	cbnz	r6, 80112f0 <mbedtls_x509_crt_verify_restartable+0x1a8>
        if( *parent != NULL || *parent_is_trusted == 0 )
 801128a:	9b05      	ldr	r3, [sp, #20]
 801128c:	2b00      	cmp	r3, #0
 801128e:	f000 80bf 	beq.w	8011410 <mbedtls_x509_crt_verify_restartable+0x2c8>
 8011292:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011296:	e093      	b.n	80113c0 <mbedtls_x509_crt_verify_restartable+0x278>
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
 8011298:	f8df 8244 	ldr.w	r8, [pc, #580]	; 80114e0 <mbedtls_x509_crt_verify_restartable+0x398>
        for( name = &crt->subject; name != NULL; name = name->next )
 801129c:	f104 096c 	add.w	r9, r4, #108	; 0x6c
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
 80112a0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80112a4:	2a03      	cmp	r2, #3
 80112a6:	d107      	bne.n	80112b8 <mbedtls_x509_crt_verify_restartable+0x170>
 80112a8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80112ac:	4640      	mov	r0, r8
 80112ae:	f000 fd77 	bl	8011da0 <memcmp>
 80112b2:	2800      	cmp	r0, #0
 80112b4:	f000 80ef 	beq.w	8011496 <mbedtls_x509_crt_verify_restartable+0x34e>
        for( name = &crt->subject; name != NULL; name = name->next )
 80112b8:	f8d9 9018 	ldr.w	r9, [r9, #24]
 80112bc:	f1b9 0f00 	cmp.w	r9, #0
 80112c0:	d1ee      	bne.n	80112a0 <mbedtls_x509_crt_verify_restartable+0x158>
 80112c2:	e774      	b.n	80111ae <mbedtls_x509_crt_verify_restartable+0x66>
    ee_flags = 0;
 80112c4:	46b3      	mov	fp, r6
 80112c6:	e774      	b.n	80111b2 <mbedtls_x509_crt_verify_restartable+0x6a>
        if( crt->raw.len == cur->raw.len &&
 80112c8:	6862      	ldr	r2, [r4, #4]
 80112ca:	6873      	ldr	r3, [r6, #4]
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d106      	bne.n	80112de <mbedtls_x509_crt_verify_restartable+0x196>
            memcmp( crt->raw.p, cur->raw.p, crt->raw.len ) == 0 )
 80112d0:	68b1      	ldr	r1, [r6, #8]
 80112d2:	68a0      	ldr	r0, [r4, #8]
 80112d4:	f000 fd64 	bl	8011da0 <memcmp>
        if( crt->raw.len == cur->raw.len &&
 80112d8:	2800      	cmp	r0, #0
 80112da:	f000 80a6 	beq.w	801142a <mbedtls_x509_crt_verify_restartable+0x2e2>
    for( cur = trust_ca; cur != NULL; cur = cur->next )
 80112de:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 80112e2:	e7c8      	b.n	8011276 <mbedtls_x509_crt_verify_restartable+0x12e>
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
 80112e4:	4647      	mov	r7, r8
 80112e6:	e7c9      	b.n	801127c <mbedtls_x509_crt_verify_restartable+0x134>
 80112e8:	f8d4 6130 	ldr.w	r6, [r4, #304]	; 0x130
        *parent_is_trusted = 0;
 80112ec:	9f05      	ldr	r7, [sp, #20]
 80112ee:	e7c8      	b.n	8011282 <mbedtls_x509_crt_verify_restartable+0x13a>
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 80112f0:	f106 016c 	add.w	r1, r6, #108	; 0x6c
 80112f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80112f6:	f7ff fb34 	bl	8010962 <x509_name_cmp>
 80112fa:	2800      	cmp	r0, #0
 80112fc:	d156      	bne.n	80113ac <mbedtls_x509_crt_verify_restartable+0x264>
    if( top && parent->version < 3 )
 80112fe:	2f00      	cmp	r7, #0
 8011300:	f000 80e1 	beq.w	80114c6 <mbedtls_x509_crt_verify_restartable+0x37e>
 8011304:	69b3      	ldr	r3, [r6, #24]
 8011306:	2b02      	cmp	r3, #2
 8011308:	f300 80dd 	bgt.w	80114c6 <mbedtls_x509_crt_verify_restartable+0x37e>
        if( parent->max_pathlen > 0 &&
 801130c:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
 8011310:	2b00      	cmp	r3, #0
 8011312:	dd04      	ble.n	801131e <mbedtls_x509_crt_verify_restartable+0x1d6>
            (size_t) parent->max_pathlen < 1 + path_cnt - self_cnt )
 8011314:	9a08      	ldr	r2, [sp, #32]
 8011316:	eba8 0202 	sub.w	r2, r8, r2
        if( parent->max_pathlen > 0 &&
 801131a:	4293      	cmp	r3, r2
 801131c:	d346      	bcc.n	80113ac <mbedtls_x509_crt_verify_restartable+0x264>
    md_info = mbedtls_md_info_from_type( child->sig_md );
 801131e:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
 8011322:	f7f6 fb5d 	bl	80079e0 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8011326:	ab11      	add	r3, sp, #68	; 0x44
 8011328:	6922      	ldr	r2, [r4, #16]
 801132a:	6961      	ldr	r1, [r4, #20]
    md_info = mbedtls_md_info_from_type( child->sig_md );
 801132c:	900b      	str	r0, [sp, #44]	; 0x2c
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 801132e:	f7f6 fba3 	bl	8007a78 <mbedtls_md>
 8011332:	b198      	cbz	r0, 801135c <mbedtls_x509_crt_verify_restartable+0x214>
        if( top && ! signature_is_good )
 8011334:	2f00      	cmp	r7, #0
 8011336:	d139      	bne.n	80113ac <mbedtls_x509_crt_verify_restartable+0x264>
        return( -1 );
 8011338:	f04f 30ff 	mov.w	r0, #4294967295
        signature_is_good = ret == 0;
 801133c:	fab0 f980 	clz	r9, r0
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
 8011340:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
        signature_is_good = ret == 0;
 8011344:	ea4f 1959 	mov.w	r9, r9, lsr #5
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
 8011348:	f7ff faf0 	bl	801092c <mbedtls_x509_time_is_past>
 801134c:	2800      	cmp	r0, #0
 801134e:	d030      	beq.n	80113b2 <mbedtls_x509_crt_verify_restartable+0x26a>
            if( fallback_parent == NULL )
 8011350:	9b05      	ldr	r3, [sp, #20]
 8011352:	bb5b      	cbnz	r3, 80113ac <mbedtls_x509_crt_verify_restartable+0x264>
        signature_is_good = ret == 0;
 8011354:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
            if( fallback_parent == NULL )
 8011358:	9605      	str	r6, [sp, #20]
 801135a:	e027      	b.n	80113ac <mbedtls_x509_crt_verify_restartable+0x264>
    if( ! mbedtls_pk_can_do( &parent->pk, child->sig_pk ) )
 801135c:	f106 09bc 	add.w	r9, r6, #188	; 0xbc
 8011360:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 8011364:	4648      	mov	r0, r9
 8011366:	f7f6 fe51 	bl	800800c <mbedtls_pk_can_do>
 801136a:	2800      	cmp	r0, #0
 801136c:	d0e2      	beq.n	8011334 <mbedtls_x509_crt_verify_restartable+0x1ec>
    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 801136e:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 8011372:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8011376:	930c      	str	r3, [sp, #48]	; 0x30
 8011378:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
                child->sig_md, hash, mbedtls_md_get_size( md_info ),
 801137c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 801137e:	910f      	str	r1, [sp, #60]	; 0x3c
 8011380:	930e      	str	r3, [sp, #56]	; 0x38
                child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8011382:	f7f6 fc51 	bl	8007c28 <mbedtls_md_get_size>
    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8011386:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 801138a:	ab11      	add	r3, sp, #68	; 0x44
 801138c:	9203      	str	r2, [sp, #12]
 801138e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8011392:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011394:	9202      	str	r2, [sp, #8]
 8011396:	9001      	str	r0, [sp, #4]
 8011398:	9300      	str	r3, [sp, #0]
 801139a:	464a      	mov	r2, r9
 801139c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801139e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80113a0:	f7f6 fe74 	bl	800808c <mbedtls_pk_verify_ext>
        if( top && ! signature_is_good )
 80113a4:	2f00      	cmp	r7, #0
 80113a6:	d0c9      	beq.n	801133c <mbedtls_x509_crt_verify_restartable+0x1f4>
 80113a8:	2800      	cmp	r0, #0
 80113aa:	d0c7      	beq.n	801133c <mbedtls_x509_crt_verify_restartable+0x1f4>
    for( parent = candidates; parent != NULL; parent = parent->next )
 80113ac:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 80113b0:	e76a      	b.n	8011288 <mbedtls_x509_crt_verify_restartable+0x140>
            mbedtls_x509_time_is_future( &parent->valid_from ) )
 80113b2:	f106 008c 	add.w	r0, r6, #140	; 0x8c
 80113b6:	f7ff fabb 	bl	8010930 <mbedtls_x509_time_is_future>
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
 80113ba:	2800      	cmp	r0, #0
 80113bc:	d1c8      	bne.n	8011350 <mbedtls_x509_crt_verify_restartable+0x208>
 80113be:	9605      	str	r6, [sp, #20]
        if( ver_chain->len != 1 &&
 80113c0:	f1b8 0f01 	cmp.w	r8, #1
 80113c4:	d00d      	beq.n	80113e2 <mbedtls_x509_crt_verify_restartable+0x29a>
            x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 80113c6:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 80113ca:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80113ce:	f7ff fac8 	bl	8010962 <x509_name_cmp>
        if( ver_chain->len != 1 &&
 80113d2:	b910      	cbnz	r0, 80113da <mbedtls_x509_crt_verify_restartable+0x292>
            self_cnt++;
 80113d4:	9b08      	ldr	r3, [sp, #32]
 80113d6:	3301      	adds	r3, #1
 80113d8:	9308      	str	r3, [sp, #32]
        if( ! parent_is_trusted &&
 80113da:	b917      	cbnz	r7, 80113e2 <mbedtls_x509_crt_verify_restartable+0x29a>
 80113dc:	f1b8 0f08 	cmp.w	r8, #8
 80113e0:	d857      	bhi.n	8011492 <mbedtls_x509_crt_verify_restartable+0x34a>
        if( ! signature_is_good )
 80113e2:	f1b9 0f00 	cmp.w	r9, #0
 80113e6:	d103      	bne.n	80113f0 <mbedtls_x509_crt_verify_restartable+0x2a8>
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80113e8:	686b      	ldr	r3, [r5, #4]
 80113ea:	f043 0308 	orr.w	r3, r3, #8
 80113ee:	606b      	str	r3, [r5, #4]
        if( x509_profile_check_key( profile, &parent->pk ) != 0 )
 80113f0:	9b05      	ldr	r3, [sp, #20]
 80113f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80113f4:	f103 01bc 	add.w	r1, r3, #188	; 0xbc
 80113f8:	f7ff fb51 	bl	8010a9e <x509_profile_check_key.isra.3>
 80113fc:	b118      	cbz	r0, 8011406 <mbedtls_x509_crt_verify_restartable+0x2be>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80113fe:	686b      	ldr	r3, [r5, #4]
 8011400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011404:	606b      	str	r3, [r5, #4]
 8011406:	3508      	adds	r5, #8
        ver_chain->len++;
 8011408:	f8cd 8018 	str.w	r8, [sp, #24]
 801140c:	9c05      	ldr	r4, [sp, #20]
 801140e:	e6ef      	b.n	80111f0 <mbedtls_x509_crt_verify_restartable+0xa8>
        if( *parent != NULL || *parent_is_trusted == 0 )
 8011410:	2f00      	cmp	r7, #0
 8011412:	f47f af69 	bne.w	80112e8 <mbedtls_x509_crt_verify_restartable+0x1a0>
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8011416:	9b06      	ldr	r3, [sp, #24]
 8011418:	aa36      	add	r2, sp, #216	; 0xd8
 801141a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801141e:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8011422:	f042 0208 	orr.w	r2, r2, #8
 8011426:	f843 2c50 	str.w	r2, [r3, #-80]

    if( ret != 0 )
        goto exit;

    /* Merge end-entity flags */
    ver_chain.items[0].flags |= ee_flags;
 801142a:	9822      	ldr	r0, [sp, #136]	; 0x88
 801142c:	ab36      	add	r3, sp, #216	; 0xd8
 801142e:	ea40 000b 	orr.w	r0, r0, fp
 8011432:	eb03 04c8 	add.w	r4, r3, r8, lsl #3
 8011436:	9022      	str	r0, [sp, #136]	; 0x88
 8011438:	3c58      	subs	r4, #88	; 0x58
        cur_flags = cur->flags;
 801143a:	6823      	ldr	r3, [r4, #0]
        cur = &ver_chain->items[i-1];
 801143c:	f108 38ff 	add.w	r8, r8, #4294967295
        cur_flags = cur->flags;
 8011440:	9311      	str	r3, [sp, #68]	; 0x44
        if( NULL != f_vrfy )
 8011442:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8011444:	b973      	cbnz	r3, 8011464 <mbedtls_x509_crt_verify_restartable+0x31c>
        *flags |= cur_flags;
 8011446:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011448:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	3c08      	subs	r4, #8
 801144e:	4313      	orrs	r3, r2
 8011450:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011452:	6013      	str	r3, [r2, #0]
    for( i = ver_chain->len; i != 0; --i )
 8011454:	f1b8 0f00 	cmp.w	r8, #0
 8011458:	d1ef      	bne.n	801143a <mbedtls_x509_crt_verify_restartable+0x2f2>
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
 801145a:	2b00      	cmp	r3, #0
 801145c:	481d      	ldr	r0, [pc, #116]	; (80114d4 <mbedtls_x509_crt_verify_restartable+0x38c>)
 801145e:	bf08      	it	eq
 8011460:	2000      	moveq	r0, #0
 8011462:	e011      	b.n	8011488 <mbedtls_x509_crt_verify_restartable+0x340>
            if( ( ret = f_vrfy( p_vrfy, cur->crt, (int) i-1, &cur_flags ) ) != 0 )
 8011464:	ab11      	add	r3, sp, #68	; 0x44
 8011466:	4642      	mov	r2, r8
 8011468:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801146c:	9843      	ldr	r0, [sp, #268]	; 0x10c
 801146e:	9d42      	ldr	r5, [sp, #264]	; 0x108
 8011470:	47a8      	blx	r5
 8011472:	2800      	cmp	r0, #0
 8011474:	d0e7      	beq.n	8011446 <mbedtls_x509_crt_verify_restartable+0x2fe>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 8011476:	4b18      	ldr	r3, [pc, #96]	; (80114d8 <mbedtls_x509_crt_verify_restartable+0x390>)
 8011478:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 801147c:	bf08      	it	eq
 801147e:	4618      	moveq	r0, r3
        *flags = (uint32_t) -1;
 8011480:	f04f 33ff 	mov.w	r3, #4294967295
 8011484:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011486:	6013      	str	r3, [r2, #0]

    return( 0 );
}
 8011488:	b037      	add	sp, #220	; 0xdc
 801148a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 801148e:	4813      	ldr	r0, [pc, #76]	; (80114dc <mbedtls_x509_crt_verify_restartable+0x394>)
 8011490:	e7f6      	b.n	8011480 <mbedtls_x509_crt_verify_restartable+0x338>
            return( MBEDTLS_ERR_X509_FATAL_ERROR );
 8011492:	4811      	ldr	r0, [pc, #68]	; (80114d8 <mbedtls_x509_crt_verify_restartable+0x390>)
 8011494:	e7f4      	b.n	8011480 <mbedtls_x509_crt_verify_restartable+0x338>
                x509_crt_check_cn( &name->val, cn, cn_len ) == 0 )
 8011496:	463a      	mov	r2, r7
 8011498:	4631      	mov	r1, r6
 801149a:	f109 000c 	add.w	r0, r9, #12
 801149e:	f7ff fab1 	bl	8010a04 <x509_crt_check_cn>
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
 80114a2:	2800      	cmp	r0, #0
 80114a4:	f47f af08 	bne.w	80112b8 <mbedtls_x509_crt_verify_restartable+0x170>
    ee_flags = 0;
 80114a8:	4683      	mov	fp, r0
 80114aa:	e682      	b.n	80111b2 <mbedtls_x509_crt_verify_restartable+0x6a>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 80114ac:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 80114b0:	e690      	b.n	80111d4 <mbedtls_x509_crt_verify_restartable+0x8c>
            *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 80114b2:	686b      	ldr	r3, [r5, #4]
 80114b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80114b8:	606b      	str	r3, [r5, #4]
 80114ba:	e6c2      	b.n	8011242 <mbedtls_x509_crt_verify_restartable+0xfa>
            *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 80114bc:	686b      	ldr	r3, [r5, #4]
 80114be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80114c2:	606b      	str	r3, [r5, #4]
 80114c4:	e6cb      	b.n	801125e <mbedtls_x509_crt_verify_restartable+0x116>
    if( need_ca_bit && ! parent->ca_istrue )
 80114c6:	f8d6 30fc 	ldr.w	r3, [r6, #252]	; 0xfc
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	f47f af1e 	bne.w	801130c <mbedtls_x509_crt_verify_restartable+0x1c4>
 80114d0:	e76c      	b.n	80113ac <mbedtls_x509_crt_verify_restartable+0x264>
 80114d2:	bf00      	nop
 80114d4:	ffffd900 	.word	0xffffd900
 80114d8:	ffffd000 	.word	0xffffd000
 80114dc:	ffffd800 	.word	0xffffd800
 80114e0:	08016790 	.word	0x08016790

080114e4 <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 80114e4:	f44f 729a 	mov.w	r2, #308	; 0x134
 80114e8:	2100      	movs	r1, #0
 80114ea:	f000 bc8d 	b.w	8011e08 <memset>

080114ee <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 80114ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 80114f0:	4606      	mov	r6, r0
 80114f2:	b368      	cbz	r0, 8011550 <mbedtls_x509_crt_free+0x62>
 80114f4:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
 80114f6:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80114fa:	f7f6 fd5a 	bl	8007fb2 <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
 80114fe:	6e65      	ldr	r5, [r4, #100]	; 0x64
        while( name_cur != NULL )
 8011500:	bb3d      	cbnz	r5, 8011552 <mbedtls_x509_crt_free+0x64>
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
 8011502:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        while( name_cur != NULL )
 8011506:	bb75      	cbnz	r5, 8011566 <mbedtls_x509_crt_free+0x78>
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
 8011508:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
        while( seq_cur != NULL )
 801150c:	2d00      	cmp	r5, #0
 801150e:	d134      	bne.n	801157a <mbedtls_x509_crt_free+0x8c>
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
 8011510:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
 8011514:	2d00      	cmp	r5, #0
 8011516:	d13a      	bne.n	801158e <mbedtls_x509_crt_free+0xa0>
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
 8011518:	68a0      	ldr	r0, [r4, #8]
 801151a:	b128      	cbz	r0, 8011528 <mbedtls_x509_crt_free+0x3a>
        {
            mbedtls_platform_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 801151c:	6861      	ldr	r1, [r4, #4]
 801151e:	f7f6 ffff 	bl	8008520 <mbedtls_platform_zeroize>
            mbedtls_free( cert_cur->raw.p );
 8011522:	68a0      	ldr	r0, [r4, #8]
 8011524:	f000 fc34 	bl	8011d90 <free>
        }

        cert_cur = cert_cur->next;
 8011528:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
 801152c:	2c00      	cmp	r4, #0
 801152e:	d1e2      	bne.n	80114f6 <mbedtls_x509_crt_free+0x8>
 8011530:	4634      	mov	r4, r6
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 8011532:	f44f 719a 	mov.w	r1, #308	; 0x134
 8011536:	4620      	mov	r0, r4
        cert_cur = cert_cur->next;
 8011538:	f8d4 5130 	ldr.w	r5, [r4, #304]	; 0x130
        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 801153c:	f7f6 fff0 	bl	8008520 <mbedtls_platform_zeroize>
        if( cert_prv != crt )
 8011540:	42b4      	cmp	r4, r6
 8011542:	d002      	beq.n	801154a <mbedtls_x509_crt_free+0x5c>
            mbedtls_free( cert_prv );
 8011544:	4620      	mov	r0, r4
 8011546:	f000 fc23 	bl	8011d90 <free>
    }
    while( cert_cur != NULL );
 801154a:	462c      	mov	r4, r5
 801154c:	2d00      	cmp	r5, #0
 801154e:	d1f0      	bne.n	8011532 <mbedtls_x509_crt_free+0x44>
 8011550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8011552:	4628      	mov	r0, r5
            name_cur = name_cur->next;
 8011554:	69af      	ldr	r7, [r5, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8011556:	2120      	movs	r1, #32
 8011558:	f7f6 ffe2 	bl	8008520 <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
 801155c:	4628      	mov	r0, r5
 801155e:	f000 fc17 	bl	8011d90 <free>
            name_cur = name_cur->next;
 8011562:	463d      	mov	r5, r7
 8011564:	e7cc      	b.n	8011500 <mbedtls_x509_crt_free+0x12>
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8011566:	4628      	mov	r0, r5
            name_cur = name_cur->next;
 8011568:	69af      	ldr	r7, [r5, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 801156a:	2120      	movs	r1, #32
 801156c:	f7f6 ffd8 	bl	8008520 <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
 8011570:	4628      	mov	r0, r5
 8011572:	f000 fc0d 	bl	8011d90 <free>
            name_cur = name_cur->next;
 8011576:	463d      	mov	r5, r7
 8011578:	e7c5      	b.n	8011506 <mbedtls_x509_crt_free+0x18>
            mbedtls_platform_zeroize( seq_prv,
 801157a:	4628      	mov	r0, r5
            seq_cur = seq_cur->next;
 801157c:	68ef      	ldr	r7, [r5, #12]
            mbedtls_platform_zeroize( seq_prv,
 801157e:	2110      	movs	r1, #16
 8011580:	f7f6 ffce 	bl	8008520 <mbedtls_platform_zeroize>
            mbedtls_free( seq_prv );
 8011584:	4628      	mov	r0, r5
 8011586:	f000 fc03 	bl	8011d90 <free>
            seq_cur = seq_cur->next;
 801158a:	463d      	mov	r5, r7
 801158c:	e7be      	b.n	801150c <mbedtls_x509_crt_free+0x1e>
            mbedtls_platform_zeroize( seq_prv,
 801158e:	4628      	mov	r0, r5
            seq_cur = seq_cur->next;
 8011590:	68ef      	ldr	r7, [r5, #12]
            mbedtls_platform_zeroize( seq_prv,
 8011592:	2110      	movs	r1, #16
 8011594:	f7f6 ffc4 	bl	8008520 <mbedtls_platform_zeroize>
            mbedtls_free( seq_prv );
 8011598:	4628      	mov	r0, r5
 801159a:	f000 fbf9 	bl	8011d90 <free>
            seq_cur = seq_cur->next;
 801159e:	463d      	mov	r5, r7
 80115a0:	e7b8      	b.n	8011514 <mbedtls_x509_crt_free+0x26>
	...

080115a4 <mbedtls_x509_crt_parse_der>:
{
 80115a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115a8:	460f      	mov	r7, r1
 80115aa:	b09b      	sub	sp, #108	; 0x6c
 80115ac:	4615      	mov	r5, r2
    if( crt == NULL || buf == NULL )
 80115ae:	4682      	mov	sl, r0
 80115b0:	2800      	cmp	r0, #0
 80115b2:	f000 82f8 	beq.w	8011ba6 <mbedtls_x509_crt_parse_der+0x602>
 80115b6:	2900      	cmp	r1, #0
 80115b8:	f000 82f5 	beq.w	8011ba6 <mbedtls_x509_crt_parse_der+0x602>
 80115bc:	4604      	mov	r4, r0
 80115be:	f04f 0900 	mov.w	r9, #0
    while( crt->version != 0 && crt->next != NULL )
 80115c2:	69a3      	ldr	r3, [r4, #24]
 80115c4:	b1a3      	cbz	r3, 80115f0 <mbedtls_x509_crt_parse_der+0x4c>
 80115c6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80115ca:	46a1      	mov	r9, r4
 80115cc:	b94b      	cbnz	r3, 80115e2 <mbedtls_x509_crt_parse_der+0x3e>
        crt->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 80115ce:	f44f 719a 	mov.w	r1, #308	; 0x134
 80115d2:	2001      	movs	r0, #1
 80115d4:	f000 fba2 	bl	8011d1c <calloc>
 80115d8:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
        if( crt->next == NULL )
 80115dc:	b918      	cbnz	r0, 80115e6 <mbedtls_x509_crt_parse_der+0x42>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80115de:	4dac      	ldr	r5, [pc, #688]	; (8011890 <mbedtls_x509_crt_parse_der+0x2ec>)
 80115e0:	e2dd      	b.n	8011b9e <mbedtls_x509_crt_parse_der+0x5fa>
 80115e2:	461c      	mov	r4, r3
 80115e4:	e7ed      	b.n	80115c2 <mbedtls_x509_crt_parse_der+0x1e>
        mbedtls_x509_crt_init( crt->next );
 80115e6:	f7ff ff7d 	bl	80114e4 <mbedtls_x509_crt_init>
        crt = crt->next;
 80115ea:	46a1      	mov	r9, r4
 80115ec:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 80115f0:	2300      	movs	r3, #0
 80115f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80115f4:	930c      	str	r3, [sp, #48]	; 0x30
 80115f6:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 80115f8:	930e      	str	r3, [sp, #56]	; 0x38
 80115fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80115fc:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 80115fe:	9311      	str	r3, [sp, #68]	; 0x44
 8011600:	9312      	str	r3, [sp, #72]	; 0x48
 8011602:	9313      	str	r3, [sp, #76]	; 0x4c
    if( crt == NULL || buf == NULL )
 8011604:	2c00      	cmp	r4, #0
 8011606:	f000 82d4 	beq.w	8011bb2 <mbedtls_x509_crt_parse_der+0x60e>
    len = buflen;
 801160a:	ae1a      	add	r6, sp, #104	; 0x68
 801160c:	f846 5d54 	str.w	r5, [r6, #-84]!
    end = p + len;
 8011610:	eb07 0805 	add.w	r8, r7, r5
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8011614:	2330      	movs	r3, #48	; 0x30
 8011616:	4632      	mov	r2, r6
 8011618:	4641      	mov	r1, r8
 801161a:	a806      	add	r0, sp, #24
    p = (unsigned char*) buf;
 801161c:	9706      	str	r7, [sp, #24]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801161e:	f7f2 fcab 	bl	8003f78 <mbedtls_asn1_get_tag>
 8011622:	b180      	cbz	r0, 8011646 <mbedtls_x509_crt_parse_der+0xa2>
        mbedtls_x509_crt_free( crt );
 8011624:	4620      	mov	r0, r4
 8011626:	f7ff ff62 	bl	80114ee <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 801162a:	4d9a      	ldr	r5, [pc, #616]	; (8011894 <mbedtls_x509_crt_parse_der+0x2f0>)
        if( prev )
 801162c:	f1b9 0f00 	cmp.w	r9, #0
 8011630:	d002      	beq.n	8011638 <mbedtls_x509_crt_parse_der+0x94>
            prev->next = NULL;
 8011632:	2300      	movs	r3, #0
 8011634:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130
        if( crt != chain )
 8011638:	4554      	cmp	r4, sl
 801163a:	f000 82b0 	beq.w	8011b9e <mbedtls_x509_crt_parse_der+0x5fa>
            mbedtls_free( crt );
 801163e:	4620      	mov	r0, r4
 8011640:	f000 fba6 	bl	8011d90 <free>
 8011644:	e2ab      	b.n	8011b9e <mbedtls_x509_crt_parse_der+0x5fa>
    if( len > (size_t) ( end - p ) )
 8011646:	9d06      	ldr	r5, [sp, #24]
 8011648:	f8dd b014 	ldr.w	fp, [sp, #20]
 801164c:	eba8 0805 	sub.w	r8, r8, r5
 8011650:	45d8      	cmp	r8, fp
 8011652:	d204      	bcs.n	801165e <mbedtls_x509_crt_parse_der+0xba>
        mbedtls_x509_crt_free( crt );
 8011654:	4620      	mov	r0, r4
 8011656:	f7ff ff4a 	bl	80114ee <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 801165a:	4d8f      	ldr	r5, [pc, #572]	; (8011898 <mbedtls_x509_crt_parse_der+0x2f4>)
 801165c:	e7e6      	b.n	801162c <mbedtls_x509_crt_parse_der+0x88>
    crt_end = p + len;
 801165e:	445d      	add	r5, fp
    crt->raw.len = crt_end - buf;
 8011660:	1bed      	subs	r5, r5, r7
 8011662:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
 8011664:	4629      	mov	r1, r5
 8011666:	2001      	movs	r0, #1
 8011668:	f000 fb58 	bl	8011d1c <calloc>
 801166c:	4680      	mov	r8, r0
 801166e:	9006      	str	r0, [sp, #24]
 8011670:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 8011672:	2800      	cmp	r0, #0
 8011674:	f000 82b0 	beq.w	8011bd8 <mbedtls_x509_crt_parse_der+0x634>
    memcpy( p, buf, crt->raw.len );
 8011678:	4639      	mov	r1, r7
 801167a:	462a      	mov	r2, r5
 801167c:	f000 fb9f 	bl	8011dbe <memcpy>
    p += crt->raw.len - len;
 8011680:	eba5 030b 	sub.w	r3, r5, fp
 8011684:	4443      	add	r3, r8
    end = crt_end = p + len;
 8011686:	eb08 0705 	add.w	r7, r8, r5
    p += crt->raw.len - len;
 801168a:	9306      	str	r3, [sp, #24]
    crt->tbs.p = p;
 801168c:	6163      	str	r3, [r4, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801168e:	4632      	mov	r2, r6
 8011690:	2330      	movs	r3, #48	; 0x30
 8011692:	4639      	mov	r1, r7
 8011694:	a806      	add	r0, sp, #24
 8011696:	f7f2 fc6f 	bl	8003f78 <mbedtls_asn1_get_tag>
 801169a:	4680      	mov	r8, r0
 801169c:	b140      	cbz	r0, 80116b0 <mbedtls_x509_crt_parse_der+0x10c>
        mbedtls_x509_crt_free( crt );
 801169e:	4620      	mov	r0, r4
 80116a0:	f7ff ff25 	bl	80114ee <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 80116a4:	f5a8 5506 	sub.w	r5, r8, #8576	; 0x2180
    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 80116a8:	2d00      	cmp	r5, #0
 80116aa:	f000 8278 	beq.w	8011b9e <mbedtls_x509_crt_parse_der+0x5fa>
 80116ae:	e7bd      	b.n	801162c <mbedtls_x509_crt_parse_der+0x88>
    end = p + len;
 80116b0:	9b05      	ldr	r3, [sp, #20]
 80116b2:	9e06      	ldr	r6, [sp, #24]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80116b4:	aa17      	add	r2, sp, #92	; 0x5c
    end = p + len;
 80116b6:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
 80116b8:	6963      	ldr	r3, [r4, #20]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80116ba:	4631      	mov	r1, r6
    crt->tbs.len = end - crt->tbs.p;
 80116bc:	1af3      	subs	r3, r6, r3
 80116be:	6123      	str	r3, [r4, #16]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80116c0:	a806      	add	r0, sp, #24
 80116c2:	23a0      	movs	r3, #160	; 0xa0
 80116c4:	f7f2 fc58 	bl	8003f78 <mbedtls_asn1_get_tag>
 80116c8:	4605      	mov	r5, r0
 80116ca:	b1f0      	cbz	r0, 801170a <mbedtls_x509_crt_parse_der+0x166>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80116cc:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80116d0:	d129      	bne.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
            *ver = 0;
 80116d2:	f8c4 8018 	str.w	r8, [r4, #24]
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 80116d6:	f104 021c 	add.w	r2, r4, #28
 80116da:	4631      	mov	r1, r6
 80116dc:	a806      	add	r0, sp, #24
 80116de:	f7fe fe59 	bl	8010394 <mbedtls_x509_get_serial>
 80116e2:	4605      	mov	r5, r0
 80116e4:	b9f8      	cbnz	r0, 8011726 <mbedtls_x509_crt_parse_der+0x182>
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 80116e6:	f104 0828 	add.w	r8, r4, #40	; 0x28
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 80116ea:	ab0b      	add	r3, sp, #44	; 0x2c
 80116ec:	4642      	mov	r2, r8
 80116ee:	4631      	mov	r1, r6
 80116f0:	a806      	add	r0, sp, #24
 80116f2:	f7fe fe77 	bl	80103e4 <mbedtls_x509_get_alg>
 80116f6:	4605      	mov	r5, r0
 80116f8:	b9a8      	cbnz	r0, 8011726 <mbedtls_x509_crt_parse_der+0x182>
    if( crt->version < 0 || crt->version > 2 )
 80116fa:	69a3      	ldr	r3, [r4, #24]
 80116fc:	2b02      	cmp	r3, #2
 80116fe:	d91b      	bls.n	8011738 <mbedtls_x509_crt_parse_der+0x194>
        mbedtls_x509_crt_free( crt );
 8011700:	4620      	mov	r0, r4
 8011702:	f7ff fef4 	bl	80114ee <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 8011706:	4d65      	ldr	r5, [pc, #404]	; (801189c <mbedtls_x509_crt_parse_der+0x2f8>)
 8011708:	e790      	b.n	801162c <mbedtls_x509_crt_parse_der+0x88>
    end = *p + len;
 801170a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801170c:	9b06      	ldr	r3, [sp, #24]
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 801170e:	a806      	add	r0, sp, #24
    end = *p + len;
 8011710:	eb03 0802 	add.w	r8, r3, r2
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 8011714:	4641      	mov	r1, r8
 8011716:	f104 0218 	add.w	r2, r4, #24
 801171a:	f7f2 fc59 	bl	8003fd0 <mbedtls_asn1_get_int>
 801171e:	b130      	cbz	r0, 801172e <mbedtls_x509_crt_parse_der+0x18a>
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 8011720:	f5b0 5508 	subs.w	r5, r0, #8704	; 0x2200
 8011724:	d0d7      	beq.n	80116d6 <mbedtls_x509_crt_parse_der+0x132>
        mbedtls_x509_crt_free( crt );
 8011726:	4620      	mov	r0, r4
 8011728:	f7ff fee1 	bl	80114ee <mbedtls_x509_crt_free>
 801172c:	e77e      	b.n	801162c <mbedtls_x509_crt_parse_der+0x88>
    if( *p != end )
 801172e:	9b06      	ldr	r3, [sp, #24]
 8011730:	4598      	cmp	r8, r3
 8011732:	d0d0      	beq.n	80116d6 <mbedtls_x509_crt_parse_der+0x132>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
 8011734:	4d5a      	ldr	r5, [pc, #360]	; (80118a0 <mbedtls_x509_crt_parse_der+0x2fc>)
 8011736:	e7f6      	b.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
    crt->version++;
 8011738:	3301      	adds	r3, #1
 801173a:	61a3      	str	r3, [r4, #24]
    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 801173c:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 8011740:	9300      	str	r3, [sp, #0]
 8011742:	f504 7294 	add.w	r2, r4, #296	; 0x128
 8011746:	f204 1329 	addw	r3, r4, #297	; 0x129
 801174a:	a90b      	add	r1, sp, #44	; 0x2c
 801174c:	4640      	mov	r0, r8
 801174e:	f7fe ff9d 	bl	801068c <mbedtls_x509_get_sig_alg>
 8011752:	4605      	mov	r5, r0
 8011754:	2800      	cmp	r0, #0
 8011756:	d1e6      	bne.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
    crt->issuer_raw.p = p;
 8011758:	9b06      	ldr	r3, [sp, #24]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801175a:	aa05      	add	r2, sp, #20
    crt->issuer_raw.p = p;
 801175c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801175e:	4631      	mov	r1, r6
 8011760:	2330      	movs	r3, #48	; 0x30
 8011762:	a806      	add	r0, sp, #24
 8011764:	f7f2 fc08 	bl	8003f78 <mbedtls_asn1_get_tag>
 8011768:	4605      	mov	r5, r0
 801176a:	b128      	cbz	r0, 8011778 <mbedtls_x509_crt_parse_der+0x1d4>
        mbedtls_x509_crt_free( crt );
 801176c:	4620      	mov	r0, r4
 801176e:	f7ff febe 	bl	80114ee <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8011772:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
 8011776:	e797      	b.n	80116a8 <mbedtls_x509_crt_parse_der+0x104>
    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 8011778:	9b05      	ldr	r3, [sp, #20]
 801177a:	9906      	ldr	r1, [sp, #24]
 801177c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8011780:	4419      	add	r1, r3
 8011782:	a806      	add	r0, sp, #24
 8011784:	f7fe fe36 	bl	80103f4 <mbedtls_x509_get_name>
 8011788:	4605      	mov	r5, r0
 801178a:	2800      	cmp	r0, #0
 801178c:	d1cb      	bne.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
    crt->issuer_raw.len = p - crt->issuer_raw.p;
 801178e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8011790:	9b06      	ldr	r3, [sp, #24]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8011792:	4631      	mov	r1, r6
    crt->issuer_raw.len = p - crt->issuer_raw.p;
 8011794:	1a9b      	subs	r3, r3, r2
 8011796:	63a3      	str	r3, [r4, #56]	; 0x38
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8011798:	aa17      	add	r2, sp, #92	; 0x5c
 801179a:	2330      	movs	r3, #48	; 0x30
 801179c:	a806      	add	r0, sp, #24
 801179e:	f7f2 fbeb 	bl	8003f78 <mbedtls_asn1_get_tag>
 80117a2:	2800      	cmp	r0, #0
 80117a4:	d057      	beq.n	8011856 <mbedtls_x509_crt_parse_der+0x2b2>
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 80117a6:	f5b0 5510 	subs.w	r5, r0, #9216	; 0x2400
 80117aa:	d1bc      	bne.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
    crt->subject_raw.p = p;
 80117ac:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 80117b0:	f858 3d50 	ldr.w	r3, [r8, #-80]!
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80117b4:	aa05      	add	r2, sp, #20
    crt->subject_raw.p = p;
 80117b6:	64a3      	str	r3, [r4, #72]	; 0x48
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80117b8:	4631      	mov	r1, r6
 80117ba:	2330      	movs	r3, #48	; 0x30
 80117bc:	4640      	mov	r0, r8
 80117be:	f7f2 fbdb 	bl	8003f78 <mbedtls_asn1_get_tag>
 80117c2:	4605      	mov	r5, r0
 80117c4:	2800      	cmp	r0, #0
 80117c6:	d1d1      	bne.n	801176c <mbedtls_x509_crt_parse_der+0x1c8>
    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 80117c8:	9b05      	ldr	r3, [sp, #20]
 80117ca:	b14b      	cbz	r3, 80117e0 <mbedtls_x509_crt_parse_der+0x23c>
 80117cc:	9906      	ldr	r1, [sp, #24]
 80117ce:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 80117d2:	4419      	add	r1, r3
 80117d4:	4640      	mov	r0, r8
 80117d6:	f7fe fe0d 	bl	80103f4 <mbedtls_x509_get_name>
 80117da:	4605      	mov	r5, r0
 80117dc:	2800      	cmp	r0, #0
 80117de:	d1a2      	bne.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
    crt->subject_raw.len = p - crt->subject_raw.p;
 80117e0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80117e2:	9b06      	ldr	r3, [sp, #24]
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 80117e4:	4631      	mov	r1, r6
    crt->subject_raw.len = p - crt->subject_raw.p;
 80117e6:	1a9b      	subs	r3, r3, r2
 80117e8:	6463      	str	r3, [r4, #68]	; 0x44
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 80117ea:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 80117ee:	4640      	mov	r0, r8
 80117f0:	f7f6 fe40 	bl	8008474 <mbedtls_pk_parse_subpubkey>
 80117f4:	4605      	mov	r5, r0
 80117f6:	2800      	cmp	r0, #0
 80117f8:	d195      	bne.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
    if( crt->version == 2 || crt->version == 3 )
 80117fa:	69a3      	ldr	r3, [r4, #24]
 80117fc:	3b02      	subs	r3, #2
 80117fe:	2b01      	cmp	r3, #1
 8011800:	d809      	bhi.n	8011816 <mbedtls_x509_crt_parse_der+0x272>
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
 8011802:	2301      	movs	r3, #1
 8011804:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
 8011808:	4631      	mov	r1, r6
 801180a:	4640      	mov	r0, r8
 801180c:	f7ff f92c 	bl	8010a68 <x509_get_uid>
        if( ret != 0 )
 8011810:	4605      	mov	r5, r0
 8011812:	2800      	cmp	r0, #0
 8011814:	d187      	bne.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
    if( crt->version == 2 || crt->version == 3 )
 8011816:	69a3      	ldr	r3, [r4, #24]
 8011818:	3b02      	subs	r3, #2
 801181a:	2b01      	cmp	r3, #1
 801181c:	d80a      	bhi.n	8011834 <mbedtls_x509_crt_parse_der+0x290>
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
 801181e:	2302      	movs	r3, #2
 8011820:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
 8011824:	4631      	mov	r1, r6
 8011826:	4640      	mov	r0, r8
 8011828:	f7ff f91e 	bl	8010a68 <x509_get_uid>
        if( ret != 0 )
 801182c:	4605      	mov	r5, r0
 801182e:	2800      	cmp	r0, #0
 8011830:	f47f af79 	bne.w	8011726 <mbedtls_x509_crt_parse_der+0x182>
    if( crt->version == 3 )
 8011834:	69a3      	ldr	r3, [r4, #24]
 8011836:	2b03      	cmp	r3, #3
 8011838:	d13a      	bne.n	80118b0 <mbedtls_x509_crt_parse_der+0x30c>
    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 801183a:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 801183e:	4631      	mov	r1, r6
 8011840:	4640      	mov	r0, r8
 8011842:	f7fe ff43 	bl	80106cc <mbedtls_x509_get_ext>
 8011846:	4605      	mov	r5, r0
 8011848:	bb70      	cbnz	r0, 80118a8 <mbedtls_x509_crt_parse_der+0x304>
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 801184a:	4680      	mov	r8, r0
    while( *p < end )
 801184c:	9b06      	ldr	r3, [sp, #24]
 801184e:	429e      	cmp	r6, r3
 8011850:	d858      	bhi.n	8011904 <mbedtls_x509_crt_parse_der+0x360>
    if( *p != end )
 8011852:	d02d      	beq.n	80118b0 <mbedtls_x509_crt_parse_der+0x30c>
 8011854:	e15d      	b.n	8011b12 <mbedtls_x509_crt_parse_der+0x56e>
    end = *p + len;
 8011856:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011858:	9b06      	ldr	r3, [sp, #24]
    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 801185a:	a806      	add	r0, sp, #24
    end = *p + len;
 801185c:	eb03 0802 	add.w	r8, r3, r2
    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 8011860:	4641      	mov	r1, r8
 8011862:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8011866:	f7fe fe41 	bl	80104ec <mbedtls_x509_get_time>
 801186a:	4605      	mov	r5, r0
 801186c:	2800      	cmp	r0, #0
 801186e:	f47f af5a 	bne.w	8011726 <mbedtls_x509_crt_parse_der+0x182>
    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 8011872:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 8011876:	4641      	mov	r1, r8
 8011878:	a806      	add	r0, sp, #24
 801187a:	f7fe fe37 	bl	80104ec <mbedtls_x509_get_time>
 801187e:	4605      	mov	r5, r0
 8011880:	2800      	cmp	r0, #0
 8011882:	f47f af50 	bne.w	8011726 <mbedtls_x509_crt_parse_der+0x182>
    if( *p != end )
 8011886:	9b06      	ldr	r3, [sp, #24]
 8011888:	4598      	cmp	r8, r3
 801188a:	d08f      	beq.n	80117ac <mbedtls_x509_crt_parse_der+0x208>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801188c:	4d05      	ldr	r5, [pc, #20]	; (80118a4 <mbedtls_x509_crt_parse_der+0x300>)
 801188e:	e74a      	b.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
 8011890:	ffffd780 	.word	0xffffd780
 8011894:	ffffde80 	.word	0xffffde80
 8011898:	ffffde1a 	.word	0xffffde1a
 801189c:	ffffda80 	.word	0xffffda80
 80118a0:	ffffdd9a 	.word	0xffffdd9a
 80118a4:	ffffdb9a 	.word	0xffffdb9a
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80118a8:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80118ac:	f47f af3b 	bne.w	8011726 <mbedtls_x509_crt_parse_der+0x182>
    if( p != end )
 80118b0:	9b06      	ldr	r3, [sp, #24]
 80118b2:	429e      	cmp	r6, r3
 80118b4:	f47f aece 	bne.w	8011654 <mbedtls_x509_crt_parse_der+0xb0>
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 80118b8:	ab0e      	add	r3, sp, #56	; 0x38
 80118ba:	aa11      	add	r2, sp, #68	; 0x44
 80118bc:	4639      	mov	r1, r7
 80118be:	a806      	add	r0, sp, #24
 80118c0:	f7fe fd90 	bl	80103e4 <mbedtls_x509_get_alg>
 80118c4:	4605      	mov	r5, r0
 80118c6:	2800      	cmp	r0, #0
 80118c8:	f47f af2d 	bne.w	8011726 <mbedtls_x509_crt_parse_der+0x182>
    if( crt->sig_oid.len != sig_oid2.len ||
 80118cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80118ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d112      	bne.n	80118fa <mbedtls_x509_crt_parse_der+0x356>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 80118d4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80118d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80118d8:	f000 fa62 	bl	8011da0 <memcmp>
    if( crt->sig_oid.len != sig_oid2.len ||
 80118dc:	b968      	cbnz	r0, 80118fa <mbedtls_x509_crt_parse_der+0x356>
        sig_params1.len != sig_params2.len ||
 80118de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 80118e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80118e2:	429a      	cmp	r2, r3
 80118e4:	d109      	bne.n	80118fa <mbedtls_x509_crt_parse_der+0x356>
        sig_params1.len != sig_params2.len ||
 80118e6:	2a00      	cmp	r2, #0
 80118e8:	f000 814b 	beq.w	8011b82 <mbedtls_x509_crt_parse_der+0x5de>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 80118ec:	9910      	ldr	r1, [sp, #64]	; 0x40
 80118ee:	980d      	ldr	r0, [sp, #52]	; 0x34
 80118f0:	f000 fa56 	bl	8011da0 <memcmp>
        ( sig_params1.len != 0 &&
 80118f4:	2800      	cmp	r0, #0
 80118f6:	f000 8144 	beq.w	8011b82 <mbedtls_x509_crt_parse_der+0x5de>
        mbedtls_x509_crt_free( crt );
 80118fa:	4620      	mov	r0, r4
 80118fc:	f7ff fdf7 	bl	80114ee <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 8011900:	4dad      	ldr	r5, [pc, #692]	; (8011bb8 <mbedtls_x509_crt_parse_der+0x614>)
 8011902:	e693      	b.n	801162c <mbedtls_x509_crt_parse_der+0x88>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8011904:	2330      	movs	r3, #48	; 0x30
 8011906:	aa07      	add	r2, sp, #28
 8011908:	4631      	mov	r1, r6
 801190a:	a806      	add	r0, sp, #24
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 801190c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8011910:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 8011914:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int is_critical = 0; /* DEFAULT FALSE */
 8011918:	f8cd 8020 	str.w	r8, [sp, #32]
        int ext_type = 0;
 801191c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8011920:	f7f2 fb2a 	bl	8003f78 <mbedtls_asn1_get_tag>
 8011924:	b120      	cbz	r0, 8011930 <mbedtls_x509_crt_parse_der+0x38c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8011926:	f5a0 5514 	sub.w	r5, r0, #9472	; 0x2500
        if( ret != 0 )
 801192a:	2d00      	cmp	r5, #0
 801192c:	d0c0      	beq.n	80118b0 <mbedtls_x509_crt_parse_der+0x30c>
 801192e:	e6fa      	b.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
        end_ext_data = *p + len;
 8011930:	9b07      	ldr	r3, [sp, #28]
 8011932:	9d06      	ldr	r5, [sp, #24]
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
 8011934:	aa15      	add	r2, sp, #84	; 0x54
        end_ext_data = *p + len;
 8011936:	441d      	add	r5, r3
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
 8011938:	4629      	mov	r1, r5
 801193a:	2306      	movs	r3, #6
 801193c:	a806      	add	r0, sp, #24
 801193e:	f7f2 fb1b 	bl	8003f78 <mbedtls_asn1_get_tag>
 8011942:	2800      	cmp	r0, #0
 8011944:	d1ef      	bne.n	8011926 <mbedtls_x509_crt_parse_der+0x382>
        extn_oid.tag = MBEDTLS_ASN1_OID;
 8011946:	2306      	movs	r3, #6
        *p += extn_oid.len;
 8011948:	9a15      	ldr	r2, [sp, #84]	; 0x54
        extn_oid.tag = MBEDTLS_ASN1_OID;
 801194a:	9314      	str	r3, [sp, #80]	; 0x50
        extn_oid.p = *p;
 801194c:	9b06      	ldr	r3, [sp, #24]
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 801194e:	4629      	mov	r1, r5
        extn_oid.p = *p;
 8011950:	9316      	str	r3, [sp, #88]	; 0x58
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 8011952:	a806      	add	r0, sp, #24
        *p += extn_oid.len;
 8011954:	4413      	add	r3, r2
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 8011956:	aa08      	add	r2, sp, #32
        *p += extn_oid.len;
 8011958:	9306      	str	r3, [sp, #24]
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 801195a:	f7f2 fb21 	bl	8003fa0 <mbedtls_asn1_get_bool>
 801195e:	b110      	cbz	r0, 8011966 <mbedtls_x509_crt_parse_der+0x3c2>
 8011960:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8011964:	d1df      	bne.n	8011926 <mbedtls_x509_crt_parse_der+0x382>
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 8011966:	2304      	movs	r3, #4
 8011968:	aa07      	add	r2, sp, #28
 801196a:	4629      	mov	r1, r5
 801196c:	a806      	add	r0, sp, #24
 801196e:	f7f2 fb03 	bl	8003f78 <mbedtls_asn1_get_tag>
 8011972:	2800      	cmp	r0, #0
 8011974:	d1d7      	bne.n	8011926 <mbedtls_x509_crt_parse_der+0x382>
        end_ext_octet = *p + len;
 8011976:	9a07      	ldr	r2, [sp, #28]
 8011978:	9b06      	ldr	r3, [sp, #24]
 801197a:	4413      	add	r3, r2
        if( end_ext_octet != end_ext_data )
 801197c:	429d      	cmp	r5, r3
 801197e:	f040 80c8 	bne.w	8011b12 <mbedtls_x509_crt_parse_der+0x56e>
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 8011982:	a909      	add	r1, sp, #36	; 0x24
 8011984:	a814      	add	r0, sp, #80	; 0x50
 8011986:	f7f6 f9f3 	bl	8007d70 <mbedtls_oid_get_x509_ext_type>
        if( ret != 0 )
 801198a:	b130      	cbz	r0, 801199a <mbedtls_x509_crt_parse_der+0x3f6>
            if( is_critical )
 801198c:	9b08      	ldr	r3, [sp, #32]
            *p = end_ext_octet;
 801198e:	9506      	str	r5, [sp, #24]
            if( is_critical )
 8011990:	2b00      	cmp	r3, #0
 8011992:	f43f af5b 	beq.w	801184c <mbedtls_x509_crt_parse_der+0x2a8>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8011996:	4d89      	ldr	r5, [pc, #548]	; (8011bbc <mbedtls_x509_crt_parse_der+0x618>)
 8011998:	e6c5      	b.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
        if( ( crt->ext_types & ext_type ) != 0 )
 801199a:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
 801199e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80119a0:	ea11 0302 	ands.w	r3, r1, r2
 80119a4:	f040 811a 	bne.w	8011bdc <mbedtls_x509_crt_parse_der+0x638>
        crt->ext_types |= ext_type;
 80119a8:	4311      	orrs	r1, r2
        switch( ext_type )
 80119aa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        crt->ext_types |= ext_type;
 80119ae:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        switch( ext_type )
 80119b2:	d020      	beq.n	80119f6 <mbedtls_x509_crt_parse_der+0x452>
 80119b4:	dc06      	bgt.n	80119c4 <mbedtls_x509_crt_parse_der+0x420>
 80119b6:	2a04      	cmp	r2, #4
 80119b8:	d061      	beq.n	8011a7e <mbedtls_x509_crt_parse_der+0x4da>
 80119ba:	2a20      	cmp	r2, #32
 80119bc:	f000 8093 	beq.w	8011ae6 <mbedtls_x509_crt_parse_der+0x542>
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 80119c0:	4d7f      	ldr	r5, [pc, #508]	; (8011bc0 <mbedtls_x509_crt_parse_der+0x61c>)
 80119c2:	e6b0      	b.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
        switch( ext_type )
 80119c4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80119c8:	d07d      	beq.n	8011ac6 <mbedtls_x509_crt_parse_der+0x522>
 80119ca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80119ce:	d1f7      	bne.n	80119c0 <mbedtls_x509_crt_parse_der+0x41c>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80119d0:	aa17      	add	r2, sp, #92	; 0x5c
 80119d2:	4629      	mov	r1, r5
 80119d4:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 80119d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80119d8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80119dc:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80119de:	f7f2 fb1b 	bl	8004018 <mbedtls_asn1_get_bitstring>
 80119e2:	2800      	cmp	r0, #0
 80119e4:	d155      	bne.n	8011a92 <mbedtls_x509_crt_parse_der+0x4ee>
    if( bs.len != 1 )
 80119e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80119e8:	2b01      	cmp	r3, #1
 80119ea:	d17a      	bne.n	8011ae2 <mbedtls_x509_crt_parse_der+0x53e>
    *ns_cert_type = *bs.p;
 80119ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 80119f4:	e72a      	b.n	801184c <mbedtls_x509_crt_parse_der+0x2a8>
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 80119f6:	f504 7280 	add.w	r2, r4, #256	; 0x100
 80119fa:	9203      	str	r2, [sp, #12]
    *ca_istrue = 0; /* DEFAULT FALSE */
 80119fc:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
 8011a00:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8011a04:	aa17      	add	r2, sp, #92	; 0x5c
 8011a06:	2330      	movs	r3, #48	; 0x30
 8011a08:	4629      	mov	r1, r5
 8011a0a:	a806      	add	r0, sp, #24
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 8011a0c:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8011a10:	f7f2 fab2 	bl	8003f78 <mbedtls_asn1_get_tag>
 8011a14:	b128      	cbz	r0, 8011a22 <mbedtls_x509_crt_parse_der+0x47e>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8011a16:	f5a0 5514 	sub.w	r5, r0, #9472	; 0x2500
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 8011a1a:	2d00      	cmp	r5, #0
 8011a1c:	f43f af16 	beq.w	801184c <mbedtls_x509_crt_parse_der+0x2a8>
 8011a20:	e681      	b.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
    if( *p == end )
 8011a22:	9b06      	ldr	r3, [sp, #24]
 8011a24:	429d      	cmp	r5, r3
 8011a26:	f43f af11 	beq.w	801184c <mbedtls_x509_crt_parse_der+0x2a8>
    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 8011a2a:	465a      	mov	r2, fp
 8011a2c:	4629      	mov	r1, r5
 8011a2e:	a806      	add	r0, sp, #24
 8011a30:	f7f2 fab6 	bl	8003fa0 <mbedtls_asn1_get_bool>
 8011a34:	b178      	cbz	r0, 8011a56 <mbedtls_x509_crt_parse_der+0x4b2>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8011a36:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8011a3a:	d1ec      	bne.n	8011a16 <mbedtls_x509_crt_parse_der+0x472>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 8011a3c:	465a      	mov	r2, fp
 8011a3e:	4629      	mov	r1, r5
 8011a40:	a806      	add	r0, sp, #24
 8011a42:	f7f2 fac5 	bl	8003fd0 <mbedtls_asn1_get_int>
        if( ret != 0 )
 8011a46:	2800      	cmp	r0, #0
 8011a48:	d1e5      	bne.n	8011a16 <mbedtls_x509_crt_parse_der+0x472>
        if( *ca_istrue != 0 )
 8011a4a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8011a4e:	b113      	cbz	r3, 8011a56 <mbedtls_x509_crt_parse_der+0x4b2>
            *ca_istrue = 1;
 8011a50:	2301      	movs	r3, #1
 8011a52:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    if( *p == end )
 8011a56:	9b06      	ldr	r3, [sp, #24]
 8011a58:	429d      	cmp	r5, r3
 8011a5a:	f43f aef7 	beq.w	801184c <mbedtls_x509_crt_parse_der+0x2a8>
    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 8011a5e:	9a03      	ldr	r2, [sp, #12]
 8011a60:	4629      	mov	r1, r5
 8011a62:	a806      	add	r0, sp, #24
 8011a64:	f7f2 fab4 	bl	8003fd0 <mbedtls_asn1_get_int>
 8011a68:	2800      	cmp	r0, #0
 8011a6a:	d1d4      	bne.n	8011a16 <mbedtls_x509_crt_parse_der+0x472>
    if( *p != end )
 8011a6c:	9b06      	ldr	r3, [sp, #24]
 8011a6e:	429d      	cmp	r5, r3
 8011a70:	d14f      	bne.n	8011b12 <mbedtls_x509_crt_parse_der+0x56e>
    (*max_pathlen)++;
 8011a72:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8011a76:	3301      	adds	r3, #1
 8011a78:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8011a7c:	e6e6      	b.n	801184c <mbedtls_x509_crt_parse_der+0x2a8>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8011a7e:	aa17      	add	r2, sp, #92	; 0x5c
 8011a80:	4629      	mov	r1, r5
 8011a82:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 8011a84:	9317      	str	r3, [sp, #92]	; 0x5c
 8011a86:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8011a8a:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8011a8c:	f7f2 fac4 	bl	8004018 <mbedtls_asn1_get_bitstring>
 8011a90:	b120      	cbz	r0, 8011a9c <mbedtls_x509_crt_parse_der+0x4f8>
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 8011a92:	f5b0 5514 	subs.w	r5, r0, #9472	; 0x2500
 8011a96:	f43f aed9 	beq.w	801184c <mbedtls_x509_crt_parse_der+0x2a8>
 8011a9a:	e644      	b.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
    if( bs.len < 1 )
 8011a9c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8011a9e:	b301      	cbz	r1, 8011ae2 <mbedtls_x509_crt_parse_der+0x53e>
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8011aa0:	9d19      	ldr	r5, [sp, #100]	; 0x64
    *key_usage = 0;
 8011aa2:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8011aa6:	5c2b      	ldrb	r3, [r5, r0]
 8011aa8:	00c2      	lsls	r2, r0, #3
 8011aaa:	fa03 f202 	lsl.w	r2, r3, r2
 8011aae:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 8011ab2:	3001      	adds	r0, #1
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8011ab4:	4313      	orrs	r3, r2
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 8011ab6:	4281      	cmp	r1, r0
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8011ab8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 8011abc:	f43f aec6 	beq.w	801184c <mbedtls_x509_crt_parse_der+0x2a8>
 8011ac0:	2804      	cmp	r0, #4
 8011ac2:	d1f0      	bne.n	8011aa6 <mbedtls_x509_crt_parse_der+0x502>
 8011ac4:	e6c2      	b.n	801184c <mbedtls_x509_crt_parse_der+0x2a8>
    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 8011ac6:	2306      	movs	r3, #6
 8011ac8:	f504 7284 	add.w	r2, r4, #264	; 0x108
 8011acc:	4629      	mov	r1, r5
 8011ace:	a806      	add	r0, sp, #24
 8011ad0:	f7f2 fad9 	bl	8004086 <mbedtls_asn1_get_sequence_of>
 8011ad4:	2800      	cmp	r0, #0
 8011ad6:	d1dc      	bne.n	8011a92 <mbedtls_x509_crt_parse_der+0x4ee>
    if( ext_key_usage->buf.p == NULL )
 8011ad8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	f47f aeb5 	bne.w	801184c <mbedtls_x509_crt_parse_der+0x2a8>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8011ae2:	4d38      	ldr	r5, [pc, #224]	; (8011bc4 <mbedtls_x509_crt_parse_der+0x620>)
 8011ae4:	e61f      	b.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8011ae6:	2330      	movs	r3, #48	; 0x30
 8011ae8:	aa0a      	add	r2, sp, #40	; 0x28
 8011aea:	4629      	mov	r1, r5
 8011aec:	a806      	add	r0, sp, #24
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 8011aee:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8011af2:	f7f2 fa41 	bl	8003f78 <mbedtls_asn1_get_tag>
 8011af6:	2800      	cmp	r0, #0
 8011af8:	d18d      	bne.n	8011a16 <mbedtls_x509_crt_parse_der+0x472>
    if( *p + len != end )
 8011afa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011afc:	9b06      	ldr	r3, [sp, #24]
 8011afe:	4413      	add	r3, r2
 8011b00:	429d      	cmp	r5, r3
 8011b02:	d106      	bne.n	8011b12 <mbedtls_x509_crt_parse_der+0x56e>
    while( *p < end )
 8011b04:	9b06      	ldr	r3, [sp, #24]
 8011b06:	429d      	cmp	r5, r3
 8011b08:	d805      	bhi.n	8011b16 <mbedtls_x509_crt_parse_der+0x572>
    cur->next = NULL;
 8011b0a:	f8cb 800c 	str.w	r8, [fp, #12]
    if( *p != end )
 8011b0e:	f43f ae9d 	beq.w	801184c <mbedtls_x509_crt_parse_der+0x2a8>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8011b12:	4d2d      	ldr	r5, [pc, #180]	; (8011bc8 <mbedtls_x509_crt_parse_der+0x624>)
 8011b14:	e607      	b.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
        if( ( end - *p ) < 1 )
 8011b16:	1aea      	subs	r2, r5, r3
 8011b18:	2a00      	cmp	r2, #0
 8011b1a:	dd46      	ble.n	8011baa <mbedtls_x509_crt_parse_der+0x606>
        tag = **p;
 8011b1c:	461a      	mov	r2, r3
 8011b1e:	f812 3b01 	ldrb.w	r3, [r2], #1
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8011b22:	4629      	mov	r1, r5
        (*p)++;
 8011b24:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8011b26:	a806      	add	r0, sp, #24
 8011b28:	aa17      	add	r2, sp, #92	; 0x5c
        tag = **p;
 8011b2a:	9303      	str	r3, [sp, #12]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8011b2c:	f7f2 f9d5 	bl	8003eda <mbedtls_asn1_get_len>
 8011b30:	9b03      	ldr	r3, [sp, #12]
 8011b32:	2800      	cmp	r0, #0
 8011b34:	f47f af6f 	bne.w	8011a16 <mbedtls_x509_crt_parse_der+0x472>
        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 8011b38:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8011b3c:	2a80      	cmp	r2, #128	; 0x80
 8011b3e:	f47f af2a 	bne.w	8011996 <mbedtls_x509_crt_parse_der+0x3f2>
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 8011b42:	2b82      	cmp	r3, #130	; 0x82
 8011b44:	d004      	beq.n	8011b50 <mbedtls_x509_crt_parse_der+0x5ac>
            *p += tag_len;
 8011b46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011b48:	9b06      	ldr	r3, [sp, #24]
        *p += buf->len;
 8011b4a:	4413      	add	r3, r2
 8011b4c:	9306      	str	r3, [sp, #24]
 8011b4e:	e7d9      	b.n	8011b04 <mbedtls_x509_crt_parse_der+0x560>
        if( cur->buf.p != NULL )
 8011b50:	f8db 3008 	ldr.w	r3, [fp, #8]
 8011b54:	b15b      	cbz	r3, 8011b6e <mbedtls_x509_crt_parse_der+0x5ca>
            if( cur->next != NULL )
 8011b56:	f8db 300c 	ldr.w	r3, [fp, #12]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d13e      	bne.n	8011bdc <mbedtls_x509_crt_parse_der+0x638>
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 8011b5e:	2110      	movs	r1, #16
 8011b60:	2001      	movs	r0, #1
 8011b62:	f000 f8db 	bl	8011d1c <calloc>
 8011b66:	f8cb 000c 	str.w	r0, [fp, #12]
            if( cur->next == NULL )
 8011b6a:	b300      	cbz	r0, 8011bae <mbedtls_x509_crt_parse_der+0x60a>
 8011b6c:	4683      	mov	fp, r0
        buf->tag = tag;
 8011b6e:	2382      	movs	r3, #130	; 0x82
 8011b70:	f8cb 3000 	str.w	r3, [fp]
        buf->len = tag_len;
 8011b74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        buf->p = *p;
 8011b76:	9b06      	ldr	r3, [sp, #24]
        buf->len = tag_len;
 8011b78:	f8cb 2004 	str.w	r2, [fp, #4]
        buf->p = *p;
 8011b7c:	f8cb 3008 	str.w	r3, [fp, #8]
 8011b80:	e7e3      	b.n	8011b4a <mbedtls_x509_crt_parse_der+0x5a6>
    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 8011b82:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8011b86:	4639      	mov	r1, r7
 8011b88:	a806      	add	r0, sp, #24
 8011b8a:	f7fe fd61 	bl	8010650 <mbedtls_x509_get_sig>
 8011b8e:	4605      	mov	r5, r0
 8011b90:	2800      	cmp	r0, #0
 8011b92:	f47f adc8 	bne.w	8011726 <mbedtls_x509_crt_parse_der+0x182>
    if( p != end )
 8011b96:	9b06      	ldr	r3, [sp, #24]
 8011b98:	429f      	cmp	r7, r3
 8011b9a:	f47f ad5b 	bne.w	8011654 <mbedtls_x509_crt_parse_der+0xb0>
}
 8011b9e:	4628      	mov	r0, r5
 8011ba0:	b01b      	add	sp, #108	; 0x6c
 8011ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8011ba6:	4d09      	ldr	r5, [pc, #36]	; (8011bcc <mbedtls_x509_crt_parse_der+0x628>)
 8011ba8:	e7f9      	b.n	8011b9e <mbedtls_x509_crt_parse_der+0x5fa>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8011baa:	4d09      	ldr	r5, [pc, #36]	; (8011bd0 <mbedtls_x509_crt_parse_der+0x62c>)
 8011bac:	e5bb      	b.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8011bae:	4d09      	ldr	r5, [pc, #36]	; (8011bd4 <mbedtls_x509_crt_parse_der+0x630>)
 8011bb0:	e5b9      	b.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8011bb2:	4d06      	ldr	r5, [pc, #24]	; (8011bcc <mbedtls_x509_crt_parse_der+0x628>)
 8011bb4:	e53a      	b.n	801162c <mbedtls_x509_crt_parse_der+0x88>
 8011bb6:	bf00      	nop
 8011bb8:	ffffd980 	.word	0xffffd980
 8011bbc:	ffffda9e 	.word	0xffffda9e
 8011bc0:	ffffdf80 	.word	0xffffdf80
 8011bc4:	ffffda9c 	.word	0xffffda9c
 8011bc8:	ffffda9a 	.word	0xffffda9a
 8011bcc:	ffffd800 	.word	0xffffd800
 8011bd0:	ffffdaa0 	.word	0xffffdaa0
 8011bd4:	ffffda96 	.word	0xffffda96
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8011bd8:	4d01      	ldr	r5, [pc, #4]	; (8011be0 <mbedtls_x509_crt_parse_der+0x63c>)
 8011bda:	e527      	b.n	801162c <mbedtls_x509_crt_parse_der+0x88>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 8011bdc:	4d01      	ldr	r5, [pc, #4]	; (8011be4 <mbedtls_x509_crt_parse_der+0x640>)
 8011bde:	e5a2      	b.n	8011726 <mbedtls_x509_crt_parse_der+0x182>
 8011be0:	ffffd780 	.word	0xffffd780
 8011be4:	ffffdb00 	.word	0xffffdb00

08011be8 <mbedtls_x509_crt_parse>:
{
 8011be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bec:	460e      	mov	r6, r1
 8011bee:	b089      	sub	sp, #36	; 0x24
 8011bf0:	4617      	mov	r7, r2
    if( chain == NULL || buf == NULL )
 8011bf2:	4680      	mov	r8, r0
 8011bf4:	2800      	cmp	r0, #0
 8011bf6:	d057      	beq.n	8011ca8 <mbedtls_x509_crt_parse+0xc0>
 8011bf8:	2900      	cmp	r1, #0
 8011bfa:	d055      	beq.n	8011ca8 <mbedtls_x509_crt_parse+0xc0>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 8011bfc:	2a00      	cmp	r2, #0
 8011bfe:	d057      	beq.n	8011cb0 <mbedtls_x509_crt_parse+0xc8>
 8011c00:	188b      	adds	r3, r1, r2
 8011c02:	f813 5c01 	ldrb.w	r5, [r3, #-1]
 8011c06:	2d00      	cmp	r5, #0
 8011c08:	d152      	bne.n	8011cb0 <mbedtls_x509_crt_parse+0xc8>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 8011c0a:	492d      	ldr	r1, [pc, #180]	; (8011cc0 <mbedtls_x509_crt_parse+0xd8>)
 8011c0c:	4630      	mov	r0, r6
 8011c0e:	f000 faef 	bl	80121f0 <strstr>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 8011c12:	2800      	cmp	r0, #0
 8011c14:	d04c      	beq.n	8011cb0 <mbedtls_x509_crt_parse+0xc8>
 8011c16:	462c      	mov	r4, r5
 8011c18:	46a9      	mov	r9, r5
            ret = mbedtls_pem_read_buffer( &pem,
 8011c1a:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8011cc0 <mbedtls_x509_crt_parse+0xd8>
        while( buflen > 1 )
 8011c1e:	2f01      	cmp	r7, #1
 8011c20:	d807      	bhi.n	8011c32 <mbedtls_x509_crt_parse+0x4a>
    if( success )
 8011c22:	f1b9 0f00 	cmp.w	r9, #0
 8011c26:	d141      	bne.n	8011cac <mbedtls_x509_crt_parse+0xc4>
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
 8011c28:	4b26      	ldr	r3, [pc, #152]	; (8011cc4 <mbedtls_x509_crt_parse+0xdc>)
 8011c2a:	2c00      	cmp	r4, #0
 8011c2c:	bf08      	it	eq
 8011c2e:	461c      	moveq	r4, r3
 8011c30:	e036      	b.n	8011ca0 <mbedtls_x509_crt_parse+0xb8>
            mbedtls_pem_init( &pem );
 8011c32:	a805      	add	r0, sp, #20
 8011c34:	f7f6 f91a 	bl	8007e6c <mbedtls_pem_init>
            ret = mbedtls_pem_read_buffer( &pem,
 8011c38:	ab04      	add	r3, sp, #16
 8011c3a:	9302      	str	r3, [sp, #8]
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	4a22      	ldr	r2, [pc, #136]	; (8011cc8 <mbedtls_x509_crt_parse+0xe0>)
 8011c40:	9301      	str	r3, [sp, #4]
 8011c42:	9300      	str	r3, [sp, #0]
 8011c44:	4659      	mov	r1, fp
 8011c46:	4633      	mov	r3, r6
 8011c48:	a805      	add	r0, sp, #20
 8011c4a:	f7f6 f915 	bl	8007e78 <mbedtls_pem_read_buffer>
            if( ret == 0 )
 8011c4e:	4682      	mov	sl, r0
 8011c50:	b988      	cbnz	r0, 8011c76 <mbedtls_x509_crt_parse+0x8e>
                buflen -= use_len;
 8011c52:	9b04      	ldr	r3, [sp, #16]
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 8011c54:	9a06      	ldr	r2, [sp, #24]
 8011c56:	9905      	ldr	r1, [sp, #20]
 8011c58:	4640      	mov	r0, r8
                buflen -= use_len;
 8011c5a:	1aff      	subs	r7, r7, r3
                buf += use_len;
 8011c5c:	441e      	add	r6, r3
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 8011c5e:	f7ff fca1 	bl	80115a4 <mbedtls_x509_crt_parse_der>
 8011c62:	4682      	mov	sl, r0
            mbedtls_pem_free( &pem );
 8011c64:	a805      	add	r0, sp, #20
 8011c66:	f7f6 f991 	bl	8007f8c <mbedtls_pem_free>
            if( ret != 0 )
 8011c6a:	f1ba 0f00 	cmp.w	sl, #0
 8011c6e:	d113      	bne.n	8011c98 <mbedtls_x509_crt_parse+0xb0>
            success = 1;
 8011c70:	f04f 0901 	mov.w	r9, #1
 8011c74:	e7d3      	b.n	8011c1e <mbedtls_x509_crt_parse+0x36>
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 8011c76:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
 8011c7a:	d010      	beq.n	8011c9e <mbedtls_x509_crt_parse+0xb6>
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8011c7c:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8011c80:	d0cf      	beq.n	8011c22 <mbedtls_x509_crt_parse+0x3a>
                mbedtls_pem_free( &pem );
 8011c82:	a805      	add	r0, sp, #20
 8011c84:	f7f6 f982 	bl	8007f8c <mbedtls_pem_free>
                buflen -= use_len;
 8011c88:	9a04      	ldr	r2, [sp, #16]
 8011c8a:	1abf      	subs	r7, r7, r2
                buf += use_len;
 8011c8c:	4416      	add	r6, r2
                if( first_error == 0 )
 8011c8e:	2c00      	cmp	r4, #0
 8011c90:	bf08      	it	eq
 8011c92:	4654      	moveq	r4, sl
                total_failed++;
 8011c94:	3501      	adds	r5, #1
                continue;
 8011c96:	e7c2      	b.n	8011c1e <mbedtls_x509_crt_parse+0x36>
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 8011c98:	f51a 5f22 	cmn.w	sl, #10368	; 0x2880
 8011c9c:	d1f7      	bne.n	8011c8e <mbedtls_x509_crt_parse+0xa6>
 8011c9e:	4654      	mov	r4, sl
}
 8011ca0:	4620      	mov	r0, r4
 8011ca2:	b009      	add	sp, #36	; 0x24
 8011ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8011ca8:	4c08      	ldr	r4, [pc, #32]	; (8011ccc <mbedtls_x509_crt_parse+0xe4>)
 8011caa:	e7f9      	b.n	8011ca0 <mbedtls_x509_crt_parse+0xb8>
 8011cac:	462c      	mov	r4, r5
 8011cae:	e7f7      	b.n	8011ca0 <mbedtls_x509_crt_parse+0xb8>
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 8011cb0:	463a      	mov	r2, r7
 8011cb2:	4631      	mov	r1, r6
 8011cb4:	4640      	mov	r0, r8
 8011cb6:	f7ff fc75 	bl	80115a4 <mbedtls_x509_crt_parse_der>
 8011cba:	4604      	mov	r4, r0
 8011cbc:	e7f0      	b.n	8011ca0 <mbedtls_x509_crt_parse+0xb8>
 8011cbe:	bf00      	nop
 8011cc0:	08018b4b 	.word	0x08018b4b
 8011cc4:	ffffd880 	.word	0xffffd880
 8011cc8:	08018b67 	.word	0x08018b67
 8011ccc:	ffffd800 	.word	0xffffd800

08011cd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8011cd0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8011cd2:	e003      	b.n	8011cdc <LoopCopyDataInit>

08011cd4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8011cd4:	4b0b      	ldr	r3, [pc, #44]	; (8011d04 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8011cd6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8011cd8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8011cda:	3104      	adds	r1, #4

08011cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8011cdc:	480a      	ldr	r0, [pc, #40]	; (8011d08 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8011cde:	4b0b      	ldr	r3, [pc, #44]	; (8011d0c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8011ce0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8011ce2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8011ce4:	d3f6      	bcc.n	8011cd4 <CopyDataInit>
  ldr r2, =_sbss
 8011ce6:	4a0a      	ldr	r2, [pc, #40]	; (8011d10 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8011ce8:	e002      	b.n	8011cf0 <LoopFillZerobss>

08011cea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8011cea:	2300      	movs	r3, #0
  str r3, [r2], #4
 8011cec:	f842 3b04 	str.w	r3, [r2], #4

08011cf0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8011cf0:	4b08      	ldr	r3, [pc, #32]	; (8011d14 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8011cf2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8011cf4:	d3f9      	bcc.n	8011cea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8011cf6:	f7f0 f82f 	bl	8001d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011cfa:	f000 f81d 	bl	8011d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8011cfe:	f7ef fe35 	bl	800196c <main>
  bx lr
 8011d02:	4770      	bx	lr
  ldr r3, =_sidata
 8011d04:	08018c4c 	.word	0x08018c4c
  ldr r0, =_sdata
 8011d08:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8011d0c:	20000148 	.word	0x20000148
  ldr r2, =_sbss
 8011d10:	20000148 	.word	0x20000148
  ldr r3, = _ebss
 8011d14:	20003878 	.word	0x20003878

08011d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8011d18:	e7fe      	b.n	8011d18 <ADC1_2_IRQHandler>
	...

08011d1c <calloc>:
 8011d1c:	4b02      	ldr	r3, [pc, #8]	; (8011d28 <calloc+0xc>)
 8011d1e:	460a      	mov	r2, r1
 8011d20:	4601      	mov	r1, r0
 8011d22:	6818      	ldr	r0, [r3, #0]
 8011d24:	f000 b878 	b.w	8011e18 <_calloc_r>
 8011d28:	200000e4 	.word	0x200000e4

08011d2c <__errno>:
 8011d2c:	4b01      	ldr	r3, [pc, #4]	; (8011d34 <__errno+0x8>)
 8011d2e:	6818      	ldr	r0, [r3, #0]
 8011d30:	4770      	bx	lr
 8011d32:	bf00      	nop
 8011d34:	200000e4 	.word	0x200000e4

08011d38 <__libc_init_array>:
 8011d38:	b570      	push	{r4, r5, r6, lr}
 8011d3a:	2500      	movs	r5, #0
 8011d3c:	4e0c      	ldr	r6, [pc, #48]	; (8011d70 <__libc_init_array+0x38>)
 8011d3e:	4c0d      	ldr	r4, [pc, #52]	; (8011d74 <__libc_init_array+0x3c>)
 8011d40:	1ba4      	subs	r4, r4, r6
 8011d42:	10a4      	asrs	r4, r4, #2
 8011d44:	42a5      	cmp	r5, r4
 8011d46:	d109      	bne.n	8011d5c <__libc_init_array+0x24>
 8011d48:	f001 fa5a 	bl	8013200 <_init>
 8011d4c:	2500      	movs	r5, #0
 8011d4e:	4e0a      	ldr	r6, [pc, #40]	; (8011d78 <__libc_init_array+0x40>)
 8011d50:	4c0a      	ldr	r4, [pc, #40]	; (8011d7c <__libc_init_array+0x44>)
 8011d52:	1ba4      	subs	r4, r4, r6
 8011d54:	10a4      	asrs	r4, r4, #2
 8011d56:	42a5      	cmp	r5, r4
 8011d58:	d105      	bne.n	8011d66 <__libc_init_array+0x2e>
 8011d5a:	bd70      	pop	{r4, r5, r6, pc}
 8011d5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011d60:	4798      	blx	r3
 8011d62:	3501      	adds	r5, #1
 8011d64:	e7ee      	b.n	8011d44 <__libc_init_array+0xc>
 8011d66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011d6a:	4798      	blx	r3
 8011d6c:	3501      	adds	r5, #1
 8011d6e:	e7f2      	b.n	8011d56 <__libc_init_array+0x1e>
 8011d70:	08018c44 	.word	0x08018c44
 8011d74:	08018c44 	.word	0x08018c44
 8011d78:	08018c44 	.word	0x08018c44
 8011d7c:	08018c48 	.word	0x08018c48

08011d80 <malloc>:
 8011d80:	4b02      	ldr	r3, [pc, #8]	; (8011d8c <malloc+0xc>)
 8011d82:	4601      	mov	r1, r0
 8011d84:	6818      	ldr	r0, [r3, #0]
 8011d86:	f000 b8a1 	b.w	8011ecc <_malloc_r>
 8011d8a:	bf00      	nop
 8011d8c:	200000e4 	.word	0x200000e4

08011d90 <free>:
 8011d90:	4b02      	ldr	r3, [pc, #8]	; (8011d9c <free+0xc>)
 8011d92:	4601      	mov	r1, r0
 8011d94:	6818      	ldr	r0, [r3, #0]
 8011d96:	f000 b84d 	b.w	8011e34 <_free_r>
 8011d9a:	bf00      	nop
 8011d9c:	200000e4 	.word	0x200000e4

08011da0 <memcmp>:
 8011da0:	b510      	push	{r4, lr}
 8011da2:	3901      	subs	r1, #1
 8011da4:	4402      	add	r2, r0
 8011da6:	4290      	cmp	r0, r2
 8011da8:	d101      	bne.n	8011dae <memcmp+0xe>
 8011daa:	2000      	movs	r0, #0
 8011dac:	bd10      	pop	{r4, pc}
 8011dae:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011db2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011db6:	42a3      	cmp	r3, r4
 8011db8:	d0f5      	beq.n	8011da6 <memcmp+0x6>
 8011dba:	1b18      	subs	r0, r3, r4
 8011dbc:	bd10      	pop	{r4, pc}

08011dbe <memcpy>:
 8011dbe:	b510      	push	{r4, lr}
 8011dc0:	1e43      	subs	r3, r0, #1
 8011dc2:	440a      	add	r2, r1
 8011dc4:	4291      	cmp	r1, r2
 8011dc6:	d100      	bne.n	8011dca <memcpy+0xc>
 8011dc8:	bd10      	pop	{r4, pc}
 8011dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011dce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011dd2:	e7f7      	b.n	8011dc4 <memcpy+0x6>

08011dd4 <memmove>:
 8011dd4:	4288      	cmp	r0, r1
 8011dd6:	b510      	push	{r4, lr}
 8011dd8:	eb01 0302 	add.w	r3, r1, r2
 8011ddc:	d803      	bhi.n	8011de6 <memmove+0x12>
 8011dde:	1e42      	subs	r2, r0, #1
 8011de0:	4299      	cmp	r1, r3
 8011de2:	d10c      	bne.n	8011dfe <memmove+0x2a>
 8011de4:	bd10      	pop	{r4, pc}
 8011de6:	4298      	cmp	r0, r3
 8011de8:	d2f9      	bcs.n	8011dde <memmove+0xa>
 8011dea:	1881      	adds	r1, r0, r2
 8011dec:	1ad2      	subs	r2, r2, r3
 8011dee:	42d3      	cmn	r3, r2
 8011df0:	d100      	bne.n	8011df4 <memmove+0x20>
 8011df2:	bd10      	pop	{r4, pc}
 8011df4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011df8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011dfc:	e7f7      	b.n	8011dee <memmove+0x1a>
 8011dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e02:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011e06:	e7eb      	b.n	8011de0 <memmove+0xc>

08011e08 <memset>:
 8011e08:	4603      	mov	r3, r0
 8011e0a:	4402      	add	r2, r0
 8011e0c:	4293      	cmp	r3, r2
 8011e0e:	d100      	bne.n	8011e12 <memset+0xa>
 8011e10:	4770      	bx	lr
 8011e12:	f803 1b01 	strb.w	r1, [r3], #1
 8011e16:	e7f9      	b.n	8011e0c <memset+0x4>

08011e18 <_calloc_r>:
 8011e18:	b538      	push	{r3, r4, r5, lr}
 8011e1a:	fb02 f401 	mul.w	r4, r2, r1
 8011e1e:	4621      	mov	r1, r4
 8011e20:	f000 f854 	bl	8011ecc <_malloc_r>
 8011e24:	4605      	mov	r5, r0
 8011e26:	b118      	cbz	r0, 8011e30 <_calloc_r+0x18>
 8011e28:	4622      	mov	r2, r4
 8011e2a:	2100      	movs	r1, #0
 8011e2c:	f7ff ffec 	bl	8011e08 <memset>
 8011e30:	4628      	mov	r0, r5
 8011e32:	bd38      	pop	{r3, r4, r5, pc}

08011e34 <_free_r>:
 8011e34:	b538      	push	{r3, r4, r5, lr}
 8011e36:	4605      	mov	r5, r0
 8011e38:	2900      	cmp	r1, #0
 8011e3a:	d043      	beq.n	8011ec4 <_free_r+0x90>
 8011e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e40:	1f0c      	subs	r4, r1, #4
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	bfb8      	it	lt
 8011e46:	18e4      	addlt	r4, r4, r3
 8011e48:	f000 fcc8 	bl	80127dc <__malloc_lock>
 8011e4c:	4a1e      	ldr	r2, [pc, #120]	; (8011ec8 <_free_r+0x94>)
 8011e4e:	6813      	ldr	r3, [r2, #0]
 8011e50:	4610      	mov	r0, r2
 8011e52:	b933      	cbnz	r3, 8011e62 <_free_r+0x2e>
 8011e54:	6063      	str	r3, [r4, #4]
 8011e56:	6014      	str	r4, [r2, #0]
 8011e58:	4628      	mov	r0, r5
 8011e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e5e:	f000 bcbe 	b.w	80127de <__malloc_unlock>
 8011e62:	42a3      	cmp	r3, r4
 8011e64:	d90b      	bls.n	8011e7e <_free_r+0x4a>
 8011e66:	6821      	ldr	r1, [r4, #0]
 8011e68:	1862      	adds	r2, r4, r1
 8011e6a:	4293      	cmp	r3, r2
 8011e6c:	bf01      	itttt	eq
 8011e6e:	681a      	ldreq	r2, [r3, #0]
 8011e70:	685b      	ldreq	r3, [r3, #4]
 8011e72:	1852      	addeq	r2, r2, r1
 8011e74:	6022      	streq	r2, [r4, #0]
 8011e76:	6063      	str	r3, [r4, #4]
 8011e78:	6004      	str	r4, [r0, #0]
 8011e7a:	e7ed      	b.n	8011e58 <_free_r+0x24>
 8011e7c:	4613      	mov	r3, r2
 8011e7e:	685a      	ldr	r2, [r3, #4]
 8011e80:	b10a      	cbz	r2, 8011e86 <_free_r+0x52>
 8011e82:	42a2      	cmp	r2, r4
 8011e84:	d9fa      	bls.n	8011e7c <_free_r+0x48>
 8011e86:	6819      	ldr	r1, [r3, #0]
 8011e88:	1858      	adds	r0, r3, r1
 8011e8a:	42a0      	cmp	r0, r4
 8011e8c:	d10b      	bne.n	8011ea6 <_free_r+0x72>
 8011e8e:	6820      	ldr	r0, [r4, #0]
 8011e90:	4401      	add	r1, r0
 8011e92:	1858      	adds	r0, r3, r1
 8011e94:	4282      	cmp	r2, r0
 8011e96:	6019      	str	r1, [r3, #0]
 8011e98:	d1de      	bne.n	8011e58 <_free_r+0x24>
 8011e9a:	6810      	ldr	r0, [r2, #0]
 8011e9c:	6852      	ldr	r2, [r2, #4]
 8011e9e:	4401      	add	r1, r0
 8011ea0:	6019      	str	r1, [r3, #0]
 8011ea2:	605a      	str	r2, [r3, #4]
 8011ea4:	e7d8      	b.n	8011e58 <_free_r+0x24>
 8011ea6:	d902      	bls.n	8011eae <_free_r+0x7a>
 8011ea8:	230c      	movs	r3, #12
 8011eaa:	602b      	str	r3, [r5, #0]
 8011eac:	e7d4      	b.n	8011e58 <_free_r+0x24>
 8011eae:	6820      	ldr	r0, [r4, #0]
 8011eb0:	1821      	adds	r1, r4, r0
 8011eb2:	428a      	cmp	r2, r1
 8011eb4:	bf01      	itttt	eq
 8011eb6:	6811      	ldreq	r1, [r2, #0]
 8011eb8:	6852      	ldreq	r2, [r2, #4]
 8011eba:	1809      	addeq	r1, r1, r0
 8011ebc:	6021      	streq	r1, [r4, #0]
 8011ebe:	6062      	str	r2, [r4, #4]
 8011ec0:	605c      	str	r4, [r3, #4]
 8011ec2:	e7c9      	b.n	8011e58 <_free_r+0x24>
 8011ec4:	bd38      	pop	{r3, r4, r5, pc}
 8011ec6:	bf00      	nop
 8011ec8:	200027cc 	.word	0x200027cc

08011ecc <_malloc_r>:
 8011ecc:	b570      	push	{r4, r5, r6, lr}
 8011ece:	1ccd      	adds	r5, r1, #3
 8011ed0:	f025 0503 	bic.w	r5, r5, #3
 8011ed4:	3508      	adds	r5, #8
 8011ed6:	2d0c      	cmp	r5, #12
 8011ed8:	bf38      	it	cc
 8011eda:	250c      	movcc	r5, #12
 8011edc:	2d00      	cmp	r5, #0
 8011ede:	4606      	mov	r6, r0
 8011ee0:	db01      	blt.n	8011ee6 <_malloc_r+0x1a>
 8011ee2:	42a9      	cmp	r1, r5
 8011ee4:	d903      	bls.n	8011eee <_malloc_r+0x22>
 8011ee6:	230c      	movs	r3, #12
 8011ee8:	6033      	str	r3, [r6, #0]
 8011eea:	2000      	movs	r0, #0
 8011eec:	bd70      	pop	{r4, r5, r6, pc}
 8011eee:	f000 fc75 	bl	80127dc <__malloc_lock>
 8011ef2:	4a23      	ldr	r2, [pc, #140]	; (8011f80 <_malloc_r+0xb4>)
 8011ef4:	6814      	ldr	r4, [r2, #0]
 8011ef6:	4621      	mov	r1, r4
 8011ef8:	b991      	cbnz	r1, 8011f20 <_malloc_r+0x54>
 8011efa:	4c22      	ldr	r4, [pc, #136]	; (8011f84 <_malloc_r+0xb8>)
 8011efc:	6823      	ldr	r3, [r4, #0]
 8011efe:	b91b      	cbnz	r3, 8011f08 <_malloc_r+0x3c>
 8011f00:	4630      	mov	r0, r6
 8011f02:	f000 f91f 	bl	8012144 <_sbrk_r>
 8011f06:	6020      	str	r0, [r4, #0]
 8011f08:	4629      	mov	r1, r5
 8011f0a:	4630      	mov	r0, r6
 8011f0c:	f000 f91a 	bl	8012144 <_sbrk_r>
 8011f10:	1c43      	adds	r3, r0, #1
 8011f12:	d126      	bne.n	8011f62 <_malloc_r+0x96>
 8011f14:	230c      	movs	r3, #12
 8011f16:	4630      	mov	r0, r6
 8011f18:	6033      	str	r3, [r6, #0]
 8011f1a:	f000 fc60 	bl	80127de <__malloc_unlock>
 8011f1e:	e7e4      	b.n	8011eea <_malloc_r+0x1e>
 8011f20:	680b      	ldr	r3, [r1, #0]
 8011f22:	1b5b      	subs	r3, r3, r5
 8011f24:	d41a      	bmi.n	8011f5c <_malloc_r+0x90>
 8011f26:	2b0b      	cmp	r3, #11
 8011f28:	d90f      	bls.n	8011f4a <_malloc_r+0x7e>
 8011f2a:	600b      	str	r3, [r1, #0]
 8011f2c:	18cc      	adds	r4, r1, r3
 8011f2e:	50cd      	str	r5, [r1, r3]
 8011f30:	4630      	mov	r0, r6
 8011f32:	f000 fc54 	bl	80127de <__malloc_unlock>
 8011f36:	f104 000b 	add.w	r0, r4, #11
 8011f3a:	1d23      	adds	r3, r4, #4
 8011f3c:	f020 0007 	bic.w	r0, r0, #7
 8011f40:	1ac3      	subs	r3, r0, r3
 8011f42:	d01b      	beq.n	8011f7c <_malloc_r+0xb0>
 8011f44:	425a      	negs	r2, r3
 8011f46:	50e2      	str	r2, [r4, r3]
 8011f48:	bd70      	pop	{r4, r5, r6, pc}
 8011f4a:	428c      	cmp	r4, r1
 8011f4c:	bf0b      	itete	eq
 8011f4e:	6863      	ldreq	r3, [r4, #4]
 8011f50:	684b      	ldrne	r3, [r1, #4]
 8011f52:	6013      	streq	r3, [r2, #0]
 8011f54:	6063      	strne	r3, [r4, #4]
 8011f56:	bf18      	it	ne
 8011f58:	460c      	movne	r4, r1
 8011f5a:	e7e9      	b.n	8011f30 <_malloc_r+0x64>
 8011f5c:	460c      	mov	r4, r1
 8011f5e:	6849      	ldr	r1, [r1, #4]
 8011f60:	e7ca      	b.n	8011ef8 <_malloc_r+0x2c>
 8011f62:	1cc4      	adds	r4, r0, #3
 8011f64:	f024 0403 	bic.w	r4, r4, #3
 8011f68:	42a0      	cmp	r0, r4
 8011f6a:	d005      	beq.n	8011f78 <_malloc_r+0xac>
 8011f6c:	1a21      	subs	r1, r4, r0
 8011f6e:	4630      	mov	r0, r6
 8011f70:	f000 f8e8 	bl	8012144 <_sbrk_r>
 8011f74:	3001      	adds	r0, #1
 8011f76:	d0cd      	beq.n	8011f14 <_malloc_r+0x48>
 8011f78:	6025      	str	r5, [r4, #0]
 8011f7a:	e7d9      	b.n	8011f30 <_malloc_r+0x64>
 8011f7c:	bd70      	pop	{r4, r5, r6, pc}
 8011f7e:	bf00      	nop
 8011f80:	200027cc 	.word	0x200027cc
 8011f84:	200027d0 	.word	0x200027d0

08011f88 <iprintf>:
 8011f88:	b40f      	push	{r0, r1, r2, r3}
 8011f8a:	4b0a      	ldr	r3, [pc, #40]	; (8011fb4 <iprintf+0x2c>)
 8011f8c:	b513      	push	{r0, r1, r4, lr}
 8011f8e:	681c      	ldr	r4, [r3, #0]
 8011f90:	b124      	cbz	r4, 8011f9c <iprintf+0x14>
 8011f92:	69a3      	ldr	r3, [r4, #24]
 8011f94:	b913      	cbnz	r3, 8011f9c <iprintf+0x14>
 8011f96:	4620      	mov	r0, r4
 8011f98:	f000 fb32 	bl	8012600 <__sinit>
 8011f9c:	ab05      	add	r3, sp, #20
 8011f9e:	9a04      	ldr	r2, [sp, #16]
 8011fa0:	68a1      	ldr	r1, [r4, #8]
 8011fa2:	4620      	mov	r0, r4
 8011fa4:	9301      	str	r3, [sp, #4]
 8011fa6:	f000 fd93 	bl	8012ad0 <_vfiprintf_r>
 8011faa:	b002      	add	sp, #8
 8011fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fb0:	b004      	add	sp, #16
 8011fb2:	4770      	bx	lr
 8011fb4:	200000e4 	.word	0x200000e4

08011fb8 <_puts_r>:
 8011fb8:	b570      	push	{r4, r5, r6, lr}
 8011fba:	460e      	mov	r6, r1
 8011fbc:	4605      	mov	r5, r0
 8011fbe:	b118      	cbz	r0, 8011fc8 <_puts_r+0x10>
 8011fc0:	6983      	ldr	r3, [r0, #24]
 8011fc2:	b90b      	cbnz	r3, 8011fc8 <_puts_r+0x10>
 8011fc4:	f000 fb1c 	bl	8012600 <__sinit>
 8011fc8:	69ab      	ldr	r3, [r5, #24]
 8011fca:	68ac      	ldr	r4, [r5, #8]
 8011fcc:	b913      	cbnz	r3, 8011fd4 <_puts_r+0x1c>
 8011fce:	4628      	mov	r0, r5
 8011fd0:	f000 fb16 	bl	8012600 <__sinit>
 8011fd4:	4b23      	ldr	r3, [pc, #140]	; (8012064 <_puts_r+0xac>)
 8011fd6:	429c      	cmp	r4, r3
 8011fd8:	d117      	bne.n	801200a <_puts_r+0x52>
 8011fda:	686c      	ldr	r4, [r5, #4]
 8011fdc:	89a3      	ldrh	r3, [r4, #12]
 8011fde:	071b      	lsls	r3, r3, #28
 8011fe0:	d51d      	bpl.n	801201e <_puts_r+0x66>
 8011fe2:	6923      	ldr	r3, [r4, #16]
 8011fe4:	b1db      	cbz	r3, 801201e <_puts_r+0x66>
 8011fe6:	3e01      	subs	r6, #1
 8011fe8:	68a3      	ldr	r3, [r4, #8]
 8011fea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011fee:	3b01      	subs	r3, #1
 8011ff0:	60a3      	str	r3, [r4, #8]
 8011ff2:	b9e9      	cbnz	r1, 8012030 <_puts_r+0x78>
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	da2e      	bge.n	8012056 <_puts_r+0x9e>
 8011ff8:	4622      	mov	r2, r4
 8011ffa:	210a      	movs	r1, #10
 8011ffc:	4628      	mov	r0, r5
 8011ffe:	f000 f94d 	bl	801229c <__swbuf_r>
 8012002:	3001      	adds	r0, #1
 8012004:	d011      	beq.n	801202a <_puts_r+0x72>
 8012006:	200a      	movs	r0, #10
 8012008:	bd70      	pop	{r4, r5, r6, pc}
 801200a:	4b17      	ldr	r3, [pc, #92]	; (8012068 <_puts_r+0xb0>)
 801200c:	429c      	cmp	r4, r3
 801200e:	d101      	bne.n	8012014 <_puts_r+0x5c>
 8012010:	68ac      	ldr	r4, [r5, #8]
 8012012:	e7e3      	b.n	8011fdc <_puts_r+0x24>
 8012014:	4b15      	ldr	r3, [pc, #84]	; (801206c <_puts_r+0xb4>)
 8012016:	429c      	cmp	r4, r3
 8012018:	bf08      	it	eq
 801201a:	68ec      	ldreq	r4, [r5, #12]
 801201c:	e7de      	b.n	8011fdc <_puts_r+0x24>
 801201e:	4621      	mov	r1, r4
 8012020:	4628      	mov	r0, r5
 8012022:	f000 f98d 	bl	8012340 <__swsetup_r>
 8012026:	2800      	cmp	r0, #0
 8012028:	d0dd      	beq.n	8011fe6 <_puts_r+0x2e>
 801202a:	f04f 30ff 	mov.w	r0, #4294967295
 801202e:	bd70      	pop	{r4, r5, r6, pc}
 8012030:	2b00      	cmp	r3, #0
 8012032:	da04      	bge.n	801203e <_puts_r+0x86>
 8012034:	69a2      	ldr	r2, [r4, #24]
 8012036:	4293      	cmp	r3, r2
 8012038:	db06      	blt.n	8012048 <_puts_r+0x90>
 801203a:	290a      	cmp	r1, #10
 801203c:	d004      	beq.n	8012048 <_puts_r+0x90>
 801203e:	6823      	ldr	r3, [r4, #0]
 8012040:	1c5a      	adds	r2, r3, #1
 8012042:	6022      	str	r2, [r4, #0]
 8012044:	7019      	strb	r1, [r3, #0]
 8012046:	e7cf      	b.n	8011fe8 <_puts_r+0x30>
 8012048:	4622      	mov	r2, r4
 801204a:	4628      	mov	r0, r5
 801204c:	f000 f926 	bl	801229c <__swbuf_r>
 8012050:	3001      	adds	r0, #1
 8012052:	d1c9      	bne.n	8011fe8 <_puts_r+0x30>
 8012054:	e7e9      	b.n	801202a <_puts_r+0x72>
 8012056:	200a      	movs	r0, #10
 8012058:	6823      	ldr	r3, [r4, #0]
 801205a:	1c5a      	adds	r2, r3, #1
 801205c:	6022      	str	r2, [r4, #0]
 801205e:	7018      	strb	r0, [r3, #0]
 8012060:	bd70      	pop	{r4, r5, r6, pc}
 8012062:	bf00      	nop
 8012064:	08018bc8 	.word	0x08018bc8
 8012068:	08018be8 	.word	0x08018be8
 801206c:	08018ba8 	.word	0x08018ba8

08012070 <puts>:
 8012070:	4b02      	ldr	r3, [pc, #8]	; (801207c <puts+0xc>)
 8012072:	4601      	mov	r1, r0
 8012074:	6818      	ldr	r0, [r3, #0]
 8012076:	f7ff bf9f 	b.w	8011fb8 <_puts_r>
 801207a:	bf00      	nop
 801207c:	200000e4 	.word	0x200000e4

08012080 <srand>:
 8012080:	b538      	push	{r3, r4, r5, lr}
 8012082:	4b12      	ldr	r3, [pc, #72]	; (80120cc <srand+0x4c>)
 8012084:	4605      	mov	r5, r0
 8012086:	681c      	ldr	r4, [r3, #0]
 8012088:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801208a:	b9d3      	cbnz	r3, 80120c2 <srand+0x42>
 801208c:	2018      	movs	r0, #24
 801208e:	f7ff fe77 	bl	8011d80 <malloc>
 8012092:	f243 330e 	movw	r3, #13070	; 0x330e
 8012096:	63a0      	str	r0, [r4, #56]	; 0x38
 8012098:	8003      	strh	r3, [r0, #0]
 801209a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 801209e:	8043      	strh	r3, [r0, #2]
 80120a0:	f241 2334 	movw	r3, #4660	; 0x1234
 80120a4:	8083      	strh	r3, [r0, #4]
 80120a6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80120aa:	80c3      	strh	r3, [r0, #6]
 80120ac:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80120b0:	8103      	strh	r3, [r0, #8]
 80120b2:	2305      	movs	r3, #5
 80120b4:	8143      	strh	r3, [r0, #10]
 80120b6:	230b      	movs	r3, #11
 80120b8:	2201      	movs	r2, #1
 80120ba:	8183      	strh	r3, [r0, #12]
 80120bc:	2300      	movs	r3, #0
 80120be:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80120c2:	2200      	movs	r2, #0
 80120c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80120c6:	611d      	str	r5, [r3, #16]
 80120c8:	615a      	str	r2, [r3, #20]
 80120ca:	bd38      	pop	{r3, r4, r5, pc}
 80120cc:	200000e4 	.word	0x200000e4

080120d0 <rand>:
 80120d0:	4b19      	ldr	r3, [pc, #100]	; (8012138 <rand+0x68>)
 80120d2:	b510      	push	{r4, lr}
 80120d4:	681c      	ldr	r4, [r3, #0]
 80120d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80120d8:	b9d3      	cbnz	r3, 8012110 <rand+0x40>
 80120da:	2018      	movs	r0, #24
 80120dc:	f7ff fe50 	bl	8011d80 <malloc>
 80120e0:	f243 330e 	movw	r3, #13070	; 0x330e
 80120e4:	63a0      	str	r0, [r4, #56]	; 0x38
 80120e6:	8003      	strh	r3, [r0, #0]
 80120e8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80120ec:	8043      	strh	r3, [r0, #2]
 80120ee:	f241 2334 	movw	r3, #4660	; 0x1234
 80120f2:	8083      	strh	r3, [r0, #4]
 80120f4:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80120f8:	80c3      	strh	r3, [r0, #6]
 80120fa:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80120fe:	8103      	strh	r3, [r0, #8]
 8012100:	2305      	movs	r3, #5
 8012102:	8143      	strh	r3, [r0, #10]
 8012104:	230b      	movs	r3, #11
 8012106:	2201      	movs	r2, #1
 8012108:	8183      	strh	r3, [r0, #12]
 801210a:	2300      	movs	r3, #0
 801210c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012110:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012112:	480a      	ldr	r0, [pc, #40]	; (801213c <rand+0x6c>)
 8012114:	690a      	ldr	r2, [r1, #16]
 8012116:	694b      	ldr	r3, [r1, #20]
 8012118:	4350      	muls	r0, r2
 801211a:	4c09      	ldr	r4, [pc, #36]	; (8012140 <rand+0x70>)
 801211c:	fb04 0003 	mla	r0, r4, r3, r0
 8012120:	fba2 2304 	umull	r2, r3, r2, r4
 8012124:	3201      	adds	r2, #1
 8012126:	4403      	add	r3, r0
 8012128:	f143 0300 	adc.w	r3, r3, #0
 801212c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8012130:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8012134:	bd10      	pop	{r4, pc}
 8012136:	bf00      	nop
 8012138:	200000e4 	.word	0x200000e4
 801213c:	5851f42d 	.word	0x5851f42d
 8012140:	4c957f2d 	.word	0x4c957f2d

08012144 <_sbrk_r>:
 8012144:	b538      	push	{r3, r4, r5, lr}
 8012146:	2300      	movs	r3, #0
 8012148:	4c05      	ldr	r4, [pc, #20]	; (8012160 <_sbrk_r+0x1c>)
 801214a:	4605      	mov	r5, r0
 801214c:	4608      	mov	r0, r1
 801214e:	6023      	str	r3, [r4, #0]
 8012150:	f7ef fddc 	bl	8001d0c <_sbrk>
 8012154:	1c43      	adds	r3, r0, #1
 8012156:	d102      	bne.n	801215e <_sbrk_r+0x1a>
 8012158:	6823      	ldr	r3, [r4, #0]
 801215a:	b103      	cbz	r3, 801215e <_sbrk_r+0x1a>
 801215c:	602b      	str	r3, [r5, #0]
 801215e:	bd38      	pop	{r3, r4, r5, pc}
 8012160:	20003874 	.word	0x20003874

08012164 <sniprintf>:
 8012164:	b40c      	push	{r2, r3}
 8012166:	b530      	push	{r4, r5, lr}
 8012168:	4b17      	ldr	r3, [pc, #92]	; (80121c8 <sniprintf+0x64>)
 801216a:	1e0c      	subs	r4, r1, #0
 801216c:	b09d      	sub	sp, #116	; 0x74
 801216e:	681d      	ldr	r5, [r3, #0]
 8012170:	da08      	bge.n	8012184 <sniprintf+0x20>
 8012172:	238b      	movs	r3, #139	; 0x8b
 8012174:	f04f 30ff 	mov.w	r0, #4294967295
 8012178:	602b      	str	r3, [r5, #0]
 801217a:	b01d      	add	sp, #116	; 0x74
 801217c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012180:	b002      	add	sp, #8
 8012182:	4770      	bx	lr
 8012184:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012188:	f8ad 3014 	strh.w	r3, [sp, #20]
 801218c:	bf0c      	ite	eq
 801218e:	4623      	moveq	r3, r4
 8012190:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012194:	9304      	str	r3, [sp, #16]
 8012196:	9307      	str	r3, [sp, #28]
 8012198:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801219c:	9002      	str	r0, [sp, #8]
 801219e:	9006      	str	r0, [sp, #24]
 80121a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80121a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80121a6:	ab21      	add	r3, sp, #132	; 0x84
 80121a8:	a902      	add	r1, sp, #8
 80121aa:	4628      	mov	r0, r5
 80121ac:	9301      	str	r3, [sp, #4]
 80121ae:	f000 fb73 	bl	8012898 <_svfiprintf_r>
 80121b2:	1c43      	adds	r3, r0, #1
 80121b4:	bfbc      	itt	lt
 80121b6:	238b      	movlt	r3, #139	; 0x8b
 80121b8:	602b      	strlt	r3, [r5, #0]
 80121ba:	2c00      	cmp	r4, #0
 80121bc:	d0dd      	beq.n	801217a <sniprintf+0x16>
 80121be:	2200      	movs	r2, #0
 80121c0:	9b02      	ldr	r3, [sp, #8]
 80121c2:	701a      	strb	r2, [r3, #0]
 80121c4:	e7d9      	b.n	801217a <sniprintf+0x16>
 80121c6:	bf00      	nop
 80121c8:	200000e4 	.word	0x200000e4

080121cc <strncmp>:
 80121cc:	b510      	push	{r4, lr}
 80121ce:	b16a      	cbz	r2, 80121ec <strncmp+0x20>
 80121d0:	3901      	subs	r1, #1
 80121d2:	1884      	adds	r4, r0, r2
 80121d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80121d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80121dc:	4293      	cmp	r3, r2
 80121de:	d103      	bne.n	80121e8 <strncmp+0x1c>
 80121e0:	42a0      	cmp	r0, r4
 80121e2:	d001      	beq.n	80121e8 <strncmp+0x1c>
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d1f5      	bne.n	80121d4 <strncmp+0x8>
 80121e8:	1a98      	subs	r0, r3, r2
 80121ea:	bd10      	pop	{r4, pc}
 80121ec:	4610      	mov	r0, r2
 80121ee:	bd10      	pop	{r4, pc}

080121f0 <strstr>:
 80121f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121f2:	7803      	ldrb	r3, [r0, #0]
 80121f4:	b133      	cbz	r3, 8012204 <strstr+0x14>
 80121f6:	4603      	mov	r3, r0
 80121f8:	4618      	mov	r0, r3
 80121fa:	1c5e      	adds	r6, r3, #1
 80121fc:	781b      	ldrb	r3, [r3, #0]
 80121fe:	b933      	cbnz	r3, 801220e <strstr+0x1e>
 8012200:	4618      	mov	r0, r3
 8012202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012204:	780b      	ldrb	r3, [r1, #0]
 8012206:	2b00      	cmp	r3, #0
 8012208:	bf18      	it	ne
 801220a:	2000      	movne	r0, #0
 801220c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801220e:	1e4d      	subs	r5, r1, #1
 8012210:	1e44      	subs	r4, r0, #1
 8012212:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8012216:	2a00      	cmp	r2, #0
 8012218:	d0f3      	beq.n	8012202 <strstr+0x12>
 801221a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 801221e:	4633      	mov	r3, r6
 8012220:	4297      	cmp	r7, r2
 8012222:	d0f6      	beq.n	8012212 <strstr+0x22>
 8012224:	e7e8      	b.n	80121f8 <strstr+0x8>

08012226 <_vsniprintf_r>:
 8012226:	b530      	push	{r4, r5, lr}
 8012228:	1e14      	subs	r4, r2, #0
 801222a:	4605      	mov	r5, r0
 801222c:	b09b      	sub	sp, #108	; 0x6c
 801222e:	4618      	mov	r0, r3
 8012230:	da05      	bge.n	801223e <_vsniprintf_r+0x18>
 8012232:	238b      	movs	r3, #139	; 0x8b
 8012234:	f04f 30ff 	mov.w	r0, #4294967295
 8012238:	602b      	str	r3, [r5, #0]
 801223a:	b01b      	add	sp, #108	; 0x6c
 801223c:	bd30      	pop	{r4, r5, pc}
 801223e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012242:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012246:	bf0c      	ite	eq
 8012248:	4623      	moveq	r3, r4
 801224a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801224e:	9302      	str	r3, [sp, #8]
 8012250:	9305      	str	r3, [sp, #20]
 8012252:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012256:	9100      	str	r1, [sp, #0]
 8012258:	9104      	str	r1, [sp, #16]
 801225a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801225e:	4602      	mov	r2, r0
 8012260:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012262:	4669      	mov	r1, sp
 8012264:	4628      	mov	r0, r5
 8012266:	f000 fb17 	bl	8012898 <_svfiprintf_r>
 801226a:	1c43      	adds	r3, r0, #1
 801226c:	bfbc      	itt	lt
 801226e:	238b      	movlt	r3, #139	; 0x8b
 8012270:	602b      	strlt	r3, [r5, #0]
 8012272:	2c00      	cmp	r4, #0
 8012274:	d0e1      	beq.n	801223a <_vsniprintf_r+0x14>
 8012276:	2200      	movs	r2, #0
 8012278:	9b00      	ldr	r3, [sp, #0]
 801227a:	701a      	strb	r2, [r3, #0]
 801227c:	e7dd      	b.n	801223a <_vsniprintf_r+0x14>
	...

08012280 <vsniprintf>:
 8012280:	b507      	push	{r0, r1, r2, lr}
 8012282:	9300      	str	r3, [sp, #0]
 8012284:	4613      	mov	r3, r2
 8012286:	460a      	mov	r2, r1
 8012288:	4601      	mov	r1, r0
 801228a:	4803      	ldr	r0, [pc, #12]	; (8012298 <vsniprintf+0x18>)
 801228c:	6800      	ldr	r0, [r0, #0]
 801228e:	f7ff ffca 	bl	8012226 <_vsniprintf_r>
 8012292:	b003      	add	sp, #12
 8012294:	f85d fb04 	ldr.w	pc, [sp], #4
 8012298:	200000e4 	.word	0x200000e4

0801229c <__swbuf_r>:
 801229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801229e:	460e      	mov	r6, r1
 80122a0:	4614      	mov	r4, r2
 80122a2:	4605      	mov	r5, r0
 80122a4:	b118      	cbz	r0, 80122ae <__swbuf_r+0x12>
 80122a6:	6983      	ldr	r3, [r0, #24]
 80122a8:	b90b      	cbnz	r3, 80122ae <__swbuf_r+0x12>
 80122aa:	f000 f9a9 	bl	8012600 <__sinit>
 80122ae:	4b21      	ldr	r3, [pc, #132]	; (8012334 <__swbuf_r+0x98>)
 80122b0:	429c      	cmp	r4, r3
 80122b2:	d12a      	bne.n	801230a <__swbuf_r+0x6e>
 80122b4:	686c      	ldr	r4, [r5, #4]
 80122b6:	69a3      	ldr	r3, [r4, #24]
 80122b8:	60a3      	str	r3, [r4, #8]
 80122ba:	89a3      	ldrh	r3, [r4, #12]
 80122bc:	071a      	lsls	r2, r3, #28
 80122be:	d52e      	bpl.n	801231e <__swbuf_r+0x82>
 80122c0:	6923      	ldr	r3, [r4, #16]
 80122c2:	b363      	cbz	r3, 801231e <__swbuf_r+0x82>
 80122c4:	6923      	ldr	r3, [r4, #16]
 80122c6:	6820      	ldr	r0, [r4, #0]
 80122c8:	b2f6      	uxtb	r6, r6
 80122ca:	1ac0      	subs	r0, r0, r3
 80122cc:	6963      	ldr	r3, [r4, #20]
 80122ce:	4637      	mov	r7, r6
 80122d0:	4298      	cmp	r0, r3
 80122d2:	db04      	blt.n	80122de <__swbuf_r+0x42>
 80122d4:	4621      	mov	r1, r4
 80122d6:	4628      	mov	r0, r5
 80122d8:	f000 f928 	bl	801252c <_fflush_r>
 80122dc:	bb28      	cbnz	r0, 801232a <__swbuf_r+0x8e>
 80122de:	68a3      	ldr	r3, [r4, #8]
 80122e0:	3001      	adds	r0, #1
 80122e2:	3b01      	subs	r3, #1
 80122e4:	60a3      	str	r3, [r4, #8]
 80122e6:	6823      	ldr	r3, [r4, #0]
 80122e8:	1c5a      	adds	r2, r3, #1
 80122ea:	6022      	str	r2, [r4, #0]
 80122ec:	701e      	strb	r6, [r3, #0]
 80122ee:	6963      	ldr	r3, [r4, #20]
 80122f0:	4298      	cmp	r0, r3
 80122f2:	d004      	beq.n	80122fe <__swbuf_r+0x62>
 80122f4:	89a3      	ldrh	r3, [r4, #12]
 80122f6:	07db      	lsls	r3, r3, #31
 80122f8:	d519      	bpl.n	801232e <__swbuf_r+0x92>
 80122fa:	2e0a      	cmp	r6, #10
 80122fc:	d117      	bne.n	801232e <__swbuf_r+0x92>
 80122fe:	4621      	mov	r1, r4
 8012300:	4628      	mov	r0, r5
 8012302:	f000 f913 	bl	801252c <_fflush_r>
 8012306:	b190      	cbz	r0, 801232e <__swbuf_r+0x92>
 8012308:	e00f      	b.n	801232a <__swbuf_r+0x8e>
 801230a:	4b0b      	ldr	r3, [pc, #44]	; (8012338 <__swbuf_r+0x9c>)
 801230c:	429c      	cmp	r4, r3
 801230e:	d101      	bne.n	8012314 <__swbuf_r+0x78>
 8012310:	68ac      	ldr	r4, [r5, #8]
 8012312:	e7d0      	b.n	80122b6 <__swbuf_r+0x1a>
 8012314:	4b09      	ldr	r3, [pc, #36]	; (801233c <__swbuf_r+0xa0>)
 8012316:	429c      	cmp	r4, r3
 8012318:	bf08      	it	eq
 801231a:	68ec      	ldreq	r4, [r5, #12]
 801231c:	e7cb      	b.n	80122b6 <__swbuf_r+0x1a>
 801231e:	4621      	mov	r1, r4
 8012320:	4628      	mov	r0, r5
 8012322:	f000 f80d 	bl	8012340 <__swsetup_r>
 8012326:	2800      	cmp	r0, #0
 8012328:	d0cc      	beq.n	80122c4 <__swbuf_r+0x28>
 801232a:	f04f 37ff 	mov.w	r7, #4294967295
 801232e:	4638      	mov	r0, r7
 8012330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012332:	bf00      	nop
 8012334:	08018bc8 	.word	0x08018bc8
 8012338:	08018be8 	.word	0x08018be8
 801233c:	08018ba8 	.word	0x08018ba8

08012340 <__swsetup_r>:
 8012340:	4b32      	ldr	r3, [pc, #200]	; (801240c <__swsetup_r+0xcc>)
 8012342:	b570      	push	{r4, r5, r6, lr}
 8012344:	681d      	ldr	r5, [r3, #0]
 8012346:	4606      	mov	r6, r0
 8012348:	460c      	mov	r4, r1
 801234a:	b125      	cbz	r5, 8012356 <__swsetup_r+0x16>
 801234c:	69ab      	ldr	r3, [r5, #24]
 801234e:	b913      	cbnz	r3, 8012356 <__swsetup_r+0x16>
 8012350:	4628      	mov	r0, r5
 8012352:	f000 f955 	bl	8012600 <__sinit>
 8012356:	4b2e      	ldr	r3, [pc, #184]	; (8012410 <__swsetup_r+0xd0>)
 8012358:	429c      	cmp	r4, r3
 801235a:	d10f      	bne.n	801237c <__swsetup_r+0x3c>
 801235c:	686c      	ldr	r4, [r5, #4]
 801235e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012362:	b29a      	uxth	r2, r3
 8012364:	0715      	lsls	r5, r2, #28
 8012366:	d42c      	bmi.n	80123c2 <__swsetup_r+0x82>
 8012368:	06d0      	lsls	r0, r2, #27
 801236a:	d411      	bmi.n	8012390 <__swsetup_r+0x50>
 801236c:	2209      	movs	r2, #9
 801236e:	6032      	str	r2, [r6, #0]
 8012370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012374:	81a3      	strh	r3, [r4, #12]
 8012376:	f04f 30ff 	mov.w	r0, #4294967295
 801237a:	bd70      	pop	{r4, r5, r6, pc}
 801237c:	4b25      	ldr	r3, [pc, #148]	; (8012414 <__swsetup_r+0xd4>)
 801237e:	429c      	cmp	r4, r3
 8012380:	d101      	bne.n	8012386 <__swsetup_r+0x46>
 8012382:	68ac      	ldr	r4, [r5, #8]
 8012384:	e7eb      	b.n	801235e <__swsetup_r+0x1e>
 8012386:	4b24      	ldr	r3, [pc, #144]	; (8012418 <__swsetup_r+0xd8>)
 8012388:	429c      	cmp	r4, r3
 801238a:	bf08      	it	eq
 801238c:	68ec      	ldreq	r4, [r5, #12]
 801238e:	e7e6      	b.n	801235e <__swsetup_r+0x1e>
 8012390:	0751      	lsls	r1, r2, #29
 8012392:	d512      	bpl.n	80123ba <__swsetup_r+0x7a>
 8012394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012396:	b141      	cbz	r1, 80123aa <__swsetup_r+0x6a>
 8012398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801239c:	4299      	cmp	r1, r3
 801239e:	d002      	beq.n	80123a6 <__swsetup_r+0x66>
 80123a0:	4630      	mov	r0, r6
 80123a2:	f7ff fd47 	bl	8011e34 <_free_r>
 80123a6:	2300      	movs	r3, #0
 80123a8:	6363      	str	r3, [r4, #52]	; 0x34
 80123aa:	89a3      	ldrh	r3, [r4, #12]
 80123ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80123b0:	81a3      	strh	r3, [r4, #12]
 80123b2:	2300      	movs	r3, #0
 80123b4:	6063      	str	r3, [r4, #4]
 80123b6:	6923      	ldr	r3, [r4, #16]
 80123b8:	6023      	str	r3, [r4, #0]
 80123ba:	89a3      	ldrh	r3, [r4, #12]
 80123bc:	f043 0308 	orr.w	r3, r3, #8
 80123c0:	81a3      	strh	r3, [r4, #12]
 80123c2:	6923      	ldr	r3, [r4, #16]
 80123c4:	b94b      	cbnz	r3, 80123da <__swsetup_r+0x9a>
 80123c6:	89a3      	ldrh	r3, [r4, #12]
 80123c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80123cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123d0:	d003      	beq.n	80123da <__swsetup_r+0x9a>
 80123d2:	4621      	mov	r1, r4
 80123d4:	4630      	mov	r0, r6
 80123d6:	f000 f9c1 	bl	801275c <__smakebuf_r>
 80123da:	89a2      	ldrh	r2, [r4, #12]
 80123dc:	f012 0301 	ands.w	r3, r2, #1
 80123e0:	d00c      	beq.n	80123fc <__swsetup_r+0xbc>
 80123e2:	2300      	movs	r3, #0
 80123e4:	60a3      	str	r3, [r4, #8]
 80123e6:	6963      	ldr	r3, [r4, #20]
 80123e8:	425b      	negs	r3, r3
 80123ea:	61a3      	str	r3, [r4, #24]
 80123ec:	6923      	ldr	r3, [r4, #16]
 80123ee:	b953      	cbnz	r3, 8012406 <__swsetup_r+0xc6>
 80123f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80123f8:	d1ba      	bne.n	8012370 <__swsetup_r+0x30>
 80123fa:	bd70      	pop	{r4, r5, r6, pc}
 80123fc:	0792      	lsls	r2, r2, #30
 80123fe:	bf58      	it	pl
 8012400:	6963      	ldrpl	r3, [r4, #20]
 8012402:	60a3      	str	r3, [r4, #8]
 8012404:	e7f2      	b.n	80123ec <__swsetup_r+0xac>
 8012406:	2000      	movs	r0, #0
 8012408:	e7f7      	b.n	80123fa <__swsetup_r+0xba>
 801240a:	bf00      	nop
 801240c:	200000e4 	.word	0x200000e4
 8012410:	08018bc8 	.word	0x08018bc8
 8012414:	08018be8 	.word	0x08018be8
 8012418:	08018ba8 	.word	0x08018ba8

0801241c <__sflush_r>:
 801241c:	898a      	ldrh	r2, [r1, #12]
 801241e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012422:	4605      	mov	r5, r0
 8012424:	0710      	lsls	r0, r2, #28
 8012426:	460c      	mov	r4, r1
 8012428:	d45a      	bmi.n	80124e0 <__sflush_r+0xc4>
 801242a:	684b      	ldr	r3, [r1, #4]
 801242c:	2b00      	cmp	r3, #0
 801242e:	dc05      	bgt.n	801243c <__sflush_r+0x20>
 8012430:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012432:	2b00      	cmp	r3, #0
 8012434:	dc02      	bgt.n	801243c <__sflush_r+0x20>
 8012436:	2000      	movs	r0, #0
 8012438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801243c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801243e:	2e00      	cmp	r6, #0
 8012440:	d0f9      	beq.n	8012436 <__sflush_r+0x1a>
 8012442:	2300      	movs	r3, #0
 8012444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012448:	682f      	ldr	r7, [r5, #0]
 801244a:	602b      	str	r3, [r5, #0]
 801244c:	d033      	beq.n	80124b6 <__sflush_r+0x9a>
 801244e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012450:	89a3      	ldrh	r3, [r4, #12]
 8012452:	075a      	lsls	r2, r3, #29
 8012454:	d505      	bpl.n	8012462 <__sflush_r+0x46>
 8012456:	6863      	ldr	r3, [r4, #4]
 8012458:	1ac0      	subs	r0, r0, r3
 801245a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801245c:	b10b      	cbz	r3, 8012462 <__sflush_r+0x46>
 801245e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012460:	1ac0      	subs	r0, r0, r3
 8012462:	2300      	movs	r3, #0
 8012464:	4602      	mov	r2, r0
 8012466:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012468:	6a21      	ldr	r1, [r4, #32]
 801246a:	4628      	mov	r0, r5
 801246c:	47b0      	blx	r6
 801246e:	1c43      	adds	r3, r0, #1
 8012470:	89a3      	ldrh	r3, [r4, #12]
 8012472:	d106      	bne.n	8012482 <__sflush_r+0x66>
 8012474:	6829      	ldr	r1, [r5, #0]
 8012476:	291d      	cmp	r1, #29
 8012478:	d84b      	bhi.n	8012512 <__sflush_r+0xf6>
 801247a:	4a2b      	ldr	r2, [pc, #172]	; (8012528 <__sflush_r+0x10c>)
 801247c:	40ca      	lsrs	r2, r1
 801247e:	07d6      	lsls	r6, r2, #31
 8012480:	d547      	bpl.n	8012512 <__sflush_r+0xf6>
 8012482:	2200      	movs	r2, #0
 8012484:	6062      	str	r2, [r4, #4]
 8012486:	6922      	ldr	r2, [r4, #16]
 8012488:	04d9      	lsls	r1, r3, #19
 801248a:	6022      	str	r2, [r4, #0]
 801248c:	d504      	bpl.n	8012498 <__sflush_r+0x7c>
 801248e:	1c42      	adds	r2, r0, #1
 8012490:	d101      	bne.n	8012496 <__sflush_r+0x7a>
 8012492:	682b      	ldr	r3, [r5, #0]
 8012494:	b903      	cbnz	r3, 8012498 <__sflush_r+0x7c>
 8012496:	6560      	str	r0, [r4, #84]	; 0x54
 8012498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801249a:	602f      	str	r7, [r5, #0]
 801249c:	2900      	cmp	r1, #0
 801249e:	d0ca      	beq.n	8012436 <__sflush_r+0x1a>
 80124a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80124a4:	4299      	cmp	r1, r3
 80124a6:	d002      	beq.n	80124ae <__sflush_r+0x92>
 80124a8:	4628      	mov	r0, r5
 80124aa:	f7ff fcc3 	bl	8011e34 <_free_r>
 80124ae:	2000      	movs	r0, #0
 80124b0:	6360      	str	r0, [r4, #52]	; 0x34
 80124b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124b6:	6a21      	ldr	r1, [r4, #32]
 80124b8:	2301      	movs	r3, #1
 80124ba:	4628      	mov	r0, r5
 80124bc:	47b0      	blx	r6
 80124be:	1c41      	adds	r1, r0, #1
 80124c0:	d1c6      	bne.n	8012450 <__sflush_r+0x34>
 80124c2:	682b      	ldr	r3, [r5, #0]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d0c3      	beq.n	8012450 <__sflush_r+0x34>
 80124c8:	2b1d      	cmp	r3, #29
 80124ca:	d001      	beq.n	80124d0 <__sflush_r+0xb4>
 80124cc:	2b16      	cmp	r3, #22
 80124ce:	d101      	bne.n	80124d4 <__sflush_r+0xb8>
 80124d0:	602f      	str	r7, [r5, #0]
 80124d2:	e7b0      	b.n	8012436 <__sflush_r+0x1a>
 80124d4:	89a3      	ldrh	r3, [r4, #12]
 80124d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124da:	81a3      	strh	r3, [r4, #12]
 80124dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124e0:	690f      	ldr	r7, [r1, #16]
 80124e2:	2f00      	cmp	r7, #0
 80124e4:	d0a7      	beq.n	8012436 <__sflush_r+0x1a>
 80124e6:	0793      	lsls	r3, r2, #30
 80124e8:	bf18      	it	ne
 80124ea:	2300      	movne	r3, #0
 80124ec:	680e      	ldr	r6, [r1, #0]
 80124ee:	bf08      	it	eq
 80124f0:	694b      	ldreq	r3, [r1, #20]
 80124f2:	eba6 0807 	sub.w	r8, r6, r7
 80124f6:	600f      	str	r7, [r1, #0]
 80124f8:	608b      	str	r3, [r1, #8]
 80124fa:	f1b8 0f00 	cmp.w	r8, #0
 80124fe:	dd9a      	ble.n	8012436 <__sflush_r+0x1a>
 8012500:	4643      	mov	r3, r8
 8012502:	463a      	mov	r2, r7
 8012504:	6a21      	ldr	r1, [r4, #32]
 8012506:	4628      	mov	r0, r5
 8012508:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801250a:	47b0      	blx	r6
 801250c:	2800      	cmp	r0, #0
 801250e:	dc07      	bgt.n	8012520 <__sflush_r+0x104>
 8012510:	89a3      	ldrh	r3, [r4, #12]
 8012512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012516:	81a3      	strh	r3, [r4, #12]
 8012518:	f04f 30ff 	mov.w	r0, #4294967295
 801251c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012520:	4407      	add	r7, r0
 8012522:	eba8 0800 	sub.w	r8, r8, r0
 8012526:	e7e8      	b.n	80124fa <__sflush_r+0xde>
 8012528:	20400001 	.word	0x20400001

0801252c <_fflush_r>:
 801252c:	b538      	push	{r3, r4, r5, lr}
 801252e:	690b      	ldr	r3, [r1, #16]
 8012530:	4605      	mov	r5, r0
 8012532:	460c      	mov	r4, r1
 8012534:	b1db      	cbz	r3, 801256e <_fflush_r+0x42>
 8012536:	b118      	cbz	r0, 8012540 <_fflush_r+0x14>
 8012538:	6983      	ldr	r3, [r0, #24]
 801253a:	b90b      	cbnz	r3, 8012540 <_fflush_r+0x14>
 801253c:	f000 f860 	bl	8012600 <__sinit>
 8012540:	4b0c      	ldr	r3, [pc, #48]	; (8012574 <_fflush_r+0x48>)
 8012542:	429c      	cmp	r4, r3
 8012544:	d109      	bne.n	801255a <_fflush_r+0x2e>
 8012546:	686c      	ldr	r4, [r5, #4]
 8012548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801254c:	b17b      	cbz	r3, 801256e <_fflush_r+0x42>
 801254e:	4621      	mov	r1, r4
 8012550:	4628      	mov	r0, r5
 8012552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012556:	f7ff bf61 	b.w	801241c <__sflush_r>
 801255a:	4b07      	ldr	r3, [pc, #28]	; (8012578 <_fflush_r+0x4c>)
 801255c:	429c      	cmp	r4, r3
 801255e:	d101      	bne.n	8012564 <_fflush_r+0x38>
 8012560:	68ac      	ldr	r4, [r5, #8]
 8012562:	e7f1      	b.n	8012548 <_fflush_r+0x1c>
 8012564:	4b05      	ldr	r3, [pc, #20]	; (801257c <_fflush_r+0x50>)
 8012566:	429c      	cmp	r4, r3
 8012568:	bf08      	it	eq
 801256a:	68ec      	ldreq	r4, [r5, #12]
 801256c:	e7ec      	b.n	8012548 <_fflush_r+0x1c>
 801256e:	2000      	movs	r0, #0
 8012570:	bd38      	pop	{r3, r4, r5, pc}
 8012572:	bf00      	nop
 8012574:	08018bc8 	.word	0x08018bc8
 8012578:	08018be8 	.word	0x08018be8
 801257c:	08018ba8 	.word	0x08018ba8

08012580 <_cleanup_r>:
 8012580:	4901      	ldr	r1, [pc, #4]	; (8012588 <_cleanup_r+0x8>)
 8012582:	f000 b8a9 	b.w	80126d8 <_fwalk_reent>
 8012586:	bf00      	nop
 8012588:	0801252d 	.word	0x0801252d

0801258c <std.isra.0>:
 801258c:	2300      	movs	r3, #0
 801258e:	b510      	push	{r4, lr}
 8012590:	4604      	mov	r4, r0
 8012592:	6003      	str	r3, [r0, #0]
 8012594:	6043      	str	r3, [r0, #4]
 8012596:	6083      	str	r3, [r0, #8]
 8012598:	8181      	strh	r1, [r0, #12]
 801259a:	6643      	str	r3, [r0, #100]	; 0x64
 801259c:	81c2      	strh	r2, [r0, #14]
 801259e:	6103      	str	r3, [r0, #16]
 80125a0:	6143      	str	r3, [r0, #20]
 80125a2:	6183      	str	r3, [r0, #24]
 80125a4:	4619      	mov	r1, r3
 80125a6:	2208      	movs	r2, #8
 80125a8:	305c      	adds	r0, #92	; 0x5c
 80125aa:	f7ff fc2d 	bl	8011e08 <memset>
 80125ae:	4b05      	ldr	r3, [pc, #20]	; (80125c4 <std.isra.0+0x38>)
 80125b0:	6224      	str	r4, [r4, #32]
 80125b2:	6263      	str	r3, [r4, #36]	; 0x24
 80125b4:	4b04      	ldr	r3, [pc, #16]	; (80125c8 <std.isra.0+0x3c>)
 80125b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80125b8:	4b04      	ldr	r3, [pc, #16]	; (80125cc <std.isra.0+0x40>)
 80125ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80125bc:	4b04      	ldr	r3, [pc, #16]	; (80125d0 <std.isra.0+0x44>)
 80125be:	6323      	str	r3, [r4, #48]	; 0x30
 80125c0:	bd10      	pop	{r4, pc}
 80125c2:	bf00      	nop
 80125c4:	0801302d 	.word	0x0801302d
 80125c8:	0801304f 	.word	0x0801304f
 80125cc:	08013087 	.word	0x08013087
 80125d0:	080130ab 	.word	0x080130ab

080125d4 <__sfmoreglue>:
 80125d4:	b570      	push	{r4, r5, r6, lr}
 80125d6:	2568      	movs	r5, #104	; 0x68
 80125d8:	1e4a      	subs	r2, r1, #1
 80125da:	4355      	muls	r5, r2
 80125dc:	460e      	mov	r6, r1
 80125de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80125e2:	f7ff fc73 	bl	8011ecc <_malloc_r>
 80125e6:	4604      	mov	r4, r0
 80125e8:	b140      	cbz	r0, 80125fc <__sfmoreglue+0x28>
 80125ea:	2100      	movs	r1, #0
 80125ec:	e880 0042 	stmia.w	r0, {r1, r6}
 80125f0:	300c      	adds	r0, #12
 80125f2:	60a0      	str	r0, [r4, #8]
 80125f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80125f8:	f7ff fc06 	bl	8011e08 <memset>
 80125fc:	4620      	mov	r0, r4
 80125fe:	bd70      	pop	{r4, r5, r6, pc}

08012600 <__sinit>:
 8012600:	6983      	ldr	r3, [r0, #24]
 8012602:	b510      	push	{r4, lr}
 8012604:	4604      	mov	r4, r0
 8012606:	bb33      	cbnz	r3, 8012656 <__sinit+0x56>
 8012608:	6483      	str	r3, [r0, #72]	; 0x48
 801260a:	64c3      	str	r3, [r0, #76]	; 0x4c
 801260c:	6503      	str	r3, [r0, #80]	; 0x50
 801260e:	4b12      	ldr	r3, [pc, #72]	; (8012658 <__sinit+0x58>)
 8012610:	4a12      	ldr	r2, [pc, #72]	; (801265c <__sinit+0x5c>)
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	6282      	str	r2, [r0, #40]	; 0x28
 8012616:	4298      	cmp	r0, r3
 8012618:	bf04      	itt	eq
 801261a:	2301      	moveq	r3, #1
 801261c:	6183      	streq	r3, [r0, #24]
 801261e:	f000 f81f 	bl	8012660 <__sfp>
 8012622:	6060      	str	r0, [r4, #4]
 8012624:	4620      	mov	r0, r4
 8012626:	f000 f81b 	bl	8012660 <__sfp>
 801262a:	60a0      	str	r0, [r4, #8]
 801262c:	4620      	mov	r0, r4
 801262e:	f000 f817 	bl	8012660 <__sfp>
 8012632:	2200      	movs	r2, #0
 8012634:	60e0      	str	r0, [r4, #12]
 8012636:	2104      	movs	r1, #4
 8012638:	6860      	ldr	r0, [r4, #4]
 801263a:	f7ff ffa7 	bl	801258c <std.isra.0>
 801263e:	2201      	movs	r2, #1
 8012640:	2109      	movs	r1, #9
 8012642:	68a0      	ldr	r0, [r4, #8]
 8012644:	f7ff ffa2 	bl	801258c <std.isra.0>
 8012648:	2202      	movs	r2, #2
 801264a:	2112      	movs	r1, #18
 801264c:	68e0      	ldr	r0, [r4, #12]
 801264e:	f7ff ff9d 	bl	801258c <std.isra.0>
 8012652:	2301      	movs	r3, #1
 8012654:	61a3      	str	r3, [r4, #24]
 8012656:	bd10      	pop	{r4, pc}
 8012658:	08018ba4 	.word	0x08018ba4
 801265c:	08012581 	.word	0x08012581

08012660 <__sfp>:
 8012660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012662:	4b1c      	ldr	r3, [pc, #112]	; (80126d4 <__sfp+0x74>)
 8012664:	4607      	mov	r7, r0
 8012666:	681e      	ldr	r6, [r3, #0]
 8012668:	69b3      	ldr	r3, [r6, #24]
 801266a:	b913      	cbnz	r3, 8012672 <__sfp+0x12>
 801266c:	4630      	mov	r0, r6
 801266e:	f7ff ffc7 	bl	8012600 <__sinit>
 8012672:	3648      	adds	r6, #72	; 0x48
 8012674:	68b4      	ldr	r4, [r6, #8]
 8012676:	6873      	ldr	r3, [r6, #4]
 8012678:	3b01      	subs	r3, #1
 801267a:	d503      	bpl.n	8012684 <__sfp+0x24>
 801267c:	6833      	ldr	r3, [r6, #0]
 801267e:	b133      	cbz	r3, 801268e <__sfp+0x2e>
 8012680:	6836      	ldr	r6, [r6, #0]
 8012682:	e7f7      	b.n	8012674 <__sfp+0x14>
 8012684:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012688:	b16d      	cbz	r5, 80126a6 <__sfp+0x46>
 801268a:	3468      	adds	r4, #104	; 0x68
 801268c:	e7f4      	b.n	8012678 <__sfp+0x18>
 801268e:	2104      	movs	r1, #4
 8012690:	4638      	mov	r0, r7
 8012692:	f7ff ff9f 	bl	80125d4 <__sfmoreglue>
 8012696:	6030      	str	r0, [r6, #0]
 8012698:	2800      	cmp	r0, #0
 801269a:	d1f1      	bne.n	8012680 <__sfp+0x20>
 801269c:	230c      	movs	r3, #12
 801269e:	4604      	mov	r4, r0
 80126a0:	603b      	str	r3, [r7, #0]
 80126a2:	4620      	mov	r0, r4
 80126a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80126aa:	81e3      	strh	r3, [r4, #14]
 80126ac:	2301      	movs	r3, #1
 80126ae:	6665      	str	r5, [r4, #100]	; 0x64
 80126b0:	81a3      	strh	r3, [r4, #12]
 80126b2:	6025      	str	r5, [r4, #0]
 80126b4:	60a5      	str	r5, [r4, #8]
 80126b6:	6065      	str	r5, [r4, #4]
 80126b8:	6125      	str	r5, [r4, #16]
 80126ba:	6165      	str	r5, [r4, #20]
 80126bc:	61a5      	str	r5, [r4, #24]
 80126be:	2208      	movs	r2, #8
 80126c0:	4629      	mov	r1, r5
 80126c2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80126c6:	f7ff fb9f 	bl	8011e08 <memset>
 80126ca:	6365      	str	r5, [r4, #52]	; 0x34
 80126cc:	63a5      	str	r5, [r4, #56]	; 0x38
 80126ce:	64a5      	str	r5, [r4, #72]	; 0x48
 80126d0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80126d2:	e7e6      	b.n	80126a2 <__sfp+0x42>
 80126d4:	08018ba4 	.word	0x08018ba4

080126d8 <_fwalk_reent>:
 80126d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126dc:	4680      	mov	r8, r0
 80126de:	4689      	mov	r9, r1
 80126e0:	2600      	movs	r6, #0
 80126e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80126e6:	b914      	cbnz	r4, 80126ee <_fwalk_reent+0x16>
 80126e8:	4630      	mov	r0, r6
 80126ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126ee:	68a5      	ldr	r5, [r4, #8]
 80126f0:	6867      	ldr	r7, [r4, #4]
 80126f2:	3f01      	subs	r7, #1
 80126f4:	d501      	bpl.n	80126fa <_fwalk_reent+0x22>
 80126f6:	6824      	ldr	r4, [r4, #0]
 80126f8:	e7f5      	b.n	80126e6 <_fwalk_reent+0xe>
 80126fa:	89ab      	ldrh	r3, [r5, #12]
 80126fc:	2b01      	cmp	r3, #1
 80126fe:	d907      	bls.n	8012710 <_fwalk_reent+0x38>
 8012700:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012704:	3301      	adds	r3, #1
 8012706:	d003      	beq.n	8012710 <_fwalk_reent+0x38>
 8012708:	4629      	mov	r1, r5
 801270a:	4640      	mov	r0, r8
 801270c:	47c8      	blx	r9
 801270e:	4306      	orrs	r6, r0
 8012710:	3568      	adds	r5, #104	; 0x68
 8012712:	e7ee      	b.n	80126f2 <_fwalk_reent+0x1a>

08012714 <__swhatbuf_r>:
 8012714:	b570      	push	{r4, r5, r6, lr}
 8012716:	460e      	mov	r6, r1
 8012718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801271c:	b090      	sub	sp, #64	; 0x40
 801271e:	2900      	cmp	r1, #0
 8012720:	4614      	mov	r4, r2
 8012722:	461d      	mov	r5, r3
 8012724:	da07      	bge.n	8012736 <__swhatbuf_r+0x22>
 8012726:	2300      	movs	r3, #0
 8012728:	602b      	str	r3, [r5, #0]
 801272a:	89b3      	ldrh	r3, [r6, #12]
 801272c:	061a      	lsls	r2, r3, #24
 801272e:	d410      	bmi.n	8012752 <__swhatbuf_r+0x3e>
 8012730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012734:	e00e      	b.n	8012754 <__swhatbuf_r+0x40>
 8012736:	aa01      	add	r2, sp, #4
 8012738:	f000 fcde 	bl	80130f8 <_fstat_r>
 801273c:	2800      	cmp	r0, #0
 801273e:	dbf2      	blt.n	8012726 <__swhatbuf_r+0x12>
 8012740:	9a02      	ldr	r2, [sp, #8]
 8012742:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012746:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801274a:	425a      	negs	r2, r3
 801274c:	415a      	adcs	r2, r3
 801274e:	602a      	str	r2, [r5, #0]
 8012750:	e7ee      	b.n	8012730 <__swhatbuf_r+0x1c>
 8012752:	2340      	movs	r3, #64	; 0x40
 8012754:	2000      	movs	r0, #0
 8012756:	6023      	str	r3, [r4, #0]
 8012758:	b010      	add	sp, #64	; 0x40
 801275a:	bd70      	pop	{r4, r5, r6, pc}

0801275c <__smakebuf_r>:
 801275c:	898b      	ldrh	r3, [r1, #12]
 801275e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012760:	079d      	lsls	r5, r3, #30
 8012762:	4606      	mov	r6, r0
 8012764:	460c      	mov	r4, r1
 8012766:	d507      	bpl.n	8012778 <__smakebuf_r+0x1c>
 8012768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801276c:	6023      	str	r3, [r4, #0]
 801276e:	6123      	str	r3, [r4, #16]
 8012770:	2301      	movs	r3, #1
 8012772:	6163      	str	r3, [r4, #20]
 8012774:	b002      	add	sp, #8
 8012776:	bd70      	pop	{r4, r5, r6, pc}
 8012778:	ab01      	add	r3, sp, #4
 801277a:	466a      	mov	r2, sp
 801277c:	f7ff ffca 	bl	8012714 <__swhatbuf_r>
 8012780:	9900      	ldr	r1, [sp, #0]
 8012782:	4605      	mov	r5, r0
 8012784:	4630      	mov	r0, r6
 8012786:	f7ff fba1 	bl	8011ecc <_malloc_r>
 801278a:	b948      	cbnz	r0, 80127a0 <__smakebuf_r+0x44>
 801278c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012790:	059a      	lsls	r2, r3, #22
 8012792:	d4ef      	bmi.n	8012774 <__smakebuf_r+0x18>
 8012794:	f023 0303 	bic.w	r3, r3, #3
 8012798:	f043 0302 	orr.w	r3, r3, #2
 801279c:	81a3      	strh	r3, [r4, #12]
 801279e:	e7e3      	b.n	8012768 <__smakebuf_r+0xc>
 80127a0:	4b0d      	ldr	r3, [pc, #52]	; (80127d8 <__smakebuf_r+0x7c>)
 80127a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80127a4:	89a3      	ldrh	r3, [r4, #12]
 80127a6:	6020      	str	r0, [r4, #0]
 80127a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127ac:	81a3      	strh	r3, [r4, #12]
 80127ae:	9b00      	ldr	r3, [sp, #0]
 80127b0:	6120      	str	r0, [r4, #16]
 80127b2:	6163      	str	r3, [r4, #20]
 80127b4:	9b01      	ldr	r3, [sp, #4]
 80127b6:	b15b      	cbz	r3, 80127d0 <__smakebuf_r+0x74>
 80127b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127bc:	4630      	mov	r0, r6
 80127be:	f000 fcad 	bl	801311c <_isatty_r>
 80127c2:	b128      	cbz	r0, 80127d0 <__smakebuf_r+0x74>
 80127c4:	89a3      	ldrh	r3, [r4, #12]
 80127c6:	f023 0303 	bic.w	r3, r3, #3
 80127ca:	f043 0301 	orr.w	r3, r3, #1
 80127ce:	81a3      	strh	r3, [r4, #12]
 80127d0:	89a3      	ldrh	r3, [r4, #12]
 80127d2:	431d      	orrs	r5, r3
 80127d4:	81a5      	strh	r5, [r4, #12]
 80127d6:	e7cd      	b.n	8012774 <__smakebuf_r+0x18>
 80127d8:	08012581 	.word	0x08012581

080127dc <__malloc_lock>:
 80127dc:	4770      	bx	lr

080127de <__malloc_unlock>:
 80127de:	4770      	bx	lr

080127e0 <__ssputs_r>:
 80127e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127e4:	688e      	ldr	r6, [r1, #8]
 80127e6:	4682      	mov	sl, r0
 80127e8:	429e      	cmp	r6, r3
 80127ea:	460c      	mov	r4, r1
 80127ec:	4691      	mov	r9, r2
 80127ee:	4698      	mov	r8, r3
 80127f0:	d835      	bhi.n	801285e <__ssputs_r+0x7e>
 80127f2:	898a      	ldrh	r2, [r1, #12]
 80127f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80127f8:	d031      	beq.n	801285e <__ssputs_r+0x7e>
 80127fa:	2302      	movs	r3, #2
 80127fc:	6825      	ldr	r5, [r4, #0]
 80127fe:	6909      	ldr	r1, [r1, #16]
 8012800:	1a6f      	subs	r7, r5, r1
 8012802:	6965      	ldr	r5, [r4, #20]
 8012804:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012808:	fb95 f5f3 	sdiv	r5, r5, r3
 801280c:	f108 0301 	add.w	r3, r8, #1
 8012810:	443b      	add	r3, r7
 8012812:	429d      	cmp	r5, r3
 8012814:	bf38      	it	cc
 8012816:	461d      	movcc	r5, r3
 8012818:	0553      	lsls	r3, r2, #21
 801281a:	d531      	bpl.n	8012880 <__ssputs_r+0xa0>
 801281c:	4629      	mov	r1, r5
 801281e:	f7ff fb55 	bl	8011ecc <_malloc_r>
 8012822:	4606      	mov	r6, r0
 8012824:	b950      	cbnz	r0, 801283c <__ssputs_r+0x5c>
 8012826:	230c      	movs	r3, #12
 8012828:	f8ca 3000 	str.w	r3, [sl]
 801282c:	89a3      	ldrh	r3, [r4, #12]
 801282e:	f04f 30ff 	mov.w	r0, #4294967295
 8012832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012836:	81a3      	strh	r3, [r4, #12]
 8012838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801283c:	463a      	mov	r2, r7
 801283e:	6921      	ldr	r1, [r4, #16]
 8012840:	f7ff fabd 	bl	8011dbe <memcpy>
 8012844:	89a3      	ldrh	r3, [r4, #12]
 8012846:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801284a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801284e:	81a3      	strh	r3, [r4, #12]
 8012850:	6126      	str	r6, [r4, #16]
 8012852:	443e      	add	r6, r7
 8012854:	6026      	str	r6, [r4, #0]
 8012856:	4646      	mov	r6, r8
 8012858:	6165      	str	r5, [r4, #20]
 801285a:	1bed      	subs	r5, r5, r7
 801285c:	60a5      	str	r5, [r4, #8]
 801285e:	4546      	cmp	r6, r8
 8012860:	bf28      	it	cs
 8012862:	4646      	movcs	r6, r8
 8012864:	4649      	mov	r1, r9
 8012866:	4632      	mov	r2, r6
 8012868:	6820      	ldr	r0, [r4, #0]
 801286a:	f7ff fab3 	bl	8011dd4 <memmove>
 801286e:	68a3      	ldr	r3, [r4, #8]
 8012870:	2000      	movs	r0, #0
 8012872:	1b9b      	subs	r3, r3, r6
 8012874:	60a3      	str	r3, [r4, #8]
 8012876:	6823      	ldr	r3, [r4, #0]
 8012878:	441e      	add	r6, r3
 801287a:	6026      	str	r6, [r4, #0]
 801287c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012880:	462a      	mov	r2, r5
 8012882:	f000 fc7b 	bl	801317c <_realloc_r>
 8012886:	4606      	mov	r6, r0
 8012888:	2800      	cmp	r0, #0
 801288a:	d1e1      	bne.n	8012850 <__ssputs_r+0x70>
 801288c:	6921      	ldr	r1, [r4, #16]
 801288e:	4650      	mov	r0, sl
 8012890:	f7ff fad0 	bl	8011e34 <_free_r>
 8012894:	e7c7      	b.n	8012826 <__ssputs_r+0x46>
	...

08012898 <_svfiprintf_r>:
 8012898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801289c:	b09d      	sub	sp, #116	; 0x74
 801289e:	9303      	str	r3, [sp, #12]
 80128a0:	898b      	ldrh	r3, [r1, #12]
 80128a2:	4680      	mov	r8, r0
 80128a4:	061c      	lsls	r4, r3, #24
 80128a6:	460d      	mov	r5, r1
 80128a8:	4616      	mov	r6, r2
 80128aa:	d50f      	bpl.n	80128cc <_svfiprintf_r+0x34>
 80128ac:	690b      	ldr	r3, [r1, #16]
 80128ae:	b96b      	cbnz	r3, 80128cc <_svfiprintf_r+0x34>
 80128b0:	2140      	movs	r1, #64	; 0x40
 80128b2:	f7ff fb0b 	bl	8011ecc <_malloc_r>
 80128b6:	6028      	str	r0, [r5, #0]
 80128b8:	6128      	str	r0, [r5, #16]
 80128ba:	b928      	cbnz	r0, 80128c8 <_svfiprintf_r+0x30>
 80128bc:	230c      	movs	r3, #12
 80128be:	f8c8 3000 	str.w	r3, [r8]
 80128c2:	f04f 30ff 	mov.w	r0, #4294967295
 80128c6:	e0c4      	b.n	8012a52 <_svfiprintf_r+0x1ba>
 80128c8:	2340      	movs	r3, #64	; 0x40
 80128ca:	616b      	str	r3, [r5, #20]
 80128cc:	2300      	movs	r3, #0
 80128ce:	9309      	str	r3, [sp, #36]	; 0x24
 80128d0:	2320      	movs	r3, #32
 80128d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80128d6:	2330      	movs	r3, #48	; 0x30
 80128d8:	f04f 0b01 	mov.w	fp, #1
 80128dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80128e0:	4637      	mov	r7, r6
 80128e2:	463c      	mov	r4, r7
 80128e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d13c      	bne.n	8012966 <_svfiprintf_r+0xce>
 80128ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80128f0:	d00b      	beq.n	801290a <_svfiprintf_r+0x72>
 80128f2:	4653      	mov	r3, sl
 80128f4:	4632      	mov	r2, r6
 80128f6:	4629      	mov	r1, r5
 80128f8:	4640      	mov	r0, r8
 80128fa:	f7ff ff71 	bl	80127e0 <__ssputs_r>
 80128fe:	3001      	adds	r0, #1
 8012900:	f000 80a2 	beq.w	8012a48 <_svfiprintf_r+0x1b0>
 8012904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012906:	4453      	add	r3, sl
 8012908:	9309      	str	r3, [sp, #36]	; 0x24
 801290a:	783b      	ldrb	r3, [r7, #0]
 801290c:	2b00      	cmp	r3, #0
 801290e:	f000 809b 	beq.w	8012a48 <_svfiprintf_r+0x1b0>
 8012912:	2300      	movs	r3, #0
 8012914:	f04f 32ff 	mov.w	r2, #4294967295
 8012918:	9304      	str	r3, [sp, #16]
 801291a:	9307      	str	r3, [sp, #28]
 801291c:	9205      	str	r2, [sp, #20]
 801291e:	9306      	str	r3, [sp, #24]
 8012920:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012924:	931a      	str	r3, [sp, #104]	; 0x68
 8012926:	2205      	movs	r2, #5
 8012928:	7821      	ldrb	r1, [r4, #0]
 801292a:	4850      	ldr	r0, [pc, #320]	; (8012a6c <_svfiprintf_r+0x1d4>)
 801292c:	f000 fc18 	bl	8013160 <memchr>
 8012930:	1c67      	adds	r7, r4, #1
 8012932:	9b04      	ldr	r3, [sp, #16]
 8012934:	b9d8      	cbnz	r0, 801296e <_svfiprintf_r+0xd6>
 8012936:	06d9      	lsls	r1, r3, #27
 8012938:	bf44      	itt	mi
 801293a:	2220      	movmi	r2, #32
 801293c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012940:	071a      	lsls	r2, r3, #28
 8012942:	bf44      	itt	mi
 8012944:	222b      	movmi	r2, #43	; 0x2b
 8012946:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801294a:	7822      	ldrb	r2, [r4, #0]
 801294c:	2a2a      	cmp	r2, #42	; 0x2a
 801294e:	d016      	beq.n	801297e <_svfiprintf_r+0xe6>
 8012950:	2100      	movs	r1, #0
 8012952:	200a      	movs	r0, #10
 8012954:	9a07      	ldr	r2, [sp, #28]
 8012956:	4627      	mov	r7, r4
 8012958:	783b      	ldrb	r3, [r7, #0]
 801295a:	3401      	adds	r4, #1
 801295c:	3b30      	subs	r3, #48	; 0x30
 801295e:	2b09      	cmp	r3, #9
 8012960:	d950      	bls.n	8012a04 <_svfiprintf_r+0x16c>
 8012962:	b1c9      	cbz	r1, 8012998 <_svfiprintf_r+0x100>
 8012964:	e011      	b.n	801298a <_svfiprintf_r+0xf2>
 8012966:	2b25      	cmp	r3, #37	; 0x25
 8012968:	d0c0      	beq.n	80128ec <_svfiprintf_r+0x54>
 801296a:	4627      	mov	r7, r4
 801296c:	e7b9      	b.n	80128e2 <_svfiprintf_r+0x4a>
 801296e:	4a3f      	ldr	r2, [pc, #252]	; (8012a6c <_svfiprintf_r+0x1d4>)
 8012970:	463c      	mov	r4, r7
 8012972:	1a80      	subs	r0, r0, r2
 8012974:	fa0b f000 	lsl.w	r0, fp, r0
 8012978:	4318      	orrs	r0, r3
 801297a:	9004      	str	r0, [sp, #16]
 801297c:	e7d3      	b.n	8012926 <_svfiprintf_r+0x8e>
 801297e:	9a03      	ldr	r2, [sp, #12]
 8012980:	1d11      	adds	r1, r2, #4
 8012982:	6812      	ldr	r2, [r2, #0]
 8012984:	9103      	str	r1, [sp, #12]
 8012986:	2a00      	cmp	r2, #0
 8012988:	db01      	blt.n	801298e <_svfiprintf_r+0xf6>
 801298a:	9207      	str	r2, [sp, #28]
 801298c:	e004      	b.n	8012998 <_svfiprintf_r+0x100>
 801298e:	4252      	negs	r2, r2
 8012990:	f043 0302 	orr.w	r3, r3, #2
 8012994:	9207      	str	r2, [sp, #28]
 8012996:	9304      	str	r3, [sp, #16]
 8012998:	783b      	ldrb	r3, [r7, #0]
 801299a:	2b2e      	cmp	r3, #46	; 0x2e
 801299c:	d10d      	bne.n	80129ba <_svfiprintf_r+0x122>
 801299e:	787b      	ldrb	r3, [r7, #1]
 80129a0:	1c79      	adds	r1, r7, #1
 80129a2:	2b2a      	cmp	r3, #42	; 0x2a
 80129a4:	d132      	bne.n	8012a0c <_svfiprintf_r+0x174>
 80129a6:	9b03      	ldr	r3, [sp, #12]
 80129a8:	3702      	adds	r7, #2
 80129aa:	1d1a      	adds	r2, r3, #4
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	9203      	str	r2, [sp, #12]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	bfb8      	it	lt
 80129b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80129b8:	9305      	str	r3, [sp, #20]
 80129ba:	4c2d      	ldr	r4, [pc, #180]	; (8012a70 <_svfiprintf_r+0x1d8>)
 80129bc:	2203      	movs	r2, #3
 80129be:	7839      	ldrb	r1, [r7, #0]
 80129c0:	4620      	mov	r0, r4
 80129c2:	f000 fbcd 	bl	8013160 <memchr>
 80129c6:	b138      	cbz	r0, 80129d8 <_svfiprintf_r+0x140>
 80129c8:	2340      	movs	r3, #64	; 0x40
 80129ca:	1b00      	subs	r0, r0, r4
 80129cc:	fa03 f000 	lsl.w	r0, r3, r0
 80129d0:	9b04      	ldr	r3, [sp, #16]
 80129d2:	3701      	adds	r7, #1
 80129d4:	4303      	orrs	r3, r0
 80129d6:	9304      	str	r3, [sp, #16]
 80129d8:	7839      	ldrb	r1, [r7, #0]
 80129da:	2206      	movs	r2, #6
 80129dc:	4825      	ldr	r0, [pc, #148]	; (8012a74 <_svfiprintf_r+0x1dc>)
 80129de:	1c7e      	adds	r6, r7, #1
 80129e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80129e4:	f000 fbbc 	bl	8013160 <memchr>
 80129e8:	2800      	cmp	r0, #0
 80129ea:	d035      	beq.n	8012a58 <_svfiprintf_r+0x1c0>
 80129ec:	4b22      	ldr	r3, [pc, #136]	; (8012a78 <_svfiprintf_r+0x1e0>)
 80129ee:	b9fb      	cbnz	r3, 8012a30 <_svfiprintf_r+0x198>
 80129f0:	9b03      	ldr	r3, [sp, #12]
 80129f2:	3307      	adds	r3, #7
 80129f4:	f023 0307 	bic.w	r3, r3, #7
 80129f8:	3308      	adds	r3, #8
 80129fa:	9303      	str	r3, [sp, #12]
 80129fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129fe:	444b      	add	r3, r9
 8012a00:	9309      	str	r3, [sp, #36]	; 0x24
 8012a02:	e76d      	b.n	80128e0 <_svfiprintf_r+0x48>
 8012a04:	fb00 3202 	mla	r2, r0, r2, r3
 8012a08:	2101      	movs	r1, #1
 8012a0a:	e7a4      	b.n	8012956 <_svfiprintf_r+0xbe>
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	240a      	movs	r4, #10
 8012a10:	4618      	mov	r0, r3
 8012a12:	9305      	str	r3, [sp, #20]
 8012a14:	460f      	mov	r7, r1
 8012a16:	783a      	ldrb	r2, [r7, #0]
 8012a18:	3101      	adds	r1, #1
 8012a1a:	3a30      	subs	r2, #48	; 0x30
 8012a1c:	2a09      	cmp	r2, #9
 8012a1e:	d903      	bls.n	8012a28 <_svfiprintf_r+0x190>
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d0ca      	beq.n	80129ba <_svfiprintf_r+0x122>
 8012a24:	9005      	str	r0, [sp, #20]
 8012a26:	e7c8      	b.n	80129ba <_svfiprintf_r+0x122>
 8012a28:	fb04 2000 	mla	r0, r4, r0, r2
 8012a2c:	2301      	movs	r3, #1
 8012a2e:	e7f1      	b.n	8012a14 <_svfiprintf_r+0x17c>
 8012a30:	ab03      	add	r3, sp, #12
 8012a32:	9300      	str	r3, [sp, #0]
 8012a34:	462a      	mov	r2, r5
 8012a36:	4b11      	ldr	r3, [pc, #68]	; (8012a7c <_svfiprintf_r+0x1e4>)
 8012a38:	a904      	add	r1, sp, #16
 8012a3a:	4640      	mov	r0, r8
 8012a3c:	f3af 8000 	nop.w
 8012a40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012a44:	4681      	mov	r9, r0
 8012a46:	d1d9      	bne.n	80129fc <_svfiprintf_r+0x164>
 8012a48:	89ab      	ldrh	r3, [r5, #12]
 8012a4a:	065b      	lsls	r3, r3, #25
 8012a4c:	f53f af39 	bmi.w	80128c2 <_svfiprintf_r+0x2a>
 8012a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a52:	b01d      	add	sp, #116	; 0x74
 8012a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a58:	ab03      	add	r3, sp, #12
 8012a5a:	9300      	str	r3, [sp, #0]
 8012a5c:	462a      	mov	r2, r5
 8012a5e:	4b07      	ldr	r3, [pc, #28]	; (8012a7c <_svfiprintf_r+0x1e4>)
 8012a60:	a904      	add	r1, sp, #16
 8012a62:	4640      	mov	r0, r8
 8012a64:	f000 f9c2 	bl	8012dec <_printf_i>
 8012a68:	e7ea      	b.n	8012a40 <_svfiprintf_r+0x1a8>
 8012a6a:	bf00      	nop
 8012a6c:	08018c08 	.word	0x08018c08
 8012a70:	08018c0e 	.word	0x08018c0e
 8012a74:	08018c12 	.word	0x08018c12
 8012a78:	00000000 	.word	0x00000000
 8012a7c:	080127e1 	.word	0x080127e1

08012a80 <__sfputc_r>:
 8012a80:	6893      	ldr	r3, [r2, #8]
 8012a82:	b410      	push	{r4}
 8012a84:	3b01      	subs	r3, #1
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	6093      	str	r3, [r2, #8]
 8012a8a:	da08      	bge.n	8012a9e <__sfputc_r+0x1e>
 8012a8c:	6994      	ldr	r4, [r2, #24]
 8012a8e:	42a3      	cmp	r3, r4
 8012a90:	db02      	blt.n	8012a98 <__sfputc_r+0x18>
 8012a92:	b2cb      	uxtb	r3, r1
 8012a94:	2b0a      	cmp	r3, #10
 8012a96:	d102      	bne.n	8012a9e <__sfputc_r+0x1e>
 8012a98:	bc10      	pop	{r4}
 8012a9a:	f7ff bbff 	b.w	801229c <__swbuf_r>
 8012a9e:	6813      	ldr	r3, [r2, #0]
 8012aa0:	1c58      	adds	r0, r3, #1
 8012aa2:	6010      	str	r0, [r2, #0]
 8012aa4:	7019      	strb	r1, [r3, #0]
 8012aa6:	b2c8      	uxtb	r0, r1
 8012aa8:	bc10      	pop	{r4}
 8012aaa:	4770      	bx	lr

08012aac <__sfputs_r>:
 8012aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aae:	4606      	mov	r6, r0
 8012ab0:	460f      	mov	r7, r1
 8012ab2:	4614      	mov	r4, r2
 8012ab4:	18d5      	adds	r5, r2, r3
 8012ab6:	42ac      	cmp	r4, r5
 8012ab8:	d101      	bne.n	8012abe <__sfputs_r+0x12>
 8012aba:	2000      	movs	r0, #0
 8012abc:	e007      	b.n	8012ace <__sfputs_r+0x22>
 8012abe:	463a      	mov	r2, r7
 8012ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ac4:	4630      	mov	r0, r6
 8012ac6:	f7ff ffdb 	bl	8012a80 <__sfputc_r>
 8012aca:	1c43      	adds	r3, r0, #1
 8012acc:	d1f3      	bne.n	8012ab6 <__sfputs_r+0xa>
 8012ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012ad0 <_vfiprintf_r>:
 8012ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ad4:	b09d      	sub	sp, #116	; 0x74
 8012ad6:	460c      	mov	r4, r1
 8012ad8:	4617      	mov	r7, r2
 8012ada:	9303      	str	r3, [sp, #12]
 8012adc:	4606      	mov	r6, r0
 8012ade:	b118      	cbz	r0, 8012ae8 <_vfiprintf_r+0x18>
 8012ae0:	6983      	ldr	r3, [r0, #24]
 8012ae2:	b90b      	cbnz	r3, 8012ae8 <_vfiprintf_r+0x18>
 8012ae4:	f7ff fd8c 	bl	8012600 <__sinit>
 8012ae8:	4b7c      	ldr	r3, [pc, #496]	; (8012cdc <_vfiprintf_r+0x20c>)
 8012aea:	429c      	cmp	r4, r3
 8012aec:	d157      	bne.n	8012b9e <_vfiprintf_r+0xce>
 8012aee:	6874      	ldr	r4, [r6, #4]
 8012af0:	89a3      	ldrh	r3, [r4, #12]
 8012af2:	0718      	lsls	r0, r3, #28
 8012af4:	d55d      	bpl.n	8012bb2 <_vfiprintf_r+0xe2>
 8012af6:	6923      	ldr	r3, [r4, #16]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d05a      	beq.n	8012bb2 <_vfiprintf_r+0xe2>
 8012afc:	2300      	movs	r3, #0
 8012afe:	9309      	str	r3, [sp, #36]	; 0x24
 8012b00:	2320      	movs	r3, #32
 8012b02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b06:	2330      	movs	r3, #48	; 0x30
 8012b08:	f04f 0b01 	mov.w	fp, #1
 8012b0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b10:	46b8      	mov	r8, r7
 8012b12:	4645      	mov	r5, r8
 8012b14:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d155      	bne.n	8012bc8 <_vfiprintf_r+0xf8>
 8012b1c:	ebb8 0a07 	subs.w	sl, r8, r7
 8012b20:	d00b      	beq.n	8012b3a <_vfiprintf_r+0x6a>
 8012b22:	4653      	mov	r3, sl
 8012b24:	463a      	mov	r2, r7
 8012b26:	4621      	mov	r1, r4
 8012b28:	4630      	mov	r0, r6
 8012b2a:	f7ff ffbf 	bl	8012aac <__sfputs_r>
 8012b2e:	3001      	adds	r0, #1
 8012b30:	f000 80c4 	beq.w	8012cbc <_vfiprintf_r+0x1ec>
 8012b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b36:	4453      	add	r3, sl
 8012b38:	9309      	str	r3, [sp, #36]	; 0x24
 8012b3a:	f898 3000 	ldrb.w	r3, [r8]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	f000 80bc 	beq.w	8012cbc <_vfiprintf_r+0x1ec>
 8012b44:	2300      	movs	r3, #0
 8012b46:	f04f 32ff 	mov.w	r2, #4294967295
 8012b4a:	9304      	str	r3, [sp, #16]
 8012b4c:	9307      	str	r3, [sp, #28]
 8012b4e:	9205      	str	r2, [sp, #20]
 8012b50:	9306      	str	r3, [sp, #24]
 8012b52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b56:	931a      	str	r3, [sp, #104]	; 0x68
 8012b58:	2205      	movs	r2, #5
 8012b5a:	7829      	ldrb	r1, [r5, #0]
 8012b5c:	4860      	ldr	r0, [pc, #384]	; (8012ce0 <_vfiprintf_r+0x210>)
 8012b5e:	f000 faff 	bl	8013160 <memchr>
 8012b62:	f105 0801 	add.w	r8, r5, #1
 8012b66:	9b04      	ldr	r3, [sp, #16]
 8012b68:	2800      	cmp	r0, #0
 8012b6a:	d131      	bne.n	8012bd0 <_vfiprintf_r+0x100>
 8012b6c:	06d9      	lsls	r1, r3, #27
 8012b6e:	bf44      	itt	mi
 8012b70:	2220      	movmi	r2, #32
 8012b72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012b76:	071a      	lsls	r2, r3, #28
 8012b78:	bf44      	itt	mi
 8012b7a:	222b      	movmi	r2, #43	; 0x2b
 8012b7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012b80:	782a      	ldrb	r2, [r5, #0]
 8012b82:	2a2a      	cmp	r2, #42	; 0x2a
 8012b84:	d02c      	beq.n	8012be0 <_vfiprintf_r+0x110>
 8012b86:	2100      	movs	r1, #0
 8012b88:	200a      	movs	r0, #10
 8012b8a:	9a07      	ldr	r2, [sp, #28]
 8012b8c:	46a8      	mov	r8, r5
 8012b8e:	f898 3000 	ldrb.w	r3, [r8]
 8012b92:	3501      	adds	r5, #1
 8012b94:	3b30      	subs	r3, #48	; 0x30
 8012b96:	2b09      	cmp	r3, #9
 8012b98:	d96d      	bls.n	8012c76 <_vfiprintf_r+0x1a6>
 8012b9a:	b371      	cbz	r1, 8012bfa <_vfiprintf_r+0x12a>
 8012b9c:	e026      	b.n	8012bec <_vfiprintf_r+0x11c>
 8012b9e:	4b51      	ldr	r3, [pc, #324]	; (8012ce4 <_vfiprintf_r+0x214>)
 8012ba0:	429c      	cmp	r4, r3
 8012ba2:	d101      	bne.n	8012ba8 <_vfiprintf_r+0xd8>
 8012ba4:	68b4      	ldr	r4, [r6, #8]
 8012ba6:	e7a3      	b.n	8012af0 <_vfiprintf_r+0x20>
 8012ba8:	4b4f      	ldr	r3, [pc, #316]	; (8012ce8 <_vfiprintf_r+0x218>)
 8012baa:	429c      	cmp	r4, r3
 8012bac:	bf08      	it	eq
 8012bae:	68f4      	ldreq	r4, [r6, #12]
 8012bb0:	e79e      	b.n	8012af0 <_vfiprintf_r+0x20>
 8012bb2:	4621      	mov	r1, r4
 8012bb4:	4630      	mov	r0, r6
 8012bb6:	f7ff fbc3 	bl	8012340 <__swsetup_r>
 8012bba:	2800      	cmp	r0, #0
 8012bbc:	d09e      	beq.n	8012afc <_vfiprintf_r+0x2c>
 8012bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8012bc2:	b01d      	add	sp, #116	; 0x74
 8012bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bc8:	2b25      	cmp	r3, #37	; 0x25
 8012bca:	d0a7      	beq.n	8012b1c <_vfiprintf_r+0x4c>
 8012bcc:	46a8      	mov	r8, r5
 8012bce:	e7a0      	b.n	8012b12 <_vfiprintf_r+0x42>
 8012bd0:	4a43      	ldr	r2, [pc, #268]	; (8012ce0 <_vfiprintf_r+0x210>)
 8012bd2:	4645      	mov	r5, r8
 8012bd4:	1a80      	subs	r0, r0, r2
 8012bd6:	fa0b f000 	lsl.w	r0, fp, r0
 8012bda:	4318      	orrs	r0, r3
 8012bdc:	9004      	str	r0, [sp, #16]
 8012bde:	e7bb      	b.n	8012b58 <_vfiprintf_r+0x88>
 8012be0:	9a03      	ldr	r2, [sp, #12]
 8012be2:	1d11      	adds	r1, r2, #4
 8012be4:	6812      	ldr	r2, [r2, #0]
 8012be6:	9103      	str	r1, [sp, #12]
 8012be8:	2a00      	cmp	r2, #0
 8012bea:	db01      	blt.n	8012bf0 <_vfiprintf_r+0x120>
 8012bec:	9207      	str	r2, [sp, #28]
 8012bee:	e004      	b.n	8012bfa <_vfiprintf_r+0x12a>
 8012bf0:	4252      	negs	r2, r2
 8012bf2:	f043 0302 	orr.w	r3, r3, #2
 8012bf6:	9207      	str	r2, [sp, #28]
 8012bf8:	9304      	str	r3, [sp, #16]
 8012bfa:	f898 3000 	ldrb.w	r3, [r8]
 8012bfe:	2b2e      	cmp	r3, #46	; 0x2e
 8012c00:	d110      	bne.n	8012c24 <_vfiprintf_r+0x154>
 8012c02:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012c06:	f108 0101 	add.w	r1, r8, #1
 8012c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8012c0c:	d137      	bne.n	8012c7e <_vfiprintf_r+0x1ae>
 8012c0e:	9b03      	ldr	r3, [sp, #12]
 8012c10:	f108 0802 	add.w	r8, r8, #2
 8012c14:	1d1a      	adds	r2, r3, #4
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	9203      	str	r2, [sp, #12]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	bfb8      	it	lt
 8012c1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012c22:	9305      	str	r3, [sp, #20]
 8012c24:	4d31      	ldr	r5, [pc, #196]	; (8012cec <_vfiprintf_r+0x21c>)
 8012c26:	2203      	movs	r2, #3
 8012c28:	f898 1000 	ldrb.w	r1, [r8]
 8012c2c:	4628      	mov	r0, r5
 8012c2e:	f000 fa97 	bl	8013160 <memchr>
 8012c32:	b140      	cbz	r0, 8012c46 <_vfiprintf_r+0x176>
 8012c34:	2340      	movs	r3, #64	; 0x40
 8012c36:	1b40      	subs	r0, r0, r5
 8012c38:	fa03 f000 	lsl.w	r0, r3, r0
 8012c3c:	9b04      	ldr	r3, [sp, #16]
 8012c3e:	f108 0801 	add.w	r8, r8, #1
 8012c42:	4303      	orrs	r3, r0
 8012c44:	9304      	str	r3, [sp, #16]
 8012c46:	f898 1000 	ldrb.w	r1, [r8]
 8012c4a:	2206      	movs	r2, #6
 8012c4c:	4828      	ldr	r0, [pc, #160]	; (8012cf0 <_vfiprintf_r+0x220>)
 8012c4e:	f108 0701 	add.w	r7, r8, #1
 8012c52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c56:	f000 fa83 	bl	8013160 <memchr>
 8012c5a:	2800      	cmp	r0, #0
 8012c5c:	d034      	beq.n	8012cc8 <_vfiprintf_r+0x1f8>
 8012c5e:	4b25      	ldr	r3, [pc, #148]	; (8012cf4 <_vfiprintf_r+0x224>)
 8012c60:	bb03      	cbnz	r3, 8012ca4 <_vfiprintf_r+0x1d4>
 8012c62:	9b03      	ldr	r3, [sp, #12]
 8012c64:	3307      	adds	r3, #7
 8012c66:	f023 0307 	bic.w	r3, r3, #7
 8012c6a:	3308      	adds	r3, #8
 8012c6c:	9303      	str	r3, [sp, #12]
 8012c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c70:	444b      	add	r3, r9
 8012c72:	9309      	str	r3, [sp, #36]	; 0x24
 8012c74:	e74c      	b.n	8012b10 <_vfiprintf_r+0x40>
 8012c76:	fb00 3202 	mla	r2, r0, r2, r3
 8012c7a:	2101      	movs	r1, #1
 8012c7c:	e786      	b.n	8012b8c <_vfiprintf_r+0xbc>
 8012c7e:	2300      	movs	r3, #0
 8012c80:	250a      	movs	r5, #10
 8012c82:	4618      	mov	r0, r3
 8012c84:	9305      	str	r3, [sp, #20]
 8012c86:	4688      	mov	r8, r1
 8012c88:	f898 2000 	ldrb.w	r2, [r8]
 8012c8c:	3101      	adds	r1, #1
 8012c8e:	3a30      	subs	r2, #48	; 0x30
 8012c90:	2a09      	cmp	r2, #9
 8012c92:	d903      	bls.n	8012c9c <_vfiprintf_r+0x1cc>
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d0c5      	beq.n	8012c24 <_vfiprintf_r+0x154>
 8012c98:	9005      	str	r0, [sp, #20]
 8012c9a:	e7c3      	b.n	8012c24 <_vfiprintf_r+0x154>
 8012c9c:	fb05 2000 	mla	r0, r5, r0, r2
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	e7f0      	b.n	8012c86 <_vfiprintf_r+0x1b6>
 8012ca4:	ab03      	add	r3, sp, #12
 8012ca6:	9300      	str	r3, [sp, #0]
 8012ca8:	4622      	mov	r2, r4
 8012caa:	4b13      	ldr	r3, [pc, #76]	; (8012cf8 <_vfiprintf_r+0x228>)
 8012cac:	a904      	add	r1, sp, #16
 8012cae:	4630      	mov	r0, r6
 8012cb0:	f3af 8000 	nop.w
 8012cb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012cb8:	4681      	mov	r9, r0
 8012cba:	d1d8      	bne.n	8012c6e <_vfiprintf_r+0x19e>
 8012cbc:	89a3      	ldrh	r3, [r4, #12]
 8012cbe:	065b      	lsls	r3, r3, #25
 8012cc0:	f53f af7d 	bmi.w	8012bbe <_vfiprintf_r+0xee>
 8012cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012cc6:	e77c      	b.n	8012bc2 <_vfiprintf_r+0xf2>
 8012cc8:	ab03      	add	r3, sp, #12
 8012cca:	9300      	str	r3, [sp, #0]
 8012ccc:	4622      	mov	r2, r4
 8012cce:	4b0a      	ldr	r3, [pc, #40]	; (8012cf8 <_vfiprintf_r+0x228>)
 8012cd0:	a904      	add	r1, sp, #16
 8012cd2:	4630      	mov	r0, r6
 8012cd4:	f000 f88a 	bl	8012dec <_printf_i>
 8012cd8:	e7ec      	b.n	8012cb4 <_vfiprintf_r+0x1e4>
 8012cda:	bf00      	nop
 8012cdc:	08018bc8 	.word	0x08018bc8
 8012ce0:	08018c08 	.word	0x08018c08
 8012ce4:	08018be8 	.word	0x08018be8
 8012ce8:	08018ba8 	.word	0x08018ba8
 8012cec:	08018c0e 	.word	0x08018c0e
 8012cf0:	08018c12 	.word	0x08018c12
 8012cf4:	00000000 	.word	0x00000000
 8012cf8:	08012aad 	.word	0x08012aad

08012cfc <_printf_common>:
 8012cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d00:	4691      	mov	r9, r2
 8012d02:	461f      	mov	r7, r3
 8012d04:	688a      	ldr	r2, [r1, #8]
 8012d06:	690b      	ldr	r3, [r1, #16]
 8012d08:	4606      	mov	r6, r0
 8012d0a:	4293      	cmp	r3, r2
 8012d0c:	bfb8      	it	lt
 8012d0e:	4613      	movlt	r3, r2
 8012d10:	f8c9 3000 	str.w	r3, [r9]
 8012d14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012d18:	460c      	mov	r4, r1
 8012d1a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012d1e:	b112      	cbz	r2, 8012d26 <_printf_common+0x2a>
 8012d20:	3301      	adds	r3, #1
 8012d22:	f8c9 3000 	str.w	r3, [r9]
 8012d26:	6823      	ldr	r3, [r4, #0]
 8012d28:	0699      	lsls	r1, r3, #26
 8012d2a:	bf42      	ittt	mi
 8012d2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012d30:	3302      	addmi	r3, #2
 8012d32:	f8c9 3000 	strmi.w	r3, [r9]
 8012d36:	6825      	ldr	r5, [r4, #0]
 8012d38:	f015 0506 	ands.w	r5, r5, #6
 8012d3c:	d107      	bne.n	8012d4e <_printf_common+0x52>
 8012d3e:	f104 0a19 	add.w	sl, r4, #25
 8012d42:	68e3      	ldr	r3, [r4, #12]
 8012d44:	f8d9 2000 	ldr.w	r2, [r9]
 8012d48:	1a9b      	subs	r3, r3, r2
 8012d4a:	429d      	cmp	r5, r3
 8012d4c:	db2a      	blt.n	8012da4 <_printf_common+0xa8>
 8012d4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012d52:	6822      	ldr	r2, [r4, #0]
 8012d54:	3300      	adds	r3, #0
 8012d56:	bf18      	it	ne
 8012d58:	2301      	movne	r3, #1
 8012d5a:	0692      	lsls	r2, r2, #26
 8012d5c:	d42f      	bmi.n	8012dbe <_printf_common+0xc2>
 8012d5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012d62:	4639      	mov	r1, r7
 8012d64:	4630      	mov	r0, r6
 8012d66:	47c0      	blx	r8
 8012d68:	3001      	adds	r0, #1
 8012d6a:	d022      	beq.n	8012db2 <_printf_common+0xb6>
 8012d6c:	6823      	ldr	r3, [r4, #0]
 8012d6e:	68e5      	ldr	r5, [r4, #12]
 8012d70:	f003 0306 	and.w	r3, r3, #6
 8012d74:	2b04      	cmp	r3, #4
 8012d76:	bf18      	it	ne
 8012d78:	2500      	movne	r5, #0
 8012d7a:	f8d9 2000 	ldr.w	r2, [r9]
 8012d7e:	f04f 0900 	mov.w	r9, #0
 8012d82:	bf08      	it	eq
 8012d84:	1aad      	subeq	r5, r5, r2
 8012d86:	68a3      	ldr	r3, [r4, #8]
 8012d88:	6922      	ldr	r2, [r4, #16]
 8012d8a:	bf08      	it	eq
 8012d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012d90:	4293      	cmp	r3, r2
 8012d92:	bfc4      	itt	gt
 8012d94:	1a9b      	subgt	r3, r3, r2
 8012d96:	18ed      	addgt	r5, r5, r3
 8012d98:	341a      	adds	r4, #26
 8012d9a:	454d      	cmp	r5, r9
 8012d9c:	d11b      	bne.n	8012dd6 <_printf_common+0xda>
 8012d9e:	2000      	movs	r0, #0
 8012da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012da4:	2301      	movs	r3, #1
 8012da6:	4652      	mov	r2, sl
 8012da8:	4639      	mov	r1, r7
 8012daa:	4630      	mov	r0, r6
 8012dac:	47c0      	blx	r8
 8012dae:	3001      	adds	r0, #1
 8012db0:	d103      	bne.n	8012dba <_printf_common+0xbe>
 8012db2:	f04f 30ff 	mov.w	r0, #4294967295
 8012db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dba:	3501      	adds	r5, #1
 8012dbc:	e7c1      	b.n	8012d42 <_printf_common+0x46>
 8012dbe:	2030      	movs	r0, #48	; 0x30
 8012dc0:	18e1      	adds	r1, r4, r3
 8012dc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012dc6:	1c5a      	adds	r2, r3, #1
 8012dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012dcc:	4422      	add	r2, r4
 8012dce:	3302      	adds	r3, #2
 8012dd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012dd4:	e7c3      	b.n	8012d5e <_printf_common+0x62>
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	4622      	mov	r2, r4
 8012dda:	4639      	mov	r1, r7
 8012ddc:	4630      	mov	r0, r6
 8012dde:	47c0      	blx	r8
 8012de0:	3001      	adds	r0, #1
 8012de2:	d0e6      	beq.n	8012db2 <_printf_common+0xb6>
 8012de4:	f109 0901 	add.w	r9, r9, #1
 8012de8:	e7d7      	b.n	8012d9a <_printf_common+0x9e>
	...

08012dec <_printf_i>:
 8012dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012df0:	4617      	mov	r7, r2
 8012df2:	7e0a      	ldrb	r2, [r1, #24]
 8012df4:	b085      	sub	sp, #20
 8012df6:	2a6e      	cmp	r2, #110	; 0x6e
 8012df8:	4698      	mov	r8, r3
 8012dfa:	4606      	mov	r6, r0
 8012dfc:	460c      	mov	r4, r1
 8012dfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e00:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8012e04:	f000 80bc 	beq.w	8012f80 <_printf_i+0x194>
 8012e08:	d81a      	bhi.n	8012e40 <_printf_i+0x54>
 8012e0a:	2a63      	cmp	r2, #99	; 0x63
 8012e0c:	d02e      	beq.n	8012e6c <_printf_i+0x80>
 8012e0e:	d80a      	bhi.n	8012e26 <_printf_i+0x3a>
 8012e10:	2a00      	cmp	r2, #0
 8012e12:	f000 80c8 	beq.w	8012fa6 <_printf_i+0x1ba>
 8012e16:	2a58      	cmp	r2, #88	; 0x58
 8012e18:	f000 808a 	beq.w	8012f30 <_printf_i+0x144>
 8012e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e20:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8012e24:	e02a      	b.n	8012e7c <_printf_i+0x90>
 8012e26:	2a64      	cmp	r2, #100	; 0x64
 8012e28:	d001      	beq.n	8012e2e <_printf_i+0x42>
 8012e2a:	2a69      	cmp	r2, #105	; 0x69
 8012e2c:	d1f6      	bne.n	8012e1c <_printf_i+0x30>
 8012e2e:	6821      	ldr	r1, [r4, #0]
 8012e30:	681a      	ldr	r2, [r3, #0]
 8012e32:	f011 0f80 	tst.w	r1, #128	; 0x80
 8012e36:	d023      	beq.n	8012e80 <_printf_i+0x94>
 8012e38:	1d11      	adds	r1, r2, #4
 8012e3a:	6019      	str	r1, [r3, #0]
 8012e3c:	6813      	ldr	r3, [r2, #0]
 8012e3e:	e027      	b.n	8012e90 <_printf_i+0xa4>
 8012e40:	2a73      	cmp	r2, #115	; 0x73
 8012e42:	f000 80b4 	beq.w	8012fae <_printf_i+0x1c2>
 8012e46:	d808      	bhi.n	8012e5a <_printf_i+0x6e>
 8012e48:	2a6f      	cmp	r2, #111	; 0x6f
 8012e4a:	d02a      	beq.n	8012ea2 <_printf_i+0xb6>
 8012e4c:	2a70      	cmp	r2, #112	; 0x70
 8012e4e:	d1e5      	bne.n	8012e1c <_printf_i+0x30>
 8012e50:	680a      	ldr	r2, [r1, #0]
 8012e52:	f042 0220 	orr.w	r2, r2, #32
 8012e56:	600a      	str	r2, [r1, #0]
 8012e58:	e003      	b.n	8012e62 <_printf_i+0x76>
 8012e5a:	2a75      	cmp	r2, #117	; 0x75
 8012e5c:	d021      	beq.n	8012ea2 <_printf_i+0xb6>
 8012e5e:	2a78      	cmp	r2, #120	; 0x78
 8012e60:	d1dc      	bne.n	8012e1c <_printf_i+0x30>
 8012e62:	2278      	movs	r2, #120	; 0x78
 8012e64:	496f      	ldr	r1, [pc, #444]	; (8013024 <_printf_i+0x238>)
 8012e66:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8012e6a:	e064      	b.n	8012f36 <_printf_i+0x14a>
 8012e6c:	681a      	ldr	r2, [r3, #0]
 8012e6e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8012e72:	1d11      	adds	r1, r2, #4
 8012e74:	6019      	str	r1, [r3, #0]
 8012e76:	6813      	ldr	r3, [r2, #0]
 8012e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	e0a3      	b.n	8012fc8 <_printf_i+0x1dc>
 8012e80:	f011 0f40 	tst.w	r1, #64	; 0x40
 8012e84:	f102 0104 	add.w	r1, r2, #4
 8012e88:	6019      	str	r1, [r3, #0]
 8012e8a:	d0d7      	beq.n	8012e3c <_printf_i+0x50>
 8012e8c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	da03      	bge.n	8012e9c <_printf_i+0xb0>
 8012e94:	222d      	movs	r2, #45	; 0x2d
 8012e96:	425b      	negs	r3, r3
 8012e98:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012e9c:	4962      	ldr	r1, [pc, #392]	; (8013028 <_printf_i+0x23c>)
 8012e9e:	220a      	movs	r2, #10
 8012ea0:	e017      	b.n	8012ed2 <_printf_i+0xe6>
 8012ea2:	6820      	ldr	r0, [r4, #0]
 8012ea4:	6819      	ldr	r1, [r3, #0]
 8012ea6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012eaa:	d003      	beq.n	8012eb4 <_printf_i+0xc8>
 8012eac:	1d08      	adds	r0, r1, #4
 8012eae:	6018      	str	r0, [r3, #0]
 8012eb0:	680b      	ldr	r3, [r1, #0]
 8012eb2:	e006      	b.n	8012ec2 <_printf_i+0xd6>
 8012eb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012eb8:	f101 0004 	add.w	r0, r1, #4
 8012ebc:	6018      	str	r0, [r3, #0]
 8012ebe:	d0f7      	beq.n	8012eb0 <_printf_i+0xc4>
 8012ec0:	880b      	ldrh	r3, [r1, #0]
 8012ec2:	2a6f      	cmp	r2, #111	; 0x6f
 8012ec4:	bf14      	ite	ne
 8012ec6:	220a      	movne	r2, #10
 8012ec8:	2208      	moveq	r2, #8
 8012eca:	4957      	ldr	r1, [pc, #348]	; (8013028 <_printf_i+0x23c>)
 8012ecc:	2000      	movs	r0, #0
 8012ece:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8012ed2:	6865      	ldr	r5, [r4, #4]
 8012ed4:	2d00      	cmp	r5, #0
 8012ed6:	60a5      	str	r5, [r4, #8]
 8012ed8:	f2c0 809c 	blt.w	8013014 <_printf_i+0x228>
 8012edc:	6820      	ldr	r0, [r4, #0]
 8012ede:	f020 0004 	bic.w	r0, r0, #4
 8012ee2:	6020      	str	r0, [r4, #0]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d13f      	bne.n	8012f68 <_printf_i+0x17c>
 8012ee8:	2d00      	cmp	r5, #0
 8012eea:	f040 8095 	bne.w	8013018 <_printf_i+0x22c>
 8012eee:	4675      	mov	r5, lr
 8012ef0:	2a08      	cmp	r2, #8
 8012ef2:	d10b      	bne.n	8012f0c <_printf_i+0x120>
 8012ef4:	6823      	ldr	r3, [r4, #0]
 8012ef6:	07da      	lsls	r2, r3, #31
 8012ef8:	d508      	bpl.n	8012f0c <_printf_i+0x120>
 8012efa:	6923      	ldr	r3, [r4, #16]
 8012efc:	6862      	ldr	r2, [r4, #4]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	bfde      	ittt	le
 8012f02:	2330      	movle	r3, #48	; 0x30
 8012f04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012f08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012f0c:	ebae 0305 	sub.w	r3, lr, r5
 8012f10:	6123      	str	r3, [r4, #16]
 8012f12:	f8cd 8000 	str.w	r8, [sp]
 8012f16:	463b      	mov	r3, r7
 8012f18:	aa03      	add	r2, sp, #12
 8012f1a:	4621      	mov	r1, r4
 8012f1c:	4630      	mov	r0, r6
 8012f1e:	f7ff feed 	bl	8012cfc <_printf_common>
 8012f22:	3001      	adds	r0, #1
 8012f24:	d155      	bne.n	8012fd2 <_printf_i+0x1e6>
 8012f26:	f04f 30ff 	mov.w	r0, #4294967295
 8012f2a:	b005      	add	sp, #20
 8012f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f30:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8012f34:	493c      	ldr	r1, [pc, #240]	; (8013028 <_printf_i+0x23c>)
 8012f36:	6822      	ldr	r2, [r4, #0]
 8012f38:	6818      	ldr	r0, [r3, #0]
 8012f3a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8012f3e:	f100 0504 	add.w	r5, r0, #4
 8012f42:	601d      	str	r5, [r3, #0]
 8012f44:	d001      	beq.n	8012f4a <_printf_i+0x15e>
 8012f46:	6803      	ldr	r3, [r0, #0]
 8012f48:	e002      	b.n	8012f50 <_printf_i+0x164>
 8012f4a:	0655      	lsls	r5, r2, #25
 8012f4c:	d5fb      	bpl.n	8012f46 <_printf_i+0x15a>
 8012f4e:	8803      	ldrh	r3, [r0, #0]
 8012f50:	07d0      	lsls	r0, r2, #31
 8012f52:	bf44      	itt	mi
 8012f54:	f042 0220 	orrmi.w	r2, r2, #32
 8012f58:	6022      	strmi	r2, [r4, #0]
 8012f5a:	b91b      	cbnz	r3, 8012f64 <_printf_i+0x178>
 8012f5c:	6822      	ldr	r2, [r4, #0]
 8012f5e:	f022 0220 	bic.w	r2, r2, #32
 8012f62:	6022      	str	r2, [r4, #0]
 8012f64:	2210      	movs	r2, #16
 8012f66:	e7b1      	b.n	8012ecc <_printf_i+0xe0>
 8012f68:	4675      	mov	r5, lr
 8012f6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8012f6e:	fb02 3310 	mls	r3, r2, r0, r3
 8012f72:	5ccb      	ldrb	r3, [r1, r3]
 8012f74:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012f78:	4603      	mov	r3, r0
 8012f7a:	2800      	cmp	r0, #0
 8012f7c:	d1f5      	bne.n	8012f6a <_printf_i+0x17e>
 8012f7e:	e7b7      	b.n	8012ef0 <_printf_i+0x104>
 8012f80:	6808      	ldr	r0, [r1, #0]
 8012f82:	681a      	ldr	r2, [r3, #0]
 8012f84:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012f88:	6949      	ldr	r1, [r1, #20]
 8012f8a:	d004      	beq.n	8012f96 <_printf_i+0x1aa>
 8012f8c:	1d10      	adds	r0, r2, #4
 8012f8e:	6018      	str	r0, [r3, #0]
 8012f90:	6813      	ldr	r3, [r2, #0]
 8012f92:	6019      	str	r1, [r3, #0]
 8012f94:	e007      	b.n	8012fa6 <_printf_i+0x1ba>
 8012f96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012f9a:	f102 0004 	add.w	r0, r2, #4
 8012f9e:	6018      	str	r0, [r3, #0]
 8012fa0:	6813      	ldr	r3, [r2, #0]
 8012fa2:	d0f6      	beq.n	8012f92 <_printf_i+0x1a6>
 8012fa4:	8019      	strh	r1, [r3, #0]
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	4675      	mov	r5, lr
 8012faa:	6123      	str	r3, [r4, #16]
 8012fac:	e7b1      	b.n	8012f12 <_printf_i+0x126>
 8012fae:	681a      	ldr	r2, [r3, #0]
 8012fb0:	1d11      	adds	r1, r2, #4
 8012fb2:	6019      	str	r1, [r3, #0]
 8012fb4:	6815      	ldr	r5, [r2, #0]
 8012fb6:	2100      	movs	r1, #0
 8012fb8:	6862      	ldr	r2, [r4, #4]
 8012fba:	4628      	mov	r0, r5
 8012fbc:	f000 f8d0 	bl	8013160 <memchr>
 8012fc0:	b108      	cbz	r0, 8012fc6 <_printf_i+0x1da>
 8012fc2:	1b40      	subs	r0, r0, r5
 8012fc4:	6060      	str	r0, [r4, #4]
 8012fc6:	6863      	ldr	r3, [r4, #4]
 8012fc8:	6123      	str	r3, [r4, #16]
 8012fca:	2300      	movs	r3, #0
 8012fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fd0:	e79f      	b.n	8012f12 <_printf_i+0x126>
 8012fd2:	6923      	ldr	r3, [r4, #16]
 8012fd4:	462a      	mov	r2, r5
 8012fd6:	4639      	mov	r1, r7
 8012fd8:	4630      	mov	r0, r6
 8012fda:	47c0      	blx	r8
 8012fdc:	3001      	adds	r0, #1
 8012fde:	d0a2      	beq.n	8012f26 <_printf_i+0x13a>
 8012fe0:	6823      	ldr	r3, [r4, #0]
 8012fe2:	079b      	lsls	r3, r3, #30
 8012fe4:	d507      	bpl.n	8012ff6 <_printf_i+0x20a>
 8012fe6:	2500      	movs	r5, #0
 8012fe8:	f104 0919 	add.w	r9, r4, #25
 8012fec:	68e3      	ldr	r3, [r4, #12]
 8012fee:	9a03      	ldr	r2, [sp, #12]
 8012ff0:	1a9b      	subs	r3, r3, r2
 8012ff2:	429d      	cmp	r5, r3
 8012ff4:	db05      	blt.n	8013002 <_printf_i+0x216>
 8012ff6:	68e0      	ldr	r0, [r4, #12]
 8012ff8:	9b03      	ldr	r3, [sp, #12]
 8012ffa:	4298      	cmp	r0, r3
 8012ffc:	bfb8      	it	lt
 8012ffe:	4618      	movlt	r0, r3
 8013000:	e793      	b.n	8012f2a <_printf_i+0x13e>
 8013002:	2301      	movs	r3, #1
 8013004:	464a      	mov	r2, r9
 8013006:	4639      	mov	r1, r7
 8013008:	4630      	mov	r0, r6
 801300a:	47c0      	blx	r8
 801300c:	3001      	adds	r0, #1
 801300e:	d08a      	beq.n	8012f26 <_printf_i+0x13a>
 8013010:	3501      	adds	r5, #1
 8013012:	e7eb      	b.n	8012fec <_printf_i+0x200>
 8013014:	2b00      	cmp	r3, #0
 8013016:	d1a7      	bne.n	8012f68 <_printf_i+0x17c>
 8013018:	780b      	ldrb	r3, [r1, #0]
 801301a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801301e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013022:	e765      	b.n	8012ef0 <_printf_i+0x104>
 8013024:	08018c2a 	.word	0x08018c2a
 8013028:	08018c19 	.word	0x08018c19

0801302c <__sread>:
 801302c:	b510      	push	{r4, lr}
 801302e:	460c      	mov	r4, r1
 8013030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013034:	f000 f8c8 	bl	80131c8 <_read_r>
 8013038:	2800      	cmp	r0, #0
 801303a:	bfab      	itete	ge
 801303c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801303e:	89a3      	ldrhlt	r3, [r4, #12]
 8013040:	181b      	addge	r3, r3, r0
 8013042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013046:	bfac      	ite	ge
 8013048:	6563      	strge	r3, [r4, #84]	; 0x54
 801304a:	81a3      	strhlt	r3, [r4, #12]
 801304c:	bd10      	pop	{r4, pc}

0801304e <__swrite>:
 801304e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013052:	461f      	mov	r7, r3
 8013054:	898b      	ldrh	r3, [r1, #12]
 8013056:	4605      	mov	r5, r0
 8013058:	05db      	lsls	r3, r3, #23
 801305a:	460c      	mov	r4, r1
 801305c:	4616      	mov	r6, r2
 801305e:	d505      	bpl.n	801306c <__swrite+0x1e>
 8013060:	2302      	movs	r3, #2
 8013062:	2200      	movs	r2, #0
 8013064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013068:	f000 f868 	bl	801313c <_lseek_r>
 801306c:	89a3      	ldrh	r3, [r4, #12]
 801306e:	4632      	mov	r2, r6
 8013070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013074:	81a3      	strh	r3, [r4, #12]
 8013076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801307a:	463b      	mov	r3, r7
 801307c:	4628      	mov	r0, r5
 801307e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013082:	f000 b817 	b.w	80130b4 <_write_r>

08013086 <__sseek>:
 8013086:	b510      	push	{r4, lr}
 8013088:	460c      	mov	r4, r1
 801308a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801308e:	f000 f855 	bl	801313c <_lseek_r>
 8013092:	1c43      	adds	r3, r0, #1
 8013094:	89a3      	ldrh	r3, [r4, #12]
 8013096:	bf15      	itete	ne
 8013098:	6560      	strne	r0, [r4, #84]	; 0x54
 801309a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801309e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80130a2:	81a3      	strheq	r3, [r4, #12]
 80130a4:	bf18      	it	ne
 80130a6:	81a3      	strhne	r3, [r4, #12]
 80130a8:	bd10      	pop	{r4, pc}

080130aa <__sclose>:
 80130aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130ae:	f000 b813 	b.w	80130d8 <_close_r>
	...

080130b4 <_write_r>:
 80130b4:	b538      	push	{r3, r4, r5, lr}
 80130b6:	4605      	mov	r5, r0
 80130b8:	4608      	mov	r0, r1
 80130ba:	4611      	mov	r1, r2
 80130bc:	2200      	movs	r2, #0
 80130be:	4c05      	ldr	r4, [pc, #20]	; (80130d4 <_write_r+0x20>)
 80130c0:	6022      	str	r2, [r4, #0]
 80130c2:	461a      	mov	r2, r3
 80130c4:	f7ee fb00 	bl	80016c8 <_write>
 80130c8:	1c43      	adds	r3, r0, #1
 80130ca:	d102      	bne.n	80130d2 <_write_r+0x1e>
 80130cc:	6823      	ldr	r3, [r4, #0]
 80130ce:	b103      	cbz	r3, 80130d2 <_write_r+0x1e>
 80130d0:	602b      	str	r3, [r5, #0]
 80130d2:	bd38      	pop	{r3, r4, r5, pc}
 80130d4:	20003874 	.word	0x20003874

080130d8 <_close_r>:
 80130d8:	b538      	push	{r3, r4, r5, lr}
 80130da:	2300      	movs	r3, #0
 80130dc:	4c05      	ldr	r4, [pc, #20]	; (80130f4 <_close_r+0x1c>)
 80130de:	4605      	mov	r5, r0
 80130e0:	4608      	mov	r0, r1
 80130e2:	6023      	str	r3, [r4, #0]
 80130e4:	f7ee fe2c 	bl	8001d40 <_close>
 80130e8:	1c43      	adds	r3, r0, #1
 80130ea:	d102      	bne.n	80130f2 <_close_r+0x1a>
 80130ec:	6823      	ldr	r3, [r4, #0]
 80130ee:	b103      	cbz	r3, 80130f2 <_close_r+0x1a>
 80130f0:	602b      	str	r3, [r5, #0]
 80130f2:	bd38      	pop	{r3, r4, r5, pc}
 80130f4:	20003874 	.word	0x20003874

080130f8 <_fstat_r>:
 80130f8:	b538      	push	{r3, r4, r5, lr}
 80130fa:	2300      	movs	r3, #0
 80130fc:	4c06      	ldr	r4, [pc, #24]	; (8013118 <_fstat_r+0x20>)
 80130fe:	4605      	mov	r5, r0
 8013100:	4608      	mov	r0, r1
 8013102:	4611      	mov	r1, r2
 8013104:	6023      	str	r3, [r4, #0]
 8013106:	f7ee fe1e 	bl	8001d46 <_fstat>
 801310a:	1c43      	adds	r3, r0, #1
 801310c:	d102      	bne.n	8013114 <_fstat_r+0x1c>
 801310e:	6823      	ldr	r3, [r4, #0]
 8013110:	b103      	cbz	r3, 8013114 <_fstat_r+0x1c>
 8013112:	602b      	str	r3, [r5, #0]
 8013114:	bd38      	pop	{r3, r4, r5, pc}
 8013116:	bf00      	nop
 8013118:	20003874 	.word	0x20003874

0801311c <_isatty_r>:
 801311c:	b538      	push	{r3, r4, r5, lr}
 801311e:	2300      	movs	r3, #0
 8013120:	4c05      	ldr	r4, [pc, #20]	; (8013138 <_isatty_r+0x1c>)
 8013122:	4605      	mov	r5, r0
 8013124:	4608      	mov	r0, r1
 8013126:	6023      	str	r3, [r4, #0]
 8013128:	f7ee fe12 	bl	8001d50 <_isatty>
 801312c:	1c43      	adds	r3, r0, #1
 801312e:	d102      	bne.n	8013136 <_isatty_r+0x1a>
 8013130:	6823      	ldr	r3, [r4, #0]
 8013132:	b103      	cbz	r3, 8013136 <_isatty_r+0x1a>
 8013134:	602b      	str	r3, [r5, #0]
 8013136:	bd38      	pop	{r3, r4, r5, pc}
 8013138:	20003874 	.word	0x20003874

0801313c <_lseek_r>:
 801313c:	b538      	push	{r3, r4, r5, lr}
 801313e:	4605      	mov	r5, r0
 8013140:	4608      	mov	r0, r1
 8013142:	4611      	mov	r1, r2
 8013144:	2200      	movs	r2, #0
 8013146:	4c05      	ldr	r4, [pc, #20]	; (801315c <_lseek_r+0x20>)
 8013148:	6022      	str	r2, [r4, #0]
 801314a:	461a      	mov	r2, r3
 801314c:	f7ee fe02 	bl	8001d54 <_lseek>
 8013150:	1c43      	adds	r3, r0, #1
 8013152:	d102      	bne.n	801315a <_lseek_r+0x1e>
 8013154:	6823      	ldr	r3, [r4, #0]
 8013156:	b103      	cbz	r3, 801315a <_lseek_r+0x1e>
 8013158:	602b      	str	r3, [r5, #0]
 801315a:	bd38      	pop	{r3, r4, r5, pc}
 801315c:	20003874 	.word	0x20003874

08013160 <memchr>:
 8013160:	b510      	push	{r4, lr}
 8013162:	b2c9      	uxtb	r1, r1
 8013164:	4402      	add	r2, r0
 8013166:	4290      	cmp	r0, r2
 8013168:	4603      	mov	r3, r0
 801316a:	d101      	bne.n	8013170 <memchr+0x10>
 801316c:	2000      	movs	r0, #0
 801316e:	bd10      	pop	{r4, pc}
 8013170:	781c      	ldrb	r4, [r3, #0]
 8013172:	3001      	adds	r0, #1
 8013174:	428c      	cmp	r4, r1
 8013176:	d1f6      	bne.n	8013166 <memchr+0x6>
 8013178:	4618      	mov	r0, r3
 801317a:	bd10      	pop	{r4, pc}

0801317c <_realloc_r>:
 801317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801317e:	4607      	mov	r7, r0
 8013180:	4614      	mov	r4, r2
 8013182:	460e      	mov	r6, r1
 8013184:	b921      	cbnz	r1, 8013190 <_realloc_r+0x14>
 8013186:	4611      	mov	r1, r2
 8013188:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801318c:	f7fe be9e 	b.w	8011ecc <_malloc_r>
 8013190:	b922      	cbnz	r2, 801319c <_realloc_r+0x20>
 8013192:	f7fe fe4f 	bl	8011e34 <_free_r>
 8013196:	4625      	mov	r5, r4
 8013198:	4628      	mov	r0, r5
 801319a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801319c:	f000 f826 	bl	80131ec <_malloc_usable_size_r>
 80131a0:	4284      	cmp	r4, r0
 80131a2:	d90f      	bls.n	80131c4 <_realloc_r+0x48>
 80131a4:	4621      	mov	r1, r4
 80131a6:	4638      	mov	r0, r7
 80131a8:	f7fe fe90 	bl	8011ecc <_malloc_r>
 80131ac:	4605      	mov	r5, r0
 80131ae:	2800      	cmp	r0, #0
 80131b0:	d0f2      	beq.n	8013198 <_realloc_r+0x1c>
 80131b2:	4631      	mov	r1, r6
 80131b4:	4622      	mov	r2, r4
 80131b6:	f7fe fe02 	bl	8011dbe <memcpy>
 80131ba:	4631      	mov	r1, r6
 80131bc:	4638      	mov	r0, r7
 80131be:	f7fe fe39 	bl	8011e34 <_free_r>
 80131c2:	e7e9      	b.n	8013198 <_realloc_r+0x1c>
 80131c4:	4635      	mov	r5, r6
 80131c6:	e7e7      	b.n	8013198 <_realloc_r+0x1c>

080131c8 <_read_r>:
 80131c8:	b538      	push	{r3, r4, r5, lr}
 80131ca:	4605      	mov	r5, r0
 80131cc:	4608      	mov	r0, r1
 80131ce:	4611      	mov	r1, r2
 80131d0:	2200      	movs	r2, #0
 80131d2:	4c05      	ldr	r4, [pc, #20]	; (80131e8 <_read_r+0x20>)
 80131d4:	6022      	str	r2, [r4, #0]
 80131d6:	461a      	mov	r2, r3
 80131d8:	f7ee fd8a 	bl	8001cf0 <_read>
 80131dc:	1c43      	adds	r3, r0, #1
 80131de:	d102      	bne.n	80131e6 <_read_r+0x1e>
 80131e0:	6823      	ldr	r3, [r4, #0]
 80131e2:	b103      	cbz	r3, 80131e6 <_read_r+0x1e>
 80131e4:	602b      	str	r3, [r5, #0]
 80131e6:	bd38      	pop	{r3, r4, r5, pc}
 80131e8:	20003874 	.word	0x20003874

080131ec <_malloc_usable_size_r>:
 80131ec:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80131f0:	2800      	cmp	r0, #0
 80131f2:	f1a0 0004 	sub.w	r0, r0, #4
 80131f6:	bfbc      	itt	lt
 80131f8:	580b      	ldrlt	r3, [r1, r0]
 80131fa:	18c0      	addlt	r0, r0, r3
 80131fc:	4770      	bx	lr
	...

08013200 <_init>:
 8013200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013202:	bf00      	nop
 8013204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013206:	bc08      	pop	{r3}
 8013208:	469e      	mov	lr, r3
 801320a:	4770      	bx	lr

0801320c <_fini>:
 801320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801320e:	bf00      	nop
 8013210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013212:	bc08      	pop	{r3}
 8013214:	469e      	mov	lr, r3
 8013216:	4770      	bx	lr
